<?xml version="1.0"?>
<source xmlns="http://xml.phpdox.net/token">
  <file xmlns="http://xml.phpdox.net/src" path="/var/www/_modules/ecommerce_test/trunk/docs/en/phpdox/../../../ecommerce/code/cms" file="ProductBulkLoader.php" realpath="/var/www/_modules/ecommerce_test/trunk/ecommerce/code/cms/ProductBulkLoader.php" size="6387" time="2015-03-14T10:43:16+13:00" unixtime="1426282996" sha1="a1d807580e49df32498e8b33760cf4f3d9c6db3f" relative="ecommerce/code/cms/ProductBulkLoader.php"/>
  <line no="1">
    <token name="T_OPEN_TAG">&lt;?php</token>
  </line>
  <line no="2">
    <token name="T_DOC_COMMENT">/**</token>
  </line>
  <line no="3">
    <token name="T_DOC_COMMENT"> * @Description: ProductBulkLoader - allows loading products via CSV file.</token>
  </line>
  <line no="4">
    <token name="T_DOC_COMMENT"> * Images should be uploaded before import,</token>
  </line>
  <line no="5">
    <token name="T_DOC_COMMENT"> * where the Photo/Image field corresponds to the filename of a file that was uploaded.</token>
  </line>
  <line no="6">
    <token name="T_DOC_COMMENT"> *</token>
  </line>
  <line no="7">
    <token name="T_DOC_COMMENT"> * @TODO: test and update to Ecommerce 1.0</token>
  </line>
  <line no="8">
    <token name="T_DOC_COMMENT"> *</token>
  </line>
  <line no="9">
    <token name="T_DOC_COMMENT"> * @authors: Nicolaas [at] Sunny Side Up .co.nz</token>
  </line>
  <line no="10">
    <token name="T_DOC_COMMENT"> * @package: ecommerce</token>
  </line>
  <line no="11">
    <token name="T_DOC_COMMENT"> * @sub-package: cms</token>
  </line>
  <line no="12">
    <token name="T_DOC_COMMENT"> * @inspiration: Silverstripe Ltd, Jeremy</token>
  </line>
  <line no="13"/>
  <line no="14"/>
  <line no="15">
    <token name="T_DOC_COMMENT">class ProductBulkLoader extends CsvBulkLoader{</token>
  </line>
  <line no="16"/>
  <line no="17">
    <token name="T_DOC_COMMENT">	private static $product_class_name = "Product";</token>
  </line>
  <line no="18"/>
  <line no="19">
    <token name="T_DOC_COMMENT">	private static $product_group_class_name = "ProductGroup";</token>
  </line>
  <line no="20"/>
  <line no="21">
    <token name="T_DOC_COMMENT">	private static $parent_page_id = null;</token>
  </line>
  <line no="22"/>
  <line no="23">
    <token name="T_DOC_COMMENT">	private static $create_new_product_groups = false;</token>
  </line>
  <line no="24"/>
  <line no="25">
    <token name="T_DOC_COMMENT">	public $columnMap = array(</token>
  </line>
  <line no="26">
    <token name="T_DOC_COMMENT">		'Category' =&gt; '-&gt;setParent',</token>
  </line>
  <line no="27">
    <token name="T_DOC_COMMENT">		'ProductGroup' =&gt; '-&gt;setParent',</token>
  </line>
  <line no="28"/>
  <line no="29">
    <token name="T_DOC_COMMENT">		'Product ID' =&gt; 'InternalItemID',</token>
  </line>
  <line no="30">
    <token name="T_DOC_COMMENT">		'ProductID' =&gt; 'InternalItemID',</token>
  </line>
  <line no="31">
    <token name="T_DOC_COMMENT">		'SKU' =&gt; 'InternalItemID',</token>
  </line>
  <line no="32"/>
  <line no="33">
    <token name="T_DOC_COMMENT">		'Description' =&gt; '-&gt;setContent',</token>
  </line>
  <line no="34">
    <token name="T_DOC_COMMENT">		'Long Description' =&gt; '-&gt;setContent',</token>
  </line>
  <line no="35">
    <token name="T_DOC_COMMENT">		'Short Description' =&gt; 'MetaDescription',</token>
  </line>
  <line no="36"/>
  <line no="37">
    <token name="T_DOC_COMMENT">		'Short Title' =&gt; 'MenuTitle',</token>
  </line>
  <line no="38"/>
  <line no="39">
    <token name="T_DOC_COMMENT">		'Title' =&gt; 'Title',</token>
  </line>
  <line no="40"/>
  <line no="41">
    <token name="T_DOC_COMMENT">		//'Delete' //TODO: allow products to be deleted/disabled via CSV</token>
  </line>
  <line no="42">
    <token name="T_DOC_COMMENT">	);</token>
  </line>
  <line no="43"/>
  <line no="44">
    <token name="T_DOC_COMMENT">	/* 	NB there is a bug in CsvBulkLoader where it fails to apply Convert::raw2sql to the field value prior to a duplicate check.</token>
  </line>
  <line no="45">
    <token name="T_DOC_COMMENT">	 	This results in a failed database call on any fields here that conatin quotes and causes whole load to fail.</token>
  </line>
  <line no="46">
    <token name="T_DOC_COMMENT">	 	Fix is to change CsvBulkLoader findExistingObject function</token>
  </line>
  <line no="47">
    <token name="T_DOC_COMMENT">	 	FROM</token>
  </line>
  <line no="48">
    <token name="T_DOC_COMMENT">	 		$SQL_fieldValue = $record[$fieldName];</token>
  </line>
  <line no="49">
    <token name="T_DOC_COMMENT">	 	TO</token>
  </line>
  <line no="50">
    <token name="T_DOC_COMMENT">	 		$SQL_fieldValue = Convert::raw2sql($record[$fieldName]);</token>
  </line>
  <line no="51">
    <token name="T_DOC_COMMENT">	 	until patch gets applied by SS team</token>
  </line>
  <line no="52"/>
  <line no="53"/>
  <line no="54">
    <token name="T_DOC_COMMENT">	public $duplicateChecks = array(</token>
  </line>
  <line no="55">
    <token name="T_DOC_COMMENT">		'InternalItemID' =&gt; 'InternalItemID',</token>
  </line>
  <line no="56">
    <token name="T_DOC_COMMENT">		//'Product ID' =&gt; 'InternalItemID', // see issue 143</token>
  </line>
  <line no="57">
    <token name="T_DOC_COMMENT">		//'ProductID' =&gt; 'InternalItemID',</token>
  </line>
  <line no="58">
    <token name="T_DOC_COMMENT">		//'SKU' =&gt; 'InternalItemID',</token>
  </line>
  <line no="59">
    <token name="T_DOC_COMMENT">		'Title' =&gt; 'Title'</token>
  </line>
  <line no="60">
    <token name="T_DOC_COMMENT">	);</token>
  </line>
  <line no="61"/>
  <line no="62">
    <token name="T_DOC_COMMENT">	public $relationCallbacks = array(</token>
  </line>
  <line no="63">
    <token name="T_DOC_COMMENT">		'Image' =&gt; array(</token>
  </line>
  <line no="64">
    <token name="T_DOC_COMMENT">			'relationname' =&gt; 'Image', // relation accessor name</token>
  </line>
  <line no="65">
    <token name="T_DOC_COMMENT">			'callback' =&gt; 'imageByFilename'</token>
  </line>
  <line no="66">
    <token name="T_DOC_COMMENT">		),</token>
  </line>
  <line no="67">
    <token name="T_DOC_COMMENT">		'Photo' =&gt; array(</token>
  </line>
  <line no="68">
    <token name="T_DOC_COMMENT">			'relationname' =&gt; 'Image', // relation accessor name</token>
  </line>
  <line no="69">
    <token name="T_DOC_COMMENT">			'callback' =&gt; 'imageByFilename'</token>
  </line>
  <line no="70">
    <token name="T_DOC_COMMENT">		)</token>
  </line>
  <line no="71">
    <token name="T_DOC_COMMENT">	);</token>
  </line>
  <line no="72"/>
  <line no="73">
    <token name="T_DOC_COMMENT">	public static function import_content(&amp;$obj, $val, $record ){</token>
  </line>
  <line no="74">
    <token name="T_DOC_COMMENT">		$obj-&gt;Content = Convert::raw2sql($val);</token>
  </line>
  <line no="75">
    <token name="T_DOC_COMMENT">	}</token>
  </line>
  <line no="76">
    <token name="T_DOC_COMMENT">	public static function import_meta_description(&amp;$obj, $val, $record ){</token>
  </line>
  <line no="77">
    <token name="T_DOC_COMMENT">		$obj-&gt;MetaDescription = Convert::raw2sql($val);</token>
  </line>
  <line no="78">
    <token name="T_DOC_COMMENT">	}</token>
  </line>
  <line no="79">
    <token name="T_DOC_COMMENT">	public static function import_menu_title(&amp;$obj, $val, $record ){</token>
  </line>
  <line no="80">
    <token name="T_DOC_COMMENT">		$obj-&gt;MenuTitle = Convert::raw2sql($val);</token>
  </line>
  <line no="81">
    <token name="T_DOC_COMMENT">	}</token>
  </line>
  <line no="82">
    <token name="T_DOC_COMMENT">	public static function import_title(&amp;$obj, $val, $record ){</token>
  </line>
  <line no="83">
    <token name="T_DOC_COMMENT">		$obj-&gt;Title = Convert::raw2sql($val);</token>
  </line>
  <line no="84">
    <token name="T_DOC_COMMENT">	}</token>
  </line>
  <line no="85"/>
  <line no="86">
    <token name="T_DOC_COMMENT">	public static function importInternalItemID(&amp;$obj, $val, $record ){</token>
  </line>
  <line no="87">
    <token name="T_DOC_COMMENT">		$obj-&gt;InternalItemID = Convert::raw2sql($val);</token>
  </line>
  <line no="88">
    <token name="T_DOC_COMMENT">	}</token>
  </line>
  <line no="89"/>
  <line no="90">
    <token name="T_DOC_COMMENT">	protected function processAll($filepath, $preview = false) {</token>
  </line>
  <line no="91">
    <token name="T_DOC_COMMENT">		$this-&gt;extend('updateColumnMap',$this-&gt;columnMap);</token>
  </line>
  <line no="92">
    <token name="T_DOC_COMMENT">		// we have to check for the existence of this in case the stockcontrol module hasn't been loaded</token>
  </line>
  <line no="93">
    <token name="T_DOC_COMMENT">		// and the CSV still contains a Stock column</token>
  </line>
  <line no="94"/>
  <line no="95">
    <token name="T_DOC_COMMENT">		$results = parent::processAll($filepath, $preview);</token>
  </line>
  <line no="96"/>
  <line no="97">
    <token name="T_DOC_COMMENT">		//After results have been processed, publish all created &amp; updated products</token>
  </line>
  <line no="98">
    <token name="T_DOC_COMMENT">		$objects = new DataList();</token>
  </line>
  <line no="99">
    <token name="T_DOC_COMMENT">		$objects-&gt;merge($results-&gt;Created());</token>
  </line>
  <line no="100">
    <token name="T_DOC_COMMENT">		$objects-&gt;merge($results-&gt;Updated());</token>
  </line>
  <line no="101">
    <token name="T_DOC_COMMENT">		foreach($objects as $object){</token>
  </line>
  <line no="102">
    <token name="T_DOC_COMMENT">			if(!$object-&gt;ParentID){</token>
  </line>
  <line no="103">
    <token name="T_DOC_COMMENT">				 //set parent page</token>
  </line>
  <line no="104">
    <token name="T_DOC_COMMENT">				 //cached option</token>
  </line>
  <line no="105">
    <token name="T_DOC_COMMENT">				$productGroupClassName = $this-&gt;config()-&gt;get("product_group_class_name");</token>
  </line>
  <line no="106">
    <token name="T_DOC_COMMENT">				if(is_numeric(self::$parent_page_id) &amp;&amp;  $productGroupClassName::get()-&gt;byID(self::$parent_page_id)) {</token>
  </line>
  <line no="107">
    <token name="T_DOC_COMMENT">					$object-&gt;ParentID = self::$parent_page_id;</token>
  </line>
  <line no="108">
    <token name="T_DOC_COMMENT">				}</token>
  </line>
  <line no="109">
    <token name="T_DOC_COMMENT">				//page called 'Products'</token>
  </line>
  <line no="110">
    <token name="T_DOC_COMMENT">				elseif($parentpage = $productGroupClassName::get()-&gt;Filter(array("Title" =&gt; "Products"))-&gt;sort("Created", "DESC")-&gt;First()){</token>
  </line>
  <line no="111">
    <token name="T_DOC_COMMENT">					$object-&gt;ParentID = self::$parent_page_id = $parentpage-&gt;ID;</token>
  </line>
  <line no="112">
    <token name="T_DOC_COMMENT">				}</token>
  </line>
  <line no="113">
    <token name="T_DOC_COMMENT">				//root page</token>
  </line>
  <line no="114">
    <token name="T_DOC_COMMENT">				elseif($parentpage = $productGroupClassName::get()-&gt;Filter(array("ParentID" =&gt; 0))-&gt;sort("Created", "DESC")-&gt;First()){</token>
  </line>
  <line no="115">
    <token name="T_DOC_COMMENT">					$object-&gt;ParentID = self::$parent_page_id = $parentpage-&gt;ID;</token>
  </line>
  <line no="116">
    <token name="T_DOC_COMMENT">				}</token>
  </line>
  <line no="117">
    <token name="T_DOC_COMMENT">				//any product page</token>
  </line>
  <line no="118">
    <token name="T_DOC_COMMENT">				elseif($parentpage = $productGroupClassName::get()-&gt;sort("Created", "DESC")-&gt;First()){</token>
  </line>
  <line no="119">
    <token name="T_DOC_COMMENT">					$object-&gt;ParentID = self::$parent_page_id = $parentpage-&gt;ID;</token>
  </line>
  <line no="120">
    <token name="T_DOC_COMMENT">				}</token>
  </line>
  <line no="121">
    <token name="T_DOC_COMMENT">				else {</token>
  </line>
  <line no="122">
    <token name="T_DOC_COMMENT">					$object-&gt;ParentID = self::$parent_page_id = 0;</token>
  </line>
  <line no="123">
    <token name="T_DOC_COMMENT">				}</token>
  </line>
  <line no="124">
    <token name="T_DOC_COMMENT">			}</token>
  </line>
  <line no="125">
    <token name="T_DOC_COMMENT">			$object-&gt;extend('updateImport'); //could be used for setting other attributes, such as stock level</token>
  </line>
  <line no="126">
    <token name="T_DOC_COMMENT">			$object-&gt;writeToStage('Stage');</token>
  </line>
  <line no="127">
    <token name="T_DOC_COMMENT">			$object-&gt;publish('Stage', 'Live');</token>
  </line>
  <line no="128">
    <token name="T_DOC_COMMENT">		}</token>
  </line>
  <line no="129"/>
  <line no="130">
    <token name="T_DOC_COMMENT">		return $results;</token>
  </line>
  <line no="131">
    <token name="T_DOC_COMMENT">	}</token>
  </line>
  <line no="132"/>
  <line no="133">
    <token name="T_DOC_COMMENT">	function processRecord($record, $columnMap, &amp;$results, $preview = false){</token>
  </line>
  <line no="134">
    <token name="T_DOC_COMMENT">		//see issue 144</token>
  </line>
  <line no="135">
    <token name="T_DOC_COMMENT">		if(!$record || !isset($record['Title']) || $record['Title'] == ''){</token>
  </line>
  <line no="136">
    <token name="T_DOC_COMMENT">			return null;</token>
  </line>
  <line no="137">
    <token name="T_DOC_COMMENT">		}</token>
  </line>
  <line no="138">
    <token name="T_DOC_COMMENT">		return parent::processRecord($record, $columnMap, $results, $preview);</token>
  </line>
  <line no="139">
    <token name="T_DOC_COMMENT">	}</token>
  </line>
  <line no="140"/>
  <line no="141"/>
  <line no="142">
    <token name="T_DOC_COMMENT">	function imageByFilename(&amp;$obj, $val, $record){</token>
  </line>
  <line no="143">
    <token name="T_DOC_COMMENT">		$filename = strtolower(Convert::raw2sql($val));</token>
  </line>
  <line no="144">
    <token name="T_DOC_COMMENT">		$image = Image::get()-&gt;where("LOWER(\"Filename\") LIKE '%$filename%'");</token>
  </line>
  <line no="145">
    <token name="T_DOC_COMMENT">		if($filename &amp;&amp; $image){ //ignore case</token>
  </line>
  <line no="146">
    <token name="T_DOC_COMMENT">			if($image-&gt;exists()){</token>
  </line>
  <line no="147">
    <token name="T_DOC_COMMENT">				$image-&gt;ClassName = $this-&gt;config()-&gt;get("product_class_name").'_Image'; //must be this type of image</token>
  </line>
  <line no="148">
    <token name="T_DOC_COMMENT">				$image-&gt;write();</token>
  </line>
  <line no="149">
    <token name="T_DOC_COMMENT">				return $image;</token>
  </line>
  <line no="150">
    <token name="T_DOC_COMMENT">			}</token>
  </line>
  <line no="151">
    <token name="T_DOC_COMMENT">		}</token>
  </line>
  <line no="152">
    <token name="T_DOC_COMMENT">		return null;</token>
  </line>
  <line no="153">
    <token name="T_DOC_COMMENT">	}</token>
  </line>
  <line no="154"/>
  <line no="155">
    <token name="T_DOC_COMMENT">	// find product group parent (ie Cateogry)</token>
  </line>
  <line no="156">
    <token name="T_DOC_COMMENT">	function setParent(&amp;$obj, $val, $record){</token>
  </line>
  <line no="157">
    <token name="T_DOC_COMMENT">		$title = strtolower(Convert::raw2sql($val));</token>
  </line>
  <line no="158">
    <token name="T_DOC_COMMENT">		if($title){</token>
  </line>
  <line no="159">
    <token name="T_DOC_COMMENT">			$className = $this-&gt;Config()-&gt;get("product_group_class_name");</token>
  </line>
  <line no="160">
    <token name="T_DOC_COMMENT">			$parentpage = $className::get()-&gt;where("LOWER(\"Title\") = '$title'")-&gt;sort("Created", "DESC")-&gt;First();</token>
  </line>
  <line no="161">
    <token name="T_DOC_COMMENT">			if($parentpage){</token>
  </line>
  <line no="162">
    <token name="T_DOC_COMMENT">				$obj-&gt;ParentID = $parentpage-&gt;ID;</token>
  </line>
  <line no="163">
    <token name="T_DOC_COMMENT">				$obj-&gt;write();</token>
  </line>
  <line no="164">
    <token name="T_DOC_COMMENT">				$obj-&gt;writeToStage('Stage');</token>
  </line>
  <line no="165">
    <token name="T_DOC_COMMENT">				$obj-&gt;publish('Stage', 'Live');</token>
  </line>
  <line no="166">
    <token name="T_DOC_COMMENT">			}</token>
  </line>
  <line no="167">
    <token name="T_DOC_COMMENT">			elseif(self::$create_new_product_groups){</token>
  </line>
  <line no="168">
    <token name="T_DOC_COMMENT">				$className = $this-&gt;Config()-&gt;get("product_group_class_name");</token>
  </line>
  <line no="169">
    <token name="T_DOC_COMMENT">				//create parent product group</token>
  </line>
  <line no="170">
    <token name="T_DOC_COMMENT">				$pg = new $className();</token>
  </line>
  <line no="171">
    <token name="T_DOC_COMMENT">				$pg-&gt;setTitle($title);</token>
  </line>
  <line no="172">
    <token name="T_DOC_COMMENT">				$pg-&gt;ParentID = (self::$parent_page_id) ? self::$parent_page_id : 0;</token>
  </line>
  <line no="173">
    <token name="T_DOC_COMMENT">				$pg-&gt;writeToStage('Stage');</token>
  </line>
  <line no="174">
    <token name="T_DOC_COMMENT">				$pg-&gt;publish('Stage', 'Live');</token>
  </line>
  <line no="175">
    <token name="T_DOC_COMMENT">				$obj-&gt;ParentID = $pg-&gt;ID;</token>
  </line>
  <line no="176">
    <token name="T_DOC_COMMENT">				$obj-&gt;write();</token>
  </line>
  <line no="177">
    <token name="T_DOC_COMMENT">				$obj-&gt;writeToStage('Stage');</token>
  </line>
  <line no="178">
    <token name="T_DOC_COMMENT">				$obj-&gt;publish('Stage', 'Live');</token>
  </line>
  <line no="179">
    <token name="T_DOC_COMMENT">			}</token>
  </line>
  <line no="180">
    <token name="T_DOC_COMMENT">		}</token>
  </line>
  <line no="181">
    <token name="T_DOC_COMMENT">	}</token>
  </line>
  <line no="182"/>
  <line no="183"/>
  <line no="184">
    <token name="T_DOC_COMMENT">	function setContent(&amp;$obj, $val, $record){</token>
  </line>
  <line no="185">
    <token name="T_DOC_COMMENT">		$val = trim($val);</token>
  </line>
  <line no="186">
    <token name="T_DOC_COMMENT">		if($val){</token>
  </line>
  <line no="187">
    <token name="T_DOC_COMMENT">			$paragraphs = explode("\n",$val);</token>
  </line>
  <line no="188">
    <token name="T_DOC_COMMENT">			$obj-&gt;Content = "&lt;p&gt;".implode("&lt;/p&gt;&lt;p&gt;",$paragraphs)."&lt;/p&gt;";</token>
  </line>
  <line no="189">
    <token name="T_DOC_COMMENT">		}</token>
  </line>
  <line no="190">
    <token name="T_DOC_COMMENT">	}</token>
  </line>
  <line no="191"/>
  <line no="192">
    <token name="T_DOC_COMMENT">}</token>
  </line>
  <line no="193"/>
  <line no="194">
    <token name="T_DOC_COMMENT">*/</token>
  </line>
  <line no="195"/>
  <line no="196"/>
</source>
