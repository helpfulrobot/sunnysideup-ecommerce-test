<?xml version="1.0"?>
<source xmlns="http://xml.phpdox.net/token">
  <file xmlns="http://xml.phpdox.net/src" path="/var/www/_modules/ecommerce_test/trunk/docs/en/phpdox/../../../framework/model/fieldtypes" file="CompositeDBField.php" realpath="/var/www/_modules/ecommerce_test/trunk/framework/model/fieldtypes/CompositeDBField.php" size="6073" time="2015-03-14T10:40:57+13:00" unixtime="1426282857" sha1="c818b161b1bcdcedc5a9f5c029965d5ab30830e3" relative="framework/model/fieldtypes/CompositeDBField.php"/>
  <line no="1">
    <token name="T_OPEN_TAG">&lt;?php</token>
  </line>
  <line no="2">
    <token name="T_DOC_COMMENT">/**</token>
  </line>
  <line no="3">
    <token name="T_DOC_COMMENT"> * Apply this interface to any {@link DBField} that doesn't have a 1-1 mapping with a database field.</token>
  </line>
  <line no="4">
    <token name="T_DOC_COMMENT"> * This includes multi-value fields and transformed fields</token>
  </line>
  <line no="5">
    <token name="T_DOC_COMMENT"> *</token>
  </line>
  <line no="6">
    <token name="T_DOC_COMMENT"> * @todo Unittests for loading and saving composite values (see GIS module for existing similiar unittests)</token>
  </line>
  <line no="7">
    <token name="T_DOC_COMMENT"> * </token>
  </line>
  <line no="8">
    <token name="T_DOC_COMMENT"> * Example with a combined street name and number:</token>
  </line>
  <line no="9">
    <token name="T_DOC_COMMENT"> * &lt;code&gt;</token>
  </line>
  <line no="10">
    <token name="T_DOC_COMMENT">* class Street extends DBField implements CompositeDBField {</token>
  </line>
  <line no="11">
    <token name="T_DOC_COMMENT">* 	protected $streetNumber;</token>
  </line>
  <line no="12">
    <token name="T_DOC_COMMENT">* 	protected $streetName;</token>
  </line>
  <line no="13">
    <token name="T_DOC_COMMENT">* 	protected $isChanged = false;</token>
  </line>
  <line no="14">
    <token name="T_DOC_COMMENT">* 	static $composite_db = return array(</token>
  </line>
  <line no="15">
    <token name="T_DOC_COMMENT">* 		"Number" =&gt; "Int",</token>
  </line>
  <line no="16">
    <token name="T_DOC_COMMENT">* 		"Name" =&gt; "Text"</token>
  </line>
  <line no="17">
    <token name="T_DOC_COMMENT">* 	);</token>
  </line>
  <line no="18">
    <token name="T_DOC_COMMENT">* 		</token>
  </line>
  <line no="19">
    <token name="T_DOC_COMMENT">* 	function requireField() {</token>
  </line>
  <line no="20">
    <token name="T_DOC_COMMENT">* 		DB::requireField($this-&gt;tableName, "{$this-&gt;name}Number", 'Int');</token>
  </line>
  <line no="21">
    <token name="T_DOC_COMMENT">* 		DB::requireField($this-&gt;tableName, "{$this-&gt;name}Name", 'Text');</token>
  </line>
  <line no="22">
    <token name="T_DOC_COMMENT">* 	}</token>
  </line>
  <line no="23">
    <token name="T_DOC_COMMENT">* </token>
  </line>
  <line no="24">
    <token name="T_DOC_COMMENT">* 	function writeToManipulation(&amp;$manipulation) {</token>
  </line>
  <line no="25">
    <token name="T_DOC_COMMENT">* 		if($this-&gt;getStreetName()) {</token>
  </line>
  <line no="26">
    <token name="T_DOC_COMMENT">* 			$manipulation['fields']["{$this-&gt;name}Name"] = $this-&gt;prepValueForDB($this-&gt;getStreetName());</token>
  </line>
  <line no="27">
    <token name="T_DOC_COMMENT">* 		} else {</token>
  </line>
  <line no="28">
    <token name="T_DOC_COMMENT">* 			$manipulation['fields']["{$this-&gt;name}Name"] = DBField::create_field('Varchar', $this-&gt;getStreetName())</token>
  </line>
  <line no="29">
    <token name="T_DOC_COMMENT">* 				-&gt;nullValue();</token>
  </line>
  <line no="30">
    <token name="T_DOC_COMMENT">* 		}</token>
  </line>
  <line no="31">
    <token name="T_DOC_COMMENT">* 		</token>
  </line>
  <line no="32">
    <token name="T_DOC_COMMENT">* 		if($this-&gt;getStreetNumber()) {</token>
  </line>
  <line no="33">
    <token name="T_DOC_COMMENT">* 			$manipulation['fields']["{$this-&gt;name}Number"] = $this-&gt;prepValueForDB($this-&gt;getStreetNumber());</token>
  </line>
  <line no="34">
    <token name="T_DOC_COMMENT">* 		} else {</token>
  </line>
  <line no="35">
    <token name="T_DOC_COMMENT">* 			$manipulation['fields']["{$this-&gt;name}Number"] = DBField::create_field('Int', $this-&gt;getStreetNumber())</token>
  </line>
  <line no="36">
    <token name="T_DOC_COMMENT">* 				-&gt;nullValue();</token>
  </line>
  <line no="37">
    <token name="T_DOC_COMMENT">* 		}</token>
  </line>
  <line no="38">
    <token name="T_DOC_COMMENT">* 	}</token>
  </line>
  <line no="39">
    <token name="T_DOC_COMMENT">* 	</token>
  </line>
  <line no="40">
    <token name="T_DOC_COMMENT">* 	function addToQuery(&amp;$query) {</token>
  </line>
  <line no="41">
    <token name="T_DOC_COMMENT">* 		parent::addToQuery($query);</token>
  </line>
  <line no="42">
    <token name="T_DOC_COMMENT">* 		$query-&gt;setSelect("{$this-&gt;name}Number");</token>
  </line>
  <line no="43">
    <token name="T_DOC_COMMENT">* 		$query-&gt;setSelect("{$this-&gt;name}Name");</token>
  </line>
  <line no="44">
    <token name="T_DOC_COMMENT">* 	}</token>
  </line>
  <line no="45">
    <token name="T_DOC_COMMENT">* 	</token>
  </line>
  <line no="46">
    <token name="T_DOC_COMMENT">* 	function setValue($value, $record = null, $markChanged=true) {</token>
  </line>
  <line no="47">
    <token name="T_DOC_COMMENT">* 		if ($value instanceof Street &amp;&amp; $value-&gt;exists()) {</token>
  </line>
  <line no="48">
    <token name="T_DOC_COMMENT">* 			$this-&gt;setStreetName($value-&gt;getStreetName(), $markChanged);</token>
  </line>
  <line no="49">
    <token name="T_DOC_COMMENT">* 			$this-&gt;setStreetNumber($value-&gt;getStreetNumber(), $markChanged);</token>
  </line>
  <line no="50">
    <token name="T_DOC_COMMENT">* 			if($markChanged) $this-&gt;isChanged = true;</token>
  </line>
  <line no="51">
    <token name="T_DOC_COMMENT">* 		} else if($record &amp;&amp; isset($record[$this-&gt;name . 'Name']) &amp;&amp; isset($record[$this-&gt;name . 'Number'])) {</token>
  </line>
  <line no="52">
    <token name="T_DOC_COMMENT">* 			if($record[$this-&gt;name . 'Name'] &amp;&amp; $record[$this-&gt;name . 'Number']) {</token>
  </line>
  <line no="53">
    <token name="T_DOC_COMMENT">* 				$this-&gt;setStreetName($record[$this-&gt;name . 'Name'], $markChanged);</token>
  </line>
  <line no="54">
    <token name="T_DOC_COMMENT">* 				$this-&gt;setStreetNumber($record[$this-&gt;name . 'Number'], $markChanged);</token>
  </line>
  <line no="55">
    <token name="T_DOC_COMMENT">* 			} </token>
  </line>
  <line no="56">
    <token name="T_DOC_COMMENT">* 			if($markChanged) $this-&gt;isChanged = true;</token>
  </line>
  <line no="57">
    <token name="T_DOC_COMMENT">* 		} else if (is_array($value)) {</token>
  </line>
  <line no="58">
    <token name="T_DOC_COMMENT">* 			if (array_key_exists('Name', $value)) {</token>
  </line>
  <line no="59">
    <token name="T_DOC_COMMENT">* 				$this-&gt;setStreetName($value['Name'], $markChanged);</token>
  </line>
  <line no="60">
    <token name="T_DOC_COMMENT">* 			}</token>
  </line>
  <line no="61">
    <token name="T_DOC_COMMENT">* 			if (array_key_exists('Number', $value)) {</token>
  </line>
  <line no="62">
    <token name="T_DOC_COMMENT">* 				$this-&gt;setStreetNumber($value['Number'], $markChanged);</token>
  </line>
  <line no="63">
    <token name="T_DOC_COMMENT">* 			}</token>
  </line>
  <line no="64">
    <token name="T_DOC_COMMENT">* 			if($markChanged) $this-&gt;isChanged = true;</token>
  </line>
  <line no="65">
    <token name="T_DOC_COMMENT">* 		}</token>
  </line>
  <line no="66">
    <token name="T_DOC_COMMENT">* 	}</token>
  </line>
  <line no="67">
    <token name="T_DOC_COMMENT">* 	</token>
  </line>
  <line no="68">
    <token name="T_DOC_COMMENT">* 	function setStreetNumber($val, $markChanged=true) {</token>
  </line>
  <line no="69">
    <token name="T_DOC_COMMENT">* 		$this-&gt;streetNumber = $val;</token>
  </line>
  <line no="70">
    <token name="T_DOC_COMMENT">* 		if($markChanged) $this-&gt;isChanged = true;</token>
  </line>
  <line no="71">
    <token name="T_DOC_COMMENT">* 	}</token>
  </line>
  <line no="72">
    <token name="T_DOC_COMMENT">* 	</token>
  </line>
  <line no="73">
    <token name="T_DOC_COMMENT">* 	function setStreetName($val, $markChanged=true) {</token>
  </line>
  <line no="74">
    <token name="T_DOC_COMMENT">* 		$this-&gt;streetName = $val;</token>
  </line>
  <line no="75">
    <token name="T_DOC_COMMENT">* 		if($markChanged) $this-&gt;isChanged = true;</token>
  </line>
  <line no="76">
    <token name="T_DOC_COMMENT">* 	}</token>
  </line>
  <line no="77">
    <token name="T_DOC_COMMENT">* 	</token>
  </line>
  <line no="78">
    <token name="T_DOC_COMMENT">* 	function getStreetNumber() {</token>
  </line>
  <line no="79">
    <token name="T_DOC_COMMENT">* 		return $this-&gt;streetNumber;</token>
  </line>
  <line no="80">
    <token name="T_DOC_COMMENT">* 	}</token>
  </line>
  <line no="81">
    <token name="T_DOC_COMMENT">* 	</token>
  </line>
  <line no="82">
    <token name="T_DOC_COMMENT">* 	function getStreetName() {</token>
  </line>
  <line no="83">
    <token name="T_DOC_COMMENT">* 		return $this-&gt;streetName;</token>
  </line>
  <line no="84">
    <token name="T_DOC_COMMENT">* 	}</token>
  </line>
  <line no="85">
    <token name="T_DOC_COMMENT">* 	</token>
  </line>
  <line no="86">
    <token name="T_DOC_COMMENT">* 	function isChanged() {</token>
  </line>
  <line no="87">
    <token name="T_DOC_COMMENT">* 		return $this-&gt;isChanged;</token>
  </line>
  <line no="88">
    <token name="T_DOC_COMMENT">* 	}</token>
  </line>
  <line no="89">
    <token name="T_DOC_COMMENT">* 	</token>
  </line>
  <line no="90">
    <token name="T_DOC_COMMENT">* 	function exists() {</token>
  </line>
  <line no="91">
    <token name="T_DOC_COMMENT">* 		return ($this-&gt;getStreetName() || $this-&gt;getStreetNumber());</token>
  </line>
  <line no="92">
    <token name="T_DOC_COMMENT">* 	}</token>
  </line>
  <line no="93">
    <token name="T_DOC_COMMENT">* }</token>
  </line>
  <line no="94">
    <token name="T_DOC_COMMENT"> * &lt;/code&gt;</token>
  </line>
  <line no="95">
    <token name="T_DOC_COMMENT"> *</token>
  </line>
  <line no="96">
    <token name="T_DOC_COMMENT"> * @package framework</token>
  </line>
  <line no="97">
    <token name="T_DOC_COMMENT"> * @subpackage model</token>
  </line>
  <line no="98">
    <token name="T_DOC_COMMENT"> */</token>
  </line>
  <line no="99">
    <token name="T_INTERFACE">interface</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STRING">CompositeDBField</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_PHPDOX_OPEN_CURLY">{</token>
  </line>
  <line no="100">
    <token name="T_WHITESPACE">	</token>
  </line>
  <line no="101">
    <token name="T_WHITESPACE">	</token>
    <token name="T_DOC_COMMENT">/**</token>
  </line>
  <line no="102">
    <token name="T_DOC_COMMENT">	 * Similiar to {@link DataObject::$db},</token>
  </line>
  <line no="103">
    <token name="T_DOC_COMMENT">	 * holds an array of composite field names.</token>
  </line>
  <line no="104">
    <token name="T_DOC_COMMENT">	 * Don't include the fields "main name",</token>
  </line>
  <line no="105">
    <token name="T_DOC_COMMENT">	 * it will be prefixed in {@link requireField()}.</token>
  </line>
  <line no="106">
    <token name="T_DOC_COMMENT">	 * </token>
  </line>
  <line no="107">
    <token name="T_DOC_COMMENT">	 * @var array $composite_db</token>
  </line>
  <line no="108">
    <token name="T_DOC_COMMENT">	 */</token>
  </line>
  <line no="109">
    <token name="T_WHITESPACE">	</token>
    <token name="T_COMMENT">//static $composite_db;</token>
  </line>
  <line no="110">
    <token name="T_WHITESPACE">	</token>
  </line>
  <line no="111">
    <token name="T_WHITESPACE">	</token>
    <token name="T_DOC_COMMENT">/**</token>
  </line>
  <line no="112">
    <token name="T_DOC_COMMENT">	 * Set the value of this field in various formats.</token>
  </line>
  <line no="113">
    <token name="T_DOC_COMMENT">	 * Used by {@link DataObject-&gt;getField()}, {@link DataObject-&gt;setCastedField()}</token>
  </line>
  <line no="114">
    <token name="T_DOC_COMMENT">	 * {@link DataObject-&gt;dbObject()} and {@link DataObject-&gt;write()}.</token>
  </line>
  <line no="115">
    <token name="T_DOC_COMMENT">	 * </token>
  </line>
  <line no="116">
    <token name="T_DOC_COMMENT">	 * As this method is used both for initializing the field after construction,</token>
  </line>
  <line no="117">
    <token name="T_DOC_COMMENT">	 * and actually changing its values, it needs a {@link $markChanged}</token>
  </line>
  <line no="118">
    <token name="T_DOC_COMMENT">	 * parameter. </token>
  </line>
  <line no="119">
    <token name="T_DOC_COMMENT">	 * </token>
  </line>
  <line no="120">
    <token name="T_DOC_COMMENT">	 * @param DBField|array $value</token>
  </line>
  <line no="121">
    <token name="T_DOC_COMMENT">	 * @param DataObject|array $record An array or object that this field is part of</token>
  </line>
  <line no="122">
    <token name="T_DOC_COMMENT">	 * @param boolean $markChanged Indicate wether this field should be marked changed. </token>
  </line>
  <line no="123">
    <token name="T_DOC_COMMENT">	 *  Set to FALSE if you are initializing this field after construction, rather</token>
  </line>
  <line no="124">
    <token name="T_DOC_COMMENT">	 *  than setting a new value.</token>
  </line>
  <line no="125">
    <token name="T_DOC_COMMENT">	 */</token>
  </line>
  <line no="126">
    <token name="T_WHITESPACE">	</token>
    <token name="T_PUBLIC">public</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_FUNCTION">function</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STRING">setValue</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_VARIABLE">$value</token>
    <token name="T_PHPDOX_COMMA">,</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_VARIABLE">$record</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_PHPDOX_EQUAL">=</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STRING">null</token>
    <token name="T_PHPDOX_COMMA">,</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_VARIABLE">$markChanged</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_PHPDOX_EQUAL">=</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STRING">true</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_PHPDOX_SEMICOLON">;</token>
  </line>
  <line no="127">
    <token name="T_WHITESPACE">	</token>
  </line>
  <line no="128">
    <token name="T_WHITESPACE">	</token>
    <token name="T_DOC_COMMENT">/**</token>
  </line>
  <line no="129">
    <token name="T_DOC_COMMENT">	 * Used in constructing the database schema.</token>
  </line>
  <line no="130">
    <token name="T_DOC_COMMENT">	 * Add any custom properties defined in {@link $composite_db}.</token>
  </line>
  <line no="131">
    <token name="T_DOC_COMMENT">	 * Should make one or more calls to {@link DB::requireField()}.</token>
  </line>
  <line no="132">
    <token name="T_DOC_COMMENT">	 */</token>
  </line>
  <line no="133">
    <token name="T_WHITESPACE">	</token>
    <token name="T_COMMENT">//abstract public function requireField();</token>
  </line>
  <line no="134">
    <token name="T_WHITESPACE">	</token>
  </line>
  <line no="135">
    <token name="T_WHITESPACE">	</token>
    <token name="T_DOC_COMMENT">/**</token>
  </line>
  <line no="136">
    <token name="T_DOC_COMMENT">	 * Add the custom internal values to an INSERT or UPDATE</token>
  </line>
  <line no="137">
    <token name="T_DOC_COMMENT">	 * request passed through the ORM with {@link DataObject-&gt;write()}.</token>
  </line>
  <line no="138">
    <token name="T_DOC_COMMENT">	 * Fields are added in $manipulation['fields']. Please ensure</token>
  </line>
  <line no="139">
    <token name="T_DOC_COMMENT">	 * these fields are escaped for database insertion, as no</token>
  </line>
  <line no="140">
    <token name="T_DOC_COMMENT">	 * further processing happens before running the query.</token>
  </line>
  <line no="141">
    <token name="T_DOC_COMMENT">	 * Use {@link DBField-&gt;prepValueForDB()}.</token>
  </line>
  <line no="142">
    <token name="T_DOC_COMMENT">	 * Ensure to write NULL or empty values as well to allow </token>
  </line>
  <line no="143">
    <token name="T_DOC_COMMENT">	 * unsetting a previously set field. Use {@link DBField-&gt;nullValue()}</token>
  </line>
  <line no="144">
    <token name="T_DOC_COMMENT">	 * for the appropriate type.</token>
  </line>
  <line no="145">
    <token name="T_DOC_COMMENT">	 * </token>
  </line>
  <line no="146">
    <token name="T_DOC_COMMENT">	 * @param array $manipulation</token>
  </line>
  <line no="147">
    <token name="T_DOC_COMMENT">	 */</token>
  </line>
  <line no="148">
    <token name="T_WHITESPACE">	</token>
    <token name="T_PUBLIC">public</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_FUNCTION">function</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STRING">writeToManipulation</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_PHPDOX_AMPERSAND">&amp;</token>
    <token name="T_VARIABLE">$manipulation</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_PHPDOX_SEMICOLON">;</token>
  </line>
  <line no="149">
    <token name="T_WHITESPACE">	</token>
  </line>
  <line no="150">
    <token name="T_WHITESPACE">	</token>
    <token name="T_DOC_COMMENT">/**</token>
  </line>
  <line no="151">
    <token name="T_DOC_COMMENT">	 * Add all columns which are defined through {@link requireField()}</token>
  </line>
  <line no="152">
    <token name="T_DOC_COMMENT">	 * and {@link $composite_db}, or any additional SQL that is required</token>
  </line>
  <line no="153">
    <token name="T_DOC_COMMENT">	 * to get to these columns. Will mostly just write to the {@link SQLQuery-&gt;select}</token>
  </line>
  <line no="154">
    <token name="T_DOC_COMMENT">	 * array.</token>
  </line>
  <line no="155">
    <token name="T_DOC_COMMENT">	 * </token>
  </line>
  <line no="156">
    <token name="T_DOC_COMMENT">	 * @param SQLQuery $query</token>
  </line>
  <line no="157">
    <token name="T_DOC_COMMENT">	 */</token>
  </line>
  <line no="158">
    <token name="T_WHITESPACE">	</token>
    <token name="T_PUBLIC">public</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_FUNCTION">function</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STRING">addToQuery</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_PHPDOX_AMPERSAND">&amp;</token>
    <token name="T_VARIABLE">$query</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_PHPDOX_SEMICOLON">;</token>
  </line>
  <line no="159">
    <token name="T_WHITESPACE">	</token>
  </line>
  <line no="160">
    <token name="T_WHITESPACE">	</token>
    <token name="T_DOC_COMMENT">/**</token>
  </line>
  <line no="161">
    <token name="T_DOC_COMMENT">	 * Return array in the format of {@link $composite_db}.</token>
  </line>
  <line no="162">
    <token name="T_DOC_COMMENT">	 * Used by {@link DataObject-&gt;hasOwnDatabaseField()}.</token>
  </line>
  <line no="163">
    <token name="T_DOC_COMMENT">	 * @return array</token>
  </line>
  <line no="164">
    <token name="T_DOC_COMMENT">	 */</token>
  </line>
  <line no="165">
    <token name="T_WHITESPACE">	</token>
    <token name="T_PUBLIC">public</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_FUNCTION">function</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STRING">compositeDatabaseFields</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_PHPDOX_SEMICOLON">;</token>
  </line>
  <line no="166">
    <token name="T_WHITESPACE">	</token>
  </line>
  <line no="167">
    <token name="T_WHITESPACE">	</token>
    <token name="T_DOC_COMMENT">/**</token>
  </line>
  <line no="168">
    <token name="T_DOC_COMMENT">	 * Determines if the field has been changed since its initialization.</token>
  </line>
  <line no="169">
    <token name="T_DOC_COMMENT">	 * Most likely relies on an internal flag thats changed when calling</token>
  </line>
  <line no="170">
    <token name="T_DOC_COMMENT">	 * {@link setValue()} or any other custom setters on the object.</token>
  </line>
  <line no="171">
    <token name="T_DOC_COMMENT">	 * </token>
  </line>
  <line no="172">
    <token name="T_DOC_COMMENT">	 * @return boolean</token>
  </line>
  <line no="173">
    <token name="T_DOC_COMMENT">	 */</token>
  </line>
  <line no="174">
    <token name="T_WHITESPACE">	</token>
    <token name="T_PUBLIC">public</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_FUNCTION">function</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STRING">isChanged</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_PHPDOX_SEMICOLON">;</token>
  </line>
  <line no="175">
    <token name="T_WHITESPACE">	</token>
  </line>
  <line no="176">
    <token name="T_WHITESPACE">	</token>
    <token name="T_DOC_COMMENT">/**</token>
  </line>
  <line no="177">
    <token name="T_DOC_COMMENT">	 * Determines if any of the properties in this field have a value,</token>
  </line>
  <line no="178">
    <token name="T_DOC_COMMENT">	 * meaning at least one of them is not NULL.</token>
  </line>
  <line no="179">
    <token name="T_DOC_COMMENT">	 * </token>
  </line>
  <line no="180">
    <token name="T_DOC_COMMENT">	 * @return boolean</token>
  </line>
  <line no="181">
    <token name="T_DOC_COMMENT">	 */</token>
  </line>
  <line no="182">
    <token name="T_WHITESPACE">	</token>
    <token name="T_PUBLIC">public</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_FUNCTION">function</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STRING">exists</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_PHPDOX_SEMICOLON">;</token>
  </line>
  <line no="183">
    <token name="T_WHITESPACE">	</token>
  </line>
  <line no="184">
    <token name="T_PHPDOX_CLOSE_CURLY">}</token>
  </line>
  <line no="185"/>
</source>
