<?xml version="1.0"?>
<source xmlns="http://xml.phpdox.net/token">
  <file xmlns="http://xml.phpdox.net/src" path="/var/www/_modules/ecommerce_test/trunk/docs/en/phpdox/../../../framework/i18n" file="i18nTranslateAdapterInterface.php" realpath="/var/www/_modules/ecommerce_test/trunk/framework/i18n/i18nTranslateAdapterInterface.php" size="874" time="2015-03-14T10:40:46+13:00" unixtime="1426282846" sha1="cdf6e7fbc7642d245d60ebf5a674bf6377bc244b" relative="framework/i18n/i18nTranslateAdapterInterface.php"/>
  <line no="1">
    <token name="T_OPEN_TAG">&lt;?php</token>
  </line>
  <line no="2">
    <token name="T_DOC_COMMENT">/**</token>
  </line>
  <line no="3">
    <token name="T_DOC_COMMENT"> * @package framework</token>
  </line>
  <line no="4">
    <token name="T_DOC_COMMENT"> * @subpackage i18n</token>
  </line>
  <line no="5">
    <token name="T_DOC_COMMENT"> */</token>
  </line>
  <line no="6"/>
  <line no="7">
    <token name="T_DOC_COMMENT">/**</token>
  </line>
  <line no="8">
    <token name="T_DOC_COMMENT"> * Makes the {@link Zend_Translate_Adapter} base class aware of file naming conventions within SilverStripe.</token>
  </line>
  <line no="9">
    <token name="T_DOC_COMMENT"> * Needs to be implemented by all translators used through {@link i18n::register_translator()}.</token>
  </line>
  <line no="10">
    <token name="T_DOC_COMMENT"> * </token>
  </line>
  <line no="11">
    <token name="T_DOC_COMMENT"> * A bit of context: Zend is file extension agnostic by default, and simply uses the filenames to detect locales</token>
  </line>
  <line no="12">
    <token name="T_DOC_COMMENT"> * with the 'scan' option, passing all files to the used adapter. We support multiple formats in the same /lang/</token>
  </line>
  <line no="13">
    <token name="T_DOC_COMMENT"> * folder, so need to be more selective about including files to avoid e.g. a YAML adapter trying to parse a PHP file.</token>
  </line>
  <line no="14">
    <token name="T_DOC_COMMENT"> * </token>
  </line>
  <line no="15">
    <token name="T_DOC_COMMENT"> * @see http://framework.zend.com/manual/en/zend.translate.additional.html#zend.translate.additional.combination</token>
  </line>
  <line no="16">
    <token name="T_DOC_COMMENT"> */</token>
  </line>
  <line no="17">
    <token name="T_INTERFACE">interface</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STRING">i18nTranslateAdapterInterface</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_PHPDOX_OPEN_CURLY">{</token>
  </line>
  <line no="18">
    <token name="T_WHITESPACE">	</token>
    <token name="T_DOC_COMMENT">/**</token>
  </line>
  <line no="19">
    <token name="T_DOC_COMMENT">	 * @param String</token>
  </line>
  <line no="20">
    <token name="T_DOC_COMMENT">	 * @return String</token>
  </line>
  <line no="21">
    <token name="T_DOC_COMMENT">	 */</token>
  </line>
  <line no="22">
    <token name="T_WHITESPACE">	</token>
    <token name="T_PUBLIC">public</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_FUNCTION">function</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STRING">getFilenameForLocale</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_VARIABLE">$locale</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_PHPDOX_SEMICOLON">;</token>
  </line>
  <line no="23">
    <token name="T_PHPDOX_CLOSE_CURLY">}</token>
  </line>
</source>
