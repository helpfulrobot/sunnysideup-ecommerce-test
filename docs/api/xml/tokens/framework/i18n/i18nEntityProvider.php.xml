<?xml version="1.0"?>
<source xmlns="http://xml.phpdox.net/token">
  <file xmlns="http://xml.phpdox.net/src" path="/var/www/_modules/ecommerce_test/trunk/docs/en/phpdox/../../../framework/i18n" file="i18nEntityProvider.php" realpath="/var/www/_modules/ecommerce_test/trunk/framework/i18n/i18nEntityProvider.php" size="2173" time="2015-03-14T10:40:46+13:00" unixtime="1426282846" sha1="dc647d8a91982446dee9ed4dd862d2d2fe837b87" relative="framework/i18n/i18nEntityProvider.php"/>
  <line no="1">
    <token name="T_OPEN_TAG">&lt;?php</token>
  </line>
  <line no="2">
    <token name="T_DOC_COMMENT">/**</token>
  </line>
  <line no="3">
    <token name="T_DOC_COMMENT"> * Dynamically provide translatable entites for the {@link i18n} logic.</token>
  </line>
  <line no="4">
    <token name="T_DOC_COMMENT"> * This is particularly handy for natural language strings in static variables</token>
  </line>
  <line no="5">
    <token name="T_DOC_COMMENT"> * of a class definition, as the _t() method can only be used in a runtime/instance</token>
  </line>
  <line no="6">
    <token name="T_DOC_COMMENT"> * context. The provideI18nEntities() method enables you to define your own entities</token>
  </line>
  <line no="7">
    <token name="T_DOC_COMMENT"> * with your custom naming, mostly involving either the variable name or the array</token>
  </line>
  <line no="8">
    <token name="T_DOC_COMMENT"> * key. With this in place, you can use a getter method to trigger translation</token>
  </line>
  <line no="9">
    <token name="T_DOC_COMMENT"> * of your values.</token>
  </line>
  <line no="10">
    <token name="T_DOC_COMMENT"> * For any statics containing natural language, never use the static directly -</token>
  </line>
  <line no="11">
    <token name="T_DOC_COMMENT"> * always wrap it in a getter.</token>
  </line>
  <line no="12">
    <token name="T_DOC_COMMENT"> * </token>
  </line>
  <line no="13">
    <token name="T_DOC_COMMENT"> * @package framework</token>
  </line>
  <line no="14">
    <token name="T_DOC_COMMENT"> * @subpackage i18n</token>
  </line>
  <line no="15">
    <token name="T_DOC_COMMENT"> * @uses i18nTextCollector-&gt;collectFromEntityProviders()</token>
  </line>
  <line no="16">
    <token name="T_DOC_COMMENT"> */</token>
  </line>
  <line no="17">
    <token name="T_INTERFACE">interface</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STRING">i18nEntityProvider</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_PHPDOX_OPEN_CURLY">{</token>
  </line>
  <line no="18">
    <token name="T_WHITESPACE">	</token>
  </line>
  <line no="19">
    <token name="T_WHITESPACE">	</token>
    <token name="T_DOC_COMMENT">/**</token>
  </line>
  <line no="20">
    <token name="T_DOC_COMMENT">	 * Example usage:</token>
  </line>
  <line no="21">
    <token name="T_DOC_COMMENT">	 * &lt;code&gt;</token>
  </line>
  <line no="22">
    <token name="T_DOC_COMMENT">	 * class MyTestClass implements i18nEntityProvider {</token>
  </line>
  <line no="23">
    <token name="T_DOC_COMMENT">	 * function provideI18nEntities() {</token>
  </line>
  <line no="24">
    <token name="T_DOC_COMMENT">	 * 	$entities = array();</token>
  </line>
  <line no="25">
    <token name="T_DOC_COMMENT">	 * 	foreach($this-&gt;stat('my_static_array) as $key =&gt; $value) {</token>
  </line>
  <line no="26">
    <token name="T_DOC_COMMENT">	 * 		$entities["MyTestClass.my_static_array_{$key}"] = array(</token>
  </line>
  <line no="27">
    <token name="T_DOC_COMMENT">	 * 			$value,</token>
  </line>
  <line no="28">
    <token name="T_DOC_COMMENT">	 * 			</token>
  </line>
  <line no="29">
    <token name="T_DOC_COMMENT">	 * 			'My context description'</token>
  </line>
  <line no="30">
    <token name="T_DOC_COMMENT">	 * 		);</token>
  </line>
  <line no="31">
    <token name="T_DOC_COMMENT">	 * 	}</token>
  </line>
  <line no="32">
    <token name="T_DOC_COMMENT">	 * 	return $entities;</token>
  </line>
  <line no="33">
    <token name="T_DOC_COMMENT">	 * }</token>
  </line>
  <line no="34">
    <token name="T_DOC_COMMENT">	 * </token>
  </line>
  <line no="35">
    <token name="T_DOC_COMMENT">	 * public static function my_static_array() {</token>
  </line>
  <line no="36">
    <token name="T_DOC_COMMENT">	 * 	$t_my_static_array = array();</token>
  </line>
  <line no="37">
    <token name="T_DOC_COMMENT">	 * 	foreach(self::$my_static_array as $k =&gt; $v) {</token>
  </line>
  <line no="38">
    <token name="T_DOC_COMMENT">	 * 		$t_my_static_array[$k] = _t("MyTestClass.my_static_array_{$key}", $v);</token>
  </line>
  <line no="39">
    <token name="T_DOC_COMMENT">	 * 	}</token>
  </line>
  <line no="40">
    <token name="T_DOC_COMMENT">	 * 	return $t_my_static_array;</token>
  </line>
  <line no="41">
    <token name="T_DOC_COMMENT">	 * }</token>
  </line>
  <line no="42">
    <token name="T_DOC_COMMENT">	 * }</token>
  </line>
  <line no="43">
    <token name="T_DOC_COMMENT">	 * &lt;/code&gt;</token>
  </line>
  <line no="44">
    <token name="T_DOC_COMMENT">	 * </token>
  </line>
  <line no="45">
    <token name="T_DOC_COMMENT">	 * Example usage in {@link DataObject-&gt;provideI18nEntities()}.</token>
  </line>
  <line no="46">
    <token name="T_DOC_COMMENT">	 * </token>
  </line>
  <line no="47">
    <token name="T_DOC_COMMENT">	 * You can ask textcollector to add the provided entity to a different module</token>
  </line>
  <line no="48">
    <token name="T_DOC_COMMENT">	 * than the class is contained in by adding a 4th argument to the array:</token>
  </line>
  <line no="49">
    <token name="T_DOC_COMMENT">	 * &lt;code&gt;</token>
  </line>
  <line no="50">
    <token name="T_DOC_COMMENT">	 * class MyTestClass implements i18nEntityProvider {</token>
  </line>
  <line no="51">
    <token name="T_DOC_COMMENT">	 * function provideI18nEntities() {</token>
  </line>
  <line no="52">
    <token name="T_DOC_COMMENT">	 * 	$entities = array();</token>
  </line>
  <line no="53">
    <token name="T_DOC_COMMENT">	 * 		$entities["MyOtherModuleClass.MYENTITY"] = array(</token>
  </line>
  <line no="54">
    <token name="T_DOC_COMMENT">	 * 			$value,</token>
  </line>
  <line no="55">
    <token name="T_DOC_COMMENT">	 * 			</token>
  </line>
  <line no="56">
    <token name="T_DOC_COMMENT">	 * 			'My context description',</token>
  </line>
  <line no="57">
    <token name="T_DOC_COMMENT">	 * 			'myothermodule'</token>
  </line>
  <line no="58">
    <token name="T_DOC_COMMENT">	 * 		);</token>
  </line>
  <line no="59">
    <token name="T_DOC_COMMENT">	 * 	}</token>
  </line>
  <line no="60">
    <token name="T_DOC_COMMENT">	 * 	return $entities;</token>
  </line>
  <line no="61">
    <token name="T_DOC_COMMENT">	 * }</token>
  </line>
  <line no="62">
    <token name="T_DOC_COMMENT">	 * &lt;/code&gt;</token>
  </line>
  <line no="63">
    <token name="T_DOC_COMMENT">	 * </token>
  </line>
  <line no="64">
    <token name="T_DOC_COMMENT">	 * @return array All entites in an associative array, with</token>
  </line>
  <line no="65">
    <token name="T_DOC_COMMENT">	 * entity name as the key, and a numerical array of pseudo-arguments</token>
  </line>
  <line no="66">
    <token name="T_DOC_COMMENT">	 * for _t() as a value.</token>
  </line>
  <line no="67">
    <token name="T_DOC_COMMENT">	 */</token>
  </line>
  <line no="68">
    <token name="T_WHITESPACE">	</token>
    <token name="T_PUBLIC">public</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_FUNCTION">function</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STRING">provideI18nEntities</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_PHPDOX_SEMICOLON">;</token>
  </line>
  <line no="69">
    <token name="T_PHPDOX_CLOSE_CURLY">}</token>
  </line>
  <line no="70"/>
</source>
