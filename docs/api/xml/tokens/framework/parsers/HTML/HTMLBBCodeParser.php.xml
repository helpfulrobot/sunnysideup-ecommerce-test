<?xml version="1.0"?>
<source xmlns="http://xml.phpdox.net/token">
  <file xmlns="http://xml.phpdox.net/src" path="/var/www/_modules/ecommerce_test/trunk/docs/en/phpdox/../../../framework/parsers/HTML" file="HTMLBBCodeParser.php" realpath="/var/www/_modules/ecommerce_test/trunk/framework/parsers/HTML/HTMLBBCodeParser.php" size="25103" time="2015-03-14T10:40:58+13:00" unixtime="1426282858" sha1="db007b02df85ff7b4de28c67746c42f470ffe381" relative="framework/parsers/HTML/HTMLBBCodeParser.php"/>
  <line no="1">
    <token name="T_OPEN_TAG">&lt;?php</token>
  </line>
  <line no="2">
    <token name="T_COMMENT">/* vim: set expandtab tabstop=4 shiftwidth=4: */</token>
  </line>
  <line no="3">
    <token name="T_COMMENT">// +----------------------------------------------------------------------+</token>
  </line>
  <line no="4">
    <token name="T_COMMENT">// | PHP Version 4                                                        |</token>
  </line>
  <line no="5">
    <token name="T_COMMENT">// +----------------------------------------------------------------------+</token>
  </line>
  <line no="6">
    <token name="T_COMMENT">// | Copyright (c) 1997-2003 The PHP Group                                |</token>
  </line>
  <line no="7">
    <token name="T_COMMENT">// +----------------------------------------------------------------------+</token>
  </line>
  <line no="8">
    <token name="T_COMMENT">// | This source file is subject to version 2.02 of the PHP license,      |</token>
  </line>
  <line no="9">
    <token name="T_COMMENT">// | that is bundled with this package in the file LICENSE, and is        |</token>
  </line>
  <line no="10">
    <token name="T_COMMENT">// | available at through the world-wide-web at                           |</token>
  </line>
  <line no="11">
    <token name="T_COMMENT">// | http://www.php.net/license/2_02.txt.                                 |</token>
  </line>
  <line no="12">
    <token name="T_COMMENT">// | If you did not receive a copy of the PHP license and are unable to   |</token>
  </line>
  <line no="13">
    <token name="T_COMMENT">// | obtain it through the world-wide-web, please send a note to          |</token>
  </line>
  <line no="14">
    <token name="T_COMMENT">// | license@php.net so we can mail you a copy immediately.               |</token>
  </line>
  <line no="15">
    <token name="T_COMMENT">// +----------------------------------------------------------------------+</token>
  </line>
  <line no="16">
    <token name="T_COMMENT">// | Author: Stijn de Reede &lt;sjr@gmx.co.uk&gt;                               |</token>
  </line>
  <line no="17">
    <token name="T_COMMENT">// +----------------------------------------------------------------------+</token>
  </line>
  <line no="18">
    <token name="T_COMMENT">//</token>
  </line>
  <line no="19">
    <token name="T_COMMENT">// $Id: BBCodeParser.php,v 1.17 2007/07/02 18:46:30 cweiske Exp $</token>
  </line>
  <line no="20">
    <token name="T_COMMENT">//</token>
  </line>
  <line no="21">
    <token name="T_COMMENT">// Modified by SilverStripe silverstripe.com</token>
  </line>
  <line no="22"/>
  <line no="23">
    <token name="T_DOC_COMMENT">/**</token>
  </line>
  <line no="24">
    <token name="T_DOC_COMMENT"> * @package framework</token>
  </line>
  <line no="25">
    <token name="T_DOC_COMMENT"> * @subpackage misc</token>
  </line>
  <line no="26">
    <token name="T_DOC_COMMENT"> * @author   Stijn de Reede  &lt;sjr@gmx.co.uk&gt; , SilverStripe</token>
  </line>
  <line no="27">
    <token name="T_DOC_COMMENT"> *</token>
  </line>
  <line no="28">
    <token name="T_DOC_COMMENT"> *</token>
  </line>
  <line no="29">
    <token name="T_DOC_COMMENT"> * This is a parser to replace UBB style tags with their html equivalents. It</token>
  </line>
  <line no="30">
    <token name="T_DOC_COMMENT"> * does not simply do some regex calls, but is complete stack based</token>
  </line>
  <line no="31">
    <token name="T_DOC_COMMENT"> * parse engine. This ensures that all tags are properly nested, if not,</token>
  </line>
  <line no="32">
    <token name="T_DOC_COMMENT"> * extra tags are added to maintain the nesting. This parser should only produce</token>
  </line>
  <line no="33">
    <token name="T_DOC_COMMENT"> * xhtml 1.0 compliant code. All tags are validated and so are all their attributes.</token>
  </line>
  <line no="34">
    <token name="T_DOC_COMMENT"> * It should be easy to extend this parser with your own tags, see the _definedTags</token>
  </line>
  <line no="35">
    <token name="T_DOC_COMMENT"> * format description below.</token>
  </line>
  <line no="36">
    <token name="T_DOC_COMMENT"> *</token>
  </line>
  <line no="37">
    <token name="T_DOC_COMMENT"> *</token>
  </line>
  <line no="38">
    <token name="T_DOC_COMMENT"> * Usage:</token>
  </line>
  <line no="39">
    <token name="T_DOC_COMMENT"> * $parser = new SSHTMLBBCodeParser();</token>
  </line>
  <line no="40">
    <token name="T_DOC_COMMENT"> * $parser-&gt;setText('normal [b]bold[/b] and normal again');</token>
  </line>
  <line no="41">
    <token name="T_DOC_COMMENT"> * $parser-&gt;parse();</token>
  </line>
  <line no="42">
    <token name="T_DOC_COMMENT"> * echo $parser-&gt;getParsed();</token>
  </line>
  <line no="43">
    <token name="T_DOC_COMMENT"> * or:</token>
  </line>
  <line no="44">
    <token name="T_DOC_COMMENT"> * $parser = new SSHTMLBBCodeParser();</token>
  </line>
  <line no="45">
    <token name="T_DOC_COMMENT"> * echo $parser-&gt;qparse('normal [b]bold[/b] and normal again');</token>
  </line>
  <line no="46">
    <token name="T_DOC_COMMENT"> * or:</token>
  </line>
  <line no="47">
    <token name="T_DOC_COMMENT"> * echo SSHTMLBBCodeParser::staticQparse('normal [b]bold[/b] and normal again');</token>
  </line>
  <line no="48">
    <token name="T_DOC_COMMENT"> *</token>
  </line>
  <line no="49">
    <token name="T_DOC_COMMENT"> *</token>
  </line>
  <line no="50">
    <token name="T_DOC_COMMENT"> * Setting the options from the ini file:</token>
  </line>
  <line no="51">
    <token name="T_DOC_COMMENT"> * $config = parse_ini_file('BBCodeParser.ini', true);</token>
  </line>
  <line no="52">
    <token name="T_DOC_COMMENT"> *  $options = &amp;PEAR::getStaticProperty('SSHTMLBBCodeParser', '_options');</token>
  </line>
  <line no="53">
    <token name="T_DOC_COMMENT"> * $options = $config['SSHTMLBBCodeParser'];</token>
  </line>
  <line no="54">
    <token name="T_DOC_COMMENT"> * unset($options);</token>
  </line>
  <line no="55">
    <token name="T_DOC_COMMENT"> */</token>
  </line>
  <line no="56">
    <token name="T_CLASS">class</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STRING">SSHTMLBBCodeParser</token>
  </line>
  <line no="57">
    <token name="T_PHPDOX_OPEN_CURLY">{</token>
  </line>
  <line no="58">
    <token name="T_WHITESPACE">	</token>
    <token name="T_DOC_COMMENT">/**</token>
  </line>
  <line no="59">
    <token name="T_DOC_COMMENT">	 * An array of tags parsed by the engine, should be overwritten by filters</token>
  </line>
  <line no="60">
    <token name="T_DOC_COMMENT">	 *</token>
  </line>
  <line no="61">
    <token name="T_DOC_COMMENT">	 * @access   private</token>
  </line>
  <line no="62">
    <token name="T_DOC_COMMENT">	 * @var      array</token>
  </line>
  <line no="63">
    <token name="T_DOC_COMMENT">	 */</token>
  </line>
  <line no="64">
    <token name="T_WHITESPACE">	</token>
    <token name="T_VAR">var</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_VARIABLE">$_definedTags</token>
    <token name="T_WHITESPACE">  </token>
    <token name="T_PHPDOX_EQUAL">=</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_ARRAY">array</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_PHPDOX_SEMICOLON">;</token>
  </line>
  <line no="65"/>
  <line no="66">
    <token name="T_WHITESPACE">	</token>
    <token name="T_DOC_COMMENT">/**</token>
  </line>
  <line no="67">
    <token name="T_DOC_COMMENT">	 * A string containing the input</token>
  </line>
  <line no="68">
    <token name="T_DOC_COMMENT">	 *</token>
  </line>
  <line no="69">
    <token name="T_DOC_COMMENT">	 * @access   private</token>
  </line>
  <line no="70">
    <token name="T_DOC_COMMENT">	 * @var      string</token>
  </line>
  <line no="71">
    <token name="T_DOC_COMMENT">	 */</token>
  </line>
  <line no="72">
    <token name="T_WHITESPACE">	</token>
    <token name="T_VAR">var</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_VARIABLE">$_text</token>
    <token name="T_WHITESPACE">          </token>
    <token name="T_PHPDOX_EQUAL">=</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_CONSTANT_ENCAPSED_STRING">''</token>
    <token name="T_PHPDOX_SEMICOLON">;</token>
  </line>
  <line no="73"/>
  <line no="74">
    <token name="T_WHITESPACE">	</token>
    <token name="T_DOC_COMMENT">/**</token>
  </line>
  <line no="75">
    <token name="T_DOC_COMMENT">	 * A string containing the preparsed input</token>
  </line>
  <line no="76">
    <token name="T_DOC_COMMENT">	 *</token>
  </line>
  <line no="77">
    <token name="T_DOC_COMMENT">	 * @access   private</token>
  </line>
  <line no="78">
    <token name="T_DOC_COMMENT">	 * @var      string</token>
  </line>
  <line no="79">
    <token name="T_DOC_COMMENT">	 */</token>
  </line>
  <line no="80">
    <token name="T_WHITESPACE">	</token>
    <token name="T_VAR">var</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_VARIABLE">$_preparsed</token>
    <token name="T_WHITESPACE">     </token>
    <token name="T_PHPDOX_EQUAL">=</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_CONSTANT_ENCAPSED_STRING">''</token>
    <token name="T_PHPDOX_SEMICOLON">;</token>
  </line>
  <line no="81"/>
  <line no="82">
    <token name="T_WHITESPACE">	</token>
    <token name="T_DOC_COMMENT">/**</token>
  </line>
  <line no="83">
    <token name="T_DOC_COMMENT">	 * An array tags and texts build from the input text</token>
  </line>
  <line no="84">
    <token name="T_DOC_COMMENT">	 *</token>
  </line>
  <line no="85">
    <token name="T_DOC_COMMENT">	 * @access   private</token>
  </line>
  <line no="86">
    <token name="T_DOC_COMMENT">	 * @var      array</token>
  </line>
  <line no="87">
    <token name="T_DOC_COMMENT">	 */</token>
  </line>
  <line no="88">
    <token name="T_WHITESPACE">	</token>
    <token name="T_VAR">var</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_VARIABLE">$_tagArray</token>
    <token name="T_WHITESPACE">      </token>
    <token name="T_PHPDOX_EQUAL">=</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_ARRAY">array</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_PHPDOX_SEMICOLON">;</token>
  </line>
  <line no="89"/>
  <line no="90">
    <token name="T_WHITESPACE">	</token>
    <token name="T_DOC_COMMENT">/**</token>
  </line>
  <line no="91">
    <token name="T_DOC_COMMENT">	 * A string containing the parsed version of the text</token>
  </line>
  <line no="92">
    <token name="T_DOC_COMMENT">	 *</token>
  </line>
  <line no="93">
    <token name="T_DOC_COMMENT">	 * @access   private</token>
  </line>
  <line no="94">
    <token name="T_DOC_COMMENT">	 * @var      string</token>
  </line>
  <line no="95">
    <token name="T_DOC_COMMENT">	 */</token>
  </line>
  <line no="96">
    <token name="T_WHITESPACE">	</token>
    <token name="T_VAR">var</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_VARIABLE">$_parsed</token>
    <token name="T_WHITESPACE">        </token>
    <token name="T_PHPDOX_EQUAL">=</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_CONSTANT_ENCAPSED_STRING">''</token>
    <token name="T_PHPDOX_SEMICOLON">;</token>
  </line>
  <line no="97"/>
  <line no="98">
    <token name="T_WHITESPACE">	</token>
    <token name="T_DOC_COMMENT">/**</token>
  </line>
  <line no="99">
    <token name="T_DOC_COMMENT">	 * An array of options, filled by an ini file or through the contructor</token>
  </line>
  <line no="100">
    <token name="T_DOC_COMMENT">	 *</token>
  </line>
  <line no="101">
    <token name="T_DOC_COMMENT">	 * @access   private</token>
  </line>
  <line no="102">
    <token name="T_DOC_COMMENT">	 * @var      array</token>
  </line>
  <line no="103">
    <token name="T_DOC_COMMENT">	 */</token>
  </line>
  <line no="104">
    <token name="T_WHITESPACE">	</token>
    <token name="T_VAR">var</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_VARIABLE">$_options</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_PHPDOX_EQUAL">=</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_ARRAY">array</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
  </line>
  <line no="105">
    <token name="T_WHITESPACE">		</token>
    <token name="T_CONSTANT_ENCAPSED_STRING">'quotestyle'</token>
    <token name="T_WHITESPACE">    </token>
    <token name="T_DOUBLE_ARROW">=&gt;</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_CONSTANT_ENCAPSED_STRING">'double'</token>
    <token name="T_PHPDOX_COMMA">,</token>
  </line>
  <line no="106">
    <token name="T_WHITESPACE">		</token>
    <token name="T_CONSTANT_ENCAPSED_STRING">'quotewhat'</token>
    <token name="T_WHITESPACE">     </token>
    <token name="T_DOUBLE_ARROW">=&gt;</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_CONSTANT_ENCAPSED_STRING">'all'</token>
    <token name="T_PHPDOX_COMMA">,</token>
  </line>
  <line no="107">
    <token name="T_WHITESPACE">		</token>
    <token name="T_CONSTANT_ENCAPSED_STRING">'open'</token>
    <token name="T_WHITESPACE">          </token>
    <token name="T_DOUBLE_ARROW">=&gt;</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_CONSTANT_ENCAPSED_STRING">'['</token>
    <token name="T_PHPDOX_COMMA">,</token>
  </line>
  <line no="108">
    <token name="T_WHITESPACE">		</token>
    <token name="T_CONSTANT_ENCAPSED_STRING">'close'</token>
    <token name="T_WHITESPACE">         </token>
    <token name="T_DOUBLE_ARROW">=&gt;</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_CONSTANT_ENCAPSED_STRING">']'</token>
    <token name="T_PHPDOX_COMMA">,</token>
  </line>
  <line no="109">
    <token name="T_WHITESPACE">		</token>
    <token name="T_CONSTANT_ENCAPSED_STRING">'xmlclose'</token>
    <token name="T_WHITESPACE">      </token>
    <token name="T_DOUBLE_ARROW">=&gt;</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STRING">true</token>
    <token name="T_PHPDOX_COMMA">,</token>
  </line>
  <line no="110">
    <token name="T_WHITESPACE">		</token>
    <token name="T_CONSTANT_ENCAPSED_STRING">'filters'</token>
    <token name="T_WHITESPACE">       </token>
    <token name="T_DOUBLE_ARROW">=&gt;</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_CONSTANT_ENCAPSED_STRING">'Basic'</token>
  </line>
  <line no="111">
    <token name="T_WHITESPACE">	</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_PHPDOX_SEMICOLON">;</token>
  </line>
  <line no="112"/>
  <line no="113">
    <token name="T_WHITESPACE">	</token>
    <token name="T_DOC_COMMENT">/**</token>
  </line>
  <line no="114">
    <token name="T_DOC_COMMENT">	 * An array of filters used for parsing</token>
  </line>
  <line no="115">
    <token name="T_DOC_COMMENT">	 *</token>
  </line>
  <line no="116">
    <token name="T_DOC_COMMENT">	 * @access   private</token>
  </line>
  <line no="117">
    <token name="T_DOC_COMMENT">	 * @var      array</token>
  </line>
  <line no="118">
    <token name="T_DOC_COMMENT">	 */</token>
  </line>
  <line no="119">
    <token name="T_WHITESPACE">	</token>
    <token name="T_VAR">var</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_VARIABLE">$_filters</token>
    <token name="T_WHITESPACE">       </token>
    <token name="T_PHPDOX_EQUAL">=</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_ARRAY">array</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_PHPDOX_SEMICOLON">;</token>
  </line>
  <line no="120"/>
  <line no="121">
    <token name="T_WHITESPACE">	</token>
    <token name="T_DOC_COMMENT">/**</token>
  </line>
  <line no="122">
    <token name="T_DOC_COMMENT">	 * Constructor, initialises the options and filters</token>
  </line>
  <line no="123">
    <token name="T_DOC_COMMENT">	 *</token>
  </line>
  <line no="124">
    <token name="T_DOC_COMMENT">	 * Sets the private variable _options with base options defined with</token>
  </line>
  <line no="125">
    <token name="T_DOC_COMMENT">	 * &amp;PEAR::getStaticProperty(), overwriting them with (if present)</token>
  </line>
  <line no="126">
    <token name="T_DOC_COMMENT">	 * the argument to this method.</token>
  </line>
  <line no="127">
    <token name="T_DOC_COMMENT">	 * Then it sets the extra options to properly escape the tag</token>
  </line>
  <line no="128">
    <token name="T_DOC_COMMENT">	 * characters in preg_replace() etc. The set options are</token>
  </line>
  <line no="129">
    <token name="T_DOC_COMMENT">	 * then stored back with &amp;PEAR::getStaticProperty(), so that the filter</token>
  </line>
  <line no="130">
    <token name="T_DOC_COMMENT">	 * classes can use them.</token>
  </line>
  <line no="131">
    <token name="T_DOC_COMMENT">	 * All the filters in the options are initialised and their defined tags</token>
  </line>
  <line no="132">
    <token name="T_DOC_COMMENT">	 * are copied into the private variable _definedTags.</token>
  </line>
  <line no="133">
    <token name="T_DOC_COMMENT">	 *</token>
  </line>
  <line no="134">
    <token name="T_DOC_COMMENT">	 * @param    array           options to use, can be left out</token>
  </line>
  <line no="135">
    <token name="T_DOC_COMMENT">	 * @return   none</token>
  </line>
  <line no="136">
    <token name="T_DOC_COMMENT">	 * @access   public</token>
  </line>
  <line no="137">
    <token name="T_DOC_COMMENT">	 * @author   Stijn de Reede  &lt;sjr@gmx.co.uk&gt;</token>
  </line>
  <line no="138">
    <token name="T_DOC_COMMENT">	 */</token>
  </line>
  <line no="139">
    <token name="T_WHITESPACE">	</token>
    <token name="T_PUBLIC">public</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_FUNCTION">function</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STRING">SSHTMLBBCodeParser</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_VARIABLE">$options</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_PHPDOX_EQUAL">=</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_ARRAY">array</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
  </line>
  <line no="140">
    <token name="T_WHITESPACE">	</token>
    <token name="T_PHPDOX_OPEN_CURLY">{</token>
  </line>
  <line no="141">
    <token name="T_WHITESPACE">		</token>
    <token name="T_COMMENT">// set the already set options</token>
  </line>
  <line no="142">
    <token name="T_WHITESPACE">		</token>
    <token name="T_VARIABLE">$baseoptions</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_PHPDOX_EQUAL">=</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_PHPDOX_AMPERSAND">&amp;</token>
    <token name="T_STRING">SSHTMLBBCodeParser</token>
    <token name="T_DOUBLE_COLON">::</token>
    <token name="T_STRING">getStaticProperty</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_CONSTANT_ENCAPSED_STRING">'SSHTMLBBCodeParser'</token>
    <token name="T_PHPDOX_COMMA">,</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_CONSTANT_ENCAPSED_STRING">'_options'</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_PHPDOX_SEMICOLON">;</token>
  </line>
  <line no="143">
    <token name="T_WHITESPACE">		</token>
    <token name="T_IF">if</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_STRING">is_array</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_VARIABLE">$baseoptions</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_PHPDOX_OPEN_CURLY">{</token>
  </line>
  <line no="144">
    <token name="T_WHITESPACE">			</token>
    <token name="T_FOREACH">foreach</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_VARIABLE">$baseoptions</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_AS">as</token>
    <token name="T_WHITESPACE">  </token>
    <token name="T_VARIABLE">$k</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_DOUBLE_ARROW">=&gt;</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_VARIABLE">$v</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_WHITESPACE">  </token>
    <token name="T_PHPDOX_OPEN_CURLY">{</token>
  </line>
  <line no="145">
    <token name="T_WHITESPACE">				</token>
    <token name="T_VARIABLE">$this</token>
    <token name="T_OBJECT_OPERATOR">-&gt;</token>
    <token name="T_STRING">_options</token>
    <token name="T_PHPDOX_OPEN_SQUARE">[</token>
    <token name="T_VARIABLE">$k</token>
    <token name="T_PHPDOX_CLOSE_SQUARE">]</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_PHPDOX_EQUAL">=</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_VARIABLE">$v</token>
    <token name="T_PHPDOX_SEMICOLON">;</token>
  </line>
  <line no="146">
    <token name="T_WHITESPACE">			</token>
    <token name="T_PHPDOX_CLOSE_CURLY">}</token>
  </line>
  <line no="147">
    <token name="T_WHITESPACE">		</token>
    <token name="T_PHPDOX_CLOSE_CURLY">}</token>
  </line>
  <line no="148"/>
  <line no="149">
    <token name="T_WHITESPACE">		</token>
    <token name="T_COMMENT">// set the options passed as an argument</token>
  </line>
  <line no="150">
    <token name="T_WHITESPACE">		</token>
    <token name="T_FOREACH">foreach</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_VARIABLE">$options</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_AS">as</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_VARIABLE">$k</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_DOUBLE_ARROW">=&gt;</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_VARIABLE">$v</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_WHITESPACE">  </token>
    <token name="T_PHPDOX_OPEN_CURLY">{</token>
  </line>
  <line no="151">
    <token name="T_WHITESPACE">			</token>
    <token name="T_VARIABLE">$this</token>
    <token name="T_OBJECT_OPERATOR">-&gt;</token>
    <token name="T_STRING">_options</token>
    <token name="T_PHPDOX_OPEN_SQUARE">[</token>
    <token name="T_VARIABLE">$k</token>
    <token name="T_PHPDOX_CLOSE_SQUARE">]</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_PHPDOX_EQUAL">=</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_VARIABLE">$v</token>
    <token name="T_PHPDOX_SEMICOLON">;</token>
  </line>
  <line no="152">
    <token name="T_WHITESPACE">		</token>
    <token name="T_PHPDOX_CLOSE_CURLY">}</token>
  </line>
  <line no="153"/>
  <line no="154">
    <token name="T_WHITESPACE">		</token>
    <token name="T_COMMENT">// add escape open and close chars to the options for preg escaping</token>
  </line>
  <line no="155">
    <token name="T_WHITESPACE">		</token>
    <token name="T_VARIABLE">$preg_escape</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_PHPDOX_EQUAL">=</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_CONSTANT_ENCAPSED_STRING">'\^$.[]|()?*+{}'</token>
    <token name="T_PHPDOX_SEMICOLON">;</token>
  </line>
  <line no="156">
    <token name="T_WHITESPACE">		</token>
    <token name="T_IF">if</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_VARIABLE">$this</token>
    <token name="T_OBJECT_OPERATOR">-&gt;</token>
    <token name="T_STRING">_options</token>
    <token name="T_PHPDOX_OPEN_SQUARE">[</token>
    <token name="T_CONSTANT_ENCAPSED_STRING">'open'</token>
    <token name="T_PHPDOX_CLOSE_SQUARE">]</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_IS_NOT_EQUAL">!=</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_CONSTANT_ENCAPSED_STRING">''</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_BOOLEAN_AND">&amp;&amp;</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STRING">strpos</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_VARIABLE">$preg_escape</token>
    <token name="T_PHPDOX_COMMA">,</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_VARIABLE">$this</token>
    <token name="T_OBJECT_OPERATOR">-&gt;</token>
    <token name="T_STRING">_options</token>
    <token name="T_PHPDOX_OPEN_SQUARE">[</token>
    <token name="T_CONSTANT_ENCAPSED_STRING">'open'</token>
    <token name="T_PHPDOX_CLOSE_SQUARE">]</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_PHPDOX_OPEN_CURLY">{</token>
  </line>
  <line no="157">
    <token name="T_WHITESPACE">			</token>
    <token name="T_VARIABLE">$this</token>
    <token name="T_OBJECT_OPERATOR">-&gt;</token>
    <token name="T_STRING">_options</token>
    <token name="T_PHPDOX_OPEN_SQUARE">[</token>
    <token name="T_CONSTANT_ENCAPSED_STRING">'open_esc'</token>
    <token name="T_PHPDOX_CLOSE_SQUARE">]</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_PHPDOX_EQUAL">=</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_CONSTANT_ENCAPSED_STRING">"\\"</token>
    <token name="T_PHPDOX_DOT">.</token>
    <token name="T_VARIABLE">$this</token>
    <token name="T_OBJECT_OPERATOR">-&gt;</token>
    <token name="T_STRING">_options</token>
    <token name="T_PHPDOX_OPEN_SQUARE">[</token>
    <token name="T_CONSTANT_ENCAPSED_STRING">'open'</token>
    <token name="T_PHPDOX_CLOSE_SQUARE">]</token>
    <token name="T_PHPDOX_SEMICOLON">;</token>
  </line>
  <line no="158">
    <token name="T_WHITESPACE">		</token>
    <token name="T_PHPDOX_CLOSE_CURLY">}</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_ELSE">else</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_PHPDOX_OPEN_CURLY">{</token>
  </line>
  <line no="159">
    <token name="T_WHITESPACE">			</token>
    <token name="T_VARIABLE">$this</token>
    <token name="T_OBJECT_OPERATOR">-&gt;</token>
    <token name="T_STRING">_options</token>
    <token name="T_PHPDOX_OPEN_SQUARE">[</token>
    <token name="T_CONSTANT_ENCAPSED_STRING">'open_esc'</token>
    <token name="T_PHPDOX_CLOSE_SQUARE">]</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_PHPDOX_EQUAL">=</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_VARIABLE">$this</token>
    <token name="T_OBJECT_OPERATOR">-&gt;</token>
    <token name="T_STRING">_options</token>
    <token name="T_PHPDOX_OPEN_SQUARE">[</token>
    <token name="T_CONSTANT_ENCAPSED_STRING">'open'</token>
    <token name="T_PHPDOX_CLOSE_SQUARE">]</token>
    <token name="T_PHPDOX_SEMICOLON">;</token>
  </line>
  <line no="160">
    <token name="T_WHITESPACE">		</token>
    <token name="T_PHPDOX_CLOSE_CURLY">}</token>
  </line>
  <line no="161">
    <token name="T_WHITESPACE">		</token>
    <token name="T_IF">if</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_VARIABLE">$this</token>
    <token name="T_OBJECT_OPERATOR">-&gt;</token>
    <token name="T_STRING">_options</token>
    <token name="T_PHPDOX_OPEN_SQUARE">[</token>
    <token name="T_CONSTANT_ENCAPSED_STRING">'close'</token>
    <token name="T_PHPDOX_CLOSE_SQUARE">]</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_IS_NOT_EQUAL">!=</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_CONSTANT_ENCAPSED_STRING">''</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_BOOLEAN_AND">&amp;&amp;</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STRING">strpos</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_VARIABLE">$preg_escape</token>
    <token name="T_PHPDOX_COMMA">,</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_VARIABLE">$this</token>
    <token name="T_OBJECT_OPERATOR">-&gt;</token>
    <token name="T_STRING">_options</token>
    <token name="T_PHPDOX_OPEN_SQUARE">[</token>
    <token name="T_CONSTANT_ENCAPSED_STRING">'close'</token>
    <token name="T_PHPDOX_CLOSE_SQUARE">]</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_PHPDOX_OPEN_CURLY">{</token>
  </line>
  <line no="162">
    <token name="T_WHITESPACE">			</token>
    <token name="T_VARIABLE">$this</token>
    <token name="T_OBJECT_OPERATOR">-&gt;</token>
    <token name="T_STRING">_options</token>
    <token name="T_PHPDOX_OPEN_SQUARE">[</token>
    <token name="T_CONSTANT_ENCAPSED_STRING">'close_esc'</token>
    <token name="T_PHPDOX_CLOSE_SQUARE">]</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_PHPDOX_EQUAL">=</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_CONSTANT_ENCAPSED_STRING">"\\"</token>
    <token name="T_PHPDOX_DOT">.</token>
    <token name="T_VARIABLE">$this</token>
    <token name="T_OBJECT_OPERATOR">-&gt;</token>
    <token name="T_STRING">_options</token>
    <token name="T_PHPDOX_OPEN_SQUARE">[</token>
    <token name="T_CONSTANT_ENCAPSED_STRING">'close'</token>
    <token name="T_PHPDOX_CLOSE_SQUARE">]</token>
    <token name="T_PHPDOX_SEMICOLON">;</token>
  </line>
  <line no="163">
    <token name="T_WHITESPACE">		</token>
    <token name="T_PHPDOX_CLOSE_CURLY">}</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_ELSE">else</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_PHPDOX_OPEN_CURLY">{</token>
  </line>
  <line no="164">
    <token name="T_WHITESPACE">			</token>
    <token name="T_VARIABLE">$this</token>
    <token name="T_OBJECT_OPERATOR">-&gt;</token>
    <token name="T_STRING">_options</token>
    <token name="T_PHPDOX_OPEN_SQUARE">[</token>
    <token name="T_CONSTANT_ENCAPSED_STRING">'close_esc'</token>
    <token name="T_PHPDOX_CLOSE_SQUARE">]</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_PHPDOX_EQUAL">=</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_VARIABLE">$this</token>
    <token name="T_OBJECT_OPERATOR">-&gt;</token>
    <token name="T_STRING">_options</token>
    <token name="T_PHPDOX_OPEN_SQUARE">[</token>
    <token name="T_CONSTANT_ENCAPSED_STRING">'close'</token>
    <token name="T_PHPDOX_CLOSE_SQUARE">]</token>
    <token name="T_PHPDOX_SEMICOLON">;</token>
  </line>
  <line no="165">
    <token name="T_WHITESPACE">		</token>
    <token name="T_PHPDOX_CLOSE_CURLY">}</token>
  </line>
  <line no="166"/>
  <line no="167">
    <token name="T_WHITESPACE">		</token>
    <token name="T_COMMENT">// set the options back so that child classes can use them */</token>
  </line>
  <line no="168">
    <token name="T_WHITESPACE">		</token>
    <token name="T_VARIABLE">$baseoptions</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_PHPDOX_EQUAL">=</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_VARIABLE">$this</token>
    <token name="T_OBJECT_OPERATOR">-&gt;</token>
    <token name="T_STRING">_options</token>
    <token name="T_PHPDOX_SEMICOLON">;</token>
  </line>
  <line no="169">
    <token name="T_WHITESPACE">		</token>
    <token name="T_UNSET">unset</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_VARIABLE">$baseoptions</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_PHPDOX_SEMICOLON">;</token>
  </line>
  <line no="170"/>
  <line no="171">
    <token name="T_WHITESPACE">		</token>
    <token name="T_COMMENT">// return if this is a subclass</token>
  </line>
  <line no="172">
    <token name="T_WHITESPACE">		</token>
    <token name="T_IF">if</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_STRING">is_subclass_of</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_VARIABLE">$this</token>
    <token name="T_PHPDOX_COMMA">,</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_CONSTANT_ENCAPSED_STRING">'SSHTMLBBCodeParser_Filter'</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_PHPDOX_OPEN_CURLY">{</token>
  </line>
  <line no="173">
    <token name="T_WHITESPACE">			</token>
    <token name="T_RETURN">return</token>
    <token name="T_PHPDOX_SEMICOLON">;</token>
  </line>
  <line no="174">
    <token name="T_WHITESPACE">		</token>
    <token name="T_PHPDOX_CLOSE_CURLY">}</token>
  </line>
  <line no="175"/>
  <line no="176">
    <token name="T_WHITESPACE">		</token>
    <token name="T_COMMENT">// extract the definedTags from subclasses */</token>
  </line>
  <line no="177">
    <token name="T_WHITESPACE">		</token>
    <token name="T_VARIABLE">$this</token>
    <token name="T_OBJECT_OPERATOR">-&gt;</token>
    <token name="T_STRING">addFilters</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_VARIABLE">$this</token>
    <token name="T_OBJECT_OPERATOR">-&gt;</token>
    <token name="T_STRING">_options</token>
    <token name="T_PHPDOX_OPEN_SQUARE">[</token>
    <token name="T_CONSTANT_ENCAPSED_STRING">'filters'</token>
    <token name="T_PHPDOX_CLOSE_SQUARE">]</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_PHPDOX_SEMICOLON">;</token>
  </line>
  <line no="178">
    <token name="T_WHITESPACE">	</token>
    <token name="T_PHPDOX_CLOSE_CURLY">}</token>
  </line>
  <line no="179">
    <token name="T_WHITESPACE">	</token>
  </line>
  <line no="180">
    <token name="T_WHITESPACE">	</token>
    <token name="T_STATIC">static</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_FUNCTION">function</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_PHPDOX_AMPERSAND">&amp;</token>
    <token name="T_STRING">getStaticProperty</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_VARIABLE">$class</token>
    <token name="T_PHPDOX_COMMA">,</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_VARIABLE">$var</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
  </line>
  <line no="181">
    <token name="T_WHITESPACE">	</token>
    <token name="T_PHPDOX_OPEN_CURLY">{</token>
  </line>
  <line no="182">
    <token name="T_WHITESPACE">		</token>
    <token name="T_STATIC">static</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_VARIABLE">$properties</token>
    <token name="T_PHPDOX_SEMICOLON">;</token>
  </line>
  <line no="183">
    <token name="T_WHITESPACE">		</token>
    <token name="T_IF">if</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_PHPDOX_EXCLAMATION_MARK">!</token>
    <token name="T_ISSET">isset</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_VARIABLE">$properties</token>
    <token name="T_PHPDOX_OPEN_SQUARE">[</token>
    <token name="T_VARIABLE">$class</token>
    <token name="T_PHPDOX_CLOSE_SQUARE">]</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_PHPDOX_OPEN_CURLY">{</token>
  </line>
  <line no="184">
    <token name="T_WHITESPACE">			</token>
    <token name="T_VARIABLE">$properties</token>
    <token name="T_PHPDOX_OPEN_SQUARE">[</token>
    <token name="T_VARIABLE">$class</token>
    <token name="T_PHPDOX_CLOSE_SQUARE">]</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_PHPDOX_EQUAL">=</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_ARRAY">array</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_PHPDOX_SEMICOLON">;</token>
  </line>
  <line no="185">
    <token name="T_WHITESPACE">		</token>
    <token name="T_PHPDOX_CLOSE_CURLY">}</token>
  </line>
  <line no="186">
    <token name="T_WHITESPACE">		</token>
    <token name="T_IF">if</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_PHPDOX_EXCLAMATION_MARK">!</token>
    <token name="T_STRING">array_key_exists</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_VARIABLE">$var</token>
    <token name="T_PHPDOX_COMMA">,</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_VARIABLE">$properties</token>
    <token name="T_PHPDOX_OPEN_SQUARE">[</token>
    <token name="T_VARIABLE">$class</token>
    <token name="T_PHPDOX_CLOSE_SQUARE">]</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_PHPDOX_OPEN_CURLY">{</token>
  </line>
  <line no="187">
    <token name="T_WHITESPACE">			</token>
    <token name="T_VARIABLE">$properties</token>
    <token name="T_PHPDOX_OPEN_SQUARE">[</token>
    <token name="T_VARIABLE">$class</token>
    <token name="T_PHPDOX_CLOSE_SQUARE">]</token>
    <token name="T_PHPDOX_OPEN_SQUARE">[</token>
    <token name="T_VARIABLE">$var</token>
    <token name="T_PHPDOX_CLOSE_SQUARE">]</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_PHPDOX_EQUAL">=</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STRING">null</token>
    <token name="T_PHPDOX_SEMICOLON">;</token>
  </line>
  <line no="188">
    <token name="T_WHITESPACE">		</token>
    <token name="T_PHPDOX_CLOSE_CURLY">}</token>
  </line>
  <line no="189">
    <token name="T_WHITESPACE">		</token>
    <token name="T_RETURN">return</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_VARIABLE">$properties</token>
    <token name="T_PHPDOX_OPEN_SQUARE">[</token>
    <token name="T_VARIABLE">$class</token>
    <token name="T_PHPDOX_CLOSE_SQUARE">]</token>
    <token name="T_PHPDOX_OPEN_SQUARE">[</token>
    <token name="T_VARIABLE">$var</token>
    <token name="T_PHPDOX_CLOSE_SQUARE">]</token>
    <token name="T_PHPDOX_SEMICOLON">;</token>
  </line>
  <line no="190">
    <token name="T_WHITESPACE">	</token>
    <token name="T_PHPDOX_CLOSE_CURLY">}</token>
  </line>
  <line no="191"/>
  <line no="192">
    <token name="T_WHITESPACE">	</token>
    <token name="T_DOC_COMMENT">/**</token>
  </line>
  <line no="193">
    <token name="T_DOC_COMMENT">	 * Option setter</token>
  </line>
  <line no="194">
    <token name="T_DOC_COMMENT">	 *</token>
  </line>
  <line no="195">
    <token name="T_DOC_COMMENT">	 * @param string option name</token>
  </line>
  <line no="196">
    <token name="T_DOC_COMMENT">	 * @param mixed  option value</token>
  </line>
  <line no="197">
    <token name="T_DOC_COMMENT">	 * @author Lorenzo Alberton &lt;l.alberton@quipo.it&gt;</token>
  </line>
  <line no="198">
    <token name="T_DOC_COMMENT">	 */</token>
  </line>
  <line no="199">
    <token name="T_WHITESPACE">	</token>
    <token name="T_PUBLIC">public</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_FUNCTION">function</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STRING">setOption</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_VARIABLE">$name</token>
    <token name="T_PHPDOX_COMMA">,</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_VARIABLE">$value</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
  </line>
  <line no="200">
    <token name="T_WHITESPACE">	</token>
    <token name="T_PHPDOX_OPEN_CURLY">{</token>
  </line>
  <line no="201">
    <token name="T_WHITESPACE">		</token>
    <token name="T_VARIABLE">$this</token>
    <token name="T_OBJECT_OPERATOR">-&gt;</token>
    <token name="T_STRING">_options</token>
    <token name="T_PHPDOX_OPEN_SQUARE">[</token>
    <token name="T_VARIABLE">$name</token>
    <token name="T_PHPDOX_CLOSE_SQUARE">]</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_PHPDOX_EQUAL">=</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_VARIABLE">$value</token>
    <token name="T_PHPDOX_SEMICOLON">;</token>
  </line>
  <line no="202">
    <token name="T_WHITESPACE">	</token>
    <token name="T_PHPDOX_CLOSE_CURLY">}</token>
  </line>
  <line no="203"/>
  <line no="204">
    <token name="T_WHITESPACE">	</token>
    <token name="T_DOC_COMMENT">/**</token>
  </line>
  <line no="205">
    <token name="T_DOC_COMMENT">	 * Add a new filter</token>
  </line>
  <line no="206">
    <token name="T_DOC_COMMENT">	 *</token>
  </line>
  <line no="207">
    <token name="T_DOC_COMMENT">	 * @param string filter</token>
  </line>
  <line no="208">
    <token name="T_DOC_COMMENT">	 * @author Lorenzo Alberton &lt;l.alberton@quipo.it&gt;</token>
  </line>
  <line no="209">
    <token name="T_DOC_COMMENT">	 */</token>
  </line>
  <line no="210">
    <token name="T_WHITESPACE">	</token>
    <token name="T_PUBLIC">public</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_FUNCTION">function</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STRING">addFilter</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_VARIABLE">$filter</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
  </line>
  <line no="211">
    <token name="T_WHITESPACE">	</token>
    <token name="T_PHPDOX_OPEN_CURLY">{</token>
  </line>
  <line no="212">
    <token name="T_WHITESPACE">		</token>
    <token name="T_VARIABLE">$filter</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_PHPDOX_EQUAL">=</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STRING">ucfirst</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_VARIABLE">$filter</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_PHPDOX_SEMICOLON">;</token>
  </line>
  <line no="213">
    <token name="T_WHITESPACE">		</token>
    <token name="T_IF">if</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_PHPDOX_EXCLAMATION_MARK">!</token>
    <token name="T_STRING">array_key_exists</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_VARIABLE">$filter</token>
    <token name="T_PHPDOX_COMMA">,</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_VARIABLE">$this</token>
    <token name="T_OBJECT_OPERATOR">-&gt;</token>
    <token name="T_STRING">_filters</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_PHPDOX_OPEN_CURLY">{</token>
  </line>
  <line no="214">
    <token name="T_WHITESPACE">			</token>
    <token name="T_VARIABLE">$class</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_PHPDOX_EQUAL">=</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_CONSTANT_ENCAPSED_STRING">'SSHTMLBBCodeParser_Filter_'</token>
    <token name="T_PHPDOX_DOT">.</token>
    <token name="T_VARIABLE">$filter</token>
    <token name="T_PHPDOX_SEMICOLON">;</token>
  </line>
  <line no="215">
    <token name="T_WHITESPACE">			</token>
    <token name="T_IF">if</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_STRING">fopen</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_CONSTANT_ENCAPSED_STRING">'BBCodeParser/Filter/'</token>
    <token name="T_PHPDOX_DOT">.</token>
    <token name="T_VARIABLE">$filter</token>
    <token name="T_PHPDOX_DOT">.</token>
    <token name="T_CONSTANT_ENCAPSED_STRING">'.php'</token>
    <token name="T_PHPDOX_COMMA">,</token>
    <token name="T_CONSTANT_ENCAPSED_STRING">'r'</token>
    <token name="T_PHPDOX_COMMA">,</token>
    <token name="T_STRING">true</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_PHPDOX_OPEN_CURLY">{</token>
    <token name="T_WHITESPACE"> </token>
  </line>
  <line no="216">
    <token name="T_WHITESPACE">				</token>
    <token name="T_INCLUDE_ONCE">include_once</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_CONSTANT_ENCAPSED_STRING">'BBCodeParser/Filter/'</token>
    <token name="T_PHPDOX_DOT">.</token>
    <token name="T_VARIABLE">$filter</token>
    <token name="T_PHPDOX_DOT">.</token>
    <token name="T_CONSTANT_ENCAPSED_STRING">'.php'</token>
    <token name="T_PHPDOX_SEMICOLON">;</token>
    <token name="T_WHITESPACE"> </token>
  </line>
  <line no="217">
    <token name="T_WHITESPACE">			</token>
    <token name="T_PHPDOX_CLOSE_CURLY">}</token>
  </line>
  <line no="218">
    <token name="T_WHITESPACE">			</token>
    <token name="T_IF">if</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_PHPDOX_EXCLAMATION_MARK">!</token>
    <token name="T_STRING">class_exists</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_VARIABLE">$class</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_PHPDOX_OPEN_CURLY">{</token>
  </line>
  <line no="219"/>
  <line no="220">
    <token name="T_WHITESPACE">				</token>
    <token name="T_COMMENT">//PEAR::raiseError("Failed to load filter $filter", null, PEAR_ERROR_DIE);</token>
  </line>
  <line no="221">
    <token name="T_WHITESPACE">			</token>
    <token name="T_PHPDOX_CLOSE_CURLY">}</token>
  </line>
  <line no="222">
    <token name="T_WHITESPACE">			</token>
    <token name="T_ELSE">else</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_PHPDOX_OPEN_CURLY">{</token>
  </line>
  <line no="223">
    <token name="T_WHITESPACE">				</token>
    <token name="T_VARIABLE">$this</token>
    <token name="T_OBJECT_OPERATOR">-&gt;</token>
    <token name="T_STRING">_filters</token>
    <token name="T_PHPDOX_OPEN_SQUARE">[</token>
    <token name="T_VARIABLE">$filter</token>
    <token name="T_PHPDOX_CLOSE_SQUARE">]</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_PHPDOX_EQUAL">=</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_NEW">new</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_VARIABLE">$class</token>
    <token name="T_PHPDOX_SEMICOLON">;</token>
    <token name="T_WHITESPACE"> </token>
  </line>
  <line no="224">
    <token name="T_WHITESPACE">				</token>
    <token name="T_VARIABLE">$this</token>
    <token name="T_OBJECT_OPERATOR">-&gt;</token>
    <token name="T_STRING">_definedTags</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_PHPDOX_EQUAL">=</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STRING">array_merge</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_WHITESPACE"> </token>
  </line>
  <line no="225">
    <token name="T_WHITESPACE">					</token>
    <token name="T_VARIABLE">$this</token>
    <token name="T_OBJECT_OPERATOR">-&gt;</token>
    <token name="T_STRING">_definedTags</token>
    <token name="T_PHPDOX_COMMA">,</token>
    <token name="T_WHITESPACE"> </token>
  </line>
  <line no="226">
    <token name="T_WHITESPACE">					</token>
    <token name="T_VARIABLE">$this</token>
    <token name="T_OBJECT_OPERATOR">-&gt;</token>
    <token name="T_STRING">_filters</token>
    <token name="T_PHPDOX_OPEN_SQUARE">[</token>
    <token name="T_VARIABLE">$filter</token>
    <token name="T_PHPDOX_CLOSE_SQUARE">]</token>
    <token name="T_OBJECT_OPERATOR">-&gt;</token>
    <token name="T_STRING">_definedTags</token>
    <token name="T_WHITESPACE"> </token>
  </line>
  <line no="227">
    <token name="T_WHITESPACE">				</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_PHPDOX_SEMICOLON">;</token>
  </line>
  <line no="228">
    <token name="T_WHITESPACE">			</token>
    <token name="T_PHPDOX_CLOSE_CURLY">}</token>
  </line>
  <line no="229">
    <token name="T_WHITESPACE">		</token>
    <token name="T_PHPDOX_CLOSE_CURLY">}</token>
  </line>
  <line no="230"/>
  <line no="231">
    <token name="T_WHITESPACE">	</token>
    <token name="T_PHPDOX_CLOSE_CURLY">}</token>
  </line>
  <line no="232"/>
  <line no="233">
    <token name="T_WHITESPACE">	</token>
    <token name="T_DOC_COMMENT">/**</token>
  </line>
  <line no="234">
    <token name="T_DOC_COMMENT">	 * Remove an existing filter</token>
  </line>
  <line no="235">
    <token name="T_DOC_COMMENT">	 *</token>
  </line>
  <line no="236">
    <token name="T_DOC_COMMENT">	 * @param string $filter</token>
  </line>
  <line no="237">
    <token name="T_DOC_COMMENT">	 * @author Lorenzo Alberton &lt;l.alberton@quipo.it&gt;</token>
  </line>
  <line no="238">
    <token name="T_DOC_COMMENT">	 */</token>
  </line>
  <line no="239">
    <token name="T_WHITESPACE">	</token>
    <token name="T_PUBLIC">public</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_FUNCTION">function</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STRING">removeFilter</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_VARIABLE">$filter</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
  </line>
  <line no="240">
    <token name="T_WHITESPACE">	</token>
    <token name="T_PHPDOX_OPEN_CURLY">{</token>
  </line>
  <line no="241">
    <token name="T_WHITESPACE">		</token>
    <token name="T_VARIABLE">$filter</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_PHPDOX_EQUAL">=</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STRING">ucfirst</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_STRING">trim</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_VARIABLE">$filter</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_PHPDOX_SEMICOLON">;</token>
  </line>
  <line no="242">
    <token name="T_WHITESPACE">		</token>
    <token name="T_IF">if</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_PHPDOX_EXCLAMATION_MARK">!</token>
    <token name="T_EMPTY">empty</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_VARIABLE">$filter</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_BOOLEAN_AND">&amp;&amp;</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STRING">array_key_exists</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_VARIABLE">$filter</token>
    <token name="T_PHPDOX_COMMA">,</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_VARIABLE">$this</token>
    <token name="T_OBJECT_OPERATOR">-&gt;</token>
    <token name="T_STRING">_filters</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_PHPDOX_OPEN_CURLY">{</token>
  </line>
  <line no="243">
    <token name="T_WHITESPACE">			</token>
    <token name="T_UNSET">unset</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_VARIABLE">$this</token>
    <token name="T_OBJECT_OPERATOR">-&gt;</token>
    <token name="T_STRING">_filters</token>
    <token name="T_PHPDOX_OPEN_SQUARE">[</token>
    <token name="T_VARIABLE">$filter</token>
    <token name="T_PHPDOX_CLOSE_SQUARE">]</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_PHPDOX_SEMICOLON">;</token>
  </line>
  <line no="244">
    <token name="T_WHITESPACE">		</token>
    <token name="T_PHPDOX_CLOSE_CURLY">}</token>
  </line>
  <line no="245">
    <token name="T_WHITESPACE">		</token>
    <token name="T_COMMENT">// also remove the related $this-&gt;_definedTags for this filter,</token>
  </line>
  <line no="246">
    <token name="T_WHITESPACE">		</token>
    <token name="T_COMMENT">// preserving the others</token>
  </line>
  <line no="247">
    <token name="T_WHITESPACE">		</token>
    <token name="T_VARIABLE">$this</token>
    <token name="T_OBJECT_OPERATOR">-&gt;</token>
    <token name="T_STRING">_definedTags</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_PHPDOX_EQUAL">=</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_ARRAY">array</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_PHPDOX_SEMICOLON">;</token>
  </line>
  <line no="248">
    <token name="T_WHITESPACE">		</token>
    <token name="T_FOREACH">foreach</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_STRING">array_keys</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_VARIABLE">$this</token>
    <token name="T_OBJECT_OPERATOR">-&gt;</token>
    <token name="T_STRING">_filters</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_AS">as</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_VARIABLE">$filter</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_PHPDOX_OPEN_CURLY">{</token>
  </line>
  <line no="249">
    <token name="T_WHITESPACE">			</token>
    <token name="T_VARIABLE">$this</token>
    <token name="T_OBJECT_OPERATOR">-&gt;</token>
    <token name="T_STRING">_definedTags</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_PHPDOX_EQUAL">=</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STRING">array_merge</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
  </line>
  <line no="250">
    <token name="T_WHITESPACE">				</token>
    <token name="T_VARIABLE">$this</token>
    <token name="T_OBJECT_OPERATOR">-&gt;</token>
    <token name="T_STRING">_definedTags</token>
    <token name="T_PHPDOX_COMMA">,</token>
  </line>
  <line no="251">
    <token name="T_WHITESPACE">				</token>
    <token name="T_VARIABLE">$this</token>
    <token name="T_OBJECT_OPERATOR">-&gt;</token>
    <token name="T_STRING">_filters</token>
    <token name="T_PHPDOX_OPEN_SQUARE">[</token>
    <token name="T_VARIABLE">$filter</token>
    <token name="T_PHPDOX_CLOSE_SQUARE">]</token>
    <token name="T_OBJECT_OPERATOR">-&gt;</token>
    <token name="T_STRING">_definedTags</token>
  </line>
  <line no="252">
    <token name="T_WHITESPACE">			</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_PHPDOX_SEMICOLON">;</token>
  </line>
  <line no="253">
    <token name="T_WHITESPACE">		</token>
    <token name="T_PHPDOX_CLOSE_CURLY">}</token>
  </line>
  <line no="254">
    <token name="T_WHITESPACE">	</token>
    <token name="T_PHPDOX_CLOSE_CURLY">}</token>
  </line>
  <line no="255"/>
  <line no="256">
    <token name="T_WHITESPACE">	</token>
    <token name="T_DOC_COMMENT">/**</token>
  </line>
  <line no="257">
    <token name="T_DOC_COMMENT">	 * Add new filters</token>
  </line>
  <line no="258">
    <token name="T_DOC_COMMENT">	 *</token>
  </line>
  <line no="259">
    <token name="T_DOC_COMMENT">	 * @param mixed (array or string)</token>
  </line>
  <line no="260">
    <token name="T_DOC_COMMENT">	 * @return boolean true if all ok, false if not.</token>
  </line>
  <line no="261">
    <token name="T_DOC_COMMENT">	 * @author Lorenzo Alberton &lt;l.alberton@quipo.it&gt;</token>
  </line>
  <line no="262">
    <token name="T_DOC_COMMENT">	 */</token>
  </line>
  <line no="263">
    <token name="T_WHITESPACE">	</token>
    <token name="T_PUBLIC">public</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_FUNCTION">function</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STRING">addFilters</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_VARIABLE">$filters</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
  </line>
  <line no="264">
    <token name="T_WHITESPACE">	</token>
    <token name="T_PHPDOX_OPEN_CURLY">{</token>
  </line>
  <line no="265">
    <token name="T_WHITESPACE">		</token>
    <token name="T_IF">if</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_STRING">is_string</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_VARIABLE">$filters</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_PHPDOX_OPEN_CURLY">{</token>
  </line>
  <line no="266">
    <token name="T_WHITESPACE">			</token>
    <token name="T_COMMENT">//comma-separated list</token>
  </line>
  <line no="267">
    <token name="T_WHITESPACE">			</token>
    <token name="T_IF">if</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_STRING">strpos</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_VARIABLE">$filters</token>
    <token name="T_PHPDOX_COMMA">,</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_CONSTANT_ENCAPSED_STRING">','</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_IS_NOT_IDENTICAL">!==</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STRING">false</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_PHPDOX_OPEN_CURLY">{</token>
  </line>
  <line no="268">
    <token name="T_WHITESPACE">				</token>
    <token name="T_VARIABLE">$filters</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_PHPDOX_EQUAL">=</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STRING">explode</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_CONSTANT_ENCAPSED_STRING">','</token>
    <token name="T_PHPDOX_COMMA">,</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_VARIABLE">$filters</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_PHPDOX_SEMICOLON">;</token>
  </line>
  <line no="269">
    <token name="T_WHITESPACE">			</token>
    <token name="T_PHPDOX_CLOSE_CURLY">}</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_ELSE">else</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_PHPDOX_OPEN_CURLY">{</token>
  </line>
  <line no="270">
    <token name="T_WHITESPACE">				</token>
    <token name="T_VARIABLE">$filters</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_PHPDOX_EQUAL">=</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_ARRAY">array</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_VARIABLE">$filters</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_PHPDOX_SEMICOLON">;</token>
  </line>
  <line no="271">
    <token name="T_WHITESPACE">			</token>
    <token name="T_PHPDOX_CLOSE_CURLY">}</token>
  </line>
  <line no="272">
    <token name="T_WHITESPACE">		</token>
    <token name="T_PHPDOX_CLOSE_CURLY">}</token>
  </line>
  <line no="273">
    <token name="T_WHITESPACE">		</token>
    <token name="T_IF">if</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_PHPDOX_EXCLAMATION_MARK">!</token>
    <token name="T_STRING">is_array</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_VARIABLE">$filters</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_PHPDOX_OPEN_CURLY">{</token>
  </line>
  <line no="274">
    <token name="T_WHITESPACE">			</token>
    <token name="T_COMMENT">//invalid format</token>
  </line>
  <line no="275">
    <token name="T_WHITESPACE">			</token>
    <token name="T_RETURN">return</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STRING">false</token>
    <token name="T_PHPDOX_SEMICOLON">;</token>
  </line>
  <line no="276">
    <token name="T_WHITESPACE">		</token>
    <token name="T_PHPDOX_CLOSE_CURLY">}</token>
  </line>
  <line no="277">
    <token name="T_WHITESPACE">		</token>
    <token name="T_FOREACH">foreach</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_VARIABLE">$filters</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_AS">as</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_VARIABLE">$filter</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_PHPDOX_OPEN_CURLY">{</token>
  </line>
  <line no="278">
    <token name="T_WHITESPACE">			</token>
    <token name="T_IF">if</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_STRING">trim</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_VARIABLE">$filter</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_PHPDOX_OPEN_CURLY">{</token>
  </line>
  <line no="279">
    <token name="T_WHITESPACE">				</token>
    <token name="T_VARIABLE">$this</token>
    <token name="T_OBJECT_OPERATOR">-&gt;</token>
    <token name="T_STRING">addFilter</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_VARIABLE">$filter</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_PHPDOX_SEMICOLON">;</token>
  </line>
  <line no="280">
    <token name="T_WHITESPACE">			</token>
    <token name="T_PHPDOX_CLOSE_CURLY">}</token>
  </line>
  <line no="281">
    <token name="T_WHITESPACE">		</token>
    <token name="T_PHPDOX_CLOSE_CURLY">}</token>
  </line>
  <line no="282">
    <token name="T_WHITESPACE">		</token>
    <token name="T_RETURN">return</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STRING">true</token>
    <token name="T_PHPDOX_SEMICOLON">;</token>
  </line>
  <line no="283">
    <token name="T_WHITESPACE">	</token>
    <token name="T_PHPDOX_CLOSE_CURLY">}</token>
  </line>
  <line no="284"/>
  <line no="285">
    <token name="T_WHITESPACE">	</token>
    <token name="T_DOC_COMMENT">/**</token>
  </line>
  <line no="286">
    <token name="T_DOC_COMMENT">	 * Executes statements before the actual array building starts</token>
  </line>
  <line no="287">
    <token name="T_DOC_COMMENT">	 *</token>
  </line>
  <line no="288">
    <token name="T_DOC_COMMENT">	 * This method should be overwritten in a filter if you want to do</token>
  </line>
  <line no="289">
    <token name="T_DOC_COMMENT">	 * something before the parsing process starts. This can be useful to</token>
  </line>
  <line no="290">
    <token name="T_DOC_COMMENT">	 * allow certain short alternative tags which then can be converted into</token>
  </line>
  <line no="291">
    <token name="T_DOC_COMMENT">	 * proper tags with preg_replace() calls.</token>
  </line>
  <line no="292">
    <token name="T_DOC_COMMENT">	 * The main class walks through all the filters and and calls this</token>
  </line>
  <line no="293">
    <token name="T_DOC_COMMENT">	 * method. The filters should modify their private $_preparsed</token>
  </line>
  <line no="294">
    <token name="T_DOC_COMMENT">	 * variable, with input from $_text.</token>
  </line>
  <line no="295">
    <token name="T_DOC_COMMENT">	 *</token>
  </line>
  <line no="296">
    <token name="T_DOC_COMMENT">	 * @return   none</token>
  </line>
  <line no="297">
    <token name="T_DOC_COMMENT">	 * @access   private</token>
  </line>
  <line no="298">
    <token name="T_DOC_COMMENT">	 * @see      $_text</token>
  </line>
  <line no="299">
    <token name="T_DOC_COMMENT">	 * @author   Stijn de Reede  &lt;sjr@gmx.co.uk&gt;</token>
  </line>
  <line no="300">
    <token name="T_DOC_COMMENT">	 */</token>
  </line>
  <line no="301">
    <token name="T_WHITESPACE">	</token>
    <token name="T_PUBLIC">public</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_FUNCTION">function</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STRING">_preparse</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
  </line>
  <line no="302">
    <token name="T_WHITESPACE">	</token>
    <token name="T_PHPDOX_OPEN_CURLY">{</token>
  </line>
  <line no="303">
    <token name="T_WHITESPACE">		</token>
    <token name="T_COMMENT">// default: assign _text to _preparsed, to be overwritten by filters</token>
  </line>
  <line no="304">
    <token name="T_WHITESPACE">		</token>
    <token name="T_VARIABLE">$this</token>
    <token name="T_OBJECT_OPERATOR">-&gt;</token>
    <token name="T_STRING">_preparsed</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_PHPDOX_EQUAL">=</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_VARIABLE">$this</token>
    <token name="T_OBJECT_OPERATOR">-&gt;</token>
    <token name="T_STRING">_text</token>
    <token name="T_PHPDOX_SEMICOLON">;</token>
  </line>
  <line no="305"/>
  <line no="306">
    <token name="T_WHITESPACE">		</token>
    <token name="T_COMMENT">// return if this is a subclass</token>
  </line>
  <line no="307">
    <token name="T_WHITESPACE">		</token>
    <token name="T_IF">if</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_STRING">is_subclass_of</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_VARIABLE">$this</token>
    <token name="T_PHPDOX_COMMA">,</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_CONSTANT_ENCAPSED_STRING">'SSHTMLBBCodeParser'</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_PHPDOX_OPEN_CURLY">{</token>
  </line>
  <line no="308">
    <token name="T_WHITESPACE">			</token>
    <token name="T_RETURN">return</token>
    <token name="T_PHPDOX_SEMICOLON">;</token>
  </line>
  <line no="309">
    <token name="T_WHITESPACE">		</token>
    <token name="T_PHPDOX_CLOSE_CURLY">}</token>
  </line>
  <line no="310"/>
  <line no="311">
    <token name="T_WHITESPACE">		</token>
    <token name="T_COMMENT">// walk through the filters and execute _preparse</token>
  </line>
  <line no="312">
    <token name="T_WHITESPACE">		</token>
    <token name="T_FOREACH">foreach</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_VARIABLE">$this</token>
    <token name="T_OBJECT_OPERATOR">-&gt;</token>
    <token name="T_STRING">_filters</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_AS">as</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_VARIABLE">$filter</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_PHPDOX_OPEN_CURLY">{</token>
  </line>
  <line no="313">
    <token name="T_WHITESPACE">			</token>
    <token name="T_VARIABLE">$filter</token>
    <token name="T_OBJECT_OPERATOR">-&gt;</token>
    <token name="T_STRING">setText</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_VARIABLE">$this</token>
    <token name="T_OBJECT_OPERATOR">-&gt;</token>
    <token name="T_STRING">_preparsed</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_PHPDOX_SEMICOLON">;</token>
  </line>
  <line no="314">
    <token name="T_WHITESPACE">			</token>
    <token name="T_VARIABLE">$filter</token>
    <token name="T_OBJECT_OPERATOR">-&gt;</token>
    <token name="T_STRING">_preparse</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_PHPDOX_SEMICOLON">;</token>
  </line>
  <line no="315">
    <token name="T_WHITESPACE">			</token>
    <token name="T_VARIABLE">$this</token>
    <token name="T_OBJECT_OPERATOR">-&gt;</token>
    <token name="T_STRING">_preparsed</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_PHPDOX_EQUAL">=</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_VARIABLE">$filter</token>
    <token name="T_OBJECT_OPERATOR">-&gt;</token>
    <token name="T_STRING">getPreparsed</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_PHPDOX_SEMICOLON">;</token>
  </line>
  <line no="316">
    <token name="T_WHITESPACE">		</token>
    <token name="T_PHPDOX_CLOSE_CURLY">}</token>
  </line>
  <line no="317">
    <token name="T_WHITESPACE">	</token>
    <token name="T_PHPDOX_CLOSE_CURLY">}</token>
  </line>
  <line no="318"/>
  <line no="319">
    <token name="T_WHITESPACE">	</token>
    <token name="T_DOC_COMMENT">/**</token>
  </line>
  <line no="320">
    <token name="T_DOC_COMMENT">	 * Builds the tag array from the input string $_text</token>
  </line>
  <line no="321">
    <token name="T_DOC_COMMENT">	 *</token>
  </line>
  <line no="322">
    <token name="T_DOC_COMMENT">	 * An array consisting of tag and text elements is contructed from the</token>
  </line>
  <line no="323">
    <token name="T_DOC_COMMENT">	 * $_preparsed variable. The method uses _buildTag() to check if a tag is</token>
  </line>
  <line no="324">
    <token name="T_DOC_COMMENT">	 * valid and to build the actual tag to be added to the tag array.</token>
  </line>
  <line no="325">
    <token name="T_DOC_COMMENT">	 *</token>
  </line>
  <line no="326">
    <token name="T_DOC_COMMENT">	 * @todo - rewrite whole method, as this one is old and probably slow</token>
  </line>
  <line no="327">
    <token name="T_DOC_COMMENT">	 *       - see if a recursive method would be better than an iterative one</token>
  </line>
  <line no="328">
    <token name="T_DOC_COMMENT">	 *</token>
  </line>
  <line no="329">
    <token name="T_DOC_COMMENT">	 * @return   none</token>
  </line>
  <line no="330">
    <token name="T_DOC_COMMENT">	 * @access   private</token>
  </line>
  <line no="331">
    <token name="T_DOC_COMMENT">	 * @see      _buildTag()</token>
  </line>
  <line no="332">
    <token name="T_DOC_COMMENT">	 * @see      $_text</token>
  </line>
  <line no="333">
    <token name="T_DOC_COMMENT">	 * @see      $_tagArray</token>
  </line>
  <line no="334">
    <token name="T_DOC_COMMENT">	 * @author   Stijn de Reede  &lt;sjr@gmx.co.uk&gt;</token>
  </line>
  <line no="335">
    <token name="T_DOC_COMMENT">	 */</token>
  </line>
  <line no="336">
    <token name="T_WHITESPACE">	</token>
    <token name="T_PUBLIC">public</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_FUNCTION">function</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STRING">_buildTagArray</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
  </line>
  <line no="337">
    <token name="T_WHITESPACE">	</token>
    <token name="T_PHPDOX_OPEN_CURLY">{</token>
  </line>
  <line no="338">
    <token name="T_WHITESPACE">		</token>
    <token name="T_VARIABLE">$this</token>
    <token name="T_OBJECT_OPERATOR">-&gt;</token>
    <token name="T_STRING">_tagArray</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_PHPDOX_EQUAL">=</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_ARRAY">array</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_PHPDOX_SEMICOLON">;</token>
  </line>
  <line no="339">
    <token name="T_WHITESPACE">		</token>
    <token name="T_VARIABLE">$str</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_PHPDOX_EQUAL">=</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_VARIABLE">$this</token>
    <token name="T_OBJECT_OPERATOR">-&gt;</token>
    <token name="T_STRING">_preparsed</token>
    <token name="T_PHPDOX_SEMICOLON">;</token>
  </line>
  <line no="340">
    <token name="T_WHITESPACE">		</token>
    <token name="T_VARIABLE">$strPos</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_PHPDOX_EQUAL">=</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_LNUMBER">0</token>
    <token name="T_PHPDOX_SEMICOLON">;</token>
  </line>
  <line no="341">
    <token name="T_WHITESPACE">		</token>
    <token name="T_VARIABLE">$strLength</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_PHPDOX_EQUAL">=</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STRING">strlen</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_VARIABLE">$str</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_PHPDOX_SEMICOLON">;</token>
  </line>
  <line no="342"/>
  <line no="343">
    <token name="T_WHITESPACE">		</token>
    <token name="T_WHILE">while</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_VARIABLE">$strPos</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_PHPDOX_LT">&lt;</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_VARIABLE">$strLength</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_PHPDOX_OPEN_CURLY">{</token>
  </line>
  <line no="344">
    <token name="T_WHITESPACE">			</token>
    <token name="T_VARIABLE">$tag</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_PHPDOX_EQUAL">=</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_ARRAY">array</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_PHPDOX_SEMICOLON">;</token>
  </line>
  <line no="345">
    <token name="T_WHITESPACE">			</token>
    <token name="T_VARIABLE">$openPos</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_PHPDOX_EQUAL">=</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STRING">strpos</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_VARIABLE">$str</token>
    <token name="T_PHPDOX_COMMA">,</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_VARIABLE">$this</token>
    <token name="T_OBJECT_OPERATOR">-&gt;</token>
    <token name="T_STRING">_options</token>
    <token name="T_PHPDOX_OPEN_SQUARE">[</token>
    <token name="T_CONSTANT_ENCAPSED_STRING">'open'</token>
    <token name="T_PHPDOX_CLOSE_SQUARE">]</token>
    <token name="T_PHPDOX_COMMA">,</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_VARIABLE">$strPos</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_PHPDOX_SEMICOLON">;</token>
  </line>
  <line no="346">
    <token name="T_WHITESPACE">			</token>
    <token name="T_IF">if</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_VARIABLE">$openPos</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_IS_IDENTICAL">===</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STRING">false</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_PHPDOX_OPEN_CURLY">{</token>
  </line>
  <line no="347">
    <token name="T_WHITESPACE">				</token>
    <token name="T_VARIABLE">$openPos</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_PHPDOX_EQUAL">=</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_VARIABLE">$strLength</token>
    <token name="T_PHPDOX_SEMICOLON">;</token>
  </line>
  <line no="348">
    <token name="T_WHITESPACE">				</token>
    <token name="T_VARIABLE">$nextOpenPos</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_PHPDOX_EQUAL">=</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_VARIABLE">$strLength</token>
    <token name="T_PHPDOX_SEMICOLON">;</token>
  </line>
  <line no="349">
    <token name="T_WHITESPACE">			</token>
    <token name="T_PHPDOX_CLOSE_CURLY">}</token>
  </line>
  <line no="350">
    <token name="T_WHITESPACE">			</token>
    <token name="T_IF">if</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_VARIABLE">$openPos</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_PHPDOX_PLUS">+</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_LNUMBER">1</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_PHPDOX_GT">&gt;</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_VARIABLE">$strLength</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_PHPDOX_OPEN_CURLY">{</token>
  </line>
  <line no="351">
    <token name="T_WHITESPACE">				</token>
    <token name="T_VARIABLE">$nextOpenPos</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_PHPDOX_EQUAL">=</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_VARIABLE">$strLength</token>
    <token name="T_PHPDOX_SEMICOLON">;</token>
  </line>
  <line no="352">
    <token name="T_WHITESPACE">			</token>
    <token name="T_PHPDOX_CLOSE_CURLY">}</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_ELSE">else</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_PHPDOX_OPEN_CURLY">{</token>
  </line>
  <line no="353">
    <token name="T_WHITESPACE">				</token>
    <token name="T_VARIABLE">$nextOpenPos</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_PHPDOX_EQUAL">=</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STRING">strpos</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_VARIABLE">$str</token>
    <token name="T_PHPDOX_COMMA">,</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_VARIABLE">$this</token>
    <token name="T_OBJECT_OPERATOR">-&gt;</token>
    <token name="T_STRING">_options</token>
    <token name="T_PHPDOX_OPEN_SQUARE">[</token>
    <token name="T_CONSTANT_ENCAPSED_STRING">'open'</token>
    <token name="T_PHPDOX_CLOSE_SQUARE">]</token>
    <token name="T_PHPDOX_COMMA">,</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_VARIABLE">$openPos</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_PHPDOX_PLUS">+</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_LNUMBER">1</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_PHPDOX_SEMICOLON">;</token>
  </line>
  <line no="354">
    <token name="T_WHITESPACE">				</token>
    <token name="T_IF">if</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_VARIABLE">$nextOpenPos</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_IS_IDENTICAL">===</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STRING">false</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_PHPDOX_OPEN_CURLY">{</token>
  </line>
  <line no="355">
    <token name="T_WHITESPACE">					</token>
    <token name="T_VARIABLE">$nextOpenPos</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_PHPDOX_EQUAL">=</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_VARIABLE">$strLength</token>
    <token name="T_PHPDOX_SEMICOLON">;</token>
  </line>
  <line no="356">
    <token name="T_WHITESPACE">				</token>
    <token name="T_PHPDOX_CLOSE_CURLY">}</token>
  </line>
  <line no="357">
    <token name="T_WHITESPACE">			</token>
    <token name="T_PHPDOX_CLOSE_CURLY">}</token>
  </line>
  <line no="358">
    <token name="T_WHITESPACE">			</token>
    <token name="T_VARIABLE">$closePos</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_PHPDOX_EQUAL">=</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STRING">strpos</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_VARIABLE">$str</token>
    <token name="T_PHPDOX_COMMA">,</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_VARIABLE">$this</token>
    <token name="T_OBJECT_OPERATOR">-&gt;</token>
    <token name="T_STRING">_options</token>
    <token name="T_PHPDOX_OPEN_SQUARE">[</token>
    <token name="T_CONSTANT_ENCAPSED_STRING">'close'</token>
    <token name="T_PHPDOX_CLOSE_SQUARE">]</token>
    <token name="T_PHPDOX_COMMA">,</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_VARIABLE">$strPos</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_PHPDOX_SEMICOLON">;</token>
  </line>
  <line no="359">
    <token name="T_WHITESPACE">			</token>
    <token name="T_IF">if</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_VARIABLE">$closePos</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_IS_IDENTICAL">===</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STRING">false</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_PHPDOX_OPEN_CURLY">{</token>
  </line>
  <line no="360">
    <token name="T_WHITESPACE">				</token>
    <token name="T_VARIABLE">$closePos</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_PHPDOX_EQUAL">=</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_VARIABLE">$strLength</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_PHPDOX_PLUS">+</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_LNUMBER">1</token>
    <token name="T_PHPDOX_SEMICOLON">;</token>
  </line>
  <line no="361">
    <token name="T_WHITESPACE">			</token>
    <token name="T_PHPDOX_CLOSE_CURLY">}</token>
  </line>
  <line no="362"/>
  <line no="363">
    <token name="T_WHITESPACE">			</token>
    <token name="T_IF">if</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_VARIABLE">$openPos</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_IS_EQUAL">==</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_VARIABLE">$strPos</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_PHPDOX_OPEN_CURLY">{</token>
  </line>
  <line no="364">
    <token name="T_WHITESPACE">				</token>
    <token name="T_IF">if</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_VARIABLE">$nextOpenPos</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_PHPDOX_LT">&lt;</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_VARIABLE">$closePos</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_PHPDOX_OPEN_CURLY">{</token>
  </line>
  <line no="365">
    <token name="T_WHITESPACE">					</token>
    <token name="T_COMMENT">// new open tag before closing tag: treat as text</token>
  </line>
  <line no="366">
    <token name="T_WHITESPACE">					</token>
    <token name="T_VARIABLE">$newPos</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_PHPDOX_EQUAL">=</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_VARIABLE">$nextOpenPos</token>
    <token name="T_PHPDOX_SEMICOLON">;</token>
  </line>
  <line no="367">
    <token name="T_WHITESPACE">					</token>
    <token name="T_VARIABLE">$tag</token>
    <token name="T_PHPDOX_OPEN_SQUARE">[</token>
    <token name="T_CONSTANT_ENCAPSED_STRING">'text'</token>
    <token name="T_PHPDOX_CLOSE_SQUARE">]</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_PHPDOX_EQUAL">=</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STRING">substr</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_VARIABLE">$str</token>
    <token name="T_PHPDOX_COMMA">,</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_VARIABLE">$strPos</token>
    <token name="T_PHPDOX_COMMA">,</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_VARIABLE">$nextOpenPos</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_PHPDOX_MINUS">-</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_VARIABLE">$strPos</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_PHPDOX_SEMICOLON">;</token>
  </line>
  <line no="368">
    <token name="T_WHITESPACE">					</token>
    <token name="T_VARIABLE">$tag</token>
    <token name="T_PHPDOX_OPEN_SQUARE">[</token>
    <token name="T_CONSTANT_ENCAPSED_STRING">'type'</token>
    <token name="T_PHPDOX_CLOSE_SQUARE">]</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_PHPDOX_EQUAL">=</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_LNUMBER">0</token>
    <token name="T_PHPDOX_SEMICOLON">;</token>
  </line>
  <line no="369">
    <token name="T_WHITESPACE">				</token>
    <token name="T_PHPDOX_CLOSE_CURLY">}</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_ELSE">else</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_PHPDOX_OPEN_CURLY">{</token>
  </line>
  <line no="370">
    <token name="T_WHITESPACE">					</token>
    <token name="T_COMMENT">// possible valid tag</token>
  </line>
  <line no="371">
    <token name="T_WHITESPACE">					</token>
    <token name="T_VARIABLE">$newPos</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_PHPDOX_EQUAL">=</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_VARIABLE">$closePos</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_PHPDOX_PLUS">+</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_LNUMBER">1</token>
    <token name="T_PHPDOX_SEMICOLON">;</token>
  </line>
  <line no="372">
    <token name="T_WHITESPACE">					</token>
    <token name="T_VARIABLE">$newTag</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_PHPDOX_EQUAL">=</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_VARIABLE">$this</token>
    <token name="T_OBJECT_OPERATOR">-&gt;</token>
    <token name="T_STRING">_buildTag</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_STRING">substr</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_VARIABLE">$str</token>
    <token name="T_PHPDOX_COMMA">,</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_VARIABLE">$strPos</token>
    <token name="T_PHPDOX_COMMA">,</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_VARIABLE">$closePos</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_PHPDOX_MINUS">-</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_VARIABLE">$strPos</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_PHPDOX_PLUS">+</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_LNUMBER">1</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_PHPDOX_SEMICOLON">;</token>
  </line>
  <line no="373">
    <token name="T_WHITESPACE">					</token>
    <token name="T_IF">if</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_VARIABLE">$newTag</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_IS_NOT_IDENTICAL">!==</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STRING">false</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_PHPDOX_OPEN_CURLY">{</token>
  </line>
  <line no="374">
    <token name="T_WHITESPACE">						</token>
    <token name="T_VARIABLE">$tag</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_PHPDOX_EQUAL">=</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_VARIABLE">$newTag</token>
    <token name="T_PHPDOX_SEMICOLON">;</token>
  </line>
  <line no="375">
    <token name="T_WHITESPACE">					</token>
    <token name="T_PHPDOX_CLOSE_CURLY">}</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_ELSE">else</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_PHPDOX_OPEN_CURLY">{</token>
  </line>
  <line no="376">
    <token name="T_WHITESPACE">						</token>
    <token name="T_COMMENT">// no valid tag after all</token>
  </line>
  <line no="377">
    <token name="T_WHITESPACE">						</token>
    <token name="T_VARIABLE">$tag</token>
    <token name="T_PHPDOX_OPEN_SQUARE">[</token>
    <token name="T_CONSTANT_ENCAPSED_STRING">'text'</token>
    <token name="T_PHPDOX_CLOSE_SQUARE">]</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_PHPDOX_EQUAL">=</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STRING">substr</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_VARIABLE">$str</token>
    <token name="T_PHPDOX_COMMA">,</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_VARIABLE">$strPos</token>
    <token name="T_PHPDOX_COMMA">,</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_VARIABLE">$closePos</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_PHPDOX_MINUS">-</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_VARIABLE">$strPos</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_PHPDOX_PLUS">+</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_LNUMBER">1</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_PHPDOX_SEMICOLON">;</token>
  </line>
  <line no="378">
    <token name="T_WHITESPACE">						</token>
    <token name="T_VARIABLE">$tag</token>
    <token name="T_PHPDOX_OPEN_SQUARE">[</token>
    <token name="T_CONSTANT_ENCAPSED_STRING">'type'</token>
    <token name="T_PHPDOX_CLOSE_SQUARE">]</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_PHPDOX_EQUAL">=</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_LNUMBER">0</token>
    <token name="T_PHPDOX_SEMICOLON">;</token>
  </line>
  <line no="379">
    <token name="T_WHITESPACE">					</token>
    <token name="T_PHPDOX_CLOSE_CURLY">}</token>
  </line>
  <line no="380">
    <token name="T_WHITESPACE">				</token>
    <token name="T_PHPDOX_CLOSE_CURLY">}</token>
  </line>
  <line no="381">
    <token name="T_WHITESPACE">			</token>
    <token name="T_PHPDOX_CLOSE_CURLY">}</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_ELSE">else</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_PHPDOX_OPEN_CURLY">{</token>
  </line>
  <line no="382">
    <token name="T_WHITESPACE">				</token>
    <token name="T_COMMENT">// just text</token>
  </line>
  <line no="383">
    <token name="T_WHITESPACE">				</token>
    <token name="T_VARIABLE">$newPos</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_PHPDOX_EQUAL">=</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_VARIABLE">$openPos</token>
    <token name="T_PHPDOX_SEMICOLON">;</token>
  </line>
  <line no="384">
    <token name="T_WHITESPACE">				</token>
    <token name="T_VARIABLE">$tag</token>
    <token name="T_PHPDOX_OPEN_SQUARE">[</token>
    <token name="T_CONSTANT_ENCAPSED_STRING">'text'</token>
    <token name="T_PHPDOX_CLOSE_SQUARE">]</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_PHPDOX_EQUAL">=</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STRING">substr</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_VARIABLE">$str</token>
    <token name="T_PHPDOX_COMMA">,</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_VARIABLE">$strPos</token>
    <token name="T_PHPDOX_COMMA">,</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_VARIABLE">$openPos</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_PHPDOX_MINUS">-</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_VARIABLE">$strPos</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_PHPDOX_SEMICOLON">;</token>
  </line>
  <line no="385">
    <token name="T_WHITESPACE">				</token>
    <token name="T_VARIABLE">$tag</token>
    <token name="T_PHPDOX_OPEN_SQUARE">[</token>
    <token name="T_CONSTANT_ENCAPSED_STRING">'type'</token>
    <token name="T_PHPDOX_CLOSE_SQUARE">]</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_PHPDOX_EQUAL">=</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_LNUMBER">0</token>
    <token name="T_PHPDOX_SEMICOLON">;</token>
  </line>
  <line no="386">
    <token name="T_WHITESPACE">			</token>
    <token name="T_PHPDOX_CLOSE_CURLY">}</token>
  </line>
  <line no="387"/>
  <line no="388">
    <token name="T_WHITESPACE">			</token>
    <token name="T_COMMENT">// join 2 following text elements</token>
  </line>
  <line no="389">
    <token name="T_WHITESPACE">			</token>
    <token name="T_IF">if</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_VARIABLE">$tag</token>
    <token name="T_PHPDOX_OPEN_SQUARE">[</token>
    <token name="T_CONSTANT_ENCAPSED_STRING">'type'</token>
    <token name="T_PHPDOX_CLOSE_SQUARE">]</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_IS_IDENTICAL">===</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_LNUMBER">0</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_BOOLEAN_AND">&amp;&amp;</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_ISSET">isset</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_VARIABLE">$prev</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_BOOLEAN_AND">&amp;&amp;</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_VARIABLE">$prev</token>
    <token name="T_PHPDOX_OPEN_SQUARE">[</token>
    <token name="T_CONSTANT_ENCAPSED_STRING">'type'</token>
    <token name="T_PHPDOX_CLOSE_SQUARE">]</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_IS_IDENTICAL">===</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_LNUMBER">0</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_PHPDOX_OPEN_CURLY">{</token>
  </line>
  <line no="390">
    <token name="T_WHITESPACE">				</token>
    <token name="T_VARIABLE">$tag</token>
    <token name="T_PHPDOX_OPEN_SQUARE">[</token>
    <token name="T_CONSTANT_ENCAPSED_STRING">'text'</token>
    <token name="T_PHPDOX_CLOSE_SQUARE">]</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_PHPDOX_EQUAL">=</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_VARIABLE">$prev</token>
    <token name="T_PHPDOX_OPEN_SQUARE">[</token>
    <token name="T_CONSTANT_ENCAPSED_STRING">'text'</token>
    <token name="T_PHPDOX_CLOSE_SQUARE">]</token>
    <token name="T_PHPDOX_DOT">.</token>
    <token name="T_VARIABLE">$tag</token>
    <token name="T_PHPDOX_OPEN_SQUARE">[</token>
    <token name="T_CONSTANT_ENCAPSED_STRING">'text'</token>
    <token name="T_PHPDOX_CLOSE_SQUARE">]</token>
    <token name="T_PHPDOX_SEMICOLON">;</token>
  </line>
  <line no="391">
    <token name="T_WHITESPACE">				</token>
    <token name="T_STRING">array_pop</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_VARIABLE">$this</token>
    <token name="T_OBJECT_OPERATOR">-&gt;</token>
    <token name="T_STRING">_tagArray</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_PHPDOX_SEMICOLON">;</token>
  </line>
  <line no="392">
    <token name="T_WHITESPACE">			</token>
    <token name="T_PHPDOX_CLOSE_CURLY">}</token>
  </line>
  <line no="393"/>
  <line no="394">
    <token name="T_WHITESPACE">			</token>
    <token name="T_VARIABLE">$this</token>
    <token name="T_OBJECT_OPERATOR">-&gt;</token>
    <token name="T_STRING">_tagArray</token>
    <token name="T_PHPDOX_OPEN_SQUARE">[</token>
    <token name="T_PHPDOX_CLOSE_SQUARE">]</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_PHPDOX_EQUAL">=</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_VARIABLE">$tag</token>
    <token name="T_PHPDOX_SEMICOLON">;</token>
  </line>
  <line no="395">
    <token name="T_WHITESPACE">			</token>
    <token name="T_VARIABLE">$prev</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_PHPDOX_EQUAL">=</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_VARIABLE">$tag</token>
    <token name="T_PHPDOX_SEMICOLON">;</token>
  </line>
  <line no="396">
    <token name="T_WHITESPACE">			</token>
    <token name="T_VARIABLE">$strPos</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_PHPDOX_EQUAL">=</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_VARIABLE">$newPos</token>
    <token name="T_PHPDOX_SEMICOLON">;</token>
  </line>
  <line no="397">
    <token name="T_WHITESPACE">		</token>
    <token name="T_PHPDOX_CLOSE_CURLY">}</token>
  </line>
  <line no="398">
    <token name="T_WHITESPACE">	</token>
    <token name="T_PHPDOX_CLOSE_CURLY">}</token>
  </line>
  <line no="399"/>
  <line no="400">
    <token name="T_WHITESPACE">	</token>
    <token name="T_DOC_COMMENT">/**</token>
  </line>
  <line no="401">
    <token name="T_DOC_COMMENT">	 * Builds a tag from the input string</token>
  </line>
  <line no="402">
    <token name="T_DOC_COMMENT">	 *</token>
  </line>
  <line no="403">
    <token name="T_DOC_COMMENT">	 * This method builds a tag array based on the string it got as an</token>
  </line>
  <line no="404">
    <token name="T_DOC_COMMENT">	 * argument. If the tag is invalid, &lt;false&gt; is returned. The tag</token>
  </line>
  <line no="405">
    <token name="T_DOC_COMMENT">	 * attributes are extracted from the string and stored in the tag</token>
  </line>
  <line no="406">
    <token name="T_DOC_COMMENT">	 * array as an associative array.</token>
  </line>
  <line no="407">
    <token name="T_DOC_COMMENT">	 *</token>
  </line>
  <line no="408">
    <token name="T_DOC_COMMENT">	 * @param    string          string to build tag from</token>
  </line>
  <line no="409">
    <token name="T_DOC_COMMENT">	 * @return   array           tag in array format</token>
  </line>
  <line no="410">
    <token name="T_DOC_COMMENT">	 * @access   private</token>
  </line>
  <line no="411">
    <token name="T_DOC_COMMENT">	 * @see      _buildTagArray()</token>
  </line>
  <line no="412">
    <token name="T_DOC_COMMENT">	 * @author   Stijn de Reede  &lt;sjr@gmx.co.uk&gt;</token>
  </line>
  <line no="413">
    <token name="T_DOC_COMMENT">	 */</token>
  </line>
  <line no="414">
    <token name="T_WHITESPACE">	</token>
    <token name="T_PUBLIC">public</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_FUNCTION">function</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STRING">_buildTag</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_VARIABLE">$str</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
  </line>
  <line no="415">
    <token name="T_WHITESPACE">	</token>
    <token name="T_PHPDOX_OPEN_CURLY">{</token>
  </line>
  <line no="416">
    <token name="T_WHITESPACE">		</token>
    <token name="T_VARIABLE">$tag</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_PHPDOX_EQUAL">=</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_ARRAY">array</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_CONSTANT_ENCAPSED_STRING">'text'</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_DOUBLE_ARROW">=&gt;</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_VARIABLE">$str</token>
    <token name="T_PHPDOX_COMMA">,</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_CONSTANT_ENCAPSED_STRING">'attributes'</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_DOUBLE_ARROW">=&gt;</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_ARRAY">array</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_PHPDOX_SEMICOLON">;</token>
  </line>
  <line no="417"/>
  <line no="418">
    <token name="T_WHITESPACE">		</token>
    <token name="T_IF">if</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_STRING">substr</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_VARIABLE">$str</token>
    <token name="T_PHPDOX_COMMA">,</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_LNUMBER">1</token>
    <token name="T_PHPDOX_COMMA">,</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_LNUMBER">1</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_IS_EQUAL">==</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_CONSTANT_ENCAPSED_STRING">'/'</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_PHPDOX_OPEN_CURLY">{</token>
    <token name="T_WHITESPACE">        </token>
    <token name="T_COMMENT">// closing tag</token>
  </line>
  <line no="419"/>
  <line no="420">
    <token name="T_WHITESPACE">			</token>
    <token name="T_VARIABLE">$tag</token>
    <token name="T_PHPDOX_OPEN_SQUARE">[</token>
    <token name="T_CONSTANT_ENCAPSED_STRING">'tag'</token>
    <token name="T_PHPDOX_CLOSE_SQUARE">]</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_PHPDOX_EQUAL">=</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STRING">strtolower</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_STRING">substr</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_VARIABLE">$str</token>
    <token name="T_PHPDOX_COMMA">,</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_LNUMBER">2</token>
    <token name="T_PHPDOX_COMMA">,</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STRING">strlen</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_VARIABLE">$str</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_PHPDOX_MINUS">-</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_LNUMBER">3</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_PHPDOX_SEMICOLON">;</token>
  </line>
  <line no="421">
    <token name="T_WHITESPACE">			</token>
    <token name="T_IF">if</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_PHPDOX_EXCLAMATION_MARK">!</token>
    <token name="T_STRING">in_array</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_VARIABLE">$tag</token>
    <token name="T_PHPDOX_OPEN_SQUARE">[</token>
    <token name="T_CONSTANT_ENCAPSED_STRING">'tag'</token>
    <token name="T_PHPDOX_CLOSE_SQUARE">]</token>
    <token name="T_PHPDOX_COMMA">,</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STRING">array_keys</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_VARIABLE">$this</token>
    <token name="T_OBJECT_OPERATOR">-&gt;</token>
    <token name="T_STRING">_definedTags</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_PHPDOX_OPEN_CURLY">{</token>
  </line>
  <line no="422">
    <token name="T_WHITESPACE">				</token>
    <token name="T_RETURN">return</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STRING">false</token>
    <token name="T_PHPDOX_SEMICOLON">;</token>
    <token name="T_WHITESPACE">                   </token>
    <token name="T_COMMENT">// nope, it's not valid</token>
  </line>
  <line no="423">
    <token name="T_WHITESPACE">			</token>
    <token name="T_PHPDOX_CLOSE_CURLY">}</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_ELSE">else</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_PHPDOX_OPEN_CURLY">{</token>
  </line>
  <line no="424">
    <token name="T_WHITESPACE">				</token>
    <token name="T_VARIABLE">$tag</token>
    <token name="T_PHPDOX_OPEN_SQUARE">[</token>
    <token name="T_CONSTANT_ENCAPSED_STRING">'type'</token>
    <token name="T_PHPDOX_CLOSE_SQUARE">]</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_PHPDOX_EQUAL">=</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_LNUMBER">2</token>
    <token name="T_PHPDOX_SEMICOLON">;</token>
  </line>
  <line no="425">
    <token name="T_WHITESPACE">				</token>
    <token name="T_RETURN">return</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_VARIABLE">$tag</token>
    <token name="T_PHPDOX_SEMICOLON">;</token>
  </line>
  <line no="426">
    <token name="T_WHITESPACE">			</token>
    <token name="T_PHPDOX_CLOSE_CURLY">}</token>
  </line>
  <line no="427">
    <token name="T_WHITESPACE">		</token>
    <token name="T_PHPDOX_CLOSE_CURLY">}</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_ELSE">else</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_PHPDOX_OPEN_CURLY">{</token>
    <token name="T_WHITESPACE">                                </token>
    <token name="T_COMMENT">// opening tag</token>
  </line>
  <line no="428"/>
  <line no="429">
    <token name="T_WHITESPACE">			</token>
    <token name="T_VARIABLE">$tag</token>
    <token name="T_PHPDOX_OPEN_SQUARE">[</token>
    <token name="T_CONSTANT_ENCAPSED_STRING">'type'</token>
    <token name="T_PHPDOX_CLOSE_SQUARE">]</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_PHPDOX_EQUAL">=</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_LNUMBER">1</token>
    <token name="T_PHPDOX_SEMICOLON">;</token>
  </line>
  <line no="430">
    <token name="T_WHITESPACE">			</token>
    <token name="T_IF">if</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_STRING">strpos</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_VARIABLE">$str</token>
    <token name="T_PHPDOX_COMMA">,</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_CONSTANT_ENCAPSED_STRING">' '</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_BOOLEAN_AND">&amp;&amp;</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_STRING">strpos</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_VARIABLE">$str</token>
    <token name="T_PHPDOX_COMMA">,</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_CONSTANT_ENCAPSED_STRING">'='</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_IS_IDENTICAL">===</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STRING">false</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_PHPDOX_OPEN_CURLY">{</token>
  </line>
  <line no="431">
    <token name="T_WHITESPACE">				</token>
    <token name="T_RETURN">return</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STRING">false</token>
    <token name="T_PHPDOX_SEMICOLON">;</token>
    <token name="T_WHITESPACE">                   </token>
    <token name="T_COMMENT">// nope, it's not valid</token>
  </line>
  <line no="432">
    <token name="T_WHITESPACE">			</token>
    <token name="T_PHPDOX_CLOSE_CURLY">}</token>
  </line>
  <line no="433"/>
  <line no="434">
    <token name="T_WHITESPACE">			</token>
    <token name="T_COMMENT">// tnx to Onno for the regex</token>
  </line>
  <line no="435">
    <token name="T_WHITESPACE">			</token>
    <token name="T_COMMENT">// split the tag with arguments and all</token>
  </line>
  <line no="436">
    <token name="T_WHITESPACE">			</token>
    <token name="T_VARIABLE">$oe</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_PHPDOX_EQUAL">=</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_VARIABLE">$this</token>
    <token name="T_OBJECT_OPERATOR">-&gt;</token>
    <token name="T_STRING">_options</token>
    <token name="T_PHPDOX_OPEN_SQUARE">[</token>
    <token name="T_CONSTANT_ENCAPSED_STRING">'open_esc'</token>
    <token name="T_PHPDOX_CLOSE_SQUARE">]</token>
    <token name="T_PHPDOX_SEMICOLON">;</token>
  </line>
  <line no="437">
    <token name="T_WHITESPACE">			</token>
    <token name="T_VARIABLE">$ce</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_PHPDOX_EQUAL">=</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_VARIABLE">$this</token>
    <token name="T_OBJECT_OPERATOR">-&gt;</token>
    <token name="T_STRING">_options</token>
    <token name="T_PHPDOX_OPEN_SQUARE">[</token>
    <token name="T_CONSTANT_ENCAPSED_STRING">'close_esc'</token>
    <token name="T_PHPDOX_CLOSE_SQUARE">]</token>
    <token name="T_PHPDOX_SEMICOLON">;</token>
  </line>
  <line no="438">
    <token name="T_WHITESPACE">			</token>
    <token name="T_VARIABLE">$tagArray</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_PHPDOX_EQUAL">=</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_ARRAY">array</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_PHPDOX_SEMICOLON">;</token>
  </line>
  <line no="439">
    <token name="T_WHITESPACE">			</token>
    <token name="T_IF">if</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_STRING">preg_match</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_PHPDOX_DOUBLE_QUOTES">"</token>
    <token name="T_ENCAPSED_AND_WHITESPACE">!</token>
    <token name="T_VARIABLE">$oe</token>
    <token name="T_ENCAPSED_AND_WHITESPACE">([a-z0-9]+)[^</token>
    <token name="T_VARIABLE">$ce</token>
    <token name="T_ENCAPSED_AND_WHITESPACE">]*</token>
    <token name="T_VARIABLE">$ce</token>
    <token name="T_ENCAPSED_AND_WHITESPACE">!i</token>
    <token name="T_PHPDOX_DOUBLE_QUOTES">"</token>
    <token name="T_PHPDOX_COMMA">,</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_VARIABLE">$str</token>
    <token name="T_PHPDOX_COMMA">,</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_VARIABLE">$tagArray</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_IS_EQUAL">==</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_LNUMBER">0</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_PHPDOX_OPEN_CURLY">{</token>
  </line>
  <line no="440">
    <token name="T_WHITESPACE">				</token>
    <token name="T_RETURN">return</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STRING">false</token>
    <token name="T_PHPDOX_SEMICOLON">;</token>
  </line>
  <line no="441">
    <token name="T_WHITESPACE">			</token>
    <token name="T_PHPDOX_CLOSE_CURLY">}</token>
  </line>
  <line no="442">
    <token name="T_WHITESPACE">			</token>
    <token name="T_VARIABLE">$tag</token>
    <token name="T_PHPDOX_OPEN_SQUARE">[</token>
    <token name="T_CONSTANT_ENCAPSED_STRING">'tag'</token>
    <token name="T_PHPDOX_CLOSE_SQUARE">]</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_PHPDOX_EQUAL">=</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STRING">strtolower</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_VARIABLE">$tagArray</token>
    <token name="T_PHPDOX_OPEN_SQUARE">[</token>
    <token name="T_LNUMBER">1</token>
    <token name="T_PHPDOX_CLOSE_SQUARE">]</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_PHPDOX_SEMICOLON">;</token>
  </line>
  <line no="443">
    <token name="T_WHITESPACE">			</token>
    <token name="T_IF">if</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_PHPDOX_EXCLAMATION_MARK">!</token>
    <token name="T_STRING">in_array</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_VARIABLE">$tag</token>
    <token name="T_PHPDOX_OPEN_SQUARE">[</token>
    <token name="T_CONSTANT_ENCAPSED_STRING">'tag'</token>
    <token name="T_PHPDOX_CLOSE_SQUARE">]</token>
    <token name="T_PHPDOX_COMMA">,</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STRING">array_keys</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_VARIABLE">$this</token>
    <token name="T_OBJECT_OPERATOR">-&gt;</token>
    <token name="T_STRING">_definedTags</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_PHPDOX_OPEN_CURLY">{</token>
  </line>
  <line no="444">
    <token name="T_WHITESPACE">				</token>
    <token name="T_RETURN">return</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STRING">false</token>
    <token name="T_PHPDOX_SEMICOLON">;</token>
    <token name="T_WHITESPACE">                   </token>
    <token name="T_COMMENT">// nope, it's not valid</token>
  </line>
  <line no="445">
    <token name="T_WHITESPACE">			</token>
    <token name="T_PHPDOX_CLOSE_CURLY">}</token>
  </line>
  <line no="446"/>
  <line no="447">
    <token name="T_WHITESPACE">			</token>
    <token name="T_COMMENT">// tnx to Onno for the regex</token>
  </line>
  <line no="448">
    <token name="T_WHITESPACE">			</token>
    <token name="T_COMMENT">// validate the arguments</token>
  </line>
  <line no="449">
    <token name="T_WHITESPACE">			</token>
    <token name="T_VARIABLE">$attributeArray</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_PHPDOX_EQUAL">=</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_ARRAY">array</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_PHPDOX_SEMICOLON">;</token>
  </line>
  <line no="450">
    <token name="T_WHITESPACE">			</token>
    <token name="T_VARIABLE">$regex</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_PHPDOX_EQUAL">=</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_PHPDOX_DOUBLE_QUOTES">"</token>
    <token name="T_ENCAPSED_AND_WHITESPACE">![\s</token>
    <token name="T_VARIABLE">$oe</token>
    <token name="T_ENCAPSED_AND_WHITESPACE">]([a-z0-9]+)=(\"[^\s</token>
    <token name="T_VARIABLE">$ce</token>
    <token name="T_ENCAPSED_AND_WHITESPACE">]+\"|[^\s</token>
    <token name="T_VARIABLE">$ce</token>
    <token name="T_ENCAPSED_AND_WHITESPACE">]</token>
    <token name="T_PHPDOX_DOUBLE_QUOTES">"</token>
    <token name="T_PHPDOX_SEMICOLON">;</token>
  </line>
  <line no="451">
    <token name="T_WHITESPACE">			</token>
    <token name="T_IF">if</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_VARIABLE">$tag</token>
    <token name="T_PHPDOX_OPEN_SQUARE">[</token>
    <token name="T_CONSTANT_ENCAPSED_STRING">'tag'</token>
    <token name="T_PHPDOX_CLOSE_SQUARE">]</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_IS_NOT_EQUAL">!=</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_CONSTANT_ENCAPSED_STRING">'url'</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_PHPDOX_OPEN_CURLY">{</token>
  </line>
  <line no="452">
    <token name="T_WHITESPACE">				</token>
    <token name="T_VARIABLE">$regex</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_CONCAT_EQUAL">.=</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_CONSTANT_ENCAPSED_STRING">"[^=]"</token>
    <token name="T_PHPDOX_SEMICOLON">;</token>
  </line>
  <line no="453">
    <token name="T_WHITESPACE">			</token>
    <token name="T_PHPDOX_CLOSE_CURLY">}</token>
  </line>
  <line no="454">
    <token name="T_WHITESPACE">			</token>
    <token name="T_VARIABLE">$regex</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_CONCAT_EQUAL">.=</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_PHPDOX_DOUBLE_QUOTES">"</token>
    <token name="T_ENCAPSED_AND_WHITESPACE">+)(?=[\s</token>
    <token name="T_VARIABLE">$ce</token>
    <token name="T_ENCAPSED_AND_WHITESPACE">])!i</token>
    <token name="T_PHPDOX_DOUBLE_QUOTES">"</token>
    <token name="T_PHPDOX_SEMICOLON">;</token>
  </line>
  <line no="455">
    <token name="T_WHITESPACE">			</token>
    <token name="T_STRING">preg_match_all</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_VARIABLE">$regex</token>
    <token name="T_PHPDOX_COMMA">,</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_VARIABLE">$str</token>
    <token name="T_PHPDOX_COMMA">,</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_VARIABLE">$attributeArray</token>
    <token name="T_PHPDOX_COMMA">,</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STRING">PREG_SET_ORDER</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_PHPDOX_SEMICOLON">;</token>
  </line>
  <line no="456">
    <token name="T_WHITESPACE">			</token>
    <token name="T_FOREACH">foreach</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_VARIABLE">$attributeArray</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_AS">as</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_VARIABLE">$attribute</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_PHPDOX_OPEN_CURLY">{</token>
  </line>
  <line no="457">
    <token name="T_WHITESPACE">				</token>
    <token name="T_VARIABLE">$attNam</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_PHPDOX_EQUAL">=</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STRING">strtolower</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_VARIABLE">$attribute</token>
    <token name="T_PHPDOX_OPEN_SQUARE">[</token>
    <token name="T_LNUMBER">1</token>
    <token name="T_PHPDOX_CLOSE_SQUARE">]</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_PHPDOX_SEMICOLON">;</token>
  </line>
  <line no="458">
    <token name="T_WHITESPACE">				</token>
    <token name="T_IF">if</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_STRING">in_array</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_VARIABLE">$attNam</token>
    <token name="T_PHPDOX_COMMA">,</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STRING">array_keys</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_VARIABLE">$this</token>
    <token name="T_OBJECT_OPERATOR">-&gt;</token>
    <token name="T_STRING">_definedTags</token>
    <token name="T_PHPDOX_OPEN_SQUARE">[</token>
    <token name="T_VARIABLE">$tag</token>
    <token name="T_PHPDOX_OPEN_SQUARE">[</token>
    <token name="T_CONSTANT_ENCAPSED_STRING">'tag'</token>
    <token name="T_PHPDOX_CLOSE_SQUARE">]</token>
    <token name="T_PHPDOX_CLOSE_SQUARE">]</token>
    <token name="T_PHPDOX_OPEN_SQUARE">[</token>
    <token name="T_CONSTANT_ENCAPSED_STRING">'attributes'</token>
    <token name="T_PHPDOX_CLOSE_SQUARE">]</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_PHPDOX_OPEN_CURLY">{</token>
  </line>
  <line no="459">
    <token name="T_WHITESPACE">					</token>
    <token name="T_IF">if</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_VARIABLE">$attribute</token>
    <token name="T_PHPDOX_OPEN_SQUARE">[</token>
    <token name="T_LNUMBER">2</token>
    <token name="T_PHPDOX_CLOSE_SQUARE">]</token>
    <token name="T_PHPDOX_OPEN_SQUARE">[</token>
    <token name="T_LNUMBER">0</token>
    <token name="T_PHPDOX_CLOSE_SQUARE">]</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_IS_EQUAL">==</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_CONSTANT_ENCAPSED_STRING">'"'</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_BOOLEAN_AND">&amp;&amp;</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_VARIABLE">$attribute</token>
    <token name="T_PHPDOX_OPEN_SQUARE">[</token>
    <token name="T_LNUMBER">2</token>
    <token name="T_PHPDOX_CLOSE_SQUARE">]</token>
    <token name="T_PHPDOX_OPEN_SQUARE">[</token>
    <token name="T_STRING">strlen</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_VARIABLE">$attribute</token>
    <token name="T_PHPDOX_OPEN_SQUARE">[</token>
    <token name="T_LNUMBER">2</token>
    <token name="T_PHPDOX_CLOSE_SQUARE">]</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_PHPDOX_MINUS">-</token>
    <token name="T_LNUMBER">1</token>
    <token name="T_PHPDOX_CLOSE_SQUARE">]</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_IS_EQUAL">==</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_CONSTANT_ENCAPSED_STRING">'"'</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_PHPDOX_OPEN_CURLY">{</token>
  </line>
  <line no="460">
    <token name="T_WHITESPACE">						</token>
    <token name="T_VARIABLE">$tag</token>
    <token name="T_PHPDOX_OPEN_SQUARE">[</token>
    <token name="T_CONSTANT_ENCAPSED_STRING">'attributes'</token>
    <token name="T_PHPDOX_CLOSE_SQUARE">]</token>
    <token name="T_PHPDOX_OPEN_SQUARE">[</token>
    <token name="T_VARIABLE">$attNam</token>
    <token name="T_PHPDOX_CLOSE_SQUARE">]</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_PHPDOX_EQUAL">=</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STRING">substr</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_VARIABLE">$attribute</token>
    <token name="T_PHPDOX_OPEN_SQUARE">[</token>
    <token name="T_LNUMBER">2</token>
    <token name="T_PHPDOX_CLOSE_SQUARE">]</token>
    <token name="T_PHPDOX_COMMA">,</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_LNUMBER">1</token>
    <token name="T_PHPDOX_COMMA">,</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_PHPDOX_MINUS">-</token>
    <token name="T_LNUMBER">1</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_PHPDOX_SEMICOLON">;</token>
  </line>
  <line no="461">
    <token name="T_WHITESPACE">					</token>
    <token name="T_PHPDOX_CLOSE_CURLY">}</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_ELSE">else</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_PHPDOX_OPEN_CURLY">{</token>
  </line>
  <line no="462">
    <token name="T_WHITESPACE">						</token>
    <token name="T_VARIABLE">$tag</token>
    <token name="T_PHPDOX_OPEN_SQUARE">[</token>
    <token name="T_CONSTANT_ENCAPSED_STRING">'attributes'</token>
    <token name="T_PHPDOX_CLOSE_SQUARE">]</token>
    <token name="T_PHPDOX_OPEN_SQUARE">[</token>
    <token name="T_VARIABLE">$attNam</token>
    <token name="T_PHPDOX_CLOSE_SQUARE">]</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_PHPDOX_EQUAL">=</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_VARIABLE">$attribute</token>
    <token name="T_PHPDOX_OPEN_SQUARE">[</token>
    <token name="T_LNUMBER">2</token>
    <token name="T_PHPDOX_CLOSE_SQUARE">]</token>
    <token name="T_PHPDOX_SEMICOLON">;</token>
  </line>
  <line no="463">
    <token name="T_WHITESPACE">					</token>
    <token name="T_PHPDOX_CLOSE_CURLY">}</token>
  </line>
  <line no="464">
    <token name="T_WHITESPACE">				</token>
    <token name="T_PHPDOX_CLOSE_CURLY">}</token>
  </line>
  <line no="465">
    <token name="T_WHITESPACE">			</token>
    <token name="T_PHPDOX_CLOSE_CURLY">}</token>
  </line>
  <line no="466">
    <token name="T_WHITESPACE">			</token>
    <token name="T_RETURN">return</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_VARIABLE">$tag</token>
    <token name="T_PHPDOX_SEMICOLON">;</token>
  </line>
  <line no="467">
    <token name="T_WHITESPACE">		</token>
    <token name="T_PHPDOX_CLOSE_CURLY">}</token>
  </line>
  <line no="468">
    <token name="T_WHITESPACE">	</token>
    <token name="T_PHPDOX_CLOSE_CURLY">}</token>
  </line>
  <line no="469"/>
  <line no="470">
    <token name="T_WHITESPACE">	</token>
    <token name="T_DOC_COMMENT">/**</token>
  </line>
  <line no="471">
    <token name="T_DOC_COMMENT">	 * Validates the tag array, regarding the allowed tags</token>
  </line>
  <line no="472">
    <token name="T_DOC_COMMENT">	 *</token>
  </line>
  <line no="473">
    <token name="T_DOC_COMMENT">	 * While looping through the tag array, two following text tags are</token>
  </line>
  <line no="474">
    <token name="T_DOC_COMMENT">	 * joined, and it is checked that the tag is allowed inside the</token>
  </line>
  <line no="475">
    <token name="T_DOC_COMMENT">	 * last opened tag.</token>
  </line>
  <line no="476">
    <token name="T_DOC_COMMENT">	 * By remembering what tags have been opened it is checked that</token>
  </line>
  <line no="477">
    <token name="T_DOC_COMMENT">	 * there is correct (xml compliant) nesting.</token>
  </line>
  <line no="478">
    <token name="T_DOC_COMMENT">	 * In the end all still opened tags are closed.</token>
  </line>
  <line no="479">
    <token name="T_DOC_COMMENT">	 *</token>
  </line>
  <line no="480">
    <token name="T_DOC_COMMENT">	 * @return   none</token>
  </line>
  <line no="481">
    <token name="T_DOC_COMMENT">	 * @access   private</token>
  </line>
  <line no="482">
    <token name="T_DOC_COMMENT">	 * @see      _isAllowed()</token>
  </line>
  <line no="483">
    <token name="T_DOC_COMMENT">	 * @see      $_tagArray</token>
  </line>
  <line no="484">
    <token name="T_DOC_COMMENT">	 * @author   Stijn de Reede  &lt;sjr@gmx.co.uk&gt;, Seth Price &lt;seth@pricepages.org&gt;</token>
  </line>
  <line no="485">
    <token name="T_DOC_COMMENT">	 */</token>
  </line>
  <line no="486">
    <token name="T_WHITESPACE">	</token>
    <token name="T_PUBLIC">public</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_FUNCTION">function</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STRING">_validateTagArray</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
  </line>
  <line no="487">
    <token name="T_WHITESPACE">	</token>
    <token name="T_PHPDOX_OPEN_CURLY">{</token>
  </line>
  <line no="488">
    <token name="T_WHITESPACE">		</token>
    <token name="T_VARIABLE">$newTagArray</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_PHPDOX_EQUAL">=</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_ARRAY">array</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_PHPDOX_SEMICOLON">;</token>
  </line>
  <line no="489">
    <token name="T_WHITESPACE">		</token>
    <token name="T_VARIABLE">$openTags</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_PHPDOX_EQUAL">=</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_ARRAY">array</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_PHPDOX_SEMICOLON">;</token>
  </line>
  <line no="490">
    <token name="T_WHITESPACE">		</token>
    <token name="T_FOREACH">foreach</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_VARIABLE">$this</token>
    <token name="T_OBJECT_OPERATOR">-&gt;</token>
    <token name="T_STRING">_tagArray</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_AS">as</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_VARIABLE">$tag</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_PHPDOX_OPEN_CURLY">{</token>
  </line>
  <line no="491">
    <token name="T_WHITESPACE">			</token>
    <token name="T_VARIABLE">$prevTag</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_PHPDOX_EQUAL">=</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STRING">end</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_VARIABLE">$newTagArray</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_PHPDOX_SEMICOLON">;</token>
  </line>
  <line no="492">
    <token name="T_WHITESPACE">			</token>
    <token name="T_SWITCH">switch</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_VARIABLE">$tag</token>
    <token name="T_PHPDOX_OPEN_SQUARE">[</token>
    <token name="T_CONSTANT_ENCAPSED_STRING">'type'</token>
    <token name="T_PHPDOX_CLOSE_SQUARE">]</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_PHPDOX_OPEN_CURLY">{</token>
  </line>
  <line no="493">
    <token name="T_WHITESPACE">			</token>
    <token name="T_CASE">case</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_LNUMBER">0</token>
    <token name="T_PHPDOX_COLON">:</token>
  </line>
  <line no="494">
    <token name="T_WHITESPACE">				</token>
    <token name="T_IF">if</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_VARIABLE">$child</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_PHPDOX_EQUAL">=</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_VARIABLE">$this</token>
    <token name="T_OBJECT_OPERATOR">-&gt;</token>
    <token name="T_STRING">_childNeeded</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_STRING">end</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_VARIABLE">$openTags</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_PHPDOX_COMMA">,</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_CONSTANT_ENCAPSED_STRING">'text'</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_BOOLEAN_AND">&amp;&amp;</token>
  </line>
  <line no="495">
    <token name="T_WHITESPACE">					</token>
    <token name="T_VARIABLE">$child</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_IS_NOT_IDENTICAL">!==</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STRING">false</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_BOOLEAN_AND">&amp;&amp;</token>
  </line>
  <line no="496">
    <token name="T_WHITESPACE">					</token>
    <token name="T_COMMENT">/*</token>
  </line>
  <line no="497">
    <token name="T_COMMENT">					 * No idea what to do in this case: A child is needed, but</token>
  </line>
  <line no="498">
    <token name="T_COMMENT">					 * no valid one is returned. We'll ignore it here and live</token>
  </line>
  <line no="499">
    <token name="T_COMMENT">					 * with it until someone reports a valid bug.</token>
  </line>
  <line no="500">
    <token name="T_COMMENT">					 */</token>
  </line>
  <line no="501">
    <token name="T_WHITESPACE">					</token>
    <token name="T_VARIABLE">$child</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_IS_NOT_IDENTICAL">!==</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STRING">true</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
  </line>
  <line no="502">
    <token name="T_WHITESPACE">				</token>
    <token name="T_PHPDOX_OPEN_CURLY">{</token>
  </line>
  <line no="503">
    <token name="T_WHITESPACE">					</token>
    <token name="T_IF">if</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_STRING">trim</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_VARIABLE">$tag</token>
    <token name="T_PHPDOX_OPEN_SQUARE">[</token>
    <token name="T_CONSTANT_ENCAPSED_STRING">'text'</token>
    <token name="T_PHPDOX_CLOSE_SQUARE">]</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_IS_EQUAL">==</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_CONSTANT_ENCAPSED_STRING">''</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_PHPDOX_OPEN_CURLY">{</token>
  </line>
  <line no="504">
    <token name="T_WHITESPACE">						</token>
    <token name="T_COMMENT">//just an empty indentation or newline without value?</token>
  </line>
  <line no="505">
    <token name="T_WHITESPACE">						</token>
    <token name="T_CONTINUE">continue</token>
    <token name="T_PHPDOX_SEMICOLON">;</token>
  </line>
  <line no="506">
    <token name="T_WHITESPACE">					</token>
    <token name="T_PHPDOX_CLOSE_CURLY">}</token>
  </line>
  <line no="507">
    <token name="T_WHITESPACE">					</token>
    <token name="T_VARIABLE">$newTagArray</token>
    <token name="T_PHPDOX_OPEN_SQUARE">[</token>
    <token name="T_PHPDOX_CLOSE_SQUARE">]</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_PHPDOX_EQUAL">=</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_VARIABLE">$child</token>
    <token name="T_PHPDOX_SEMICOLON">;</token>
  </line>
  <line no="508">
    <token name="T_WHITESPACE">					</token>
    <token name="T_VARIABLE">$openTags</token>
    <token name="T_PHPDOX_OPEN_SQUARE">[</token>
    <token name="T_PHPDOX_CLOSE_SQUARE">]</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_PHPDOX_EQUAL">=</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_VARIABLE">$child</token>
    <token name="T_PHPDOX_OPEN_SQUARE">[</token>
    <token name="T_CONSTANT_ENCAPSED_STRING">'tag'</token>
    <token name="T_PHPDOX_CLOSE_SQUARE">]</token>
    <token name="T_PHPDOX_SEMICOLON">;</token>
  </line>
  <line no="509">
    <token name="T_WHITESPACE">				</token>
    <token name="T_PHPDOX_CLOSE_CURLY">}</token>
  </line>
  <line no="510">
    <token name="T_WHITESPACE">				</token>
    <token name="T_IF">if</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_VARIABLE">$prevTag</token>
    <token name="T_PHPDOX_OPEN_SQUARE">[</token>
    <token name="T_CONSTANT_ENCAPSED_STRING">'type'</token>
    <token name="T_PHPDOX_CLOSE_SQUARE">]</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_IS_IDENTICAL">===</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_LNUMBER">0</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_PHPDOX_OPEN_CURLY">{</token>
  </line>
  <line no="511">
    <token name="T_WHITESPACE">					</token>
    <token name="T_VARIABLE">$tag</token>
    <token name="T_PHPDOX_OPEN_SQUARE">[</token>
    <token name="T_CONSTANT_ENCAPSED_STRING">'text'</token>
    <token name="T_PHPDOX_CLOSE_SQUARE">]</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_PHPDOX_EQUAL">=</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_VARIABLE">$prevTag</token>
    <token name="T_PHPDOX_OPEN_SQUARE">[</token>
    <token name="T_CONSTANT_ENCAPSED_STRING">'text'</token>
    <token name="T_PHPDOX_CLOSE_SQUARE">]</token>
    <token name="T_PHPDOX_DOT">.</token>
    <token name="T_VARIABLE">$tag</token>
    <token name="T_PHPDOX_OPEN_SQUARE">[</token>
    <token name="T_CONSTANT_ENCAPSED_STRING">'text'</token>
    <token name="T_PHPDOX_CLOSE_SQUARE">]</token>
    <token name="T_PHPDOX_SEMICOLON">;</token>
  </line>
  <line no="512">
    <token name="T_WHITESPACE">					</token>
    <token name="T_STRING">array_pop</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_VARIABLE">$newTagArray</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_PHPDOX_SEMICOLON">;</token>
  </line>
  <line no="513">
    <token name="T_WHITESPACE">				</token>
    <token name="T_PHPDOX_CLOSE_CURLY">}</token>
  </line>
  <line no="514">
    <token name="T_WHITESPACE">				</token>
    <token name="T_VARIABLE">$newTagArray</token>
    <token name="T_PHPDOX_OPEN_SQUARE">[</token>
    <token name="T_PHPDOX_CLOSE_SQUARE">]</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_PHPDOX_EQUAL">=</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_VARIABLE">$tag</token>
    <token name="T_PHPDOX_SEMICOLON">;</token>
  </line>
  <line no="515">
    <token name="T_WHITESPACE">				</token>
    <token name="T_BREAK">break</token>
    <token name="T_PHPDOX_SEMICOLON">;</token>
  </line>
  <line no="516"/>
  <line no="517">
    <token name="T_WHITESPACE">			</token>
    <token name="T_CASE">case</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_LNUMBER">1</token>
    <token name="T_PHPDOX_COLON">:</token>
  </line>
  <line no="518">
    <token name="T_WHITESPACE">				</token>
    <token name="T_IF">if</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_PHPDOX_EXCLAMATION_MARK">!</token>
    <token name="T_VARIABLE">$this</token>
    <token name="T_OBJECT_OPERATOR">-&gt;</token>
    <token name="T_STRING">_isAllowed</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_STRING">end</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_VARIABLE">$openTags</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_PHPDOX_COMMA">,</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_VARIABLE">$tag</token>
    <token name="T_PHPDOX_OPEN_SQUARE">[</token>
    <token name="T_CONSTANT_ENCAPSED_STRING">'tag'</token>
    <token name="T_PHPDOX_CLOSE_SQUARE">]</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_BOOLEAN_OR">||</token>
  </line>
  <line no="519">
    <token name="T_WHITESPACE">					</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_VARIABLE">$parent</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_PHPDOX_EQUAL">=</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_VARIABLE">$this</token>
    <token name="T_OBJECT_OPERATOR">-&gt;</token>
    <token name="T_STRING">_parentNeeded</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_STRING">end</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_VARIABLE">$openTags</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_PHPDOX_COMMA">,</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_VARIABLE">$tag</token>
    <token name="T_PHPDOX_OPEN_SQUARE">[</token>
    <token name="T_CONSTANT_ENCAPSED_STRING">'tag'</token>
    <token name="T_PHPDOX_CLOSE_SQUARE">]</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_IS_IDENTICAL">===</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STRING">true</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_BOOLEAN_OR">||</token>
  </line>
  <line no="520">
    <token name="T_WHITESPACE">					</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_VARIABLE">$child</token>
    <token name="T_WHITESPACE">  </token>
    <token name="T_PHPDOX_EQUAL">=</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_VARIABLE">$this</token>
    <token name="T_OBJECT_OPERATOR">-&gt;</token>
    <token name="T_STRING">_childNeeded</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_STRING">end</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_VARIABLE">$openTags</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_PHPDOX_COMMA">,</token>
    <token name="T_WHITESPACE">  </token>
    <token name="T_VARIABLE">$tag</token>
    <token name="T_PHPDOX_OPEN_SQUARE">[</token>
    <token name="T_CONSTANT_ENCAPSED_STRING">'tag'</token>
    <token name="T_PHPDOX_CLOSE_SQUARE">]</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_IS_IDENTICAL">===</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STRING">true</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_PHPDOX_OPEN_CURLY">{</token>
  </line>
  <line no="521">
    <token name="T_WHITESPACE">					</token>
    <token name="T_VARIABLE">$tag</token>
    <token name="T_PHPDOX_OPEN_SQUARE">[</token>
    <token name="T_CONSTANT_ENCAPSED_STRING">'type'</token>
    <token name="T_PHPDOX_CLOSE_SQUARE">]</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_PHPDOX_EQUAL">=</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_LNUMBER">0</token>
    <token name="T_PHPDOX_SEMICOLON">;</token>
  </line>
  <line no="522">
    <token name="T_WHITESPACE">					</token>
    <token name="T_IF">if</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_VARIABLE">$prevTag</token>
    <token name="T_PHPDOX_OPEN_SQUARE">[</token>
    <token name="T_CONSTANT_ENCAPSED_STRING">'type'</token>
    <token name="T_PHPDOX_CLOSE_SQUARE">]</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_IS_IDENTICAL">===</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_LNUMBER">0</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_PHPDOX_OPEN_CURLY">{</token>
  </line>
  <line no="523">
    <token name="T_WHITESPACE">						</token>
    <token name="T_VARIABLE">$tag</token>
    <token name="T_PHPDOX_OPEN_SQUARE">[</token>
    <token name="T_CONSTANT_ENCAPSED_STRING">'text'</token>
    <token name="T_PHPDOX_CLOSE_SQUARE">]</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_PHPDOX_EQUAL">=</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_VARIABLE">$prevTag</token>
    <token name="T_PHPDOX_OPEN_SQUARE">[</token>
    <token name="T_CONSTANT_ENCAPSED_STRING">'text'</token>
    <token name="T_PHPDOX_CLOSE_SQUARE">]</token>
    <token name="T_PHPDOX_DOT">.</token>
    <token name="T_VARIABLE">$tag</token>
    <token name="T_PHPDOX_OPEN_SQUARE">[</token>
    <token name="T_CONSTANT_ENCAPSED_STRING">'text'</token>
    <token name="T_PHPDOX_CLOSE_SQUARE">]</token>
    <token name="T_PHPDOX_SEMICOLON">;</token>
  </line>
  <line no="524">
    <token name="T_WHITESPACE">						</token>
    <token name="T_STRING">array_pop</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_VARIABLE">$newTagArray</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_PHPDOX_SEMICOLON">;</token>
  </line>
  <line no="525">
    <token name="T_WHITESPACE">					</token>
    <token name="T_PHPDOX_CLOSE_CURLY">}</token>
  </line>
  <line no="526">
    <token name="T_WHITESPACE">				</token>
    <token name="T_PHPDOX_CLOSE_CURLY">}</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_ELSE">else</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_PHPDOX_OPEN_CURLY">{</token>
  </line>
  <line no="527">
    <token name="T_WHITESPACE">					</token>
    <token name="T_IF">if</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_VARIABLE">$parent</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_PHPDOX_OPEN_CURLY">{</token>
  </line>
  <line no="528">
    <token name="T_WHITESPACE">						</token>
    <token name="T_COMMENT">/*</token>
  </line>
  <line no="529">
    <token name="T_COMMENT">						 * Avoid use of parent if we can help it. If we are</token>
  </line>
  <line no="530">
    <token name="T_COMMENT">						 * trying to insert a new parent, but the current tag is</token>
  </line>
  <line no="531">
    <token name="T_COMMENT">						 * the same as the previous tag, then assume that the</token>
  </line>
  <line no="532">
    <token name="T_COMMENT">						 * previous tag structure is valid, and add this tag as</token>
  </line>
  <line no="533">
    <token name="T_COMMENT">						 * a sibling. To add as a sibling, we need to close the</token>
  </line>
  <line no="534">
    <token name="T_COMMENT">						 * current tag.</token>
  </line>
  <line no="535">
    <token name="T_COMMENT">						 */</token>
  </line>
  <line no="536">
    <token name="T_WHITESPACE">						</token>
    <token name="T_IF">if</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_VARIABLE">$tag</token>
    <token name="T_PHPDOX_OPEN_SQUARE">[</token>
    <token name="T_CONSTANT_ENCAPSED_STRING">'tag'</token>
    <token name="T_PHPDOX_CLOSE_SQUARE">]</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_IS_EQUAL">==</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STRING">end</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_VARIABLE">$openTags</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_PHPDOX_OPEN_CURLY">{</token>
  </line>
  <line no="537">
    <token name="T_WHITESPACE">							</token>
    <token name="T_VARIABLE">$newTagArray</token>
    <token name="T_PHPDOX_OPEN_SQUARE">[</token>
    <token name="T_PHPDOX_CLOSE_SQUARE">]</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_PHPDOX_EQUAL">=</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_VARIABLE">$this</token>
    <token name="T_OBJECT_OPERATOR">-&gt;</token>
    <token name="T_STRING">_buildTag</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_CONSTANT_ENCAPSED_STRING">'[/'</token>
    <token name="T_PHPDOX_DOT">.</token>
    <token name="T_VARIABLE">$tag</token>
    <token name="T_PHPDOX_OPEN_SQUARE">[</token>
    <token name="T_CONSTANT_ENCAPSED_STRING">'tag'</token>
    <token name="T_PHPDOX_CLOSE_SQUARE">]</token>
    <token name="T_PHPDOX_DOT">.</token>
    <token name="T_CONSTANT_ENCAPSED_STRING">']'</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_PHPDOX_SEMICOLON">;</token>
  </line>
  <line no="538">
    <token name="T_WHITESPACE">							</token>
    <token name="T_STRING">array_pop</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_VARIABLE">$openTags</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_PHPDOX_SEMICOLON">;</token>
  </line>
  <line no="539">
    <token name="T_WHITESPACE">						</token>
    <token name="T_PHPDOX_CLOSE_CURLY">}</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_ELSE">else</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_PHPDOX_OPEN_CURLY">{</token>
  </line>
  <line no="540">
    <token name="T_WHITESPACE">							</token>
    <token name="T_VARIABLE">$newTagArray</token>
    <token name="T_PHPDOX_OPEN_SQUARE">[</token>
    <token name="T_PHPDOX_CLOSE_SQUARE">]</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_PHPDOX_EQUAL">=</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_VARIABLE">$parent</token>
    <token name="T_PHPDOX_SEMICOLON">;</token>
  </line>
  <line no="541">
    <token name="T_WHITESPACE">							</token>
    <token name="T_VARIABLE">$openTags</token>
    <token name="T_PHPDOX_OPEN_SQUARE">[</token>
    <token name="T_PHPDOX_CLOSE_SQUARE">]</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_PHPDOX_EQUAL">=</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_VARIABLE">$parent</token>
    <token name="T_PHPDOX_OPEN_SQUARE">[</token>
    <token name="T_CONSTANT_ENCAPSED_STRING">'tag'</token>
    <token name="T_PHPDOX_CLOSE_SQUARE">]</token>
    <token name="T_PHPDOX_SEMICOLON">;</token>
  </line>
  <line no="542">
    <token name="T_WHITESPACE">						</token>
    <token name="T_PHPDOX_CLOSE_CURLY">}</token>
  </line>
  <line no="543">
    <token name="T_WHITESPACE">					</token>
    <token name="T_PHPDOX_CLOSE_CURLY">}</token>
  </line>
  <line no="544">
    <token name="T_WHITESPACE">					</token>
    <token name="T_IF">if</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_VARIABLE">$child</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_PHPDOX_OPEN_CURLY">{</token>
  </line>
  <line no="545">
    <token name="T_WHITESPACE">						</token>
    <token name="T_VARIABLE">$newTagArray</token>
    <token name="T_PHPDOX_OPEN_SQUARE">[</token>
    <token name="T_PHPDOX_CLOSE_SQUARE">]</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_PHPDOX_EQUAL">=</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_VARIABLE">$child</token>
    <token name="T_PHPDOX_SEMICOLON">;</token>
  </line>
  <line no="546">
    <token name="T_WHITESPACE">						</token>
    <token name="T_VARIABLE">$openTags</token>
    <token name="T_PHPDOX_OPEN_SQUARE">[</token>
    <token name="T_PHPDOX_CLOSE_SQUARE">]</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_PHPDOX_EQUAL">=</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_VARIABLE">$child</token>
    <token name="T_PHPDOX_OPEN_SQUARE">[</token>
    <token name="T_CONSTANT_ENCAPSED_STRING">'tag'</token>
    <token name="T_PHPDOX_CLOSE_SQUARE">]</token>
    <token name="T_PHPDOX_SEMICOLON">;</token>
  </line>
  <line no="547">
    <token name="T_WHITESPACE">					</token>
    <token name="T_PHPDOX_CLOSE_CURLY">}</token>
  </line>
  <line no="548">
    <token name="T_WHITESPACE">					</token>
    <token name="T_VARIABLE">$openTags</token>
    <token name="T_PHPDOX_OPEN_SQUARE">[</token>
    <token name="T_PHPDOX_CLOSE_SQUARE">]</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_PHPDOX_EQUAL">=</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_VARIABLE">$tag</token>
    <token name="T_PHPDOX_OPEN_SQUARE">[</token>
    <token name="T_CONSTANT_ENCAPSED_STRING">'tag'</token>
    <token name="T_PHPDOX_CLOSE_SQUARE">]</token>
    <token name="T_PHPDOX_SEMICOLON">;</token>
  </line>
  <line no="549">
    <token name="T_WHITESPACE">				</token>
    <token name="T_PHPDOX_CLOSE_CURLY">}</token>
  </line>
  <line no="550">
    <token name="T_WHITESPACE">				</token>
    <token name="T_VARIABLE">$newTagArray</token>
    <token name="T_PHPDOX_OPEN_SQUARE">[</token>
    <token name="T_PHPDOX_CLOSE_SQUARE">]</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_PHPDOX_EQUAL">=</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_VARIABLE">$tag</token>
    <token name="T_PHPDOX_SEMICOLON">;</token>
  </line>
  <line no="551">
    <token name="T_WHITESPACE">				</token>
    <token name="T_BREAK">break</token>
    <token name="T_PHPDOX_SEMICOLON">;</token>
  </line>
  <line no="552"/>
  <line no="553">
    <token name="T_WHITESPACE">			</token>
    <token name="T_CASE">case</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_LNUMBER">2</token>
    <token name="T_PHPDOX_COLON">:</token>
  </line>
  <line no="554">
    <token name="T_WHITESPACE">				</token>
    <token name="T_IF">if</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_VARIABLE">$tag</token>
    <token name="T_PHPDOX_OPEN_SQUARE">[</token>
    <token name="T_CONSTANT_ENCAPSED_STRING">'tag'</token>
    <token name="T_PHPDOX_CLOSE_SQUARE">]</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_IS_EQUAL">==</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STRING">end</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_VARIABLE">$openTags</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_BOOLEAN_OR">||</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_VARIABLE">$this</token>
    <token name="T_OBJECT_OPERATOR">-&gt;</token>
    <token name="T_STRING">_isAllowed</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_STRING">end</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_VARIABLE">$openTags</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_PHPDOX_COMMA">,</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_VARIABLE">$tag</token>
    <token name="T_PHPDOX_OPEN_SQUARE">[</token>
    <token name="T_CONSTANT_ENCAPSED_STRING">'tag'</token>
    <token name="T_PHPDOX_CLOSE_SQUARE">]</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_PHPDOX_OPEN_CURLY">{</token>
  </line>
  <line no="555">
    <token name="T_WHITESPACE">					</token>
    <token name="T_IF">if</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_STRING">in_array</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_VARIABLE">$tag</token>
    <token name="T_PHPDOX_OPEN_SQUARE">[</token>
    <token name="T_CONSTANT_ENCAPSED_STRING">'tag'</token>
    <token name="T_PHPDOX_CLOSE_SQUARE">]</token>
    <token name="T_PHPDOX_COMMA">,</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_VARIABLE">$openTags</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_PHPDOX_OPEN_CURLY">{</token>
  </line>
  <line no="556">
    <token name="T_WHITESPACE">						</token>
    <token name="T_VARIABLE">$tmpOpenTags</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_PHPDOX_EQUAL">=</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_ARRAY">array</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_PHPDOX_SEMICOLON">;</token>
  </line>
  <line no="557">
    <token name="T_WHITESPACE">						</token>
    <token name="T_WHILE">while</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_STRING">end</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_VARIABLE">$openTags</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_IS_NOT_EQUAL">!=</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_VARIABLE">$tag</token>
    <token name="T_PHPDOX_OPEN_SQUARE">[</token>
    <token name="T_CONSTANT_ENCAPSED_STRING">'tag'</token>
    <token name="T_PHPDOX_CLOSE_SQUARE">]</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_PHPDOX_OPEN_CURLY">{</token>
  </line>
  <line no="558">
    <token name="T_WHITESPACE">							</token>
    <token name="T_VARIABLE">$newTagArray</token>
    <token name="T_PHPDOX_OPEN_SQUARE">[</token>
    <token name="T_PHPDOX_CLOSE_SQUARE">]</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_PHPDOX_EQUAL">=</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_VARIABLE">$this</token>
    <token name="T_OBJECT_OPERATOR">-&gt;</token>
    <token name="T_STRING">_buildTag</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_CONSTANT_ENCAPSED_STRING">'[/'</token>
    <token name="T_PHPDOX_DOT">.</token>
    <token name="T_STRING">end</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_VARIABLE">$openTags</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_PHPDOX_DOT">.</token>
    <token name="T_CONSTANT_ENCAPSED_STRING">']'</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_PHPDOX_SEMICOLON">;</token>
  </line>
  <line no="559">
    <token name="T_WHITESPACE">							</token>
    <token name="T_VARIABLE">$tmpOpenTags</token>
    <token name="T_PHPDOX_OPEN_SQUARE">[</token>
    <token name="T_PHPDOX_CLOSE_SQUARE">]</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_PHPDOX_EQUAL">=</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STRING">end</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_VARIABLE">$openTags</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_PHPDOX_SEMICOLON">;</token>
  </line>
  <line no="560">
    <token name="T_WHITESPACE">							</token>
    <token name="T_STRING">array_pop</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_VARIABLE">$openTags</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_PHPDOX_SEMICOLON">;</token>
  </line>
  <line no="561">
    <token name="T_WHITESPACE">						</token>
    <token name="T_PHPDOX_CLOSE_CURLY">}</token>
  </line>
  <line no="562">
    <token name="T_WHITESPACE">						</token>
    <token name="T_VARIABLE">$newTagArray</token>
    <token name="T_PHPDOX_OPEN_SQUARE">[</token>
    <token name="T_PHPDOX_CLOSE_SQUARE">]</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_PHPDOX_EQUAL">=</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_VARIABLE">$tag</token>
    <token name="T_PHPDOX_SEMICOLON">;</token>
  </line>
  <line no="563">
    <token name="T_WHITESPACE">						</token>
    <token name="T_STRING">array_pop</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_VARIABLE">$openTags</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_PHPDOX_SEMICOLON">;</token>
  </line>
  <line no="564">
    <token name="T_WHITESPACE">						</token>
    <token name="T_COMMENT">/* why is this here? it just seems to break things</token>
  </line>
  <line no="565">
    <token name="T_COMMENT">						 * (nested lists where closing tags need to be</token>
  </line>
  <line no="566">
    <token name="T_COMMENT">						 * generated)</token>
  </line>
  <line no="567">
    <token name="T_COMMENT">						while (end($tmpOpenTags)) {</token>
  </line>
  <line no="568">
    <token name="T_COMMENT">							$tmpTag = $this-&gt;_buildTag('['.end($tmpOpenTags).']');</token>
  </line>
  <line no="569">
    <token name="T_COMMENT">							$newTagArray[] = $tmpTag;</token>
  </line>
  <line no="570">
    <token name="T_COMMENT">							$openTags[] = $tmpTag['tag'];</token>
  </line>
  <line no="571">
    <token name="T_COMMENT">							array_pop($tmpOpenTags);</token>
  </line>
  <line no="572">
    <token name="T_COMMENT">						}*/</token>
  </line>
  <line no="573">
    <token name="T_WHITESPACE">					</token>
    <token name="T_PHPDOX_CLOSE_CURLY">}</token>
  </line>
  <line no="574">
    <token name="T_WHITESPACE">				</token>
    <token name="T_PHPDOX_CLOSE_CURLY">}</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_ELSE">else</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_PHPDOX_OPEN_CURLY">{</token>
  </line>
  <line no="575">
    <token name="T_WHITESPACE">					</token>
    <token name="T_VARIABLE">$tag</token>
    <token name="T_PHPDOX_OPEN_SQUARE">[</token>
    <token name="T_CONSTANT_ENCAPSED_STRING">'type'</token>
    <token name="T_PHPDOX_CLOSE_SQUARE">]</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_PHPDOX_EQUAL">=</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_LNUMBER">0</token>
    <token name="T_PHPDOX_SEMICOLON">;</token>
  </line>
  <line no="576">
    <token name="T_WHITESPACE">					</token>
    <token name="T_IF">if</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_VARIABLE">$prevTag</token>
    <token name="T_PHPDOX_OPEN_SQUARE">[</token>
    <token name="T_CONSTANT_ENCAPSED_STRING">'type'</token>
    <token name="T_PHPDOX_CLOSE_SQUARE">]</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_IS_IDENTICAL">===</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_LNUMBER">0</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_PHPDOX_OPEN_CURLY">{</token>
  </line>
  <line no="577">
    <token name="T_WHITESPACE">						</token>
    <token name="T_VARIABLE">$tag</token>
    <token name="T_PHPDOX_OPEN_SQUARE">[</token>
    <token name="T_CONSTANT_ENCAPSED_STRING">'text'</token>
    <token name="T_PHPDOX_CLOSE_SQUARE">]</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_PHPDOX_EQUAL">=</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_VARIABLE">$prevTag</token>
    <token name="T_PHPDOX_OPEN_SQUARE">[</token>
    <token name="T_CONSTANT_ENCAPSED_STRING">'text'</token>
    <token name="T_PHPDOX_CLOSE_SQUARE">]</token>
    <token name="T_PHPDOX_DOT">.</token>
    <token name="T_VARIABLE">$tag</token>
    <token name="T_PHPDOX_OPEN_SQUARE">[</token>
    <token name="T_CONSTANT_ENCAPSED_STRING">'text'</token>
    <token name="T_PHPDOX_CLOSE_SQUARE">]</token>
    <token name="T_PHPDOX_SEMICOLON">;</token>
  </line>
  <line no="578">
    <token name="T_WHITESPACE">						</token>
    <token name="T_STRING">array_pop</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_VARIABLE">$newTagArray</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_PHPDOX_SEMICOLON">;</token>
  </line>
  <line no="579">
    <token name="T_WHITESPACE">					</token>
    <token name="T_PHPDOX_CLOSE_CURLY">}</token>
  </line>
  <line no="580">
    <token name="T_WHITESPACE">					</token>
    <token name="T_VARIABLE">$newTagArray</token>
    <token name="T_PHPDOX_OPEN_SQUARE">[</token>
    <token name="T_PHPDOX_CLOSE_SQUARE">]</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_PHPDOX_EQUAL">=</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_VARIABLE">$tag</token>
    <token name="T_PHPDOX_SEMICOLON">;</token>
  </line>
  <line no="581">
    <token name="T_WHITESPACE">				</token>
    <token name="T_PHPDOX_CLOSE_CURLY">}</token>
  </line>
  <line no="582">
    <token name="T_WHITESPACE">				</token>
    <token name="T_BREAK">break</token>
    <token name="T_PHPDOX_SEMICOLON">;</token>
  </line>
  <line no="583">
    <token name="T_WHITESPACE">			</token>
    <token name="T_PHPDOX_CLOSE_CURLY">}</token>
  </line>
  <line no="584">
    <token name="T_WHITESPACE">		</token>
    <token name="T_PHPDOX_CLOSE_CURLY">}</token>
  </line>
  <line no="585">
    <token name="T_WHITESPACE">		</token>
    <token name="T_WHILE">while</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_STRING">end</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_VARIABLE">$openTags</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_PHPDOX_OPEN_CURLY">{</token>
  </line>
  <line no="586">
    <token name="T_WHITESPACE">			</token>
    <token name="T_VARIABLE">$newTagArray</token>
    <token name="T_PHPDOX_OPEN_SQUARE">[</token>
    <token name="T_PHPDOX_CLOSE_SQUARE">]</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_PHPDOX_EQUAL">=</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_VARIABLE">$this</token>
    <token name="T_OBJECT_OPERATOR">-&gt;</token>
    <token name="T_STRING">_buildTag</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_CONSTANT_ENCAPSED_STRING">'[/'</token>
    <token name="T_PHPDOX_DOT">.</token>
    <token name="T_STRING">end</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_VARIABLE">$openTags</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_PHPDOX_DOT">.</token>
    <token name="T_CONSTANT_ENCAPSED_STRING">']'</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_PHPDOX_SEMICOLON">;</token>
  </line>
  <line no="587">
    <token name="T_WHITESPACE">			</token>
    <token name="T_STRING">array_pop</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_VARIABLE">$openTags</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_PHPDOX_SEMICOLON">;</token>
  </line>
  <line no="588">
    <token name="T_WHITESPACE">		</token>
    <token name="T_PHPDOX_CLOSE_CURLY">}</token>
  </line>
  <line no="589">
    <token name="T_WHITESPACE">		</token>
    <token name="T_VARIABLE">$this</token>
    <token name="T_OBJECT_OPERATOR">-&gt;</token>
    <token name="T_STRING">_tagArray</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_PHPDOX_EQUAL">=</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_VARIABLE">$newTagArray</token>
    <token name="T_PHPDOX_SEMICOLON">;</token>
  </line>
  <line no="590">
    <token name="T_WHITESPACE">	</token>
    <token name="T_PHPDOX_CLOSE_CURLY">}</token>
  </line>
  <line no="591"/>
  <line no="592">
    <token name="T_WHITESPACE">	</token>
    <token name="T_DOC_COMMENT">/**</token>
  </line>
  <line no="593">
    <token name="T_DOC_COMMENT">	 * Checks to see if a parent is needed</token>
  </line>
  <line no="594">
    <token name="T_DOC_COMMENT">	 *</token>
  </line>
  <line no="595">
    <token name="T_DOC_COMMENT">	 * Checks to see if the current $in tag has an appropriate parent. If it</token>
  </line>
  <line no="596">
    <token name="T_DOC_COMMENT">	 * does, then it returns false. If a parent is needed, then it returns the</token>
  </line>
  <line no="597">
    <token name="T_DOC_COMMENT">	 * first tag in the list to add to the stack.</token>
  </line>
  <line no="598">
    <token name="T_DOC_COMMENT">	 *</token>
  </line>
  <line no="599">
    <token name="T_DOC_COMMENT">	 * @param    array           tag that is on the outside</token>
  </line>
  <line no="600">
    <token name="T_DOC_COMMENT">	 * @param    array           tag that is on the inside</token>
  </line>
  <line no="601">
    <token name="T_DOC_COMMENT">	 * @return   boolean         false if not needed, tag if needed, true if out</token>
  </line>
  <line no="602">
    <token name="T_DOC_COMMENT">	 *                           of  our minds</token>
  </line>
  <line no="603">
    <token name="T_DOC_COMMENT">	 * @access   private</token>
  </line>
  <line no="604">
    <token name="T_DOC_COMMENT">	 * @see      _validateTagArray()</token>
  </line>
  <line no="605">
    <token name="T_DOC_COMMENT">	 * @author   Seth Price &lt;seth@pricepages.org&gt;</token>
  </line>
  <line no="606">
    <token name="T_DOC_COMMENT">	 */</token>
  </line>
  <line no="607">
    <token name="T_WHITESPACE">	</token>
    <token name="T_PUBLIC">public</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_FUNCTION">function</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STRING">_parentNeeded</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_VARIABLE">$out</token>
    <token name="T_PHPDOX_COMMA">,</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_VARIABLE">$in</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
  </line>
  <line no="608">
    <token name="T_WHITESPACE">	</token>
    <token name="T_PHPDOX_OPEN_CURLY">{</token>
  </line>
  <line no="609">
    <token name="T_WHITESPACE">		</token>
    <token name="T_IF">if</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_PHPDOX_EXCLAMATION_MARK">!</token>
    <token name="T_ISSET">isset</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_VARIABLE">$this</token>
    <token name="T_OBJECT_OPERATOR">-&gt;</token>
    <token name="T_STRING">_definedTags</token>
    <token name="T_PHPDOX_OPEN_SQUARE">[</token>
    <token name="T_VARIABLE">$in</token>
    <token name="T_PHPDOX_CLOSE_SQUARE">]</token>
    <token name="T_PHPDOX_OPEN_SQUARE">[</token>
    <token name="T_CONSTANT_ENCAPSED_STRING">'parent'</token>
    <token name="T_PHPDOX_CLOSE_SQUARE">]</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_BOOLEAN_OR">||</token>
  </line>
  <line no="610">
    <token name="T_WHITESPACE">			</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_VARIABLE">$this</token>
    <token name="T_OBJECT_OPERATOR">-&gt;</token>
    <token name="T_STRING">_definedTags</token>
    <token name="T_PHPDOX_OPEN_SQUARE">[</token>
    <token name="T_VARIABLE">$in</token>
    <token name="T_PHPDOX_CLOSE_SQUARE">]</token>
    <token name="T_PHPDOX_OPEN_SQUARE">[</token>
    <token name="T_CONSTANT_ENCAPSED_STRING">'parent'</token>
    <token name="T_PHPDOX_CLOSE_SQUARE">]</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_IS_EQUAL">==</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_CONSTANT_ENCAPSED_STRING">'all'</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
  </line>
  <line no="611">
    <token name="T_WHITESPACE">		</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_PHPDOX_OPEN_CURLY">{</token>
  </line>
  <line no="612">
    <token name="T_WHITESPACE">			</token>
    <token name="T_RETURN">return</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STRING">false</token>
    <token name="T_PHPDOX_SEMICOLON">;</token>
  </line>
  <line no="613">
    <token name="T_WHITESPACE">		</token>
    <token name="T_PHPDOX_CLOSE_CURLY">}</token>
  </line>
  <line no="614"/>
  <line no="615">
    <token name="T_WHITESPACE">		</token>
    <token name="T_VARIABLE">$ar</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_PHPDOX_EQUAL">=</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STRING">explode</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_CONSTANT_ENCAPSED_STRING">'^'</token>
    <token name="T_PHPDOX_COMMA">,</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_VARIABLE">$this</token>
    <token name="T_OBJECT_OPERATOR">-&gt;</token>
    <token name="T_STRING">_definedTags</token>
    <token name="T_PHPDOX_OPEN_SQUARE">[</token>
    <token name="T_VARIABLE">$in</token>
    <token name="T_PHPDOX_CLOSE_SQUARE">]</token>
    <token name="T_PHPDOX_OPEN_SQUARE">[</token>
    <token name="T_CONSTANT_ENCAPSED_STRING">'parent'</token>
    <token name="T_PHPDOX_CLOSE_SQUARE">]</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_PHPDOX_SEMICOLON">;</token>
  </line>
  <line no="616">
    <token name="T_WHITESPACE">		</token>
    <token name="T_VARIABLE">$tags</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_PHPDOX_EQUAL">=</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STRING">explode</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_CONSTANT_ENCAPSED_STRING">','</token>
    <token name="T_PHPDOX_COMMA">,</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_VARIABLE">$ar</token>
    <token name="T_PHPDOX_OPEN_SQUARE">[</token>
    <token name="T_LNUMBER">1</token>
    <token name="T_PHPDOX_CLOSE_SQUARE">]</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_PHPDOX_SEMICOLON">;</token>
  </line>
  <line no="617">
    <token name="T_WHITESPACE">		</token>
    <token name="T_IF">if</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_VARIABLE">$ar</token>
    <token name="T_PHPDOX_OPEN_SQUARE">[</token>
    <token name="T_LNUMBER">0</token>
    <token name="T_PHPDOX_CLOSE_SQUARE">]</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_IS_EQUAL">==</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_CONSTANT_ENCAPSED_STRING">'none'</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_PHPDOX_OPEN_CURLY">{</token>
  </line>
  <line no="618">
    <token name="T_WHITESPACE">			</token>
    <token name="T_IF">if</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_VARIABLE">$out</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_BOOLEAN_AND">&amp;&amp;</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STRING">in_array</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_VARIABLE">$out</token>
    <token name="T_PHPDOX_COMMA">,</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_VARIABLE">$tags</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_PHPDOX_OPEN_CURLY">{</token>
  </line>
  <line no="619">
    <token name="T_WHITESPACE">				</token>
    <token name="T_RETURN">return</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STRING">false</token>
    <token name="T_PHPDOX_SEMICOLON">;</token>
  </line>
  <line no="620">
    <token name="T_WHITESPACE">			</token>
    <token name="T_PHPDOX_CLOSE_CURLY">}</token>
  </line>
  <line no="621">
    <token name="T_WHITESPACE">			</token>
    <token name="T_COMMENT">//Create a tag from the first one on the list</token>
  </line>
  <line no="622">
    <token name="T_WHITESPACE">			</token>
    <token name="T_RETURN">return</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_VARIABLE">$this</token>
    <token name="T_OBJECT_OPERATOR">-&gt;</token>
    <token name="T_STRING">_buildTag</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_CONSTANT_ENCAPSED_STRING">'['</token>
    <token name="T_PHPDOX_DOT">.</token>
    <token name="T_VARIABLE">$tags</token>
    <token name="T_PHPDOX_OPEN_SQUARE">[</token>
    <token name="T_LNUMBER">0</token>
    <token name="T_PHPDOX_CLOSE_SQUARE">]</token>
    <token name="T_PHPDOX_DOT">.</token>
    <token name="T_CONSTANT_ENCAPSED_STRING">']'</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_PHPDOX_SEMICOLON">;</token>
  </line>
  <line no="623">
    <token name="T_WHITESPACE">		</token>
    <token name="T_PHPDOX_CLOSE_CURLY">}</token>
  </line>
  <line no="624">
    <token name="T_WHITESPACE">		</token>
    <token name="T_IF">if</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_VARIABLE">$ar</token>
    <token name="T_PHPDOX_OPEN_SQUARE">[</token>
    <token name="T_LNUMBER">0</token>
    <token name="T_PHPDOX_CLOSE_SQUARE">]</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_IS_EQUAL">==</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_CONSTANT_ENCAPSED_STRING">'all'</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_BOOLEAN_AND">&amp;&amp;</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_VARIABLE">$out</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_BOOLEAN_AND">&amp;&amp;</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_PHPDOX_EXCLAMATION_MARK">!</token>
    <token name="T_STRING">in_array</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_VARIABLE">$out</token>
    <token name="T_PHPDOX_COMMA">,</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_VARIABLE">$tags</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_PHPDOX_OPEN_CURLY">{</token>
  </line>
  <line no="625">
    <token name="T_WHITESPACE">			</token>
    <token name="T_RETURN">return</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STRING">false</token>
    <token name="T_PHPDOX_SEMICOLON">;</token>
  </line>
  <line no="626">
    <token name="T_WHITESPACE">		</token>
    <token name="T_PHPDOX_CLOSE_CURLY">}</token>
  </line>
  <line no="627">
    <token name="T_WHITESPACE">		</token>
    <token name="T_COMMENT">// Tag is needed, we don't know which one. We could make something up,</token>
  </line>
  <line no="628">
    <token name="T_WHITESPACE">		</token>
    <token name="T_COMMENT">// but it would be so random, I think that it would be worthless.</token>
  </line>
  <line no="629">
    <token name="T_WHITESPACE">		</token>
    <token name="T_RETURN">return</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STRING">true</token>
    <token name="T_PHPDOX_SEMICOLON">;</token>
  </line>
  <line no="630">
    <token name="T_WHITESPACE">	</token>
    <token name="T_PHPDOX_CLOSE_CURLY">}</token>
  </line>
  <line no="631"/>
  <line no="632">
    <token name="T_WHITESPACE">	</token>
    <token name="T_DOC_COMMENT">/**</token>
  </line>
  <line no="633">
    <token name="T_DOC_COMMENT">	 * Checks to see if a child is needed</token>
  </line>
  <line no="634">
    <token name="T_DOC_COMMENT">	 *</token>
  </line>
  <line no="635">
    <token name="T_DOC_COMMENT">	 * Checks to see if the current $out tag has an appropriate child. If it</token>
  </line>
  <line no="636">
    <token name="T_DOC_COMMENT">	 * does, then it returns false. If a child is needed, then it returns the</token>
  </line>
  <line no="637">
    <token name="T_DOC_COMMENT">	 * first tag in the list to add to the stack.</token>
  </line>
  <line no="638">
    <token name="T_DOC_COMMENT">	 *</token>
  </line>
  <line no="639">
    <token name="T_DOC_COMMENT">	 * @param    array           tag that is on the outside</token>
  </line>
  <line no="640">
    <token name="T_DOC_COMMENT">	 * @param    array           tag that is on the inside</token>
  </line>
  <line no="641">
    <token name="T_DOC_COMMENT">	 * @return   boolean         false if not needed, tag if needed, true if out</token>
  </line>
  <line no="642">
    <token name="T_DOC_COMMENT">	 *                           of our minds</token>
  </line>
  <line no="643">
    <token name="T_DOC_COMMENT">	 * @access   private</token>
  </line>
  <line no="644">
    <token name="T_DOC_COMMENT">	 * @see      _validateTagArray()</token>
  </line>
  <line no="645">
    <token name="T_DOC_COMMENT">	 * @author   Seth Price &lt;seth@pricepages.org&gt;</token>
  </line>
  <line no="646">
    <token name="T_DOC_COMMENT">	 */</token>
  </line>
  <line no="647">
    <token name="T_WHITESPACE">	</token>
    <token name="T_PUBLIC">public</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_FUNCTION">function</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STRING">_childNeeded</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_VARIABLE">$out</token>
    <token name="T_PHPDOX_COMMA">,</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_VARIABLE">$in</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
  </line>
  <line no="648">
    <token name="T_WHITESPACE">	</token>
    <token name="T_PHPDOX_OPEN_CURLY">{</token>
  </line>
  <line no="649">
    <token name="T_WHITESPACE">		</token>
    <token name="T_IF">if</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_PHPDOX_EXCLAMATION_MARK">!</token>
    <token name="T_ISSET">isset</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_VARIABLE">$this</token>
    <token name="T_OBJECT_OPERATOR">-&gt;</token>
    <token name="T_STRING">_definedTags</token>
    <token name="T_PHPDOX_OPEN_SQUARE">[</token>
    <token name="T_VARIABLE">$out</token>
    <token name="T_PHPDOX_CLOSE_SQUARE">]</token>
    <token name="T_PHPDOX_OPEN_SQUARE">[</token>
    <token name="T_CONSTANT_ENCAPSED_STRING">'child'</token>
    <token name="T_PHPDOX_CLOSE_SQUARE">]</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_BOOLEAN_OR">||</token>
  </line>
  <line no="650">
    <token name="T_WHITESPACE">			</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_VARIABLE">$this</token>
    <token name="T_OBJECT_OPERATOR">-&gt;</token>
    <token name="T_STRING">_definedTags</token>
    <token name="T_PHPDOX_OPEN_SQUARE">[</token>
    <token name="T_VARIABLE">$out</token>
    <token name="T_PHPDOX_CLOSE_SQUARE">]</token>
    <token name="T_PHPDOX_OPEN_SQUARE">[</token>
    <token name="T_CONSTANT_ENCAPSED_STRING">'child'</token>
    <token name="T_PHPDOX_CLOSE_SQUARE">]</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_IS_EQUAL">==</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_CONSTANT_ENCAPSED_STRING">'all'</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
  </line>
  <line no="651">
    <token name="T_WHITESPACE">		</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_PHPDOX_OPEN_CURLY">{</token>
  </line>
  <line no="652">
    <token name="T_WHITESPACE">			</token>
    <token name="T_RETURN">return</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STRING">false</token>
    <token name="T_PHPDOX_SEMICOLON">;</token>
  </line>
  <line no="653">
    <token name="T_WHITESPACE">		</token>
    <token name="T_PHPDOX_CLOSE_CURLY">}</token>
  </line>
  <line no="654"/>
  <line no="655">
    <token name="T_WHITESPACE">		</token>
    <token name="T_VARIABLE">$ar</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_PHPDOX_EQUAL">=</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STRING">explode</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_CONSTANT_ENCAPSED_STRING">'^'</token>
    <token name="T_PHPDOX_COMMA">,</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_VARIABLE">$this</token>
    <token name="T_OBJECT_OPERATOR">-&gt;</token>
    <token name="T_STRING">_definedTags</token>
    <token name="T_PHPDOX_OPEN_SQUARE">[</token>
    <token name="T_VARIABLE">$out</token>
    <token name="T_PHPDOX_CLOSE_SQUARE">]</token>
    <token name="T_PHPDOX_OPEN_SQUARE">[</token>
    <token name="T_CONSTANT_ENCAPSED_STRING">'child'</token>
    <token name="T_PHPDOX_CLOSE_SQUARE">]</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_PHPDOX_SEMICOLON">;</token>
  </line>
  <line no="656">
    <token name="T_WHITESPACE">		</token>
    <token name="T_VARIABLE">$tags</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_PHPDOX_EQUAL">=</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STRING">explode</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_CONSTANT_ENCAPSED_STRING">','</token>
    <token name="T_PHPDOX_COMMA">,</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_VARIABLE">$ar</token>
    <token name="T_PHPDOX_OPEN_SQUARE">[</token>
    <token name="T_LNUMBER">1</token>
    <token name="T_PHPDOX_CLOSE_SQUARE">]</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_PHPDOX_SEMICOLON">;</token>
  </line>
  <line no="657">
    <token name="T_WHITESPACE">		</token>
    <token name="T_IF">if</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_VARIABLE">$ar</token>
    <token name="T_PHPDOX_OPEN_SQUARE">[</token>
    <token name="T_LNUMBER">0</token>
    <token name="T_PHPDOX_CLOSE_SQUARE">]</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_IS_EQUAL">==</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_CONSTANT_ENCAPSED_STRING">'none'</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_PHPDOX_OPEN_CURLY">{</token>
  </line>
  <line no="658">
    <token name="T_WHITESPACE">			</token>
    <token name="T_IF">if</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_VARIABLE">$in</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_BOOLEAN_AND">&amp;&amp;</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STRING">in_array</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_VARIABLE">$in</token>
    <token name="T_PHPDOX_COMMA">,</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_VARIABLE">$tags</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_PHPDOX_OPEN_CURLY">{</token>
  </line>
  <line no="659">
    <token name="T_WHITESPACE">				</token>
    <token name="T_RETURN">return</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STRING">false</token>
    <token name="T_PHPDOX_SEMICOLON">;</token>
  </line>
  <line no="660">
    <token name="T_WHITESPACE">			</token>
    <token name="T_PHPDOX_CLOSE_CURLY">}</token>
  </line>
  <line no="661">
    <token name="T_WHITESPACE">			</token>
    <token name="T_COMMENT">//Create a tag from the first one on the list</token>
  </line>
  <line no="662">
    <token name="T_WHITESPACE">			</token>
    <token name="T_RETURN">return</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_VARIABLE">$this</token>
    <token name="T_OBJECT_OPERATOR">-&gt;</token>
    <token name="T_STRING">_buildTag</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_CONSTANT_ENCAPSED_STRING">'['</token>
    <token name="T_PHPDOX_DOT">.</token>
    <token name="T_VARIABLE">$tags</token>
    <token name="T_PHPDOX_OPEN_SQUARE">[</token>
    <token name="T_LNUMBER">0</token>
    <token name="T_PHPDOX_CLOSE_SQUARE">]</token>
    <token name="T_PHPDOX_DOT">.</token>
    <token name="T_CONSTANT_ENCAPSED_STRING">']'</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_PHPDOX_SEMICOLON">;</token>
  </line>
  <line no="663">
    <token name="T_WHITESPACE">		</token>
    <token name="T_PHPDOX_CLOSE_CURLY">}</token>
  </line>
  <line no="664">
    <token name="T_WHITESPACE">		</token>
    <token name="T_IF">if</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_VARIABLE">$ar</token>
    <token name="T_PHPDOX_OPEN_SQUARE">[</token>
    <token name="T_LNUMBER">0</token>
    <token name="T_PHPDOX_CLOSE_SQUARE">]</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_IS_EQUAL">==</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_CONSTANT_ENCAPSED_STRING">'all'</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_BOOLEAN_AND">&amp;&amp;</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_VARIABLE">$in</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_BOOLEAN_AND">&amp;&amp;</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_PHPDOX_EXCLAMATION_MARK">!</token>
    <token name="T_STRING">in_array</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_VARIABLE">$in</token>
    <token name="T_PHPDOX_COMMA">,</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_VARIABLE">$tags</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_PHPDOX_OPEN_CURLY">{</token>
  </line>
  <line no="665">
    <token name="T_WHITESPACE">			</token>
    <token name="T_RETURN">return</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STRING">false</token>
    <token name="T_PHPDOX_SEMICOLON">;</token>
  </line>
  <line no="666">
    <token name="T_WHITESPACE">		</token>
    <token name="T_PHPDOX_CLOSE_CURLY">}</token>
  </line>
  <line no="667">
    <token name="T_WHITESPACE">		</token>
    <token name="T_COMMENT">// Tag is needed, we don't know which one. We could make something up,</token>
  </line>
  <line no="668">
    <token name="T_WHITESPACE">		</token>
    <token name="T_COMMENT">// but it would be so random, I think that it would be worthless.</token>
  </line>
  <line no="669">
    <token name="T_WHITESPACE">		</token>
    <token name="T_RETURN">return</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STRING">true</token>
    <token name="T_PHPDOX_SEMICOLON">;</token>
  </line>
  <line no="670">
    <token name="T_WHITESPACE">	</token>
    <token name="T_PHPDOX_CLOSE_CURLY">}</token>
  </line>
  <line no="671"/>
  <line no="672">
    <token name="T_WHITESPACE">	</token>
    <token name="T_DOC_COMMENT">/**</token>
  </line>
  <line no="673">
    <token name="T_DOC_COMMENT">	 * Checks to see if a tag is allowed inside another tag</token>
  </line>
  <line no="674">
    <token name="T_DOC_COMMENT">	 *</token>
  </line>
  <line no="675">
    <token name="T_DOC_COMMENT">	 * The allowed tags are extracted from the private _definedTags array.</token>
  </line>
  <line no="676">
    <token name="T_DOC_COMMENT">	 *</token>
  </line>
  <line no="677">
    <token name="T_DOC_COMMENT">	 * @param    array           tag that is on the outside</token>
  </line>
  <line no="678">
    <token name="T_DOC_COMMENT">	 * @param    array           tag that is on the inside</token>
  </line>
  <line no="679">
    <token name="T_DOC_COMMENT">	 * @return   boolean         return true if the tag is allowed, false</token>
  </line>
  <line no="680">
    <token name="T_DOC_COMMENT">	 *                           otherwise</token>
  </line>
  <line no="681">
    <token name="T_DOC_COMMENT">	 * @access   private</token>
  </line>
  <line no="682">
    <token name="T_DOC_COMMENT">	 * @see      _validateTagArray()</token>
  </line>
  <line no="683">
    <token name="T_DOC_COMMENT">	 * @author   Stijn de Reede  &lt;sjr@gmx.co.uk&gt;</token>
  </line>
  <line no="684">
    <token name="T_DOC_COMMENT">	 */</token>
  </line>
  <line no="685">
    <token name="T_WHITESPACE">	</token>
    <token name="T_PUBLIC">public</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_FUNCTION">function</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STRING">_isAllowed</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_VARIABLE">$out</token>
    <token name="T_PHPDOX_COMMA">,</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_VARIABLE">$in</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
  </line>
  <line no="686">
    <token name="T_WHITESPACE">	</token>
    <token name="T_PHPDOX_OPEN_CURLY">{</token>
  </line>
  <line no="687">
    <token name="T_WHITESPACE">		</token>
    <token name="T_IF">if</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_PHPDOX_EXCLAMATION_MARK">!</token>
    <token name="T_VARIABLE">$out</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_BOOLEAN_OR">||</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_VARIABLE">$this</token>
    <token name="T_OBJECT_OPERATOR">-&gt;</token>
    <token name="T_STRING">_definedTags</token>
    <token name="T_PHPDOX_OPEN_SQUARE">[</token>
    <token name="T_VARIABLE">$out</token>
    <token name="T_PHPDOX_CLOSE_SQUARE">]</token>
    <token name="T_PHPDOX_OPEN_SQUARE">[</token>
    <token name="T_CONSTANT_ENCAPSED_STRING">'allowed'</token>
    <token name="T_PHPDOX_CLOSE_SQUARE">]</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_IS_EQUAL">==</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_CONSTANT_ENCAPSED_STRING">'all'</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_PHPDOX_OPEN_CURLY">{</token>
  </line>
  <line no="688">
    <token name="T_WHITESPACE">			</token>
    <token name="T_RETURN">return</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STRING">true</token>
    <token name="T_PHPDOX_SEMICOLON">;</token>
  </line>
  <line no="689">
    <token name="T_WHITESPACE">		</token>
    <token name="T_PHPDOX_CLOSE_CURLY">}</token>
  </line>
  <line no="690">
    <token name="T_WHITESPACE">		</token>
    <token name="T_IF">if</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_VARIABLE">$this</token>
    <token name="T_OBJECT_OPERATOR">-&gt;</token>
    <token name="T_STRING">_definedTags</token>
    <token name="T_PHPDOX_OPEN_SQUARE">[</token>
    <token name="T_VARIABLE">$out</token>
    <token name="T_PHPDOX_CLOSE_SQUARE">]</token>
    <token name="T_PHPDOX_OPEN_SQUARE">[</token>
    <token name="T_CONSTANT_ENCAPSED_STRING">'allowed'</token>
    <token name="T_PHPDOX_CLOSE_SQUARE">]</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_IS_EQUAL">==</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_CONSTANT_ENCAPSED_STRING">'none'</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_PHPDOX_OPEN_CURLY">{</token>
  </line>
  <line no="691">
    <token name="T_WHITESPACE">			</token>
    <token name="T_RETURN">return</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STRING">false</token>
    <token name="T_PHPDOX_SEMICOLON">;</token>
  </line>
  <line no="692">
    <token name="T_WHITESPACE">		</token>
    <token name="T_PHPDOX_CLOSE_CURLY">}</token>
  </line>
  <line no="693"/>
  <line no="694">
    <token name="T_WHITESPACE">		</token>
    <token name="T_VARIABLE">$ar</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_PHPDOX_EQUAL">=</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STRING">explode</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_CONSTANT_ENCAPSED_STRING">'^'</token>
    <token name="T_PHPDOX_COMMA">,</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_VARIABLE">$this</token>
    <token name="T_OBJECT_OPERATOR">-&gt;</token>
    <token name="T_STRING">_definedTags</token>
    <token name="T_PHPDOX_OPEN_SQUARE">[</token>
    <token name="T_VARIABLE">$out</token>
    <token name="T_PHPDOX_CLOSE_SQUARE">]</token>
    <token name="T_PHPDOX_OPEN_SQUARE">[</token>
    <token name="T_CONSTANT_ENCAPSED_STRING">'allowed'</token>
    <token name="T_PHPDOX_CLOSE_SQUARE">]</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_PHPDOX_SEMICOLON">;</token>
  </line>
  <line no="695">
    <token name="T_WHITESPACE">		</token>
    <token name="T_VARIABLE">$tags</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_PHPDOX_EQUAL">=</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STRING">explode</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_CONSTANT_ENCAPSED_STRING">','</token>
    <token name="T_PHPDOX_COMMA">,</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_VARIABLE">$ar</token>
    <token name="T_PHPDOX_OPEN_SQUARE">[</token>
    <token name="T_LNUMBER">1</token>
    <token name="T_PHPDOX_CLOSE_SQUARE">]</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_PHPDOX_SEMICOLON">;</token>
  </line>
  <line no="696">
    <token name="T_WHITESPACE">		</token>
    <token name="T_IF">if</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_VARIABLE">$ar</token>
    <token name="T_PHPDOX_OPEN_SQUARE">[</token>
    <token name="T_LNUMBER">0</token>
    <token name="T_PHPDOX_CLOSE_SQUARE">]</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_IS_EQUAL">==</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_CONSTANT_ENCAPSED_STRING">'none'</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_BOOLEAN_AND">&amp;&amp;</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STRING">in_array</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_VARIABLE">$in</token>
    <token name="T_PHPDOX_COMMA">,</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_VARIABLE">$tags</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_PHPDOX_OPEN_CURLY">{</token>
  </line>
  <line no="697">
    <token name="T_WHITESPACE">			</token>
    <token name="T_RETURN">return</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STRING">true</token>
    <token name="T_PHPDOX_SEMICOLON">;</token>
  </line>
  <line no="698">
    <token name="T_WHITESPACE">		</token>
    <token name="T_PHPDOX_CLOSE_CURLY">}</token>
  </line>
  <line no="699">
    <token name="T_WHITESPACE">		</token>
    <token name="T_IF">if</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_VARIABLE">$ar</token>
    <token name="T_PHPDOX_OPEN_SQUARE">[</token>
    <token name="T_LNUMBER">0</token>
    <token name="T_PHPDOX_CLOSE_SQUARE">]</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_IS_EQUAL">==</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_CONSTANT_ENCAPSED_STRING">'all'</token>
    <token name="T_WHITESPACE">  </token>
    <token name="T_BOOLEAN_AND">&amp;&amp;</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STRING">in_array</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_VARIABLE">$in</token>
    <token name="T_PHPDOX_COMMA">,</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_VARIABLE">$tags</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_PHPDOX_OPEN_CURLY">{</token>
  </line>
  <line no="700">
    <token name="T_WHITESPACE">			</token>
    <token name="T_RETURN">return</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STRING">false</token>
    <token name="T_PHPDOX_SEMICOLON">;</token>
  </line>
  <line no="701">
    <token name="T_WHITESPACE">		</token>
    <token name="T_PHPDOX_CLOSE_CURLY">}</token>
  </line>
  <line no="702">
    <token name="T_WHITESPACE">		</token>
    <token name="T_RETURN">return</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STRING">false</token>
    <token name="T_PHPDOX_SEMICOLON">;</token>
  </line>
  <line no="703">
    <token name="T_WHITESPACE">	</token>
    <token name="T_PHPDOX_CLOSE_CURLY">}</token>
  </line>
  <line no="704"/>
  <line no="705">
    <token name="T_WHITESPACE">	</token>
    <token name="T_DOC_COMMENT">/**</token>
  </line>
  <line no="706">
    <token name="T_DOC_COMMENT">	 * Builds a parsed string based on the tag array</token>
  </line>
  <line no="707">
    <token name="T_DOC_COMMENT">	 *</token>
  </line>
  <line no="708">
    <token name="T_DOC_COMMENT">	 * The correct html and attribute values are extracted from the private</token>
  </line>
  <line no="709">
    <token name="T_DOC_COMMENT">	 * _definedTags array.</token>
  </line>
  <line no="710">
    <token name="T_DOC_COMMENT">	 *</token>
  </line>
  <line no="711">
    <token name="T_DOC_COMMENT">	 * @return   none</token>
  </line>
  <line no="712">
    <token name="T_DOC_COMMENT">	 * @access   private</token>
  </line>
  <line no="713">
    <token name="T_DOC_COMMENT">	 * @see      $_tagArray</token>
  </line>
  <line no="714">
    <token name="T_DOC_COMMENT">	 * @see      $_parsed</token>
  </line>
  <line no="715">
    <token name="T_DOC_COMMENT">	 * @author   Stijn de Reede  &lt;sjr@gmx.co.uk&gt;</token>
  </line>
  <line no="716">
    <token name="T_DOC_COMMENT">	 */</token>
  </line>
  <line no="717">
    <token name="T_WHITESPACE">	</token>
    <token name="T_PUBLIC">public</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_FUNCTION">function</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STRING">_buildParsedString</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
  </line>
  <line no="718">
    <token name="T_WHITESPACE">	</token>
    <token name="T_PHPDOX_OPEN_CURLY">{</token>
  </line>
  <line no="719">
    <token name="T_WHITESPACE">		</token>
    <token name="T_VARIABLE">$this</token>
    <token name="T_OBJECT_OPERATOR">-&gt;</token>
    <token name="T_STRING">_parsed</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_PHPDOX_EQUAL">=</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_CONSTANT_ENCAPSED_STRING">''</token>
    <token name="T_PHPDOX_SEMICOLON">;</token>
  </line>
  <line no="720">
    <token name="T_WHITESPACE">		</token>
    <token name="T_FOREACH">foreach</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_VARIABLE">$this</token>
    <token name="T_OBJECT_OPERATOR">-&gt;</token>
    <token name="T_STRING">_tagArray</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_AS">as</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_VARIABLE">$tag</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_PHPDOX_OPEN_CURLY">{</token>
  </line>
  <line no="721">
    <token name="T_WHITESPACE">			</token>
    <token name="T_SWITCH">switch</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_VARIABLE">$tag</token>
    <token name="T_PHPDOX_OPEN_SQUARE">[</token>
    <token name="T_CONSTANT_ENCAPSED_STRING">'type'</token>
    <token name="T_PHPDOX_CLOSE_SQUARE">]</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_PHPDOX_OPEN_CURLY">{</token>
  </line>
  <line no="722"/>
  <line no="723">
    <token name="T_WHITESPACE">			</token>
    <token name="T_COMMENT">// just text</token>
  </line>
  <line no="724">
    <token name="T_WHITESPACE">			</token>
    <token name="T_CASE">case</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_LNUMBER">0</token>
    <token name="T_PHPDOX_COLON">:</token>
  </line>
  <line no="725">
    <token name="T_WHITESPACE">				</token>
    <token name="T_VARIABLE">$this</token>
    <token name="T_OBJECT_OPERATOR">-&gt;</token>
    <token name="T_STRING">_parsed</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_CONCAT_EQUAL">.=</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_VARIABLE">$tag</token>
    <token name="T_PHPDOX_OPEN_SQUARE">[</token>
    <token name="T_CONSTANT_ENCAPSED_STRING">'text'</token>
    <token name="T_PHPDOX_CLOSE_SQUARE">]</token>
    <token name="T_PHPDOX_SEMICOLON">;</token>
  </line>
  <line no="726">
    <token name="T_WHITESPACE">				</token>
    <token name="T_BREAK">break</token>
    <token name="T_PHPDOX_SEMICOLON">;</token>
  </line>
  <line no="727"/>
  <line no="728">
    <token name="T_WHITESPACE">			</token>
    <token name="T_COMMENT">// opening tag</token>
  </line>
  <line no="729">
    <token name="T_WHITESPACE">			</token>
    <token name="T_CASE">case</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_LNUMBER">1</token>
    <token name="T_PHPDOX_COLON">:</token>
  </line>
  <line no="730">
    <token name="T_WHITESPACE">				</token>
    <token name="T_VARIABLE">$this</token>
    <token name="T_OBJECT_OPERATOR">-&gt;</token>
    <token name="T_STRING">_parsed</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_CONCAT_EQUAL">.=</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_CONSTANT_ENCAPSED_STRING">'&lt;'</token>
    <token name="T_PHPDOX_DOT">.</token>
    <token name="T_VARIABLE">$this</token>
    <token name="T_OBJECT_OPERATOR">-&gt;</token>
    <token name="T_STRING">_definedTags</token>
    <token name="T_PHPDOX_OPEN_SQUARE">[</token>
    <token name="T_VARIABLE">$tag</token>
    <token name="T_PHPDOX_OPEN_SQUARE">[</token>
    <token name="T_CONSTANT_ENCAPSED_STRING">'tag'</token>
    <token name="T_PHPDOX_CLOSE_SQUARE">]</token>
    <token name="T_PHPDOX_CLOSE_SQUARE">]</token>
    <token name="T_PHPDOX_OPEN_SQUARE">[</token>
    <token name="T_CONSTANT_ENCAPSED_STRING">'htmlopen'</token>
    <token name="T_PHPDOX_CLOSE_SQUARE">]</token>
    <token name="T_PHPDOX_SEMICOLON">;</token>
  </line>
  <line no="731">
    <token name="T_WHITESPACE">				</token>
    <token name="T_IF">if</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_VARIABLE">$this</token>
    <token name="T_OBJECT_OPERATOR">-&gt;</token>
    <token name="T_STRING">_options</token>
    <token name="T_PHPDOX_OPEN_SQUARE">[</token>
    <token name="T_CONSTANT_ENCAPSED_STRING">'quotestyle'</token>
    <token name="T_PHPDOX_CLOSE_SQUARE">]</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_IS_EQUAL">==</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_CONSTANT_ENCAPSED_STRING">'single'</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_VARIABLE">$q</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_PHPDOX_EQUAL">=</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_CONSTANT_ENCAPSED_STRING">"'"</token>
    <token name="T_PHPDOX_SEMICOLON">;</token>
  </line>
  <line no="732">
    <token name="T_WHITESPACE">				</token>
    <token name="T_IF">if</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_VARIABLE">$this</token>
    <token name="T_OBJECT_OPERATOR">-&gt;</token>
    <token name="T_STRING">_options</token>
    <token name="T_PHPDOX_OPEN_SQUARE">[</token>
    <token name="T_CONSTANT_ENCAPSED_STRING">'quotestyle'</token>
    <token name="T_PHPDOX_CLOSE_SQUARE">]</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_IS_EQUAL">==</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_CONSTANT_ENCAPSED_STRING">'double'</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_VARIABLE">$q</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_PHPDOX_EQUAL">=</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_CONSTANT_ENCAPSED_STRING">'"'</token>
    <token name="T_PHPDOX_SEMICOLON">;</token>
  </line>
  <line no="733">
    <token name="T_WHITESPACE">				</token>
    <token name="T_FOREACH">foreach</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_VARIABLE">$tag</token>
    <token name="T_PHPDOX_OPEN_SQUARE">[</token>
    <token name="T_CONSTANT_ENCAPSED_STRING">'attributes'</token>
    <token name="T_PHPDOX_CLOSE_SQUARE">]</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_AS">as</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_VARIABLE">$a</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_DOUBLE_ARROW">=&gt;</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_VARIABLE">$v</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_PHPDOX_OPEN_CURLY">{</token>
  </line>
  <line no="734">
    <token name="T_WHITESPACE">					</token>
    <token name="T_COMMENT">//prevent XSS attacks. IMHO this is not enough, though...</token>
  </line>
  <line no="735">
    <token name="T_WHITESPACE">					</token>
    <token name="T_COMMENT">//@see http://pear.php.net/bugs/bug.php?id=5609</token>
  </line>
  <line no="736">
    <token name="T_WHITESPACE">					</token>
    <token name="T_VARIABLE">$v</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_PHPDOX_EQUAL">=</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STRING">preg_replace</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_CONSTANT_ENCAPSED_STRING">'#(script|about|applet|activex|chrome):#is'</token>
    <token name="T_PHPDOX_COMMA">,</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_CONSTANT_ENCAPSED_STRING">"\\1&amp;#058;"</token>
    <token name="T_PHPDOX_COMMA">,</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_VARIABLE">$v</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_PHPDOX_SEMICOLON">;</token>
  </line>
  <line no="737">
    <token name="T_WHITESPACE">					</token>
    <token name="T_VARIABLE">$v</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_PHPDOX_EQUAL">=</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STRING">htmlspecialchars</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_VARIABLE">$v</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_PHPDOX_SEMICOLON">;</token>
  </line>
  <line no="738">
    <token name="T_WHITESPACE">					</token>
    <token name="T_VARIABLE">$v</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_PHPDOX_EQUAL">=</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STRING">str_replace</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_CONSTANT_ENCAPSED_STRING">'&amp;amp;amp;'</token>
    <token name="T_PHPDOX_COMMA">,</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_CONSTANT_ENCAPSED_STRING">'&amp;amp;'</token>
    <token name="T_PHPDOX_COMMA">,</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_VARIABLE">$v</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_PHPDOX_SEMICOLON">;</token>
  </line>
  <line no="739"/>
  <line no="740">
    <token name="T_WHITESPACE">					</token>
    <token name="T_IF">if</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_VARIABLE">$this</token>
    <token name="T_OBJECT_OPERATOR">-&gt;</token>
    <token name="T_STRING">_options</token>
    <token name="T_PHPDOX_OPEN_SQUARE">[</token>
    <token name="T_CONSTANT_ENCAPSED_STRING">'quotewhat'</token>
    <token name="T_PHPDOX_CLOSE_SQUARE">]</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_IS_EQUAL">==</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_CONSTANT_ENCAPSED_STRING">'nothing'</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_BOOLEAN_OR">||</token>
  </line>
  <line no="741">
    <token name="T_WHITESPACE">						</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_VARIABLE">$this</token>
    <token name="T_OBJECT_OPERATOR">-&gt;</token>
    <token name="T_STRING">_options</token>
    <token name="T_PHPDOX_OPEN_SQUARE">[</token>
    <token name="T_CONSTANT_ENCAPSED_STRING">'quotewhat'</token>
    <token name="T_PHPDOX_CLOSE_SQUARE">]</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_IS_EQUAL">==</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_CONSTANT_ENCAPSED_STRING">'strings'</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_BOOLEAN_AND">&amp;&amp;</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STRING">is_numeric</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_VARIABLE">$v</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
  </line>
  <line no="742">
    <token name="T_WHITESPACE">					</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_PHPDOX_OPEN_CURLY">{</token>
  </line>
  <line no="743">
    <token name="T_WHITESPACE">						</token>
    <token name="T_VARIABLE">$this</token>
    <token name="T_OBJECT_OPERATOR">-&gt;</token>
    <token name="T_STRING">_parsed</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_CONCAT_EQUAL">.=</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_CONSTANT_ENCAPSED_STRING">' '</token>
    <token name="T_PHPDOX_DOT">.</token>
    <token name="T_STRING">sprintf</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_VARIABLE">$this</token>
    <token name="T_OBJECT_OPERATOR">-&gt;</token>
    <token name="T_STRING">_definedTags</token>
    <token name="T_PHPDOX_OPEN_SQUARE">[</token>
    <token name="T_VARIABLE">$tag</token>
    <token name="T_PHPDOX_OPEN_SQUARE">[</token>
    <token name="T_CONSTANT_ENCAPSED_STRING">'tag'</token>
    <token name="T_PHPDOX_CLOSE_SQUARE">]</token>
    <token name="T_PHPDOX_CLOSE_SQUARE">]</token>
    <token name="T_PHPDOX_OPEN_SQUARE">[</token>
    <token name="T_CONSTANT_ENCAPSED_STRING">'attributes'</token>
    <token name="T_PHPDOX_CLOSE_SQUARE">]</token>
    <token name="T_PHPDOX_OPEN_SQUARE">[</token>
    <token name="T_VARIABLE">$a</token>
    <token name="T_PHPDOX_CLOSE_SQUARE">]</token>
    <token name="T_PHPDOX_COMMA">,</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_VARIABLE">$v</token>
    <token name="T_PHPDOX_COMMA">,</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_CONSTANT_ENCAPSED_STRING">''</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_PHPDOX_SEMICOLON">;</token>
  </line>
  <line no="744">
    <token name="T_WHITESPACE">					</token>
    <token name="T_PHPDOX_CLOSE_CURLY">}</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_ELSE">else</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_PHPDOX_OPEN_CURLY">{</token>
  </line>
  <line no="745">
    <token name="T_WHITESPACE">						</token>
    <token name="T_VARIABLE">$this</token>
    <token name="T_OBJECT_OPERATOR">-&gt;</token>
    <token name="T_STRING">_parsed</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_CONCAT_EQUAL">.=</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_CONSTANT_ENCAPSED_STRING">' '</token>
    <token name="T_PHPDOX_DOT">.</token>
    <token name="T_STRING">sprintf</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_VARIABLE">$this</token>
    <token name="T_OBJECT_OPERATOR">-&gt;</token>
    <token name="T_STRING">_definedTags</token>
    <token name="T_PHPDOX_OPEN_SQUARE">[</token>
    <token name="T_VARIABLE">$tag</token>
    <token name="T_PHPDOX_OPEN_SQUARE">[</token>
    <token name="T_CONSTANT_ENCAPSED_STRING">'tag'</token>
    <token name="T_PHPDOX_CLOSE_SQUARE">]</token>
    <token name="T_PHPDOX_CLOSE_SQUARE">]</token>
    <token name="T_PHPDOX_OPEN_SQUARE">[</token>
    <token name="T_CONSTANT_ENCAPSED_STRING">'attributes'</token>
    <token name="T_PHPDOX_CLOSE_SQUARE">]</token>
    <token name="T_PHPDOX_OPEN_SQUARE">[</token>
    <token name="T_VARIABLE">$a</token>
    <token name="T_PHPDOX_CLOSE_SQUARE">]</token>
    <token name="T_PHPDOX_COMMA">,</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_VARIABLE">$v</token>
    <token name="T_PHPDOX_COMMA">,</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_VARIABLE">$q</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_PHPDOX_SEMICOLON">;</token>
  </line>
  <line no="746">
    <token name="T_WHITESPACE">					</token>
    <token name="T_PHPDOX_CLOSE_CURLY">}</token>
  </line>
  <line no="747">
    <token name="T_WHITESPACE">				</token>
    <token name="T_PHPDOX_CLOSE_CURLY">}</token>
  </line>
  <line no="748">
    <token name="T_WHITESPACE">				</token>
    <token name="T_IF">if</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_VARIABLE">$this</token>
    <token name="T_OBJECT_OPERATOR">-&gt;</token>
    <token name="T_STRING">_definedTags</token>
    <token name="T_PHPDOX_OPEN_SQUARE">[</token>
    <token name="T_VARIABLE">$tag</token>
    <token name="T_PHPDOX_OPEN_SQUARE">[</token>
    <token name="T_CONSTANT_ENCAPSED_STRING">'tag'</token>
    <token name="T_PHPDOX_CLOSE_SQUARE">]</token>
    <token name="T_PHPDOX_CLOSE_SQUARE">]</token>
    <token name="T_PHPDOX_OPEN_SQUARE">[</token>
    <token name="T_CONSTANT_ENCAPSED_STRING">'htmlclose'</token>
    <token name="T_PHPDOX_CLOSE_SQUARE">]</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_IS_EQUAL">==</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_CONSTANT_ENCAPSED_STRING">''</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_BOOLEAN_AND">&amp;&amp;</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_VARIABLE">$this</token>
    <token name="T_OBJECT_OPERATOR">-&gt;</token>
    <token name="T_STRING">_options</token>
    <token name="T_PHPDOX_OPEN_SQUARE">[</token>
    <token name="T_CONSTANT_ENCAPSED_STRING">'xmlclose'</token>
    <token name="T_PHPDOX_CLOSE_SQUARE">]</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_PHPDOX_OPEN_CURLY">{</token>
  </line>
  <line no="749">
    <token name="T_WHITESPACE">					</token>
    <token name="T_VARIABLE">$this</token>
    <token name="T_OBJECT_OPERATOR">-&gt;</token>
    <token name="T_STRING">_parsed</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_CONCAT_EQUAL">.=</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_CONSTANT_ENCAPSED_STRING">' /'</token>
    <token name="T_PHPDOX_SEMICOLON">;</token>
  </line>
  <line no="750">
    <token name="T_WHITESPACE">				</token>
    <token name="T_PHPDOX_CLOSE_CURLY">}</token>
  </line>
  <line no="751">
    <token name="T_WHITESPACE">				</token>
    <token name="T_VARIABLE">$this</token>
    <token name="T_OBJECT_OPERATOR">-&gt;</token>
    <token name="T_STRING">_parsed</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_CONCAT_EQUAL">.=</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_CONSTANT_ENCAPSED_STRING">'&gt;'</token>
    <token name="T_PHPDOX_SEMICOLON">;</token>
  </line>
  <line no="752">
    <token name="T_WHITESPACE">				</token>
    <token name="T_BREAK">break</token>
    <token name="T_PHPDOX_SEMICOLON">;</token>
  </line>
  <line no="753"/>
  <line no="754">
    <token name="T_WHITESPACE">			</token>
    <token name="T_COMMENT">// closing tag</token>
  </line>
  <line no="755">
    <token name="T_WHITESPACE">			</token>
    <token name="T_CASE">case</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_LNUMBER">2</token>
    <token name="T_PHPDOX_COLON">:</token>
  </line>
  <line no="756">
    <token name="T_WHITESPACE">				</token>
    <token name="T_IF">if</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_VARIABLE">$this</token>
    <token name="T_OBJECT_OPERATOR">-&gt;</token>
    <token name="T_STRING">_definedTags</token>
    <token name="T_PHPDOX_OPEN_SQUARE">[</token>
    <token name="T_VARIABLE">$tag</token>
    <token name="T_PHPDOX_OPEN_SQUARE">[</token>
    <token name="T_CONSTANT_ENCAPSED_STRING">'tag'</token>
    <token name="T_PHPDOX_CLOSE_SQUARE">]</token>
    <token name="T_PHPDOX_CLOSE_SQUARE">]</token>
    <token name="T_PHPDOX_OPEN_SQUARE">[</token>
    <token name="T_CONSTANT_ENCAPSED_STRING">'htmlclose'</token>
    <token name="T_PHPDOX_CLOSE_SQUARE">]</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_IS_NOT_EQUAL">!=</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_CONSTANT_ENCAPSED_STRING">''</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_PHPDOX_OPEN_CURLY">{</token>
  </line>
  <line no="757">
    <token name="T_WHITESPACE">					</token>
    <token name="T_VARIABLE">$this</token>
    <token name="T_OBJECT_OPERATOR">-&gt;</token>
    <token name="T_STRING">_parsed</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_CONCAT_EQUAL">.=</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_CONSTANT_ENCAPSED_STRING">'&lt;/'</token>
    <token name="T_PHPDOX_DOT">.</token>
    <token name="T_VARIABLE">$this</token>
    <token name="T_OBJECT_OPERATOR">-&gt;</token>
    <token name="T_STRING">_definedTags</token>
    <token name="T_PHPDOX_OPEN_SQUARE">[</token>
    <token name="T_VARIABLE">$tag</token>
    <token name="T_PHPDOX_OPEN_SQUARE">[</token>
    <token name="T_CONSTANT_ENCAPSED_STRING">'tag'</token>
    <token name="T_PHPDOX_CLOSE_SQUARE">]</token>
    <token name="T_PHPDOX_CLOSE_SQUARE">]</token>
    <token name="T_PHPDOX_OPEN_SQUARE">[</token>
    <token name="T_CONSTANT_ENCAPSED_STRING">'htmlclose'</token>
    <token name="T_PHPDOX_CLOSE_SQUARE">]</token>
    <token name="T_PHPDOX_DOT">.</token>
    <token name="T_CONSTANT_ENCAPSED_STRING">'&gt;'</token>
    <token name="T_PHPDOX_SEMICOLON">;</token>
  </line>
  <line no="758">
    <token name="T_WHITESPACE">				</token>
    <token name="T_PHPDOX_CLOSE_CURLY">}</token>
  </line>
  <line no="759">
    <token name="T_WHITESPACE">				</token>
    <token name="T_BREAK">break</token>
    <token name="T_PHPDOX_SEMICOLON">;</token>
  </line>
  <line no="760">
    <token name="T_WHITESPACE">			</token>
    <token name="T_PHPDOX_CLOSE_CURLY">}</token>
  </line>
  <line no="761">
    <token name="T_WHITESPACE">		</token>
    <token name="T_PHPDOX_CLOSE_CURLY">}</token>
  </line>
  <line no="762">
    <token name="T_WHITESPACE">	</token>
    <token name="T_PHPDOX_CLOSE_CURLY">}</token>
  </line>
  <line no="763"/>
  <line no="764">
    <token name="T_WHITESPACE">	</token>
    <token name="T_DOC_COMMENT">/**</token>
  </line>
  <line no="765">
    <token name="T_DOC_COMMENT">	 * Sets text in the object to be parsed</token>
  </line>
  <line no="766">
    <token name="T_DOC_COMMENT">	 *</token>
  </line>
  <line no="767">
    <token name="T_DOC_COMMENT">	 * @param    string          the text to set in the object</token>
  </line>
  <line no="768">
    <token name="T_DOC_COMMENT">	 * @return   none</token>
  </line>
  <line no="769">
    <token name="T_DOC_COMMENT">	 * @access   public</token>
  </line>
  <line no="770">
    <token name="T_DOC_COMMENT">	 * @see      getText()</token>
  </line>
  <line no="771">
    <token name="T_DOC_COMMENT">	 * @see      $_text</token>
  </line>
  <line no="772">
    <token name="T_DOC_COMMENT">	 * @author   Stijn de Reede  &lt;sjr@gmx.co.uk&gt;</token>
  </line>
  <line no="773">
    <token name="T_DOC_COMMENT">	 */</token>
  </line>
  <line no="774">
    <token name="T_WHITESPACE">	</token>
    <token name="T_PUBLIC">public</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_FUNCTION">function</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STRING">setText</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_VARIABLE">$str</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
  </line>
  <line no="775">
    <token name="T_WHITESPACE">	</token>
    <token name="T_PHPDOX_OPEN_CURLY">{</token>
  </line>
  <line no="776">
    <token name="T_WHITESPACE">		</token>
    <token name="T_VARIABLE">$this</token>
    <token name="T_OBJECT_OPERATOR">-&gt;</token>
    <token name="T_STRING">_text</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_PHPDOX_EQUAL">=</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_VARIABLE">$str</token>
    <token name="T_PHPDOX_SEMICOLON">;</token>
  </line>
  <line no="777">
    <token name="T_WHITESPACE">	</token>
    <token name="T_PHPDOX_CLOSE_CURLY">}</token>
  </line>
  <line no="778"/>
  <line no="779">
    <token name="T_WHITESPACE">	</token>
    <token name="T_DOC_COMMENT">/**</token>
  </line>
  <line no="780">
    <token name="T_DOC_COMMENT">	 * Gets the unparsed text from the object</token>
  </line>
  <line no="781">
    <token name="T_DOC_COMMENT">	 *</token>
  </line>
  <line no="782">
    <token name="T_DOC_COMMENT">	 * @return   string          the text set in the object</token>
  </line>
  <line no="783">
    <token name="T_DOC_COMMENT">	 * @access   public</token>
  </line>
  <line no="784">
    <token name="T_DOC_COMMENT">	 * @see      setText()</token>
  </line>
  <line no="785">
    <token name="T_DOC_COMMENT">	 * @see      $_text</token>
  </line>
  <line no="786">
    <token name="T_DOC_COMMENT">	 * @author   Stijn de Reede  &lt;sjr@gmx.co.uk&gt;</token>
  </line>
  <line no="787">
    <token name="T_DOC_COMMENT">	 */</token>
  </line>
  <line no="788">
    <token name="T_WHITESPACE">	</token>
    <token name="T_PUBLIC">public</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_FUNCTION">function</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STRING">getText</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
  </line>
  <line no="789">
    <token name="T_WHITESPACE">	</token>
    <token name="T_PHPDOX_OPEN_CURLY">{</token>
  </line>
  <line no="790">
    <token name="T_WHITESPACE">		</token>
    <token name="T_RETURN">return</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_VARIABLE">$this</token>
    <token name="T_OBJECT_OPERATOR">-&gt;</token>
    <token name="T_STRING">_text</token>
    <token name="T_PHPDOX_SEMICOLON">;</token>
  </line>
  <line no="791">
    <token name="T_WHITESPACE">	</token>
    <token name="T_PHPDOX_CLOSE_CURLY">}</token>
  </line>
  <line no="792"/>
  <line no="793">
    <token name="T_WHITESPACE">	</token>
    <token name="T_DOC_COMMENT">/**</token>
  </line>
  <line no="794">
    <token name="T_DOC_COMMENT">	 * Gets the preparsed text from the object</token>
  </line>
  <line no="795">
    <token name="T_DOC_COMMENT">	 *</token>
  </line>
  <line no="796">
    <token name="T_DOC_COMMENT">	 * @return   string          the text set in the object</token>
  </line>
  <line no="797">
    <token name="T_DOC_COMMENT">	 * @access   public</token>
  </line>
  <line no="798">
    <token name="T_DOC_COMMENT">	 * @see      _preparse()</token>
  </line>
  <line no="799">
    <token name="T_DOC_COMMENT">	 * @see      $_preparsed</token>
  </line>
  <line no="800">
    <token name="T_DOC_COMMENT">	 * @author   Stijn de Reede  &lt;sjr@gmx.co.uk&gt;</token>
  </line>
  <line no="801">
    <token name="T_DOC_COMMENT">	 */</token>
  </line>
  <line no="802">
    <token name="T_WHITESPACE">	</token>
    <token name="T_PUBLIC">public</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_FUNCTION">function</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STRING">getPreparsed</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
  </line>
  <line no="803">
    <token name="T_WHITESPACE">	</token>
    <token name="T_PHPDOX_OPEN_CURLY">{</token>
  </line>
  <line no="804">
    <token name="T_WHITESPACE">		</token>
    <token name="T_RETURN">return</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_VARIABLE">$this</token>
    <token name="T_OBJECT_OPERATOR">-&gt;</token>
    <token name="T_STRING">_preparsed</token>
    <token name="T_PHPDOX_SEMICOLON">;</token>
  </line>
  <line no="805">
    <token name="T_WHITESPACE">	</token>
    <token name="T_PHPDOX_CLOSE_CURLY">}</token>
  </line>
  <line no="806"/>
  <line no="807">
    <token name="T_WHITESPACE">	</token>
    <token name="T_DOC_COMMENT">/**</token>
  </line>
  <line no="808">
    <token name="T_DOC_COMMENT">	 * Gets the parsed text from the object</token>
  </line>
  <line no="809">
    <token name="T_DOC_COMMENT">	 *</token>
  </line>
  <line no="810">
    <token name="T_DOC_COMMENT">	 * @return   string          the parsed text set in the object</token>
  </line>
  <line no="811">
    <token name="T_DOC_COMMENT">	 * @access   public</token>
  </line>
  <line no="812">
    <token name="T_DOC_COMMENT">	 * @see      parse()</token>
  </line>
  <line no="813">
    <token name="T_DOC_COMMENT">	 * @see      $_parsed</token>
  </line>
  <line no="814">
    <token name="T_DOC_COMMENT">	 * @author   Stijn de Reede  &lt;sjr@gmx.co.uk&gt;</token>
  </line>
  <line no="815">
    <token name="T_DOC_COMMENT">	 */</token>
  </line>
  <line no="816">
    <token name="T_WHITESPACE">	</token>
    <token name="T_PUBLIC">public</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_FUNCTION">function</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STRING">getParsed</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
  </line>
  <line no="817">
    <token name="T_WHITESPACE">	</token>
    <token name="T_PHPDOX_OPEN_CURLY">{</token>
  </line>
  <line no="818">
    <token name="T_WHITESPACE">		</token>
    <token name="T_RETURN">return</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_VARIABLE">$this</token>
    <token name="T_OBJECT_OPERATOR">-&gt;</token>
    <token name="T_STRING">_parsed</token>
    <token name="T_PHPDOX_SEMICOLON">;</token>
  </line>
  <line no="819">
    <token name="T_WHITESPACE">	</token>
    <token name="T_PHPDOX_CLOSE_CURLY">}</token>
  </line>
  <line no="820"/>
  <line no="821">
    <token name="T_WHITESPACE">	</token>
    <token name="T_DOC_COMMENT">/**</token>
  </line>
  <line no="822">
    <token name="T_DOC_COMMENT">	 * Parses the text set in the object</token>
  </line>
  <line no="823">
    <token name="T_DOC_COMMENT">	 *</token>
  </line>
  <line no="824">
    <token name="T_DOC_COMMENT">	 * @return   none</token>
  </line>
  <line no="825">
    <token name="T_DOC_COMMENT">	 * @access   public</token>
  </line>
  <line no="826">
    <token name="T_DOC_COMMENT">	 * @see      _preparse()</token>
  </line>
  <line no="827">
    <token name="T_DOC_COMMENT">	 * @see      _buildTagArray()</token>
  </line>
  <line no="828">
    <token name="T_DOC_COMMENT">	 * @see      _validateTagArray()</token>
  </line>
  <line no="829">
    <token name="T_DOC_COMMENT">	 * @see      _buildParsedString()</token>
  </line>
  <line no="830">
    <token name="T_DOC_COMMENT">	 * @author   Stijn de Reede  &lt;sjr@gmx.co.uk&gt;</token>
  </line>
  <line no="831">
    <token name="T_DOC_COMMENT">	 */</token>
  </line>
  <line no="832">
    <token name="T_WHITESPACE">	</token>
    <token name="T_PUBLIC">public</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_FUNCTION">function</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STRING">parse</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
  </line>
  <line no="833">
    <token name="T_WHITESPACE">	</token>
    <token name="T_PHPDOX_OPEN_CURLY">{</token>
  </line>
  <line no="834">
    <token name="T_WHITESPACE">		</token>
    <token name="T_VARIABLE">$this</token>
    <token name="T_OBJECT_OPERATOR">-&gt;</token>
    <token name="T_STRING">_preparse</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_PHPDOX_SEMICOLON">;</token>
  </line>
  <line no="835">
    <token name="T_WHITESPACE">		</token>
    <token name="T_VARIABLE">$this</token>
    <token name="T_OBJECT_OPERATOR">-&gt;</token>
    <token name="T_STRING">_buildTagArray</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_PHPDOX_SEMICOLON">;</token>
  </line>
  <line no="836">
    <token name="T_WHITESPACE">		</token>
    <token name="T_VARIABLE">$this</token>
    <token name="T_OBJECT_OPERATOR">-&gt;</token>
    <token name="T_STRING">_validateTagArray</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_PHPDOX_SEMICOLON">;</token>
  </line>
  <line no="837">
    <token name="T_WHITESPACE">		</token>
    <token name="T_VARIABLE">$this</token>
    <token name="T_OBJECT_OPERATOR">-&gt;</token>
    <token name="T_STRING">_buildParsedString</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_PHPDOX_SEMICOLON">;</token>
  </line>
  <line no="838">
    <token name="T_WHITESPACE">	</token>
    <token name="T_PHPDOX_CLOSE_CURLY">}</token>
  </line>
  <line no="839"/>
  <line no="840">
    <token name="T_WHITESPACE">	</token>
    <token name="T_DOC_COMMENT">/**</token>
  </line>
  <line no="841">
    <token name="T_DOC_COMMENT">	 * Quick method to do setText(), parse() and getParsed at once</token>
  </line>
  <line no="842">
    <token name="T_DOC_COMMENT">	 *</token>
  </line>
  <line no="843">
    <token name="T_DOC_COMMENT">	 * @return   none</token>
  </line>
  <line no="844">
    <token name="T_DOC_COMMENT">	 * @access   public</token>
  </line>
  <line no="845">
    <token name="T_DOC_COMMENT">	 * @see      parse()</token>
  </line>
  <line no="846">
    <token name="T_DOC_COMMENT">	 * @see      $_text</token>
  </line>
  <line no="847">
    <token name="T_DOC_COMMENT">	 * @author   Stijn de Reede  &lt;sjr@gmx.co.uk&gt;</token>
  </line>
  <line no="848">
    <token name="T_DOC_COMMENT">	 */</token>
  </line>
  <line no="849">
    <token name="T_WHITESPACE">	</token>
    <token name="T_PUBLIC">public</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_FUNCTION">function</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STRING">qparse</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_VARIABLE">$str</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
  </line>
  <line no="850">
    <token name="T_WHITESPACE">	</token>
    <token name="T_PHPDOX_OPEN_CURLY">{</token>
  </line>
  <line no="851">
    <token name="T_WHITESPACE">		</token>
    <token name="T_VARIABLE">$this</token>
    <token name="T_OBJECT_OPERATOR">-&gt;</token>
    <token name="T_STRING">_text</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_PHPDOX_EQUAL">=</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_VARIABLE">$str</token>
    <token name="T_PHPDOX_SEMICOLON">;</token>
  </line>
  <line no="852">
    <token name="T_WHITESPACE">		</token>
    <token name="T_VARIABLE">$this</token>
    <token name="T_OBJECT_OPERATOR">-&gt;</token>
    <token name="T_STRING">parse</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_PHPDOX_SEMICOLON">;</token>
  </line>
  <line no="853">
    <token name="T_WHITESPACE">		</token>
    <token name="T_RETURN">return</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_VARIABLE">$this</token>
    <token name="T_OBJECT_OPERATOR">-&gt;</token>
    <token name="T_STRING">_parsed</token>
    <token name="T_PHPDOX_SEMICOLON">;</token>
  </line>
  <line no="854">
    <token name="T_WHITESPACE">	</token>
    <token name="T_PHPDOX_CLOSE_CURLY">}</token>
  </line>
  <line no="855"/>
  <line no="856">
    <token name="T_WHITESPACE">	</token>
    <token name="T_DOC_COMMENT">/**</token>
  </line>
  <line no="857">
    <token name="T_DOC_COMMENT">	 * Quick static method to do setText(), parse() and getParsed at once</token>
  </line>
  <line no="858">
    <token name="T_DOC_COMMENT">	 *</token>
  </line>
  <line no="859">
    <token name="T_DOC_COMMENT">	 * @return   none</token>
  </line>
  <line no="860">
    <token name="T_DOC_COMMENT">	 * @access   public</token>
  </line>
  <line no="861">
    <token name="T_DOC_COMMENT">	 * @see      parse()</token>
  </line>
  <line no="862">
    <token name="T_DOC_COMMENT">	 * @see      $_text</token>
  </line>
  <line no="863">
    <token name="T_DOC_COMMENT">	 * @author   Stijn de Reede  &lt;sjr@gmx.co.uk&gt;</token>
  </line>
  <line no="864">
    <token name="T_DOC_COMMENT">	 */</token>
  </line>
  <line no="865">
    <token name="T_WHITESPACE">	</token>
    <token name="T_PUBLIC">public</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_FUNCTION">function</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STRING">staticQparse</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_VARIABLE">$str</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
  </line>
  <line no="866">
    <token name="T_WHITESPACE">	</token>
    <token name="T_PHPDOX_OPEN_CURLY">{</token>
  </line>
  <line no="867">
    <token name="T_WHITESPACE">		</token>
    <token name="T_VARIABLE">$p</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_PHPDOX_EQUAL">=</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_NEW">new</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STRING">SSHTMLBBCodeParser</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_PHPDOX_SEMICOLON">;</token>
  </line>
  <line no="868">
    <token name="T_WHITESPACE">		</token>
    <token name="T_VARIABLE">$str</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_PHPDOX_EQUAL">=</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_VARIABLE">$p</token>
    <token name="T_OBJECT_OPERATOR">-&gt;</token>
    <token name="T_STRING">qparse</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_VARIABLE">$str</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_PHPDOX_SEMICOLON">;</token>
  </line>
  <line no="869">
    <token name="T_WHITESPACE">		</token>
    <token name="T_UNSET">unset</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_VARIABLE">$p</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_PHPDOX_SEMICOLON">;</token>
  </line>
  <line no="870">
    <token name="T_WHITESPACE">		</token>
    <token name="T_RETURN">return</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_VARIABLE">$str</token>
    <token name="T_PHPDOX_SEMICOLON">;</token>
  </line>
  <line no="871">
    <token name="T_WHITESPACE">	</token>
    <token name="T_PHPDOX_CLOSE_CURLY">}</token>
  </line>
  <line no="872">
    <token name="T_PHPDOX_CLOSE_CURLY">}</token>
  </line>
  <line no="873"/>
</source>
