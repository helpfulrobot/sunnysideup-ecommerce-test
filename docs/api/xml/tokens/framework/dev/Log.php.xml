<?xml version="1.0"?>
<source xmlns="http://xml.phpdox.net/token">
  <file xmlns="http://xml.phpdox.net/src" path="/var/www/_modules/ecommerce_test/trunk/docs/en/phpdox/../../../framework/dev" file="Log.php" realpath="/var/www/_modules/ecommerce_test/trunk/framework/dev/Log.php" size="5809" time="2015-03-14T10:39:31+13:00" unixtime="1426282771" sha1="591a95f6f77f92b6d0f41055f0a300bd6a473c49" relative="framework/dev/Log.php"/>
  <line no="1">
    <token name="T_OPEN_TAG">&lt;?php</token>
  </line>
  <line no="2">
    <token name="T_REQUIRE_ONCE">require_once</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_CONSTANT_ENCAPSED_STRING">'Zend/Log.php'</token>
    <token name="T_PHPDOX_SEMICOLON">;</token>
  </line>
  <line no="3"/>
  <line no="4">
    <token name="T_DOC_COMMENT">/**</token>
  </line>
  <line no="5">
    <token name="T_DOC_COMMENT"> * Wrapper class for a logging handler like {@link Zend_Log}</token>
  </line>
  <line no="6">
    <token name="T_DOC_COMMENT"> * which takes a message (or a map of context variables) and</token>
  </line>
  <line no="7">
    <token name="T_DOC_COMMENT"> * sends it to one or more {@link Zend_Log_Writer_Abstract}</token>
  </line>
  <line no="8">
    <token name="T_DOC_COMMENT"> * subclasses for output.</token>
  </line>
  <line no="9">
    <token name="T_DOC_COMMENT"> * </token>
  </line>
  <line no="10">
    <token name="T_DOC_COMMENT"> * These priorities are currently supported:</token>
  </line>
  <line no="11">
    <token name="T_DOC_COMMENT"> *  - SS_Log::ERR</token>
  </line>
  <line no="12">
    <token name="T_DOC_COMMENT"> *  - SS_Log::WARN</token>
  </line>
  <line no="13">
    <token name="T_DOC_COMMENT"> *  - SS_Log::NOTICE</token>
  </line>
  <line no="14">
    <token name="T_DOC_COMMENT"> * </token>
  </line>
  <line no="15">
    <token name="T_DOC_COMMENT"> * You can add an error writer by calling {@link SS_Log::add_writer()}</token>
  </line>
  <line no="16">
    <token name="T_DOC_COMMENT"> * </token>
  </line>
  <line no="17">
    <token name="T_DOC_COMMENT"> * Example usage of logging errors by email notification:</token>
  </line>
  <line no="18">
    <token name="T_DOC_COMMENT"> * &lt;code&gt;</token>
  </line>
  <line no="19">
    <token name="T_DOC_COMMENT"> * SS_Log::add_writer(new SS_LogEmailWriter('my@email.com'), SS_Log::ERR);</token>
  </line>
  <line no="20">
    <token name="T_DOC_COMMENT"> * &lt;/code&gt;</token>
  </line>
  <line no="21">
    <token name="T_DOC_COMMENT"> * </token>
  </line>
  <line no="22">
    <token name="T_DOC_COMMENT"> * Example usage of logging errors by file:</token>
  </line>
  <line no="23">
    <token name="T_DOC_COMMENT"> * &lt;code&gt;</token>
  </line>
  <line no="24">
    <token name="T_DOC_COMMENT"> *	SS_Log::add_writer(new SS_LogFileWriter('/var/log/silverstripe/errors.log'), SS_Log::ERR);</token>
  </line>
  <line no="25">
    <token name="T_DOC_COMMENT"> * &lt;/code&gt;</token>
  </line>
  <line no="26">
    <token name="T_DOC_COMMENT"> *</token>
  </line>
  <line no="27">
    <token name="T_DOC_COMMENT"> * Example usage of logging at warnings and errors by setting the priority to '&lt;=':</token>
  </line>
  <line no="28">
    <token name="T_DOC_COMMENT"> * &lt;code&gt;</token>
  </line>
  <line no="29">
    <token name="T_DOC_COMMENT"> * SS_Log::add_writer(new SS_LogEmailWriter('my@email.com'), SS_Log::WARN, '&lt;=');</token>
  </line>
  <line no="30">
    <token name="T_DOC_COMMENT"> * &lt;/code&gt;</token>
  </line>
  <line no="31">
    <token name="T_DOC_COMMENT"> *	</token>
  </line>
  <line no="32">
    <token name="T_DOC_COMMENT"> * Each writer object can be assigned a formatter. The formatter is</token>
  </line>
  <line no="33">
    <token name="T_DOC_COMMENT"> * responsible for formatting the message before giving it to the writer.</token>
  </line>
  <line no="34">
    <token name="T_DOC_COMMENT"> * {@link SS_LogErrorEmailFormatter} is such an example that formats errors</token>
  </line>
  <line no="35">
    <token name="T_DOC_COMMENT"> * into HTML for human readability in an email client.</token>
  </line>
  <line no="36">
    <token name="T_DOC_COMMENT"> * </token>
  </line>
  <line no="37">
    <token name="T_DOC_COMMENT"> * Formatters are added to writers like this:</token>
  </line>
  <line no="38">
    <token name="T_DOC_COMMENT"> * &lt;code&gt;</token>
  </line>
  <line no="39">
    <token name="T_DOC_COMMENT"> * $logEmailWriter = new SS_LogEmailWriter('my@email.com');</token>
  </line>
  <line no="40">
    <token name="T_DOC_COMMENT"> * $myEmailFormatter = new MyLogEmailFormatter();</token>
  </line>
  <line no="41">
    <token name="T_DOC_COMMENT"> * $logEmailWriter-&gt;setFormatter($myEmailFormatter);</token>
  </line>
  <line no="42">
    <token name="T_DOC_COMMENT"> * &lt;/code&gt;</token>
  </line>
  <line no="43">
    <token name="T_DOC_COMMENT"> * </token>
  </line>
  <line no="44">
    <token name="T_DOC_COMMENT"> * @package framework</token>
  </line>
  <line no="45">
    <token name="T_DOC_COMMENT"> * @subpackage dev</token>
  </line>
  <line no="46">
    <token name="T_DOC_COMMENT"> */</token>
  </line>
  <line no="47">
    <token name="T_CLASS">class</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STRING">SS_Log</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_PHPDOX_OPEN_CURLY">{</token>
  </line>
  <line no="48"/>
  <line no="49">
    <token name="T_WHITESPACE">	</token>
    <token name="T_CONST">const</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STRING">ERR</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_PHPDOX_EQUAL">=</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STRING">Zend_Log</token>
    <token name="T_DOUBLE_COLON">::</token>
    <token name="T_STRING">ERR</token>
    <token name="T_PHPDOX_SEMICOLON">;</token>
  </line>
  <line no="50">
    <token name="T_WHITESPACE">	</token>
    <token name="T_CONST">const</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STRING">WARN</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_PHPDOX_EQUAL">=</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STRING">Zend_Log</token>
    <token name="T_DOUBLE_COLON">::</token>
    <token name="T_STRING">WARN</token>
    <token name="T_PHPDOX_SEMICOLON">;</token>
  </line>
  <line no="51">
    <token name="T_WHITESPACE">	</token>
    <token name="T_CONST">const</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STRING">NOTICE</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_PHPDOX_EQUAL">=</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STRING">Zend_Log</token>
    <token name="T_DOUBLE_COLON">::</token>
    <token name="T_STRING">NOTICE</token>
    <token name="T_PHPDOX_SEMICOLON">;</token>
  </line>
  <line no="52">
    <token name="T_WHITESPACE">	</token>
    <token name="T_CONST">const</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STRING">INFO</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_PHPDOX_EQUAL">=</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STRING">Zend_Log</token>
    <token name="T_DOUBLE_COLON">::</token>
    <token name="T_STRING">INFO</token>
    <token name="T_PHPDOX_SEMICOLON">;</token>
  </line>
  <line no="53">
    <token name="T_WHITESPACE">	</token>
    <token name="T_CONST">const</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STRING">DEBUG</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_PHPDOX_EQUAL">=</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STRING">Zend_Log</token>
    <token name="T_DOUBLE_COLON">::</token>
    <token name="T_STRING">DEBUG</token>
    <token name="T_PHPDOX_SEMICOLON">;</token>
  </line>
  <line no="54"/>
  <line no="55">
    <token name="T_WHITESPACE">	</token>
    <token name="T_DOC_COMMENT">/**</token>
  </line>
  <line no="56">
    <token name="T_DOC_COMMENT">	 * Logger class to use.</token>
  </line>
  <line no="57">
    <token name="T_DOC_COMMENT">	 * @see SS_Log::get_logger()</token>
  </line>
  <line no="58">
    <token name="T_DOC_COMMENT">	 * @var string</token>
  </line>
  <line no="59">
    <token name="T_DOC_COMMENT">	 */</token>
  </line>
  <line no="60">
    <token name="T_WHITESPACE">	</token>
    <token name="T_PUBLIC">public</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STATIC">static</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_VARIABLE">$logger_class</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_PHPDOX_EQUAL">=</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_CONSTANT_ENCAPSED_STRING">'SS_ZendLog'</token>
    <token name="T_PHPDOX_SEMICOLON">;</token>
  </line>
  <line no="61"/>
  <line no="62">
    <token name="T_WHITESPACE">	</token>
    <token name="T_DOC_COMMENT">/**</token>
  </line>
  <line no="63">
    <token name="T_DOC_COMMENT">	 * @see SS_Log::get_logger()</token>
  </line>
  <line no="64">
    <token name="T_DOC_COMMENT">	 * @var object</token>
  </line>
  <line no="65">
    <token name="T_DOC_COMMENT">	 */</token>
  </line>
  <line no="66">
    <token name="T_WHITESPACE">	</token>
    <token name="T_PROTECTED">protected</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STATIC">static</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_VARIABLE">$logger</token>
    <token name="T_PHPDOX_SEMICOLON">;</token>
  </line>
  <line no="67"/>
  <line no="68">
    <token name="T_WHITESPACE">	</token>
    <token name="T_DOC_COMMENT">/**</token>
  </line>
  <line no="69">
    <token name="T_DOC_COMMENT">	 * @var array Logs additional context from PHP's superglobals.</token>
  </line>
  <line no="70">
    <token name="T_DOC_COMMENT">	 * Caution: Depends on logger implementation (mainly targeted at {@link SS_LogEmailWriter}).</token>
  </line>
  <line no="71">
    <token name="T_DOC_COMMENT">	 * @see http://framework.zend.com/manual/en/zend.log.overview.html#zend.log.overview.understanding-fields</token>
  </line>
  <line no="72">
    <token name="T_DOC_COMMENT">	 */</token>
  </line>
  <line no="73">
    <token name="T_WHITESPACE">	</token>
    <token name="T_PROTECTED">protected</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STATIC">static</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_VARIABLE">$log_globals</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_PHPDOX_EQUAL">=</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_ARRAY">array</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
  </line>
  <line no="74">
    <token name="T_WHITESPACE">		</token>
    <token name="T_CONSTANT_ENCAPSED_STRING">'_SERVER'</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_DOUBLE_ARROW">=&gt;</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_ARRAY">array</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
  </line>
  <line no="75">
    <token name="T_WHITESPACE">			</token>
    <token name="T_CONSTANT_ENCAPSED_STRING">'HTTP_ACCEPT'</token>
    <token name="T_PHPDOX_COMMA">,</token>
  </line>
  <line no="76">
    <token name="T_WHITESPACE">			</token>
    <token name="T_CONSTANT_ENCAPSED_STRING">'HTTP_ACCEPT_CHARSET'</token>
    <token name="T_PHPDOX_COMMA">,</token>
    <token name="T_WHITESPACE"> </token>
  </line>
  <line no="77">
    <token name="T_WHITESPACE">			</token>
    <token name="T_CONSTANT_ENCAPSED_STRING">'HTTP_ACCEPT_ENCODING'</token>
    <token name="T_PHPDOX_COMMA">,</token>
    <token name="T_WHITESPACE"> </token>
  </line>
  <line no="78">
    <token name="T_WHITESPACE">			</token>
    <token name="T_CONSTANT_ENCAPSED_STRING">'HTTP_ACCEPT_LANGUAGE'</token>
    <token name="T_PHPDOX_COMMA">,</token>
    <token name="T_WHITESPACE"> </token>
  </line>
  <line no="79">
    <token name="T_WHITESPACE">			</token>
    <token name="T_CONSTANT_ENCAPSED_STRING">'HTTP_REFERRER'</token>
    <token name="T_PHPDOX_COMMA">,</token>
  </line>
  <line no="80">
    <token name="T_WHITESPACE">			</token>
    <token name="T_CONSTANT_ENCAPSED_STRING">'HTTP_USER_AGENT'</token>
    <token name="T_PHPDOX_COMMA">,</token>
  </line>
  <line no="81">
    <token name="T_WHITESPACE">			</token>
    <token name="T_CONSTANT_ENCAPSED_STRING">'HTTPS'</token>
    <token name="T_PHPDOX_COMMA">,</token>
  </line>
  <line no="82">
    <token name="T_WHITESPACE">			</token>
    <token name="T_CONSTANT_ENCAPSED_STRING">'REMOTE_ADDR'</token>
    <token name="T_PHPDOX_COMMA">,</token>
  </line>
  <line no="83">
    <token name="T_WHITESPACE">		</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_PHPDOX_COMMA">,</token>
  </line>
  <line no="84">
    <token name="T_WHITESPACE">	</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_PHPDOX_SEMICOLON">;</token>
  </line>
  <line no="85"/>
  <line no="86">
    <token name="T_WHITESPACE">	</token>
    <token name="T_DOC_COMMENT">/**</token>
  </line>
  <line no="87">
    <token name="T_DOC_COMMENT">	 * Get the logger currently in use, or create a new one if it doesn't exist.</token>
  </line>
  <line no="88">
    <token name="T_DOC_COMMENT">	 * </token>
  </line>
  <line no="89">
    <token name="T_DOC_COMMENT">	 * @return object</token>
  </line>
  <line no="90">
    <token name="T_DOC_COMMENT">	 */</token>
  </line>
  <line no="91">
    <token name="T_WHITESPACE">	</token>
    <token name="T_PUBLIC">public</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STATIC">static</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_FUNCTION">function</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STRING">get_logger</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_PHPDOX_OPEN_CURLY">{</token>
  </line>
  <line no="92">
    <token name="T_WHITESPACE">		</token>
    <token name="T_IF">if</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_PHPDOX_EXCLAMATION_MARK">!</token>
    <token name="T_STATIC">static</token>
    <token name="T_DOUBLE_COLON">::</token>
    <token name="T_VARIABLE">$logger</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_PHPDOX_OPEN_CURLY">{</token>
  </line>
  <line no="93">
    <token name="T_WHITESPACE">			</token>
    <token name="T_COMMENT">// Create default logger</token>
  </line>
  <line no="94">
    <token name="T_WHITESPACE">			</token>
    <token name="T_STATIC">static</token>
    <token name="T_DOUBLE_COLON">::</token>
    <token name="T_VARIABLE">$logger</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_PHPDOX_EQUAL">=</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_NEW">new</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STATIC">static</token>
    <token name="T_DOUBLE_COLON">::</token>
    <token name="T_VARIABLE">$logger_class</token>
    <token name="T_PHPDOX_SEMICOLON">;</token>
  </line>
  <line no="95"/>
  <line no="96">
    <token name="T_WHITESPACE">			</token>
    <token name="T_COMMENT">// Add default context (shouldn't change until the actual log event happens)</token>
  </line>
  <line no="97">
    <token name="T_WHITESPACE">			</token>
    <token name="T_FOREACH">foreach</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_STATIC">static</token>
    <token name="T_DOUBLE_COLON">::</token>
    <token name="T_VARIABLE">$log_globals</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_AS">as</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_VARIABLE">$globalName</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_DOUBLE_ARROW">=&gt;</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_VARIABLE">$keys</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_PHPDOX_OPEN_CURLY">{</token>
  </line>
  <line no="98">
    <token name="T_WHITESPACE">				</token>
    <token name="T_FOREACH">foreach</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_VARIABLE">$keys</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_AS">as</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_VARIABLE">$key</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_PHPDOX_OPEN_CURLY">{</token>
  </line>
  <line no="99">
    <token name="T_WHITESPACE">					</token>
    <token name="T_VARIABLE">$val</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_PHPDOX_EQUAL">=</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_ISSET">isset</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_VARIABLE">$GLOBALS</token>
    <token name="T_PHPDOX_OPEN_SQUARE">[</token>
    <token name="T_VARIABLE">$globalName</token>
    <token name="T_PHPDOX_CLOSE_SQUARE">]</token>
    <token name="T_PHPDOX_OPEN_SQUARE">[</token>
    <token name="T_VARIABLE">$key</token>
    <token name="T_PHPDOX_CLOSE_SQUARE">]</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_PHPDOX_QUESTION_MARK">?</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_VARIABLE">$GLOBALS</token>
    <token name="T_PHPDOX_OPEN_SQUARE">[</token>
    <token name="T_VARIABLE">$globalName</token>
    <token name="T_PHPDOX_CLOSE_SQUARE">]</token>
    <token name="T_PHPDOX_OPEN_SQUARE">[</token>
    <token name="T_VARIABLE">$key</token>
    <token name="T_PHPDOX_CLOSE_SQUARE">]</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_PHPDOX_COLON">:</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STRING">null</token>
    <token name="T_PHPDOX_SEMICOLON">;</token>
  </line>
  <line no="100">
    <token name="T_WHITESPACE">					</token>
    <token name="T_STATIC">static</token>
    <token name="T_DOUBLE_COLON">::</token>
    <token name="T_VARIABLE">$logger</token>
    <token name="T_OBJECT_OPERATOR">-&gt;</token>
    <token name="T_STRING">setEventItem</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_STRING">sprintf</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_CONSTANT_ENCAPSED_STRING">'$%s[\'%s\']'</token>
    <token name="T_PHPDOX_COMMA">,</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_VARIABLE">$globalName</token>
    <token name="T_PHPDOX_COMMA">,</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_VARIABLE">$key</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_PHPDOX_COMMA">,</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_VARIABLE">$val</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_PHPDOX_SEMICOLON">;</token>
  </line>
  <line no="101">
    <token name="T_WHITESPACE">				</token>
    <token name="T_PHPDOX_CLOSE_CURLY">}</token>
  </line>
  <line no="102">
    <token name="T_WHITESPACE">			</token>
    <token name="T_PHPDOX_CLOSE_CURLY">}</token>
  </line>
  <line no="103"/>
  <line no="104">
    <token name="T_WHITESPACE">		</token>
    <token name="T_PHPDOX_CLOSE_CURLY">}</token>
  </line>
  <line no="105">
    <token name="T_WHITESPACE">		</token>
    <token name="T_RETURN">return</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STATIC">static</token>
    <token name="T_DOUBLE_COLON">::</token>
    <token name="T_VARIABLE">$logger</token>
    <token name="T_PHPDOX_SEMICOLON">;</token>
  </line>
  <line no="106">
    <token name="T_WHITESPACE">	</token>
    <token name="T_PHPDOX_CLOSE_CURLY">}</token>
  </line>
  <line no="107"/>
  <line no="108">
    <token name="T_WHITESPACE">	</token>
    <token name="T_DOC_COMMENT">/**</token>
  </line>
  <line no="109">
    <token name="T_DOC_COMMENT">	 * Get all writers in use by the logger.</token>
  </line>
  <line no="110">
    <token name="T_DOC_COMMENT">	 * @return array Collection of Zend_Log_Writer_Abstract instances</token>
  </line>
  <line no="111">
    <token name="T_DOC_COMMENT">	 */</token>
  </line>
  <line no="112">
    <token name="T_WHITESPACE">	</token>
    <token name="T_PUBLIC">public</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STATIC">static</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_FUNCTION">function</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STRING">get_writers</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_PHPDOX_OPEN_CURLY">{</token>
  </line>
  <line no="113">
    <token name="T_WHITESPACE">		</token>
    <token name="T_RETURN">return</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STATIC">static</token>
    <token name="T_DOUBLE_COLON">::</token>
    <token name="T_STRING">get_logger</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_OBJECT_OPERATOR">-&gt;</token>
    <token name="T_STRING">getWriters</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_PHPDOX_SEMICOLON">;</token>
  </line>
  <line no="114">
    <token name="T_WHITESPACE">	</token>
    <token name="T_PHPDOX_CLOSE_CURLY">}</token>
  </line>
  <line no="115"/>
  <line no="116">
    <token name="T_WHITESPACE">	</token>
    <token name="T_DOC_COMMENT">/**</token>
  </line>
  <line no="117">
    <token name="T_DOC_COMMENT">	 * Remove all writers currently in use.</token>
  </line>
  <line no="118">
    <token name="T_DOC_COMMENT">	 */</token>
  </line>
  <line no="119">
    <token name="T_WHITESPACE">	</token>
    <token name="T_PUBLIC">public</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STATIC">static</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_FUNCTION">function</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STRING">clear_writers</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_PHPDOX_OPEN_CURLY">{</token>
  </line>
  <line no="120">
    <token name="T_WHITESPACE">		</token>
    <token name="T_STATIC">static</token>
    <token name="T_DOUBLE_COLON">::</token>
    <token name="T_STRING">get_logger</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_OBJECT_OPERATOR">-&gt;</token>
    <token name="T_STRING">clearWriters</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_PHPDOX_SEMICOLON">;</token>
  </line>
  <line no="121">
    <token name="T_WHITESPACE">	</token>
    <token name="T_PHPDOX_CLOSE_CURLY">}</token>
  </line>
  <line no="122"/>
  <line no="123">
    <token name="T_WHITESPACE">	</token>
    <token name="T_DOC_COMMENT">/**</token>
  </line>
  <line no="124">
    <token name="T_DOC_COMMENT">	 * Remove a writer instance from the logger.</token>
  </line>
  <line no="125">
    <token name="T_DOC_COMMENT">	 * @param object $writer Zend_Log_Writer_Abstract instance</token>
  </line>
  <line no="126">
    <token name="T_DOC_COMMENT">	 */</token>
  </line>
  <line no="127">
    <token name="T_WHITESPACE">	</token>
    <token name="T_PUBLIC">public</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STATIC">static</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_FUNCTION">function</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STRING">remove_writer</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_VARIABLE">$writer</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_PHPDOX_OPEN_CURLY">{</token>
  </line>
  <line no="128">
    <token name="T_WHITESPACE">		</token>
    <token name="T_STATIC">static</token>
    <token name="T_DOUBLE_COLON">::</token>
    <token name="T_STRING">get_logger</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_OBJECT_OPERATOR">-&gt;</token>
    <token name="T_STRING">removeWriter</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_VARIABLE">$writer</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_PHPDOX_SEMICOLON">;</token>
  </line>
  <line no="129">
    <token name="T_WHITESPACE">	</token>
    <token name="T_PHPDOX_CLOSE_CURLY">}</token>
  </line>
  <line no="130"/>
  <line no="131">
    <token name="T_WHITESPACE">	</token>
    <token name="T_DOC_COMMENT">/**</token>
  </line>
  <line no="132">
    <token name="T_DOC_COMMENT">	 * Add a writer instance to the logger.</token>
  </line>
  <line no="133">
    <token name="T_DOC_COMMENT">	 * @param object $writer Zend_Log_Writer_Abstract instance</token>
  </line>
  <line no="134">
    <token name="T_DOC_COMMENT">	 * @param const $priority Priority. Possible values: SS_Log::ERR, SS_Log::WARN or SS_Log::NOTICE</token>
  </line>
  <line no="135">
    <token name="T_DOC_COMMENT">	 * @param $comparison Priority comparison operator.  Acts on the integer values of the error</token>
  </line>
  <line no="136">
    <token name="T_DOC_COMMENT">	 * levels, where more serious errors are lower numbers.  By default this is "=", which means only</token>
  </line>
  <line no="137">
    <token name="T_DOC_COMMENT">	 * the given priority will be logged.  Set to "&lt;=" if you want to track errors of *at least* </token>
  </line>
  <line no="138">
    <token name="T_DOC_COMMENT">	 * the given priority.</token>
  </line>
  <line no="139">
    <token name="T_DOC_COMMENT">	 */</token>
  </line>
  <line no="140">
    <token name="T_WHITESPACE">	</token>
    <token name="T_PUBLIC">public</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STATIC">static</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_FUNCTION">function</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STRING">add_writer</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_VARIABLE">$writer</token>
    <token name="T_PHPDOX_COMMA">,</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_VARIABLE">$priority</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_PHPDOX_EQUAL">=</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STRING">null</token>
    <token name="T_PHPDOX_COMMA">,</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_VARIABLE">$comparison</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_PHPDOX_EQUAL">=</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_CONSTANT_ENCAPSED_STRING">'='</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_PHPDOX_OPEN_CURLY">{</token>
  </line>
  <line no="141">
    <token name="T_WHITESPACE">		</token>
    <token name="T_IF">if</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_VARIABLE">$priority</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_VARIABLE">$writer</token>
    <token name="T_OBJECT_OPERATOR">-&gt;</token>
    <token name="T_STRING">addFilter</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_NEW">new</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STRING">Zend_Log_Filter_Priority</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_VARIABLE">$priority</token>
    <token name="T_PHPDOX_COMMA">,</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_VARIABLE">$comparison</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_PHPDOX_SEMICOLON">;</token>
  </line>
  <line no="142">
    <token name="T_WHITESPACE">		</token>
    <token name="T_STATIC">static</token>
    <token name="T_DOUBLE_COLON">::</token>
    <token name="T_STRING">get_logger</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_OBJECT_OPERATOR">-&gt;</token>
    <token name="T_STRING">addWriter</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_VARIABLE">$writer</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_PHPDOX_SEMICOLON">;</token>
  </line>
  <line no="143">
    <token name="T_WHITESPACE">	</token>
    <token name="T_PHPDOX_CLOSE_CURLY">}</token>
  </line>
  <line no="144"/>
  <line no="145">
    <token name="T_WHITESPACE">	</token>
    <token name="T_DOC_COMMENT">/**</token>
  </line>
  <line no="146">
    <token name="T_DOC_COMMENT">	 * Dispatch a message by priority level.</token>
  </line>
  <line no="147">
    <token name="T_DOC_COMMENT">	 * </token>
  </line>
  <line no="148">
    <token name="T_DOC_COMMENT">	 * The message parameter can be either a string (a simple error</token>
  </line>
  <line no="149">
    <token name="T_DOC_COMMENT">	 * message), or an array of variables. The latter is useful for passing</token>
  </line>
  <line no="150">
    <token name="T_DOC_COMMENT">	 * along a list of debug information for the writer to handle, such as</token>
  </line>
  <line no="151">
    <token name="T_DOC_COMMENT">	 * error code, error line, error context (backtrace).</token>
  </line>
  <line no="152">
    <token name="T_DOC_COMMENT">	 * </token>
  </line>
  <line no="153">
    <token name="T_DOC_COMMENT">	 * @param mixed $message Exception object or array of error context variables</token>
  </line>
  <line no="154">
    <token name="T_DOC_COMMENT">	 * @param const $priority Priority. Possible values: SS_Log::ERR, SS_Log::WARN or SS_Log::NOTICE</token>
  </line>
  <line no="155">
    <token name="T_DOC_COMMENT">	 * @param  mixed    $extras    Extra information to log in event</token>
  </line>
  <line no="156">
    <token name="T_DOC_COMMENT">	 */</token>
  </line>
  <line no="157">
    <token name="T_WHITESPACE">	</token>
    <token name="T_PUBLIC">public</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STATIC">static</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_FUNCTION">function</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STRING">log</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_VARIABLE">$message</token>
    <token name="T_PHPDOX_COMMA">,</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_VARIABLE">$priority</token>
    <token name="T_PHPDOX_COMMA">,</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_VARIABLE">$extras</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_PHPDOX_EQUAL">=</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STRING">null</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_PHPDOX_OPEN_CURLY">{</token>
  </line>
  <line no="158">
    <token name="T_WHITESPACE">		</token>
    <token name="T_IF">if</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_VARIABLE">$message</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_INSTANCEOF">instanceof</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STRING">Exception</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_PHPDOX_OPEN_CURLY">{</token>
  </line>
  <line no="159">
    <token name="T_WHITESPACE">			</token>
    <token name="T_VARIABLE">$message</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_PHPDOX_EQUAL">=</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_ARRAY">array</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
  </line>
  <line no="160">
    <token name="T_WHITESPACE">				</token>
    <token name="T_CONSTANT_ENCAPSED_STRING">'errno'</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_DOUBLE_ARROW">=&gt;</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_CONSTANT_ENCAPSED_STRING">''</token>
    <token name="T_PHPDOX_COMMA">,</token>
  </line>
  <line no="161">
    <token name="T_WHITESPACE">				</token>
    <token name="T_CONSTANT_ENCAPSED_STRING">'errstr'</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_DOUBLE_ARROW">=&gt;</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_VARIABLE">$message</token>
    <token name="T_OBJECT_OPERATOR">-&gt;</token>
    <token name="T_STRING">getMessage</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_PHPDOX_COMMA">,</token>
  </line>
  <line no="162">
    <token name="T_WHITESPACE">				</token>
    <token name="T_CONSTANT_ENCAPSED_STRING">'errfile'</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_DOUBLE_ARROW">=&gt;</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_VARIABLE">$message</token>
    <token name="T_OBJECT_OPERATOR">-&gt;</token>
    <token name="T_STRING">getFile</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_PHPDOX_COMMA">,</token>
  </line>
  <line no="163">
    <token name="T_WHITESPACE">				</token>
    <token name="T_CONSTANT_ENCAPSED_STRING">'errline'</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_DOUBLE_ARROW">=&gt;</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_VARIABLE">$message</token>
    <token name="T_OBJECT_OPERATOR">-&gt;</token>
    <token name="T_STRING">getLine</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_PHPDOX_COMMA">,</token>
  </line>
  <line no="164">
    <token name="T_WHITESPACE">				</token>
    <token name="T_CONSTANT_ENCAPSED_STRING">'errcontext'</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_DOUBLE_ARROW">=&gt;</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_VARIABLE">$message</token>
    <token name="T_OBJECT_OPERATOR">-&gt;</token>
    <token name="T_STRING">getTrace</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
  </line>
  <line no="165">
    <token name="T_WHITESPACE">			</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_PHPDOX_SEMICOLON">;</token>
  </line>
  <line no="166">
    <token name="T_WHITESPACE">		</token>
    <token name="T_PHPDOX_CLOSE_CURLY">}</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_ELSEIF">elseif</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_STRING">is_string</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_VARIABLE">$message</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_PHPDOX_OPEN_CURLY">{</token>
  </line>
  <line no="167">
    <token name="T_WHITESPACE">			</token>
    <token name="T_VARIABLE">$trace</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_PHPDOX_EQUAL">=</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STRING">SS_Backtrace</token>
    <token name="T_DOUBLE_COLON">::</token>
    <token name="T_STRING">filtered_backtrace</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_PHPDOX_SEMICOLON">;</token>
  </line>
  <line no="168">
    <token name="T_WHITESPACE">			</token>
    <token name="T_VARIABLE">$lastTrace</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_PHPDOX_EQUAL">=</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_VARIABLE">$trace</token>
    <token name="T_PHPDOX_OPEN_SQUARE">[</token>
    <token name="T_LNUMBER">0</token>
    <token name="T_PHPDOX_CLOSE_SQUARE">]</token>
    <token name="T_PHPDOX_SEMICOLON">;</token>
  </line>
  <line no="169">
    <token name="T_WHITESPACE">			</token>
    <token name="T_VARIABLE">$message</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_PHPDOX_EQUAL">=</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_ARRAY">array</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
  </line>
  <line no="170">
    <token name="T_WHITESPACE">				</token>
    <token name="T_CONSTANT_ENCAPSED_STRING">'errno'</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_DOUBLE_ARROW">=&gt;</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_CONSTANT_ENCAPSED_STRING">''</token>
    <token name="T_PHPDOX_COMMA">,</token>
  </line>
  <line no="171">
    <token name="T_WHITESPACE">				</token>
    <token name="T_CONSTANT_ENCAPSED_STRING">'errstr'</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_DOUBLE_ARROW">=&gt;</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_VARIABLE">$message</token>
    <token name="T_PHPDOX_COMMA">,</token>
  </line>
  <line no="172">
    <token name="T_WHITESPACE">				</token>
    <token name="T_CONSTANT_ENCAPSED_STRING">'errfile'</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_DOUBLE_ARROW">=&gt;</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_ISSET">isset</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_VARIABLE">$lastTrace</token>
    <token name="T_PHPDOX_OPEN_SQUARE">[</token>
    <token name="T_CONSTANT_ENCAPSED_STRING">'file'</token>
    <token name="T_PHPDOX_CLOSE_SQUARE">]</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_PHPDOX_QUESTION_MARK">?</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_VARIABLE">$lastTrace</token>
    <token name="T_PHPDOX_OPEN_SQUARE">[</token>
    <token name="T_CONSTANT_ENCAPSED_STRING">'file'</token>
    <token name="T_PHPDOX_CLOSE_SQUARE">]</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_PHPDOX_COLON">:</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STRING">null</token>
    <token name="T_PHPDOX_COMMA">,</token>
  </line>
  <line no="173">
    <token name="T_WHITESPACE">				</token>
    <token name="T_CONSTANT_ENCAPSED_STRING">'errline'</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_DOUBLE_ARROW">=&gt;</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_ISSET">isset</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_VARIABLE">$lastTrace</token>
    <token name="T_PHPDOX_OPEN_SQUARE">[</token>
    <token name="T_CONSTANT_ENCAPSED_STRING">'line'</token>
    <token name="T_PHPDOX_CLOSE_SQUARE">]</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_PHPDOX_QUESTION_MARK">?</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_VARIABLE">$lastTrace</token>
    <token name="T_PHPDOX_OPEN_SQUARE">[</token>
    <token name="T_CONSTANT_ENCAPSED_STRING">'line'</token>
    <token name="T_PHPDOX_CLOSE_SQUARE">]</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_PHPDOX_COLON">:</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STRING">null</token>
    <token name="T_PHPDOX_COMMA">,</token>
  </line>
  <line no="174">
    <token name="T_WHITESPACE">				</token>
    <token name="T_CONSTANT_ENCAPSED_STRING">'errcontext'</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_DOUBLE_ARROW">=&gt;</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_VARIABLE">$trace</token>
  </line>
  <line no="175">
    <token name="T_WHITESPACE">			</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_PHPDOX_SEMICOLON">;</token>
  </line>
  <line no="176">
    <token name="T_WHITESPACE">		</token>
    <token name="T_PHPDOX_CLOSE_CURLY">}</token>
  </line>
  <line no="177">
    <token name="T_WHITESPACE">		</token>
    <token name="T_TRY">try</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_PHPDOX_OPEN_CURLY">{</token>
  </line>
  <line no="178">
    <token name="T_WHITESPACE">			</token>
    <token name="T_STATIC">static</token>
    <token name="T_DOUBLE_COLON">::</token>
    <token name="T_STRING">get_logger</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_OBJECT_OPERATOR">-&gt;</token>
    <token name="T_STRING">log</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_VARIABLE">$message</token>
    <token name="T_PHPDOX_COMMA">,</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_VARIABLE">$priority</token>
    <token name="T_PHPDOX_COMMA">,</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_VARIABLE">$extras</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_PHPDOX_SEMICOLON">;</token>
  </line>
  <line no="179">
    <token name="T_WHITESPACE">		</token>
    <token name="T_PHPDOX_CLOSE_CURLY">}</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_CATCH">catch</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_STRING">Exception</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_VARIABLE">$e</token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_PHPDOX_OPEN_CURLY">{</token>
  </line>
  <line no="180">
    <token name="T_WHITESPACE">			</token>
    <token name="T_COMMENT">// @todo How do we handle exceptions thrown from Zend_Log?</token>
  </line>
  <line no="181">
    <token name="T_WHITESPACE">			</token>
    <token name="T_COMMENT">// For example, an exception is thrown if no writers are added</token>
  </line>
  <line no="182">
    <token name="T_WHITESPACE">		</token>
    <token name="T_PHPDOX_CLOSE_CURLY">}</token>
  </line>
  <line no="183">
    <token name="T_WHITESPACE">	</token>
    <token name="T_PHPDOX_CLOSE_CURLY">}</token>
  </line>
  <line no="184"/>
  <line no="185">
    <token name="T_PHPDOX_CLOSE_CURLY">}</token>
  </line>
  <line no="186"/>
</source>
