<?xml version="1.0" encoding="UTF-8"?>
<class xmlns="http://xml.phpdox.net/src" full="FixtureFactory" namespace="" name="FixtureFactory" abstract="false" final="false" start="27" end="226">
  <file path="/var/www/_modules/ecommerce_test/trunk/docs/en/phpdox/../../../framework/dev" file="FixtureFactory.php" realpath="/var/www/_modules/ecommerce_test/trunk/framework/dev/FixtureFactory.php" size="6394" time="2015-03-14T10:39:31+13:00" unixtime="1426282771" sha1="13d68b89b8f1af7aedecc8b7046f87eb84c52cd9" relative="framework/dev/FixtureFactory.php"/>
  <docblock>
    <description compact="Manages a set of database fixtures for {@link DataObject} records as well as raw database table rows.">Delegates creation of objects to <link xmlns="http://xml.phpdox.net/src" value="FixtureBlueprint"/>,
which can implement class- and use-case specific fixture setup.
Supports referencing model relations through a specialized syntax:
&lt;code&gt;
$factory = new FixtureFactory();
$relatedObj = $factory-&gt;createObject(
	'MyRelatedClass',
	'relation1'
);
$obj = $factory-&gt;createObject(
	'MyClass',
	'object1'
	array('MyRelationName' =&gt; '=&gt;MyRelatedClass.relation1')
);
&lt;/code&gt;
Relation loading is order dependant.
</description>
    <package value="framework"/>
    <subpackage value="core"/>
  </docblock>
  <member name="fixtures" type="array" visibility="protected" line="33">
    <docblock>
      <description/>
      <var description="Array of fixture items, keyed by class and unique identifier," type="array">with values being the generated database ID. Does not store object instances.</var>
    </docblock>
  </member>
  <member name="blueprints" type="array" visibility="protected" line="38">
    <docblock>
      <description/>
      <var description="Callbacks" type="array"/>
    </docblock>
  </member>
  <method name="define" start="44" end="55" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description/>
      <param description="Unique name for this blueprint" type="object" variable="$name">
        <type full="String" namespace="" name="String"/>
      </param>
      <param description="Array of default values, or a blueprint instance" type="object" variable="$defaults">
        <type full="array|FixtureBlueprint" namespace="" name="array|FixtureBlueprint"/>
      </param>
    </docblock>
    <parameter name="name" byreference="false" type="{unknown}"/>
    <parameter name="defaults" byreference="false" type="array"/>
  </method>
  <method name="createObject" start="66" end="80" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="Writes the fixture into the database using DataObjects"/>
      <param description="Name of the {@link FixtureBlueprint} to use," type="object" variable="$name">usually a DataObject subclass.<type full="String" namespace="" name="String"/></param>
      <param description="Unique identifier for this fixture type" type="object" variable="$identifier">
        <type full="String" namespace="" name="String"/>
      </param>
      <param description="Map of properties. Overrides default data." type="object" variable="$data">
        <type full="Array" namespace="" name="Array"/>
      </param>
      <return type="object">
        <type full="DataObject" namespace="" name="DataObject"/>
      </return>
    </docblock>
    <parameter name="name" byreference="false" type="{unknown}"/>
    <parameter name="identifier" byreference="false" type="{unknown}"/>
    <parameter name="data" byreference="false" type="{unknown}" default="null"/>
  </method>
  <method name="createRaw" start="91" end="101" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="Writes the fixture into the database directly using a database manipulation.">Does not use blueprints. Only supports tables with a primary key.</description>
      <param description="Existing database table name" type="object" variable="$table">
        <type full="String" namespace="" name="String"/>
      </param>
      <param description="Unique identifier for this fixture type" type="object" variable="$identifier">
        <type full="String" namespace="" name="String"/>
      </param>
      <param description="Map of properties" type="object" variable="$data">
        <type full="Array" namespace="" name="Array"/>
      </param>
      <return description="Database identifier" type="object">
        <type full="Int" namespace="" name="Int"/>
      </return>
    </docblock>
    <parameter name="table" byreference="false" type="{unknown}"/>
    <parameter name="identifier" byreference="false" type="{unknown}"/>
    <parameter name="data" byreference="false" type="{unknown}"/>
  </method>
  <method name="getId" start="108" end="114" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="Get the ID of an object from the fixture."/>
      <param description="data class, as specified in your fixture file.  Parent classes won't work" variable="$className" type="object">
        <type full="The" namespace="" name="The"/>
      </param>
      <param description="identifier string, as provided in your fixture file" variable="$identifier" type="object">
        <type full="The" namespace="" name="The"/>
      </param>
    </docblock>
    <parameter name="class" byreference="false" type="{unknown}"/>
    <parameter name="identifier" byreference="false" type="{unknown}"/>
  </method>
  <method name="getIds" start="121" end="127" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="Return all of the IDs in the fixture of a particular class name."/>
      <return description="map of fixture-identifier =&gt; object-id" type="object">
        <type full="A" namespace="" name="A"/>
      </return>
    </docblock>
    <parameter name="class" byreference="false" type="{unknown}"/>
  </method>
  <method name="setId" start="134" end="137" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description/>
      <param type="object">
        <type full="String" namespace="" name="String"/>
      </param>
      <param type="object" variable="$identifier">
        <type full="String" namespace="" name="String"/>
      </param>
      <param type="object" variable="$databaseId">
        <type full="Int" namespace="" name="Int"/>
      </param>
    </docblock>
    <parameter name="class" byreference="false" type="{unknown}"/>
    <parameter name="identifier" byreference="false" type="{unknown}"/>
    <parameter name="databaseId" byreference="false" type="{unknown}"/>
  </method>
  <method name="get" start="145" end="148" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="Get an object from the fixture."/>
      <param description="data class, as specified in your fixture file.  Parent classes won't work" variable="$class" type="object">
        <type full="The" namespace="" name="The"/>
      </param>
      <param description="identifier string, as provided in your fixture file" variable="$identifier" type="object">
        <type full="The" namespace="" name="The"/>
      </param>
    </docblock>
    <parameter name="class" byreference="false" type="{unknown}"/>
    <parameter name="identifier" byreference="false" type="{unknown}"/>
  </method>
  <method name="getFixtures" start="154" end="156" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description/>
      <return description="Map of class names, containing a map of in-memory identifiers" type="object">mapped to database identifiers.<type full="Array" namespace="" name="Array"/></return>
    </docblock>
  </method>
  <method name="clear" start="165" end="183" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="Remove all fixtures previously defined through {@link createObject()} or {@link createRaw()}, both from the internal fixture mapping and the database.">If the $class argument is set, limit clearing to items of this class.</description>
      <param type="object" variable="$class">
        <type full="String" namespace="" name="String"/>
      </param>
    </docblock>
    <parameter name="limitToClass" byreference="false" type="{unknown}" default="null"/>
  </method>
  <method name="getBlueprints" start="188" end="190" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description/>
      <return description="Of {@link FixtureBlueprint} instances" type="object">
        <type full="Array" namespace="" name="Array"/>
      </return>
    </docblock>
  </method>
  <method name="getBlueprint" start="196" end="198" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description/>
      <param type="object" variable="$name">
        <type full="String" namespace="" name="String"/>
      </param>
      <return type="object">
        <type full="FixtureBlueprint" namespace="" name="FixtureBlueprint"/>
      </return>
    </docblock>
    <parameter name="name" byreference="false" type="{unknown}"/>
  </method>
  <method name="parseValue" start="207" end="224" abstract="false" final="false" static="false" visibility="protected">
    <docblock>
      <description compact="Parse a value from a fixture file.  If it starts with =&gt; it will get an ID from the fixture dictionary"/>
      <param type="object" variable="$fieldVal">
        <type full="String" namespace="" name="String"/>
      </param>
      <return description="Fixture database ID, or the original value" type="object">
        <type full="String" namespace="" name="String"/>
      </return>
    </docblock>
    <parameter name="value" byreference="false" type="{unknown}"/>
    <inline>
      <comment value="Parse a dictionary reference - used to set foreign keys" line="209"/>
    </inline>
  </method>
  <extender full="BehatFixtureFactory" namespace="" name="BehatFixtureFactory"/>
</class>
