<?xml version="1.0" encoding="UTF-8"?>
<class xmlns="http://xml.phpdox.net/src" full="Convert" namespace="" name="Convert" abstract="false" final="false" start="23" end="339">
  <file path="/var/www/_modules/ecommerce_test/trunk/docs/en/phpdox/../../../framework/core" file="Convert.php" realpath="/var/www/_modules/ecommerce_test/trunk/framework/core/Convert.php" size="10029" time="2015-03-14T10:39:29+13:00" unixtime="1426282769" sha1="8073aa8f5b9677ad0dcc15f60394748273faf9f6" relative="framework/core/Convert.php"/>
  <docblock>
    <description compact="Library of conversion functions, implemented as static methods.">The methods are all of the form (format)2(format), where the format is one of
 raw: A UTF8 string
 attr: A UTF8 string suitable for inclusion in an HTML attribute
 js: A UTF8 string suitable for inclusion in a double-quoted javascript string.
 array: A PHP associative array
 json: JavaScript object notation
 html: HTML source suitable for use in a page or email
 text: Plain-text content, suitable for display to a user as-is, or insertion in a plaintext email.
Objects of type <link xmlns="http://xml.phpdox.net/src" value="ViewableData"/> can have an "escaping type",
which determines if they are automatically escaped before output by <link xmlns="http://xml.phpdox.net/src" value="SSViewer"/>.
</description>
    <package value="framework"/>
    <subpackage value="misc"/>
  </docblock>
  <method name="raw2att" start="31" end="33" abstract="false" final="false" static="true" visibility="public">
    <docblock>
      <description compact="Convert a value to be suitable for an XML attribute."/>
      <param description="String to escape, or array of strings" type="object" variable="$val">
        <type full="array|string" namespace="" name="array|string"/>
      </param>
      <return type="object">
        <type full="array|string" namespace="" name="array|string"/>
      </return>
    </docblock>
    <parameter name="val" byreference="false" type="{unknown}"/>
  </method>
  <method name="raw2htmlatt" start="41" end="43" abstract="false" final="false" static="true" visibility="public">
    <docblock>
      <description compact="Convert a value to be suitable for an HTML attribute."/>
      <param description="String to escape, or array of strings" type="object" variable="$val">
        <type full="string|array" namespace="" name="string|array"/>
      </param>
      <return type="object">
        <type full="array|string" namespace="" name="array|string"/>
      </return>
    </docblock>
    <parameter name="val" byreference="false" type="{unknown}"/>
  </method>
  <method name="raw2htmlname" start="56" end="63" abstract="false" final="false" static="true" visibility="public">
    <docblock>
      <description compact="Convert a value to be suitable for an HTML attribute.">This is useful for converting human readable values into
a value suitable for an ID or NAME attribute.</description>
      <see value="http://www.w3.org/TR/REC-html40/types.html#type-cdata"/>
      <uses value="Convert::raw2att()"/>
      <param description="String to escape, or array of strings" type="object" variable="$val">
        <type full="array|string" namespace="" name="array|string"/>
      </param>
      <return type="object">
        <type full="array|string" namespace="" name="array|string"/>
      </return>
    </docblock>
    <parameter name="val" byreference="false" type="{unknown}"/>
  </method>
  <method name="raw2xml" start="72" end="79" abstract="false" final="false" static="true" visibility="public">
    <docblock>
      <description compact="Ensure that text is properly escaped for XML."/>
      <see value="http://www.w3.org/TR/REC-xml/#dt-escape"/>
      <param description="String to escape, or array of strings" type="object" variable="$val">
        <type full="array|string" namespace="" name="array|string"/>
      </param>
      <return type="object">
        <type full="array|string" namespace="" name="array|string"/>
      </return>
    </docblock>
    <parameter name="val" byreference="false" type="{unknown}"/>
  </method>
  <method name="raw2js" start="87" end="99" abstract="false" final="false" static="true" visibility="public">
    <docblock>
      <description compact="Ensure that text is properly escaped for Javascript."/>
      <param description="String to escape, or array of strings" type="object" variable="$val">
        <type full="array|string" namespace="" name="array|string"/>
      </param>
      <return type="object">
        <type full="array|string" namespace="" name="array|string"/>
      </return>
    </docblock>
    <parameter name="val" byreference="false" type="{unknown}"/>
  </method>
  <method name="raw2json" start="107" end="109" abstract="false" final="false" static="true" visibility="public">
    <docblock>
      <description compact="Encode a value as a JSON encoded string."/>
      <param description="Value to be encoded" type="mixed" variable="$val"/>
      <return description="JSON encoded string" type="string"/>
    </docblock>
    <parameter name="val" byreference="false" type="{unknown}"/>
  </method>
  <method name="array2json" start="118" end="120" abstract="false" final="false" static="true" visibility="public">
    <docblock>
      <description compact="Encode an array as a JSON encoded string.">THis is an alias to <link xmlns="http://xml.phpdox.net/src" value="raw2json()"/></description>
      <param description="Array to convert" type="array" variable="$val"/>
      <return description="JSON encoded string" type="string"/>
    </docblock>
    <parameter name="val" byreference="false" type="{unknown}"/>
  </method>
  <method name="raw2sql" start="122" end="129" abstract="false" final="false" static="true" visibility="public">
    <parameter name="val" byreference="false" type="{unknown}"/>
  </method>
  <method name="xml2raw" start="136" end="145" abstract="false" final="false" static="true" visibility="public">
    <docblock>
      <description compact="Convert XML to raw text."/>
      <uses value="html2raw()"/>
      <todo value="Currently &amp;#xxx; entries are stripped; they should be converted"/>
    </docblock>
    <parameter name="val" byreference="false" type="{unknown}"/>
  </method>
  <method name="json2obj" start="153" end="155" abstract="false" final="false" static="true" visibility="public">
    <docblock>
      <description compact="Convert a JSON encoded string into an object."/>
      <param type="string" variable="$val"/>
      <return type="object">
        <type full="object|boolean" namespace="" name="object|boolean"/>
      </return>
    </docblock>
    <parameter name="val" byreference="false" type="{unknown}"/>
  </method>
  <method name="json2array" start="164" end="166" abstract="false" final="false" static="true" visibility="public">
    <docblock>
      <description compact="Convert a JSON string into an array."/>
      <uses value="json2obj"/>
      <param description="JSON string to convert" type="string" variable="$val"/>
      <return type="object">
        <type full="array|boolean" namespace="" name="array|boolean"/>
      </return>
    </docblock>
    <parameter name="val" byreference="false" type="{unknown}"/>
  </method>
  <method name="xml2array" start="176" end="179" abstract="false" final="false" static="true" visibility="public">
    <docblock>
      <description compact="Converts an XML string to a PHP array"/>
      <uses value="recursiveXMLToArray()"/>
      <param type="string"/>
      <return type="array"/>
    </docblock>
    <parameter name="val" byreference="false" type="{unknown}"/>
  </method>
  <method name="recursiveXMLToArray" start="189" end="208" abstract="false" final="false" static="true" visibility="protected">
    <docblock>
      <description compact="Convert a XML string to a PHP array recursively. Do not call this function directly, Please use {@link Convert::xml2array()}"/>
      <param type="object">
        <type full="SimpleXMLElement" namespace="" name="SimpleXMLElement"/>
      </param>
      <return type="mixed"/>
    </docblock>
    <parameter name="xml" byreference="false" type="{unknown}"/>
    <inline>
      <comment value="for CDATA" line="199"/>
      <comment value="Attributes" line="203"/>
    </inline>
  </method>
  <method name="linkIfMatch" start="216" end="221" abstract="false" final="false" static="true" visibility="public">
    <docblock>
      <description compact="Create a link if the string is a valid URL"/>
      <param description="The string to linkify" type="string"/>
      <return description="link to the URL if string is a URL" type="object">
        <type full="A" namespace="" name="A"/>
      </return>
    </docblock>
    <parameter name="string" byreference="false" type="{unknown}"/>
  </method>
  <method name="html2raw" start="230" end="296" abstract="false" final="false" static="true" visibility="public">
    <docblock>
      <description compact="Simple conversion of HTML to plaintext."/>
      <param variable="$data" type="string"/>
      <param variable="$preserveLinks" type="boolean"/>
      <param variable="$wordwrap" type="array"/>
    </docblock>
    <parameter name="data" byreference="false" type="{unknown}"/>
    <parameter name="preserveLinks" byreference="false" type="{unknown}" default="false"/>
    <parameter name="wordWrap" byreference="false" type="integer" default="60"/>
    <parameter name="config" byreference="false" type="{unknown}" default="null"/>
    <inline>
      <comment value="Expand hyperlinks" line="250"/>
      <comment value="Replace images with their alt tags" line="260"/>
      <comment value="Compress whitespace" line="266"/>
      <comment value="Parse newline tags" line="271"/>
      <comment value="Replace HTML entities" line="282"/>
      <comment value="$data = preg_replace(&quot;/&amp;#([0-9]+);/e&quot;, 'chr(\1)', $data);" line="283"/>
      <comment value="$data = str_replace(array(&quot;&amp;lt;&quot;,&quot;&amp;gt;&quot;,&quot;&amp;amp;&quot;,&quot;&amp;nbsp;&quot;), array(&quot;&lt;&quot;, &quot;&gt;&quot;, &quot;&amp;&quot;, &quot; &quot;), $data);" line="284"/>
      <comment value="Remove all tags (but optionally keep links)" line="286"/>
      <comment value="strip_tags seemed to be restricting the length of the output" line="288"/>
      <comment value="arbitrarily. This essentially does the same thing." line="289"/>
    </inline>
  </method>
  <method name="raw2mailto" start="309" end="315" abstract="false" final="false" static="true" visibility="public">
    <docblock>
      <description compact="There are no real specifications on correctly encoding mailto-links, but this seems to be compatible with most of the user-agents.">Does nearly the same as rawurlencode().
Please only encode the values, not the whole url, e.g.
"mailto:test@test.com?subject=" . Convert::raw2mailto($subject)</description>
      <param variable="$data" type="string"/>
      <return type="string"/>
      <see value="http://www.ietf.org/rfc/rfc1738.txt"/>
    </docblock>
    <parameter name="data" byreference="false" type="{unknown}"/>
  </method>
  <method name="raw2url" start="324" end="327" abstract="false" final="false" static="true" visibility="public">
    <docblock>
      <description compact="Convert a string (normally a title) to a string suitable for using in urls and other html attributes. Uses {@link URLSegmentFilter}."/>
      <param type="string"/>
      <return type="string"/>
    </docblock>
    <parameter name="title" byreference="false" type="{unknown}"/>
  </method>
  <method name="nl2os" start="336" end="338" abstract="false" final="false" static="true" visibility="public">
    <docblock>
      <description compact="Normalises newline sequences to conform to (an) OS specific format."/>
      <param description="Text containing potentially mixed formats of newline" type="string" variable="$data">sequences including \r, \r\n, \n, or unicode newline characters</param>
      <param description="The newline sequence to normalise to. Defaults to that" type="string" variable="$nl">specified by the current OS</param>
    </docblock>
    <parameter name="data" byreference="false" type="{unknown}"/>
    <parameter name="nl" byreference="false" type="{unknown}" default="PHP_EOL"/>
  </method>
</class>
