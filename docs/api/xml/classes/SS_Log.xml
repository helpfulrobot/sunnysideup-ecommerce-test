<?xml version="1.0" encoding="UTF-8"?>
<class xmlns="http://xml.phpdox.net/src" full="SS_Log" namespace="" name="SS_Log" abstract="false" final="false" start="47" end="185">
  <file path="/var/www/_modules/ecommerce_test/trunk/docs/en/phpdox/../../../framework/dev" file="Log.php" realpath="/var/www/_modules/ecommerce_test/trunk/framework/dev/Log.php" size="5809" time="2015-03-14T10:39:31+13:00" unixtime="1426282771" sha1="591a95f6f77f92b6d0f41055f0a300bd6a473c49" relative="framework/dev/Log.php"/>
  <docblock>
    <description compact="Wrapper class for a logging handler like {@link Zend_Log} which takes a message (or a map of context variables) and sends it to one or more {@link Zend_Log_Writer_Abstract} subclasses for output.">These priorities are currently supported:
 - SS_Log::ERR
 - SS_Log::WARN
 - SS_Log::NOTICE
You can add an error writer by calling <link xmlns="http://xml.phpdox.net/src" value="SS_Log::add_writer()"/>Example usage of logging errors by email notification:
&lt;code&gt;
SS_Log::add_writer(new SS_LogEmailWriter('my@email.com'), SS_Log::ERR);
&lt;/code&gt;
Example usage of logging errors by file:
&lt;code&gt;
SS_Log::add_writer(new SS_LogFileWriter('/var/log/silverstripe/errors.log'), SS_Log::ERR);
&lt;/code&gt;
Example usage of logging at warnings and errors by setting the priority to '&lt;=':
&lt;code&gt;
SS_Log::add_writer(new SS_LogEmailWriter('my@email.com'), SS_Log::WARN, '&lt;=');
&lt;/code&gt;
Each writer object can be assigned a formatter. The formatter is
responsible for formatting the message before giving it to the writer.
<link xmlns="http://xml.phpdox.net/src" value="SS_LogErrorEmailFormatter"/> is such an example that formats errors
into HTML for human readability in an email client.
Formatters are added to writers like this:
&lt;code&gt;
$logEmailWriter = new SS_LogEmailWriter('my@email.com');
$myEmailFormatter = new MyLogEmailFormatter();
$logEmailWriter-&gt;setFormatter($myEmailFormatter);
&lt;/code&gt;
</description>
    <package value="framework"/>
    <subpackage value="dev"/>
  </docblock>
  <constant name="ERR" value=""/>
  <constant name="WARN" value=""/>
  <constant name="NOTICE" value=""/>
  <constant name="INFO" value=""/>
  <constant name="DEBUG" value=""/>
  <member name="logger_class" type="string" default="'SS_ZendLog'" visibility="public" line="60">
    <docblock>
      <description compact="Logger class to use."/>
      <see value="SS_Log::get_logger()"/>
      <var type="string"/>
    </docblock>
  </member>
  <member name="logger" type="{unknown}" visibility="protected" line="66">
    <docblock>
      <description/>
      <see value="SS_Log::get_logger()"/>
      <var type="object"/>
    </docblock>
  </member>
  <member name="log_globals" type="array" visibility="protected" line="73">
    <docblock>
      <description/>
      <var description="Logs additional context from PHP's superglobals." type="array">Caution: Depends on logger implementation (mainly targeted at <link xmlns="http://xml.phpdox.net/src" value="SS_LogEmailWriter"/>).
</var>
      <see value="http://framework.zend.com/manual/en/zend.log.overview.html#zend.log.overview.understanding-fields"/>
    </docblock>
  </member>
  <method name="get_logger" start="91" end="106" abstract="false" final="false" static="true" visibility="public">
    <docblock>
      <description compact="Get the logger currently in use, or create a new one if it doesn't exist."/>
      <return type="object"/>
    </docblock>
    <inline>
      <comment value="Create default logger" line="93"/>
      <comment value="Add default context (shouldn't change until the actual log event happens)" line="96"/>
    </inline>
  </method>
  <method name="get_writers" start="112" end="114" abstract="false" final="false" static="true" visibility="public">
    <docblock>
      <description compact="Get all writers in use by the logger."/>
      <return description="Collection of Zend_Log_Writer_Abstract instances" type="array"/>
    </docblock>
  </method>
  <method name="clear_writers" start="119" end="121" abstract="false" final="false" static="true" visibility="public">
    <docblock>
      <description compact="Remove all writers currently in use."/>
    </docblock>
  </method>
  <method name="remove_writer" start="127" end="129" abstract="false" final="false" static="true" visibility="public">
    <docblock>
      <description compact="Remove a writer instance from the logger."/>
      <param description="Zend_Log_Writer_Abstract instance" type="object" variable="$writer"/>
    </docblock>
    <parameter name="writer" byreference="false" type="{unknown}"/>
  </method>
  <method name="add_writer" start="140" end="143" abstract="false" final="false" static="true" visibility="public">
    <docblock>
      <description compact="Add a writer instance to the logger."/>
      <param description="Zend_Log_Writer_Abstract instance" type="object" variable="$writer"/>
      <param description="Priority. Possible values: SS_Log::ERR, SS_Log::WARN or SS_Log::NOTICE" type="object" variable="$priority">
        <type full="const" namespace="" name="const"/>
      </param>
      <param description="comparison operator.  Acts on the integer values of the error" variable="$comparison" type="object">levels, where more serious errors are lower numbers.  By default this is "=", which means only
the given priority will be logged.  Set to "&lt;=" if you want to track errors of *at least*
the given priority.<type full="Priority" namespace="" name="Priority"/></param>
    </docblock>
    <parameter name="writer" byreference="false" type="{unknown}"/>
    <parameter name="priority" byreference="false" type="{unknown}" default="null"/>
    <parameter name="comparison" byreference="false" type="string" default="'='"/>
  </method>
  <method name="log" start="157" end="183" abstract="false" final="false" static="true" visibility="public">
    <docblock>
      <description compact="Dispatch a message by priority level.">The message parameter can be either a string (a simple error
message), or an array of variables. The latter is useful for passing
along a list of debug information for the writer to handle, such as
error code, error line, error context (backtrace).</description>
      <param description="Exception object or array of error context variables" type="mixed" variable="$message"/>
      <param description="Priority. Possible values: SS_Log::ERR, SS_Log::WARN or SS_Log::NOTICE" type="object" variable="$priority">
        <type full="const" namespace="" name="const"/>
      </param>
      <param description="Extra information to log in event" type="mixed" variable="$extras"/>
    </docblock>
    <parameter name="message" byreference="false" type="{unknown}"/>
    <parameter name="priority" byreference="false" type="{unknown}"/>
    <parameter name="extras" byreference="false" type="{unknown}" default="null"/>
  </method>
  <extender full="SS_LogTest_NewLogger" namespace="" name="SS_LogTest_NewLogger"/>
</class>
