<?xml version="1.0" encoding="UTF-8"?>
<class xmlns="http://xml.phpdox.net/src" full="SS_Datetime" namespace="" name="SS_Datetime" abstract="false" final="false" start="26" end="204">
  <file path="/var/www/_modules/ecommerce_test/trunk/docs/en/phpdox/../../../framework/model/fieldtypes" file="Datetime.php" realpath="/var/www/_modules/ecommerce_test/trunk/framework/model/fieldtypes/Datetime.php" size="6247" time="2015-03-14T10:40:57+13:00" unixtime="1426282857" sha1="c97c8810427ff97f09d69eb61c4d85655e10f562" relative="framework/model/fieldtypes/Datetime.php"/>
  <docblock>
    <description compact="Represents a date-time field.">The field currently supports New Zealand date format (DD/MM/YYYY),
or an ISO 8601 formatted date and time (Y-m-d H:i:s).
Alternatively you can set a timestamp that is evaluated through
PHP's built-in date() and strtotime() function according to your system locale.
For all computations involving the current date and time,
please use <link xmlns="http://xml.phpdox.net/src" value="SS_Datetime::now()"/> instead of PHP's built-in date() and time()
methods. This ensures that all time-based computations are testable with mock dates
through <link xmlns="http://xml.phpdox.net/src" value="SS_Datetime::set_mock_now()"/>.
Example definition via <link xmlns="http://xml.phpdox.net/src" value="DataObject::$db"/>:
&lt;code&gt;
static $db = array(
 "Expires" =&gt; "SS_Datetime",
);
&lt;/code&gt;
</description>
    <todo value="Add localization support, see http://open.silverstripe.com/ticket/2931"/>
    <package value="framework"/>
    <subpackage value="model"/>
  </docblock>
  <extends full="Date" namespace="" name="Date"/>
  <implements full="TemplateGlobalProvider" namespace="" name="TemplateGlobalProvider"/>
  <method name="setValue" start="28" end="54" abstract="false" final="false" static="false" visibility="public">
    <parameter name="value" byreference="false" type="{unknown}"/>
    <parameter name="record" byreference="false" type="{unknown}" default="null"/>
    <inline>
      <comment value="don't try to evaluate empty values with strtotime() below, as it returns &quot;1970-01-01&quot; when it should be" line="30"/>
      <comment value="saved as NULL in database" line="31"/>
      <comment value="Default to NZ date format - strtotime expects a US date" line="36"/>
    </inline>
  </method>
  <method name="Nice" start="60" end="62" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="Returns the date and time (in 12-hour format) using the format string 'd/m/Y g:ia' e.g. '31/01/2014 2:23pm'."/>
      <return description="Formatted date and time." type="string"/>
    </docblock>
  </method>
  <method name="Nice24" start="68" end="70" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="Returns the date and time (in 24-hour format) using the format string 'd/m/Y H:i' e.g. '28/02/2014 13:32'."/>
      <return description="Formatted date and time." type="string"/>
    </docblock>
  </method>
  <method name="Date" start="76" end="78" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="Returns the date using the format string 'd/m/Y' e.g. '28/02/2014'."/>
      <return description="Formatted date." type="string"/>
    </docblock>
  </method>
  <method name="Time" start="84" end="86" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="Returns the time in 12-hour format using the format string 'g:ia' e.g. '1:32pm'."/>
      <return description="Formatted time." type="string"/>
    </docblock>
  </method>
  <method name="Time24" start="92" end="94" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="Returns the time in 24-hour format using the format string 'H:i' e.g. '13:32'."/>
      <return description="Formatted time." type="string"/>
    </docblock>
  </method>
  <method name="FormatFromSettings" start="102" end="117" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="Return a date and time formatted as per a CMS user's settings."/>
      <param type="object" variable="$member">
        <type full="Member" namespace="" name="Member"/>
      </param>
      <return description="| string A time and date pair formatted as per user-defined settings." type="boolean"/>
    </docblock>
    <parameter name="member" byreference="false" type="{unknown}" default="null"/>
  </method>
  <method name="requireField" start="119" end="123" abstract="false" final="false" static="false" visibility="public"/>
  <method name="URLDatetime" start="131" end="133" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="Returns the url encoded date and time in ISO 6801 format using format string 'Y-m-d%20H:i:s' e.g. '2014-02-28%2013:32:22'."/>
      <return description="Formatted date and time." type="string"/>
    </docblock>
  </method>
  <method name="scaffoldFormField" start="135" end="153" abstract="false" final="false" static="false" visibility="public">
    <parameter name="title" byreference="false" type="{unknown}" default="null"/>
    <parameter name="params" byreference="false" type="{unknown}" default="null"/>
    <inline>
      <comment value="Show formatting hints for better usability" line="138"/>
    </inline>
  </method>
  <member name="mock_now" type="{unknown}" default="null" visibility="protected" line="158">
    <docblock>
      <description/>
    </docblock>
  </member>
  <method name="now" start="166" end="172" abstract="false" final="false" static="true" visibility="public">
    <docblock>
      <description compact="Returns either the current system date as determined by date(), or a mocked date through {@link set_mock_now()}."/>
      <return type="object">
        <type full="SS_Datetime" namespace="" name="SS_Datetime"/>
      </return>
    </docblock>
  </method>
  <method name="set_mock_now" start="181" end="189" abstract="false" final="false" static="true" visibility="public">
    <docblock>
      <description compact="Mock the system date temporarily, which is useful for time-based unit testing.">Use <link xmlns="http://xml.phpdox.net/src" value="clear_mock_now()"/> to revert to the current system date.
Caution: This sets a fixed date that doesn't increment with time.
</description>
      <param description="Either in object format, or as a SS_Datetime compatible string." type="object" variable="$datetime">
        <type full="SS_Datetime|string" namespace="" name="SS_Datetime|string"/>
      </param>
    </docblock>
    <parameter name="datetime" byreference="false" type="{unknown}"/>
  </method>
  <method name="clear_mock_now" start="195" end="197" abstract="false" final="false" static="true" visibility="public">
    <docblock>
      <description compact="Clear any mocked date, which causes {@link Now()} to return the current system date."/>
    </docblock>
  </method>
  <method name="get_template_global_variables" start="199" end="203" abstract="false" final="false" static="true" visibility="public"/>
  <parent full="Date" namespace="" name="Date">
    <extends full="DBField" namespace="" name="DBField"/>
    <method name="setValue" start="23" end="59" abstract="false" final="false" static="false" visibility="public">
      <parameter name="value" byreference="false" type="{unknown}"/>
      <parameter name="record" byreference="false" type="{unknown}" default="null"/>
      <inline>
        <comment value="don't try to evaluate empty values with strtotime() below, as it returns &quot;1970-01-01&quot; when it should be" line="25"/>
        <comment value="saved as NULL in database" line="26"/>
        <todo value="This needs tidy up (what if you only specify a month and a year, for example?)" line="31"/>
        <comment value="Default to NZ date format - strtotime expects a US date" line="42"/>
      </inline>
    </method>
    <method name="Nice" start="64" end="66" abstract="false" final="false" static="false" visibility="public">
      <docblock>
        <description compact="Returns the date in the format dd/mm/yy"/>
      </docblock>
    </method>
    <method name="NiceUS" start="71" end="73" abstract="false" final="false" static="false" visibility="public">
      <docblock>
        <description compact="Returns the date in US format: “01/18/2006”"/>
      </docblock>
    </method>
    <method name="Year" start="78" end="80" abstract="false" final="false" static="false" visibility="public">
      <docblock>
        <description compact="Returns the year from the given date"/>
      </docblock>
    </method>
    <method name="Day" start="85" end="87" abstract="false" final="false" static="false" visibility="public">
      <docblock>
        <description compact="Returns the Full day, of the given date."/>
      </docblock>
    </method>
    <method name="Month" start="92" end="94" abstract="false" final="false" static="false" visibility="public">
      <docblock>
        <description compact="Returns a full textual representation of a month, such as January."/>
      </docblock>
    </method>
    <method name="ShortMonth" start="99" end="101" abstract="false" final="false" static="false" visibility="public">
      <docblock>
        <description compact="Returns the short version of the month such as Jan"/>
      </docblock>
    </method>
    <method name="DayOfMonth" start="108" end="114" abstract="false" final="false" static="false" visibility="public">
      <docblock>
        <description compact="Returns the day of the month."/>
        <param description="Include ordinal suffix to day, e.g. &quot;th&quot; or &quot;rd&quot;" type="boolean" variable="$includeOrdinals"/>
        <return type="string"/>
      </docblock>
      <parameter name="includeOrdinal" byreference="false" type="{unknown}" default="false"/>
    </method>
    <method name="Long" start="119" end="121" abstract="false" final="false" static="false" visibility="public">
      <docblock>
        <description compact="Returns the date in the format 24 December 2006"/>
      </docblock>
    </method>
    <method name="Full" start="126" end="128" abstract="false" final="false" static="false" visibility="public">
      <docblock>
        <description compact="Returns the date in the format 24 Dec 2006"/>
      </docblock>
    </method>
    <method name="Format" start="136" end="141" abstract="false" final="false" static="false" visibility="public">
      <docblock>
        <description compact="Return the date using a particular formatting string."/>
        <param description="Format code string. e.g. &quot;d M Y&quot; (see http://php.net/date)" type="string" variable="$format"/>
        <return description="The date in the requested format" type="string"/>
      </docblock>
      <parameter name="format" byreference="false" type="{unknown}"/>
    </method>
    <method name="FormatI18N" start="149" end="153" abstract="false" final="false" static="false" visibility="public">
      <docblock>
        <description compact="Return the date formatted using the given strftime formatting string.">strftime obeys the current LC_TIME/LC_ALL when printing lexical values
like day- and month-names</description>
      </docblock>
      <parameter name="formattingString" byreference="false" type="{unknown}"/>
    </method>
    <method name="FormatFromSettings" start="161" end="175" abstract="false" final="false" static="false" visibility="public">
      <docblock>
        <description compact="Return a date formatted as per a CMS user's settings."/>
        <param type="object" variable="$member">
          <type full="Member" namespace="" name="Member"/>
        </param>
        <return description="| string A date formatted as per user-defined settings." type="boolean"/>
      </docblock>
      <parameter name="member" byreference="false" type="{unknown}" default="null"/>
    </method>
    <method name="RangeString" start="183" end="194" abstract="false" final="false" static="false" visibility="public">
      <parameter name="otherDateObj" byreference="false" type="{unknown}"/>
      <parameter name="includeOrdinals" byreference="false" type="{unknown}" default="false"/>
    </method>
    <method name="Rfc822" start="196" end="198" abstract="false" final="false" static="false" visibility="public"/>
    <method name="Rfc2822" start="200" end="202" abstract="false" final="false" static="false" visibility="public"/>
    <method name="Rfc3339" start="204" end="218" abstract="false" final="false" static="false" visibility="public"/>
    <method name="Ago" start="226" end="245" abstract="false" final="false" static="false" visibility="public">
      <docblock>
        <description compact="Returns the number of seconds/minutes/hours/days or months since the timestamp."/>
        <param description="Show seconds, or just round to &quot;less than a minute&quot;." type="boolean" variable="$includeSeconds"/>
        <return type="object">
          <type full="String" namespace="" name="String"/>
        </return>
      </docblock>
      <parameter name="includeSeconds" byreference="false" type="{unknown}" default="true"/>
    </method>
    <method name="TimeDiff" start="251" end="283" abstract="false" final="false" static="false" visibility="public">
      <docblock>
        <description/>
        <param description="Show seconds, or just round to &quot;less than a minute&quot;." type="boolean" variable="$includeSeconds"/>
        <return type="object">
          <type full="String" namespace="" name="String"/>
        </return>
      </docblock>
      <parameter name="includeSeconds" byreference="false" type="{unknown}" default="true"/>
      <inline>
        <comment value="Replace duplicate spaces, backwards compat with existing translations" line="279"/>
      </inline>
    </method>
    <method name="TimeDiffIn" start="292" end="323" abstract="false" final="false" static="false" visibility="public">
      <docblock>
        <description compact="Gets the time difference, but always returns it in a certain format"/>
        <param description="The format, could be one of these:" type="string" variable="$format">'seconds', 'minutes', 'hours', 'days', 'months', 'years'.</param>
        <return type="string"/>
      </docblock>
      <parameter name="format" byreference="false" type="{unknown}"/>
    </method>
    <method name="requireField" start="325" end="329" abstract="false" final="false" static="false" visibility="public"/>
    <method name="InPast" start="335" end="337" abstract="false" final="false" static="false" visibility="public">
      <docblock>
        <description compact="Returns true if date is in the past."/>
        <return type="boolean"/>
      </docblock>
    </method>
    <method name="InFuture" start="343" end="345" abstract="false" final="false" static="false" visibility="public">
      <docblock>
        <description compact="Returns true if date is in the future."/>
        <return type="boolean"/>
      </docblock>
    </method>
    <method name="IsToday" start="351" end="353" abstract="false" final="false" static="false" visibility="public">
      <docblock>
        <description compact="Returns true if date is today."/>
        <return type="boolean"/>
      </docblock>
    </method>
    <method name="URLDate" start="358" end="360" abstract="false" final="false" static="false" visibility="public">
      <docblock>
        <description compact="Returns a date suitable for insertion into a URL and use by the system."/>
      </docblock>
    </method>
    <method name="days_between" start="363" end="365" abstract="false" final="false" static="false" visibility="public">
      <parameter name="fyear" byreference="false" type="{unknown}"/>
      <parameter name="fmonth" byreference="false" type="{unknown}"/>
      <parameter name="fday" byreference="false" type="{unknown}"/>
      <parameter name="tyear" byreference="false" type="{unknown}"/>
      <parameter name="tmonth" byreference="false" type="{unknown}"/>
      <parameter name="tday" byreference="false" type="{unknown}"/>
    </method>
    <method name="day_before" start="367" end="369" abstract="false" final="false" static="false" visibility="public">
      <parameter name="fyear" byreference="false" type="{unknown}"/>
      <parameter name="fmonth" byreference="false" type="{unknown}"/>
      <parameter name="fday" byreference="false" type="{unknown}"/>
    </method>
    <method name="next_day" start="371" end="373" abstract="false" final="false" static="false" visibility="public">
      <parameter name="fyear" byreference="false" type="{unknown}"/>
      <parameter name="fmonth" byreference="false" type="{unknown}"/>
      <parameter name="fday" byreference="false" type="{unknown}"/>
    </method>
    <method name="weekday" start="375" end="377" abstract="false" final="false" static="false" visibility="public">
      <parameter name="fyear" byreference="false" type="{unknown}"/>
      <parameter name="fmonth" byreference="false" type="{unknown}"/>
      <parameter name="fday" byreference="false" type="{unknown}"/>
      <inline>
        <comment value="0 is a Monday" line="375"/>
      </inline>
    </method>
    <method name="prior_monday" start="379" end="381" abstract="false" final="false" static="false" visibility="public">
      <parameter name="fyear" byreference="false" type="{unknown}"/>
      <parameter name="fmonth" byreference="false" type="{unknown}"/>
      <parameter name="fday" byreference="false" type="{unknown}"/>
    </method>
    <method name="past_date" start="394" end="408" abstract="false" final="false" static="true" visibility="public">
      <docblock>
        <description compact="Return the nearest date in the past, based on day and month.">Automatically attaches the correct year.

This is useful for determining a financial year start or end date.</description>
        <param description="The number of the month (e.g. 3 is March, 4 is April)" variable="$fmonth" type="int"/>
        <param description="The day of the month" variable="$fday" type="int"/>
        <param description="Determine historical value" variable="$fyear" type="int"/>
        <return description="Date in YYYY-MM-DD format" type="string"/>
      </docblock>
      <parameter name="fmonth" byreference="false" type="{unknown}"/>
      <parameter name="fday" byreference="false" type="integer" default="1"/>
      <parameter name="fyear" byreference="false" type="{unknown}" default="null"/>
    </method>
    <method name="scaffoldFormField" start="410" end="421" abstract="false" final="false" static="false" visibility="public">
      <parameter name="title" byreference="false" type="{unknown}" default="null"/>
      <parameter name="params" byreference="false" type="{unknown}" default="null"/>
      <inline>
        <comment value="Show formatting hints for better usability" line="413"/>
      </inline>
    </method>
  </parent>
  <parent full="DBField" namespace="" name="DBField">
    <extends full="ViewableData" namespace="" name="ViewableData"/>
    <member name="value" type="{unknown}" visibility="protected" line="37"/>
    <member name="tableName" type="{unknown}" visibility="protected" line="39"/>
    <member name="name" type="{unknown}" visibility="protected" line="41"/>
    <member name="arrayValue" type="{unknown}" visibility="protected" line="43"/>
    <member name="defaultVal" type="{unknown}" visibility="protected" line="66">
      <docblock>
        <description/>
        <var description="mixed Default-value in the database." type="object">Might be overridden on DataObject-level, but still useful for setting defaults on
already existing records after a db-build.<type full="$default" namespace="" name="$default"/></var>
      </docblock>
    </member>
    <constructor name="__construct" start="68" end="72" abstract="false" final="false" static="false" visibility="public">
      <parameter name="name" byreference="false" type="{unknown}" default="null"/>
    </constructor>
    <method name="create_field" start="79" end="84" abstract="false" final="false" static="true" visibility="public">
      <docblock>
        <description compact="Create a DBField object that's not bound to any particular field.">Useful for accessing the classes behaviour for other parts of your code.</description>
      </docblock>
      <parameter name="className" byreference="false" type="{unknown}"/>
      <parameter name="value" byreference="false" type="{unknown}"/>
      <parameter name="name" byreference="false" type="{unknown}" default="null"/>
      <parameter name="object" byreference="false" type="{unknown}" default="null"/>
    </method>
    <method name="setName" start="98" end="107" abstract="false" final="false" static="false" visibility="public">
      <docblock>
        <description compact="Set the name of this field.">The name should never be altered, but it if was never given a name in
the first place you can set a name.

If you try an alter the name a warning will be thrown.</description>
        <param type="string" variable="$name"/>
        <return type="object">
          <type full="DBField" namespace="" name="DBField"/>
        </return>
      </docblock>
      <parameter name="name" byreference="false" type="{unknown}"/>
    </method>
    <method name="getName" start="114" end="116" abstract="false" final="false" static="false" visibility="public">
      <docblock>
        <description compact="Returns the name of this field."/>
        <return type="string"/>
      </docblock>
    </method>
    <method name="getValue" start="123" end="125" abstract="false" final="false" static="false" visibility="public">
      <docblock>
        <description compact="Returns the value of this field."/>
        <return type="mixed"/>
      </docblock>
    </method>
    <method name="setValue" start="135" end="137" abstract="false" final="false" static="false" visibility="public">
      <docblock>
        <description compact="Set the value on the field.">Optionally takes the whole record as an argument, to pick other values.</description>
        <param type="mixed" variable="$value"/>
        <param type="array" variable="$record"/>
      </docblock>
      <parameter name="value" byreference="false" type="{unknown}"/>
      <parameter name="record" byreference="false" type="{unknown}" default="null"/>
    </method>
    <method name="exists" start="146" end="148" abstract="false" final="false" static="false" visibility="public">
      <docblock>
        <description compact="Determines if the field has a value which is not considered to be 'null' in a database context."/>
        <return type="boolean"/>
      </docblock>
    </method>
    <method name="prepValueForDB" start="157" end="163" abstract="false" final="false" static="false" visibility="public">
      <docblock>
        <description compact="Return an encoding of the given value suitable for inclusion in a SQL statement. If necessary, this should include quotes."/>
        <param description="The value to check" variable="$value" type="mixed"/>
        <return description="The encoded value" type="string"/>
      </docblock>
      <parameter name="value" byreference="false" type="{unknown}"/>
    </method>
    <method name="writeToManipulation" start="177" end="180" abstract="false" final="false" static="false" visibility="public">
      <docblock>
        <description compact="Prepare the current field for usage in a database-manipulation (works on a manipulation reference).">Make value safe for insertion into
a SQL SET statement by applying addslashes() -
can also be used to apply special SQL-commands
to the raw value (e.g. for GIS functionality).
{@see prepValueForDB}</description>
        <param type="array" variable="$manipulation"/>
      </docblock>
      <parameter name="manipulation" byreference="true" type="{unknown}"/>
    </method>
    <method name="addToQuery" start="193" end="195" abstract="false" final="false" static="false" visibility="public">
      <docblock>
        <description compact="Add custom query parameters for this field, mostly SELECT statements for multi-value fields.">By default, the ORM layer does a
SELECT &lt;tablename&gt;.* which
gets you the default representations
of all columns.</description>
        <param type="object" variable="$query">
          <type full="SS_Query" namespace="" name="SS_Query"/>
        </param>
      </docblock>
      <parameter name="query" byreference="true" type="{unknown}"/>
    </method>
    <method name="setTable" start="197" end="199" abstract="false" final="false" static="false" visibility="public">
      <parameter name="tableName" byreference="false" type="{unknown}"/>
    </method>
    <method name="forTemplate" start="204" end="206" abstract="false" final="false" static="false" visibility="public">
      <docblock>
        <description/>
        <return type="string"/>
      </docblock>
    </method>
    <method name="HTMLATT" start="208" end="210" abstract="false" final="false" static="false" visibility="public"/>
    <method name="URLATT" start="212" end="214" abstract="false" final="false" static="false" visibility="public"/>
    <method name="RAWURLATT" start="216" end="218" abstract="false" final="false" static="false" visibility="public"/>
    <method name="ATT" start="220" end="222" abstract="false" final="false" static="false" visibility="public"/>
    <method name="RAW" start="224" end="226" abstract="false" final="false" static="false" visibility="public"/>
    <method name="JS" start="228" end="230" abstract="false" final="false" static="false" visibility="public"/>
    <method name="HTML" start="232" end="234" abstract="false" final="false" static="false" visibility="public"/>
    <method name="XML" start="236" end="238" abstract="false" final="false" static="false" visibility="public"/>
    <method name="nullValue" start="244" end="246" abstract="false" final="false" static="false" visibility="public">
      <docblock>
        <description compact="Returns the value to be set in the database to blank this field.">Usually it's a choice between null, 0, and ''</description>
      </docblock>
    </method>
    <method name="saveInto" start="251" end="258" abstract="false" final="false" static="false" visibility="public">
      <docblock>
        <description compact="Saves this field to the given data object."/>
      </docblock>
      <parameter name="dataObject" byreference="false" type="{unknown}"/>
    </method>
    <method name="scaffoldFormField" start="269" end="273" abstract="false" final="false" static="false" visibility="public">
      <docblock>
        <description compact="Returns a FormField instance used as a default for form scaffolding.">Used by <link xmlns="http://xml.phpdox.net/src" value="SearchContext"/>, <link xmlns="http://xml.phpdox.net/src" value="ModelAdmin"/>, <link xmlns="http://xml.phpdox.net/src" value="DataObject::scaffoldFormFields()"/></description>
        <param description="Optional. Localized title of the generated instance" type="string" variable="$title"/>
        <return type="object">
          <type full="FormField" namespace="" name="FormField"/>
        </return>
      </docblock>
      <parameter name="title" byreference="false" type="{unknown}" default="null"/>
    </method>
    <method name="scaffoldSearchField" start="284" end="286" abstract="false" final="false" static="false" visibility="public">
      <docblock>
        <description compact="Returns a FormField instance used as a default for searchform scaffolding.">Used by <link xmlns="http://xml.phpdox.net/src" value="SearchContext"/>, <link xmlns="http://xml.phpdox.net/src" value="ModelAdmin"/>, <link xmlns="http://xml.phpdox.net/src" value="DataObject::scaffoldFormFields()"/>.
</description>
        <param description="Optional. Localized title of the generated instance" type="string" variable="$title"/>
        <return type="object">
          <type full="FormField" namespace="" name="FormField"/>
        </return>
      </docblock>
      <parameter name="title" byreference="false" type="{unknown}" default="null"/>
    </method>
    <method name="defaultSearchFilter" start="297" end="301" abstract="false" final="false" static="false" visibility="public">
      <docblock>
        <description/>
        <todo value="documentation"/>
        <todo value="figure out how we pass configuration parameters to">search filters (note: parameter hack now in place to pass in the required full path - using $this-&gt;name
      won't work)</todo>
        <return type="object">
          <type full="SearchFilter" namespace="" name="SearchFilter"/>
        </return>
      </docblock>
      <parameter name="name" byreference="false" type="{unknown}" default="false"/>
    </method>
    <method name="requireField" start="306" end="306" abstract="true" final="false" static="false" visibility="public">
      <docblock>
        <description compact="Add the field to the underlying database."/>
      </docblock>
    </method>
    <method name="debug" start="308" end="316" abstract="false" final="false" static="false" visibility="public"/>
    <method name="__toString" start="318" end="320" abstract="false" final="false" static="false" visibility="public"/>
  </parent>
  <parent full="ViewableData" namespace="" name="ViewableData">
    <extends full="Object" namespace="" name="Object"/>
    <member name="failover" type="{unknown}" visibility="protected" line="51">
      <docblock>
        <description compact="A failover object to attempt to get data from if it is not present on this object."/>
        <var type="object">
          <type full="ViewableData" namespace="" name="ViewableData"/>
        </var>
      </docblock>
    </member>
    <member name="customisedObject" type="{unknown}" visibility="protected" line="56">
      <docblock>
        <description/>
        <var type="object">
          <type full="ViewableData" namespace="" name="ViewableData"/>
        </var>
      </docblock>
    </member>
    <method name="castingObjectCreator" start="72" end="74" abstract="false" final="false" static="true" visibility="public">
      <docblock>
        <description compact="Converts a field spec into an object creator. For example: &quot;Int&quot; becomes &quot;new Int($fieldName);&quot; and &quot;Varchar(50)&quot; becomes &quot;new Varchar($fieldName, 50);&quot;."/>
        <param description="The field spec" type="string" variable="$fieldSchema"/>
        <return type="string"/>
      </docblock>
      <parameter name="fieldSchema" byreference="false" type="{unknown}"/>
    </method>
    <method name="castingObjectCreatorPair" start="83" end="85" abstract="false" final="false" static="true" visibility="public">
      <docblock>
        <description compact="Convert a field schema (e.g. &quot;Varchar(50)&quot;) into a casting object creator array that contains both a className and castingHelper constructor code. See {@link castingObjectCreator} for more information about the constructor."/>
        <param type="string" variable="$fieldSchema"/>
        <return type="array"/>
      </docblock>
      <parameter name="fieldSchema" byreference="false" type="{unknown}"/>
    </method>
    <method name="__isset" start="95" end="97" abstract="false" final="false" static="false" visibility="public">
      <docblock>
        <description compact="Check if a field exists on this object or its failover."/>
        <param type="string" variable="$property"/>
        <return type="object">
          <type full="bool" namespace="" name="bool"/>
        </return>
      </docblock>
      <parameter name="property" byreference="false" type="{unknown}"/>
    </method>
    <method name="__get" start="106" end="114" abstract="false" final="false" static="false" visibility="public">
      <docblock>
        <description compact="Get the value of a property/field on this object. This will check if a method called get{$property} exists, then check if a field is available using {@link ViewableData::getField()}, then fall back on a failover object."/>
        <param type="string" variable="$property"/>
        <return type="mixed"/>
      </docblock>
      <parameter name="property" byreference="false" type="{unknown}"/>
    </method>
    <method name="__set" start="123" end="129" abstract="false" final="false" static="false" visibility="public">
      <docblock>
        <description compact="Set a property/field on this object. This will check for the existence of a method called set{$property}, then use the {@link ViewableData::setField()} method."/>
        <param type="string" variable="$property"/>
        <param type="mixed" variable="$value"/>
      </docblock>
      <parameter name="property" byreference="false" type="{unknown}"/>
      <parameter name="value" byreference="false" type="{unknown}"/>
    </method>
    <method name="hasField" start="137" end="139" abstract="false" final="false" static="false" visibility="public">
      <docblock>
        <description compact="Check if a field exists on this object. This should be overloaded in child classes."/>
        <param type="string" variable="$field"/>
        <return type="object">
          <type full="bool" namespace="" name="bool"/>
        </return>
      </docblock>
      <parameter name="field" byreference="false" type="{unknown}"/>
    </method>
    <method name="getField" start="147" end="149" abstract="false" final="false" static="false" visibility="public">
      <docblock>
        <description compact="Get the value of a field on this object. This should be overloaded in child classes."/>
        <param type="string" variable="$field"/>
        <return type="mixed"/>
      </docblock>
      <parameter name="field" byreference="false" type="{unknown}"/>
    </method>
    <method name="setField" start="157" end="159" abstract="false" final="false" static="false" visibility="public">
      <docblock>
        <description compact="Set a field on this object. This should be overloaded in child classes."/>
        <param type="string" variable="$field"/>
        <param type="mixed" variable="$value"/>
      </docblock>
      <parameter name="field" byreference="false" type="{unknown}"/>
      <parameter name="value" byreference="false" type="{unknown}"/>
    </method>
    <method name="defineMethods" start="167" end="186" abstract="false" final="false" static="false" visibility="public">
      <docblock>
        <description compact="Add methods from the {@link ViewableData::$failover} object, as well as wrapping any methods prefixed with an underscore into a {@link ViewableData::cachedCall()}."/>
      </docblock>
    </method>
    <method name="customise" start="197" end="209" abstract="false" final="false" static="false" visibility="public">
      <docblock>
        <description compact="Merge some arbitrary data in with this object. This method returns a {@link ViewableData_Customised} instance with references to both this and the new custom data.">Note that any fields you specify will take precedence over the fields on this object.</description>
        <param type="object" variable="$data">
          <type full="array|ViewableData" namespace="" name="array|ViewableData"/>
        </param>
        <return type="object">
          <type full="ViewableData_Customised" namespace="" name="ViewableData_Customised"/>
        </return>
      </docblock>
      <parameter name="data" byreference="false" type="{unknown}"/>
    </method>
    <method name="setCustomisedObj" start="214" end="216" abstract="false" final="false" static="false" visibility="public">
      <docblock>
        <description/>
        <param type="object" variable="$object">
          <type full="ViewableData" namespace="" name="ViewableData"/>
        </param>
      </docblock>
      <parameter name="object" byreference="false" type="object">
        <type full="\\ViewableData" namespace="\" name="ViewableData"/>
      </parameter>
    </method>
    <method name="castingHelperPair" start="231" end="234" abstract="false" final="false" static="false" visibility="public">
      <docblock>
        <description compact="Get the class a field on this object would be casted to, as well as the casting helper for casting a field to an object (see {@link ViewableData::castingHelper()} for information on casting helpers).">The returned array contains two keys:
 - className: the class the field would be casted to (e.g. "Varchar")
 - castingHelper: the casting helper for casting the field (e.g. "return new Varchar($fieldName)")</description>
        <param type="string" variable="$field"/>
        <return type="array"/>
      </docblock>
      <parameter name="field" byreference="false" type="{unknown}"/>
    </method>
    <method name="castingHelper" start="243" end="252" abstract="false" final="false" static="false" visibility="public">
      <docblock>
        <description compact="Return the &quot;casting helper&quot; (a piece of PHP code that when evaluated creates a casted value object) for a field on this object."/>
        <param type="string" variable="$field"/>
        <return type="string"/>
      </docblock>
      <parameter name="field" byreference="false" type="{unknown}"/>
    </method>
    <method name="castingClass" start="260" end="267" abstract="false" final="false" static="false" visibility="public">
      <docblock>
        <description compact="Get the class name a field on this object will be casted to"/>
        <param type="string" variable="$field"/>
        <return type="string"/>
      </docblock>
      <parameter name="field" byreference="false" type="{unknown}"/>
    </method>
    <method name="escapeTypeForField" start="275" end="279" abstract="false" final="false" static="false" visibility="public">
      <docblock>
        <description compact="Return the string-format type for the given field."/>
        <param type="string" variable="$field"/>
        <return description="'xml'|'raw'" type="string"/>
      </docblock>
      <parameter name="field" byreference="false" type="{unknown}"/>
    </method>
    <method name="buildCastingCache" start="286" end="308" abstract="false" final="false" static="false" visibility="public">
      <docblock>
        <description compact="Save the casting cache for this object (including data from any failovers) into a variable"/>
        <param type="object" variable="$cache">
          <type full="reference" namespace="" name="reference"/>
        </param>
      </docblock>
      <parameter name="cache" byreference="true" type="{unknown}"/>
    </method>
    <method name="renderWith" start="323" end="340" abstract="false" final="false" static="false" visibility="public">
      <docblock>
        <description compact="Render this object into the template, and get the result as a string. You can pass one of the following as the $template parameter:  - a template name (e.g. Page)  - an array of possible template names - the first valid one will be used  - an SSViewer instance"/>
        <param description="the template to render into" type="object" variable="$template">
          <type full="string|array|SSViewer" namespace="" name="string|array|SSViewer"/>
        </param>
        <param description="fields to customise() the object with before rendering" type="array" variable="$customFields"/>
        <return type="object">
          <type full="HTMLText" namespace="" name="HTMLText"/>
        </return>
      </docblock>
      <parameter name="template" byreference="false" type="{unknown}"/>
      <parameter name="customFields" byreference="false" type="{unknown}" default="null"/>
    </method>
    <method name="obj" start="352" end="390" abstract="false" final="false" static="false" visibility="public">
      <docblock>
        <description compact="Get the value of a field on this object, automatically inserting the value into any available casting objects that have been specified."/>
        <param type="string" variable="$fieldName"/>
        <param type="array" variable="$arguments"/>
        <param description="if TRUE, the value will ALWAYS be casted to an object before being returned," type="object" variable="$forceReturnedObject">even if there is no explicit casting information<type full="bool" namespace="" name="bool"/></param>
        <param description="a custom cache name" type="string" variable="$cacheName"/>
      </docblock>
      <parameter name="fieldName" byreference="false" type="{unknown}"/>
      <parameter name="arguments" byreference="false" type="{unknown}" default="null"/>
      <parameter name="forceReturnedObject" byreference="false" type="{unknown}" default="true"/>
      <parameter name="cache" byreference="false" type="{unknown}" default="false"/>
      <parameter name="cacheName" byreference="false" type="{unknown}" default="null"/>
      <inline>
        <comment value="HACK: Don't call the deprecated FormField::Name() method" line="356"/>
      </inline>
    </method>
    <method name="cachedCall" start="400" end="402" abstract="false" final="false" static="false" visibility="public">
      <docblock>
        <description compact="A simple wrapper around {@link ViewableData::obj()} that automatically caches the result so it can be used again without re-running the method."/>
        <param type="string" variable="$field"/>
        <param type="array" variable="$arguments"/>
        <param description="an optional custom cache identifier" type="string" variable="$identifier"/>
      </docblock>
      <parameter name="field" byreference="false" type="{unknown}"/>
      <parameter name="arguments" byreference="false" type="{unknown}" default="null"/>
      <parameter name="identifier" byreference="false" type="{unknown}" default="null"/>
    </method>
    <method name="hasValue" start="413" end="422" abstract="false" final="false" static="false" visibility="public">
      <docblock>
        <description compact="Checks if a given method/field has a valid value. If the result is an object, this will return the result of the exists method, otherwise will check if the result is not just an empty paragraph tag."/>
        <param type="string" variable="$field"/>
        <param type="array" variable="$arguments"/>
        <param type="object" variable="$cache">
          <type full="bool" namespace="" name="bool"/>
        </param>
        <return type="object">
          <type full="bool" namespace="" name="bool"/>
        </return>
      </docblock>
      <parameter name="field" byreference="false" type="{unknown}"/>
      <parameter name="arguments" byreference="false" type="{unknown}" default="null"/>
      <parameter name="cache" byreference="false" type="{unknown}" default="true"/>
    </method>
    <method name="XML_val" start="435" end="438" abstract="false" final="false" static="false" visibility="public">
      <docblock>
        <description compact="Get the string value of a field on this object that has been suitable escaped to be inserted directly into a template."/>
      </docblock>
      <parameter name="field" byreference="false" type="{unknown}"/>
      <parameter name="arguments" byreference="false" type="{unknown}" default="null"/>
      <parameter name="cache" byreference="false" type="{unknown}" default="false"/>
    </method>
    <method name="RAW_val" start="443" end="445" abstract="false" final="false" static="false" visibility="public">
      <docblock>
        <description compact="Return the value of the field without any escaping being applied."/>
      </docblock>
      <parameter name="field" byreference="false" type="{unknown}"/>
      <parameter name="arguments" byreference="false" type="{unknown}" default="null"/>
      <parameter name="cache" byreference="false" type="{unknown}" default="true"/>
    </method>
    <method name="SQL_val" start="450" end="452" abstract="false" final="false" static="false" visibility="public">
      <docblock>
        <description compact="Return the value of a field in an SQL-safe format."/>
      </docblock>
      <parameter name="field" byreference="false" type="{unknown}"/>
      <parameter name="arguments" byreference="false" type="{unknown}" default="null"/>
      <parameter name="cache" byreference="false" type="{unknown}" default="true"/>
    </method>
    <method name="JS_val" start="457" end="459" abstract="false" final="false" static="false" visibility="public">
      <docblock>
        <description compact="Return the value of a field in a JavaScript-save format."/>
      </docblock>
      <parameter name="field" byreference="false" type="{unknown}"/>
      <parameter name="arguments" byreference="false" type="{unknown}" default="null"/>
      <parameter name="cache" byreference="false" type="{unknown}" default="true"/>
    </method>
    <method name="ATT_val" start="464" end="466" abstract="false" final="false" static="false" visibility="public">
      <docblock>
        <description compact="Return the value of a field escaped suitable to be inserted into an XML node attribute."/>
      </docblock>
      <parameter name="field" byreference="false" type="{unknown}"/>
      <parameter name="arguments" byreference="false" type="{unknown}" default="null"/>
      <parameter name="cache" byreference="false" type="{unknown}" default="true"/>
    </method>
    <method name="getXMLValues" start="476" end="484" abstract="false" final="false" static="false" visibility="public">
      <docblock>
        <description compact="Get an array of XML-escaped values by field name"/>
        <param description="an array of field names" type="array" variable="$elements"/>
        <return type="array"/>
      </docblock>
      <parameter name="fields" byreference="false" type="{unknown}"/>
    </method>
    <method name="getIterator" start="496" end="498" abstract="false" final="false" static="false" visibility="public">
      <docblock>
        <description compact="Return a single-item iterator so you can iterate over the fields of a single record.">This is useful so you can use a single record inside a &lt;% control %&gt; block in a template - and then use
to access individual fields on this object.</description>
        <return type="object">
          <type full="ArrayIterator" namespace="" name="ArrayIterator"/>
        </return>
      </docblock>
    </method>
    <method name="Me" start="508" end="510" abstract="false" final="false" static="false" visibility="public">
      <docblock>
        <description compact="When rendering some objects it is necessary to iterate over the object being rendered, to do this, you need access to itself."/>
        <return type="object">
          <type full="ViewableData" namespace="" name="ViewableData"/>
        </return>
      </docblock>
    </method>
    <method name="ThemeDir" start="524" end="533" abstract="false" final="false" static="false" visibility="public">
      <docblock>
        <description compact="Return the directory if the current active theme (relative to the site root).">This method is useful for things such as accessing theme images from your template without hardcoding the theme
page - e.g. &lt;img src="$ThemeDir/images/something.gif"&gt;.

This method should only be used when a theme is currently active. However, it will fall over to the current
project directory.</description>
        <param description="the subtheme path to get" type="string" variable="$subtheme"/>
        <return type="string"/>
      </docblock>
      <parameter name="subtheme" byreference="false" type="{unknown}" default="false"/>
    </method>
    <method name="CSSClasses" start="545" end="561" abstract="false" final="false" static="false" visibility="public">
      <docblock>
        <description compact="Get part of the current classes ancestry to be used as a CSS class.">This method returns an escaped string of CSS classes representing the current classes ancestry until it hits a
stop point - e.g. "Page DataObject ViewableData".</description>
        <param description="the class to stop at (default: ViewableData)" type="string" variable="$stopAtClass"/>
        <return type="string"/>
        <uses value="ClassInfo"/>
      </docblock>
      <parameter name="stopAtClass" byreference="false" type="string" default="'ViewableData'"/>
      <inline>
        <comment value="optionally add template identifier" line="555"/>
      </inline>
    </method>
    <method name="Debug" start="568" end="570" abstract="false" final="false" static="false" visibility="public">
      <docblock>
        <description compact="Return debug information about this object that can be rendered into a template"/>
        <return type="object">
          <type full="ViewableData_Debugger" namespace="" name="ViewableData_Debugger"/>
        </return>
      </docblock>
    </method>
  </parent>
  <parent full="Object" namespace="" name="Object">
    <member name="class" type="{unknown}" visibility="public" line="54">
      <docblock>
        <description/>
        <var description="the class name" type="string"/>
      </docblock>
    </member>
    <member name="extension_instances" type="array" visibility="protected" line="67">
      <docblock>
        <description/>
        <var description="all current extension instances." type="array"/>
      </docblock>
    </member>
    <member name="beforeExtendCallbacks" type="array" visibility="protected" line="75">
      <docblock>
        <description compact="List of callbacks to call prior to extensions having extend called on them, each grouped by methodName."/>
        <var type="object">
          <type full="array[callable]" namespace="" name="array[callable]"/>
        </var>
      </docblock>
    </member>
    <member name="afterExtendCallbacks" type="array" visibility="protected" line="98">
      <docblock>
        <description compact="List of callbacks to call after extensions having extend called on them, each grouped by methodName."/>
        <var type="object">
          <type full="array[callable]" namespace="" name="array[callable]"/>
        </var>
      </docblock>
    </member>
    <method name="config" start="60" end="62" abstract="false" final="false" static="true" visibility="public">
      <docblock>
        <description compact="Get a configuration accessor for this class. Short hand for Config::inst()-&gt;get($this-&gt;class, .....)."/>
        <return type="object">
          <type full="Config_ForClass|null" namespace="" name="Config_ForClass|null"/>
        </return>
      </docblock>
    </method>
    <method name="beforeExtending" start="85" end="90" abstract="false" final="false" static="false" visibility="protected">
      <docblock>
        <description compact="Allows user code to hook into Object::extend prior to control being delegated to extensions. Each callback will be reset once called."/>
        <param description="The name of the method to hook into" type="string" variable="$method"/>
        <param description="The callback to execute" type="object" variable="$callback">
          <type full="callable" namespace="" name="callable"/>
        </param>
      </docblock>
      <parameter name="method" byreference="false" type="{unknown}"/>
      <parameter name="callback" byreference="false" type="{unknown}"/>
    </method>
    <method name="afterExtending" start="108" end="113" abstract="false" final="false" static="false" visibility="protected">
      <docblock>
        <description compact="Allows user code to hook into Object::extend after control being delegated to extensions. Each callback will be reset once called."/>
        <param description="The name of the method to hook into" type="string" variable="$method"/>
        <param description="The callback to execute" type="object" variable="$callback">
          <type full="callable" namespace="" name="callable"/>
        </param>
      </docblock>
      <parameter name="method" byreference="false" type="{unknown}"/>
      <parameter name="callback" byreference="false" type="{unknown}"/>
    </method>
    <method name="create" start="132" end="143" abstract="false" final="false" static="true" visibility="public">
      <docblock>
        <description compact="An implementation of the factory method, allows you to create an instance of a class">This method first for strong class overloads (singletons &amp; DB interaction), then custom class overloads. If an
overload is found, an instance of this is returned rather than the original class. To overload a class, use
{@link Object::useCustomClass()}

This can be called in one of two ways - either calling via the class directly,
or calling on Object and passing the class name as the first parameter. The following
are equivalent:
   $list = DataList::create('SiteTree');
  $list = SiteTree::get();</description>
        <param description="the class name" type="string" variable="$class"/>
        <param description="... arguments to pass to the constructor" type="mixed" variable="$arguments"/>
        <return type="object">
          <type full="static" namespace="" name="static"/>
        </return>
      </docblock>
      <inline>
        <comment value="Class to create should be the calling class if not Object," line="135"/>
        <comment value="otherwise the first parameter" line="136"/>
      </inline>
    </method>
    <method name="create_from_string" start="169" end="188" abstract="false" final="false" static="true" visibility="public">
      <docblock>
        <description compact="Create an object from a string representation.  It treats it as a PHP constructor without the 'new' keyword.  It also manages to construct the object without the use of eval().">Construction itself is done with Object::create(), so that Object::useCustomClass() calls
are respected.

`Object::create_from_string("Versioned('Stage','Live')")` will return the result of
`Versioned::create('Stage', 'Live);`

It is designed for simple, clonable objects.  The first time this method is called for a given
string it is cached, and clones of that object are returned.

If you pass the $firstArg argument, this will be prepended to the constructor arguments. It's
impossible to pass null as the firstArg argument.

`Object::create_from_string("Varchar(50)", "MyField")` will return the result of
`Vachar::create('MyField', '50');`

Arguments are always strings, although this is a quirk of the current implementation rather
than something that can be relied upon.</description>
      </docblock>
      <parameter name="classSpec" byreference="false" type="{unknown}"/>
      <parameter name="firstArg" byreference="false" type="{unknown}" default="null"/>
      <inline>
        <comment value="an $extension value can contain parameters as a string," line="171"/>
        <comment value="e.g. &quot;Versioned('Stage','Live')&quot;" line="172"/>
      </inline>
    </method>
    <method name="parse_class_spec" start="194" end="274" abstract="false" final="false" static="true" visibility="public">
      <docblock>
        <description compact="Parses a class-spec, such as &quot;Versioned('Stage','Live')&quot;, as passed to create_from_string().">Returns a 2-elemnent array, with classname and arguments</description>
      </docblock>
      <parameter name="classSpec" byreference="false" type="{unknown}"/>
      <inline>
        <comment value="Keep track of the current bucket that we're putting data into" line="200"/>
        <comment value="Get the class naem" line="207"/>
      </inline>
    </method>
    <method name="strong_create" start="284" end="293" abstract="false" final="false" static="true" visibility="public">
      <docblock>
        <description compact="Similar to {@link Object::create()}, except that classes are only overloaded if you set the $strong parameter to TRUE when using {@link Object::useCustomClass()}"/>
        <param description="the class name" type="string" variable="$class"/>
        <param description="... arguments to pass to the constructor" type="mixed" variable="$arguments"/>
        <return type="object">
          <type full="static" namespace="" name="static"/>
        </return>
      </docblock>
    </method>
    <method name="useCustomClass" start="304" end="310" abstract="false" final="false" static="true" visibility="public">
      <docblock>
        <description compact="This class allows you to overload classes with other classes when they are constructed using the factory method {@link Object::create()}"/>
        <param description="the class to replace" type="string" variable="$oldClass"/>
        <param description="the class to replace it with" type="string" variable="$newClass"/>
        <param description="allows you to enforce a certain class replacement under all circumstances. This is used in" type="object" variable="$strong">singletons and DB interaction classes<type full="bool" namespace="" name="bool"/></param>
      </docblock>
      <parameter name="oldClass" byreference="false" type="{unknown}"/>
      <parameter name="newClass" byreference="false" type="{unknown}"/>
      <parameter name="strong" byreference="false" type="{unknown}" default="false"/>
    </method>
    <method name="getCustomClass" start="318" end="326" abstract="false" final="false" static="true" visibility="public">
      <docblock>
        <description compact="If a class has been overloaded, get the class name it has been overloaded with - otherwise return the class name"/>
        <param description="the class to check" type="string" variable="$class"/>
        <return description="the class that would be created if you called {@link Object::create()} with the class" type="string"/>
      </docblock>
      <parameter name="class" byreference="false" type="{unknown}"/>
    </method>
    <method name="static_lookup" start="339" end="374" abstract="false" final="false" static="true" visibility="public">
      <docblock>
        <description compact="Get the value of a static property of a class, even in that property is declared protected (but not private), without any inheritance, merging or parent lookup if it doesn't exist on the given class."/>
        <static/>
        <param description="The class to get the static from" variable="$class" type="object">
          <type full="-" namespace="" name="-"/>
        </param>
        <param description="The property to get from the class" variable="$name" type="object">
          <type full="-" namespace="" name="-"/>
        </param>
        <param description="- The value to return if property doesn't exist on class" type="object" variable="$default">
          <type full="null" namespace="" name="null"/>
        </param>
        <return description="- The value of the static property $name on class $class, or $default if that property is not" type="object">defined<type full="any" namespace="" name="any"/></return>
      </docblock>
      <parameter name="class" byreference="false" type="{unknown}"/>
      <parameter name="name" byreference="false" type="{unknown}"/>
      <parameter name="default" byreference="false" type="{unknown}" default="null"/>
    </method>
    <method name="get_static" start="391" end="394" abstract="false" final="false" static="true" visibility="public">
      <docblock>
        <description compact="Get a static variable, taking into account SS's inbuild static caches and pseudo-statics">This method first checks for any extra values added by <link xmlns="http://xml.phpdox.net/src" value="Object::add_static_var()"/>, and attemps to traverse
up the extra static var chain until it reaches the top, or it reaches a replacement static.
If any extra values are discovered, they are then merged with the default PHP static values, or in some cases
completely replace the default PHP static when you set $replace = true, and do not define extra data on any
child classes
</description>
        <param type="string" variable="$class"/>
        <param description="the property name" type="string" variable="$name"/>
        <param description="if set to TRUE, force a regeneration of the static cache" type="object" variable="$uncached">
          <type full="bool" namespace="" name="bool"/>
        </param>
        <return type="mixed"/>
      </docblock>
      <parameter name="class" byreference="false" type="{unknown}"/>
      <parameter name="name" byreference="false" type="{unknown}"/>
      <parameter name="uncached" byreference="false" type="{unknown}" default="false"/>
    </method>
    <method name="set_static" start="403" end="406" abstract="false" final="false" static="true" visibility="public">
      <docblock>
        <description compact="Set a static variable"/>
        <param type="string" variable="$class"/>
        <param description="the property name to set" type="string" variable="$name"/>
        <param type="mixed" variable="$value"/>
      </docblock>
      <parameter name="class" byreference="false" type="{unknown}"/>
      <parameter name="name" byreference="false" type="{unknown}"/>
      <parameter name="value" byreference="false" type="{unknown}"/>
    </method>
    <method name="uninherited_static" start="415" end="418" abstract="false" final="false" static="true" visibility="public">
      <docblock>
        <description compact="Get an uninherited static variable - a variable that is explicity set in this class, and not in the parent class."/>
        <param type="string" variable="$class"/>
        <param type="string" variable="$name"/>
        <return type="mixed"/>
      </docblock>
      <parameter name="class" byreference="false" type="{unknown}"/>
      <parameter name="name" byreference="false" type="{unknown}"/>
      <parameter name="uncached" byreference="false" type="{unknown}" default="false"/>
    </method>
    <method name="combined_static" start="430" end="435" abstract="false" final="false" static="true" visibility="public">
      <docblock>
        <description compact="Traverse down a class ancestry and attempt to merge all the uninherited static values for a particular static into a single variable"/>
        <param type="string" variable="$class"/>
        <param description="the static name" type="string" variable="$name"/>
        <param description="an optional parent class name to begin merging statics down from, rather than traversing" type="string" variable="$ceiling">the entire hierarchy</param>
        <return type="mixed"/>
      </docblock>
      <parameter name="class" byreference="false" type="{unknown}"/>
      <parameter name="name" byreference="false" type="{unknown}"/>
      <parameter name="ceiling" byreference="false" type="{unknown}" default="false"/>
    </method>
    <method name="addStaticVars" start="444" end="447" abstract="false" final="false" static="true" visibility="public">
      <docblock>
        <description compact="Merge in a set of additional static variables"/>
        <param type="string" variable="$class"/>
        <param description="in a [property name] =&gt; [value] format" type="array" variable="$properties"/>
        <param description="replace existing static vars" type="object" variable="$replace">
          <type full="bool" namespace="" name="bool"/>
        </param>
      </docblock>
      <parameter name="class" byreference="false" type="{unknown}"/>
      <parameter name="properties" byreference="false" type="{unknown}"/>
      <parameter name="replace" byreference="false" type="{unknown}" default="false"/>
    </method>
    <method name="add_static_var" start="465" end="470" abstract="false" final="false" static="true" visibility="public">
      <docblock>
        <description compact="Add a static variable without replacing it completely if possible, but merging in with both existing PHP statics and existing psuedo-statics. Uses PHP's array_merge_recursive() with if the $replace argument is FALSE.">Documentation from http://php.net/array_merge_recursive:
If the input arrays have the same string keys, then the values for these keys are merged together
into an array, and this is done recursively, so that if one of the values is an array itself,
the function will merge it with a corresponding entry in another array too.
If, however, the arrays have the same numeric key, the later value will not overwrite the original value,
but will be appended.</description>
        <param type="string" variable="$class"/>
        <param description="the static name" type="string" variable="$name"/>
        <param type="mixed" variable="$value"/>
        <param description="completely replace existing static values" type="object" variable="$replace">
          <type full="bool" namespace="" name="bool"/>
        </param>
      </docblock>
      <parameter name="class" byreference="false" type="{unknown}"/>
      <parameter name="name" byreference="false" type="{unknown}"/>
      <parameter name="value" byreference="false" type="{unknown}"/>
      <parameter name="replace" byreference="false" type="{unknown}" default="false"/>
    </method>
    <method name="has_extension" start="481" end="503" abstract="false" final="false" static="true" visibility="public">
      <docblock>
        <description compact="Return TRUE if a class has a specified extension.">This supports backwards-compatible format (static Object::has_extension($requiredExtension))
and new format ($object-&gt;has_extension($class, $requiredExtension))</description>
        <param description="if 1 argument supplied, the class name of the extension to" type="string" variable="$classOrExtension">check for; if 2 supplied, the class name to test</param>
        <param description="used only if 2 arguments supplied" type="string" variable="$requiredExtension"/>
        <param description="if the extension has to match the required extension and not be a subclass" type="boolean" variable="$strict"/>
      </docblock>
      <parameter name="classOrExtension" byreference="false" type="{unknown}"/>
      <parameter name="requiredExtension" byreference="false" type="{unknown}" default="null"/>
      <parameter name="strict" byreference="false" type="{unknown}" default="false"/>
      <inline>
        <comment value="BC support" line="482"/>
      </inline>
    </method>
    <method name="add_extension" start="523" end="565" abstract="false" final="false" static="true" visibility="public">
      <docblock>
        <description compact="Add an extension to a specific class.">The preferred method for adding extensions is through YAML config,
since it avoids autoloading the class, and is easier to override in
more specific configurations.
As an alternative, extensions can be added to a specific class
directly in the <link xmlns="http://xml.phpdox.net/src" value="Object::$extensions"/> array.
See <link xmlns="http://xml.phpdox.net/src" value="SiteTree::$extensions"/> for examples.
Keep in mind that the extension will only be applied to new
instances, not existing ones (including all instances created through <link xmlns="http://xml.phpdox.net/src" value="singleton()"/>).
</description>
        <see value="http://doc.silverstripe.org/framework/en/trunk/reference/dataextension"/>
        <param description="Class that should be extended - has to be a subclass of {@link Object}" type="string" variable="$class"/>
        <param description="Subclass of {@link Extension} with optional parameters" type="string" variable="$extension">as a string, e.g. "Versioned" or "Translatable('Param')"</param>
      </docblock>
      <parameter name="classOrExtension" byreference="false" type="{unknown}"/>
      <parameter name="extension" byreference="false" type="{unknown}" default="null"/>
      <inline>
        <comment value="unset some caches" line="545"/>
        <comment value="load statics now for DataObject classes" line="559"/>
      </inline>
    </method>
    <method name="remove_extension" start="584" end="614" abstract="false" final="false" static="true" visibility="public">
      <docblock>
        <description compact="Remove an extension from a class.">Keep in mind that this won't revert any datamodel additions
of the extension at runtime, unless its used before the
schema building kicks in (in your _config.php).
Doesn't remove the extension from any <link xmlns="http://xml.phpdox.net/src" value="Object"/>instances which are already created, but will have an
effect on new extensions.
Clears any previously created singletons through <link xmlns="http://xml.phpdox.net/src" value="singleton()"/>to avoid side-effects from stale extension information.
</description>
        <todo value="Add support for removing extensions with parameters"/>
        <param description="Classname of an {@link Extension} subclass, without parameters" type="string" variable="$extension"/>
      </docblock>
      <parameter name="extension" byreference="false" type="{unknown}"/>
      <inline>
        <comment value="remove any instances of the extension with parameters" line="589"/>
        <comment value="extensions with parameters will be stored in config as" line="594"/>
        <comment value="ExtensionName(&quot;Param&quot;)." line="595"/>
        <comment value="unset singletons to avoid side-effects" line="604"/>
        <comment value="unset some caches" line="607"/>
      </inline>
    </method>
    <method name="get_extensions" start="623" end="635" abstract="false" final="false" static="true" visibility="public">
      <docblock>
        <description/>
        <param type="string" variable="$class"/>
        <param description="Include the argument string in the return array," type="object" variable="$includeArgumentString">FALSE would return array("Versioned"), TRUE returns array("Versioned('Stage','Live')").<type full="bool" namespace="" name="bool"/></param>
        <return description="Numeric array of either {@link DataExtension} classnames," type="array">or eval'ed classname strings with constructor arguments.</return>
      </docblock>
      <parameter name="class" byreference="false" type="{unknown}"/>
      <parameter name="includeArgumentString" byreference="false" type="{unknown}" default="false"/>
    </method>
    <method name="get_extra_config_sources" start="641" end="678" abstract="false" final="false" static="true" visibility="public">
      <parameter name="class" byreference="false" type="{unknown}" default="null"/>
      <inline>
        <comment value="If this class is unextendable, NOP" line="644"/>
        <comment value="Get a list of extensions" line="650"/>
        <comment value="Build a list of all sources;" line="654"/>
      </inline>
    </method>
    <constructor name="__construct" start="680" end="699" abstract="false" final="false" static="false" visibility="public"/>
    <method name="__call" start="711" end="765" abstract="false" final="false" static="false" visibility="public">
      <docblock>
        <description compact="Attemps to locate and call a method dynamically added to a class at runtime if a default cannot be located">You can add extra methods to a class using <link xmlns="http://xml.phpdox.net/src" value="Extensions"/>, <link xmlns="http://xml.phpdox.net/src" value="Object::createMethod()"/> or
<link xmlns="http://xml.phpdox.net/src" value="Object::addWrapperMethod()"/></description>
        <param type="string" variable="$method"/>
        <param type="array" variable="$arguments"/>
        <return type="mixed"/>
      </docblock>
      <parameter name="method" byreference="false" type="{unknown}"/>
      <parameter name="arguments" byreference="false" type="{unknown}"/>
      <inline>
        <comment value="If the method cache was cleared by an an Object::add_extension() / Object::remove_extension()" line="712"/>
        <comment value="call, then we should rebuild it." line="713"/>
      </inline>
    </method>
    <method name="hasMethod" start="778" end="780" abstract="false" final="false" static="false" visibility="public">
      <docblock>
        <description compact="Return TRUE if a method exists on this object">This should be used rather than PHP's inbuild method_exists() as it takes into account methods added via
extensions</description>
        <param type="string" variable="$method"/>
        <return type="object">
          <type full="bool" namespace="" name="bool"/>
        </return>
      </docblock>
      <parameter name="method" byreference="false" type="{unknown}"/>
    </method>
    <method name="allMethodNames" start="788" end="798" abstract="false" final="false" static="false" visibility="public">
      <docblock>
        <description compact="Return the names of all the methods available on this object"/>
        <param description="include methods added dynamically at runtime" type="object" variable="$custom">
          <type full="bool" namespace="" name="bool"/>
        </param>
        <return type="array"/>
      </docblock>
      <parameter name="custom" byreference="false" type="{unknown}" default="false"/>
    </method>
    <method name="defineMethods" start="807" end="821" abstract="false" final="false" static="false" visibility="protected">
      <docblock>
        <description compact="Adds any methods from {@link Extension} instances attached to this object.">All these methods can then be called directly on the instance (transparently
mapped through <link xmlns="http://xml.phpdox.net/src" value="__call()"/>), or called explicitly through <link xmlns="http://xml.phpdox.net/src" value="extend()"/>.
</description>
        <uses value="addMethodsFrom()"/>
      </docblock>
    </method>
    <method name="addMethodsFrom" start="829" end="864" abstract="false" final="false" static="false" visibility="protected">
      <docblock>
        <description compact="Add all the methods from an object property (which is an {@link Extension}) to this object."/>
        <param description="the property name" type="string" variable="$property"/>
        <param description="an index to use if the property is an array" type="object" variable="$index">
          <type full="string|int" namespace="" name="string|int"/>
        </param>
      </docblock>
      <parameter name="property" byreference="false" type="{unknown}"/>
      <parameter name="index" byreference="false" type="{unknown}" default="null"/>
    </method>
    <method name="addWrapperMethod" start="873" end="878" abstract="false" final="false" static="false" visibility="protected">
      <docblock>
        <description compact="Add a wrapper method - a method which points to another method with a different name. For example, Thumbnail(x) can be wrapped to generateThumbnail(x)"/>
        <param description="the method name to wrap" type="string" variable="$method"/>
        <param description="the method name to wrap to" type="string" variable="$wrap"/>
      </docblock>
      <parameter name="method" byreference="false" type="{unknown}"/>
      <parameter name="wrap" byreference="false" type="{unknown}"/>
    </method>
    <method name="createMethod" start="888" end="892" abstract="false" final="false" static="false" visibility="protected">
      <docblock>
        <description compact="Add an extra method using raw PHP code passed as a string"/>
        <param description="the method name" type="string" variable="$method"/>
        <param description="the PHP code - arguments will be in an array called $args, while you can access this object" type="string" variable="$code">by using $obj. Note that you cannot call protected methods, as the method is actually an external
       function</param>
      </docblock>
      <parameter name="method" byreference="false" type="{unknown}"/>
      <parameter name="code" byreference="false" type="{unknown}"/>
    </method>
    <method name="stat" start="899" end="901" abstract="false" final="false" static="false" visibility="public">
      <docblock>
        <description/>
        <see value="Object::get_static()"/>
      </docblock>
      <parameter name="name" byreference="false" type="{unknown}"/>
      <parameter name="uncached" byreference="false" type="{unknown}" default="false"/>
    </method>
    <method name="set_stat" start="906" end="908" abstract="false" final="false" static="false" visibility="public">
      <docblock>
        <description/>
        <see value="Object::set_static()"/>
      </docblock>
      <parameter name="name" byreference="false" type="{unknown}"/>
      <parameter name="value" byreference="false" type="{unknown}"/>
    </method>
    <method name="uninherited" start="913" end="915" abstract="false" final="false" static="false" visibility="public">
      <docblock>
        <description/>
        <see value="Object::uninherited_static()"/>
      </docblock>
      <parameter name="name" byreference="false" type="{unknown}"/>
    </method>
    <method name="exists" start="927" end="929" abstract="false" final="false" static="false" visibility="public">
      <docblock>
        <description compact="Return true if this object &quot;exists&quot; i.e. has a sensible value">This method should be overriden in subclasses to provide more context about the classes state. For example, a
{@link DataObject} class could return false when it is deleted from the database</description>
        <return type="object">
          <type full="bool" namespace="" name="bool"/>
        </return>
      </docblock>
    </method>
    <method name="parentClass" start="934" end="936" abstract="false" final="false" static="false" visibility="public">
      <docblock>
        <description/>
        <return description="this classes parent class" type="string"/>
      </docblock>
    </method>
    <method name="is_a" start="944" end="946" abstract="false" final="false" static="false" visibility="public">
      <docblock>
        <description compact="Check if this class is an instance of a specific class, or has that class as one of its parents"/>
        <param type="string" variable="$class"/>
        <return type="object">
          <type full="bool" namespace="" name="bool"/>
        </return>
      </docblock>
      <parameter name="class" byreference="false" type="{unknown}"/>
    </method>
    <method name="__toString" start="951" end="953" abstract="false" final="false" static="false" visibility="public">
      <docblock>
        <description/>
        <return description="the class name" type="string"/>
      </docblock>
    </method>
    <method name="invokeWithExtensions" start="966" end="971" abstract="false" final="false" static="false" visibility="public">
      <docblock>
        <description compact="Calls a method if available on both this object and all applied {@link Extensions}, and then attempts to merge all results into an array"/>
        <param description="the method name to call" type="string" variable="$method"/>
        <param description="a single argument to pass" type="mixed" variable="$argument"/>
        <return type="mixed"/>
        <todo value="integrate inheritance rules"/>
      </docblock>
      <parameter name="method" byreference="false" type="{unknown}"/>
      <parameter name="argument" byreference="false" type="{unknown}" default="null"/>
    </method>
    <method name="extend" start="988" end="1017" abstract="false" final="false" static="false" visibility="public">
      <docblock>
        <description compact="Run the given function on all of this object's extensions. Note that this method originally returned void, so if you wanted to return results, you're hosed">Currently returns an array, with an index resulting every time the function is called. Only adds returns if
they're not NULL, to avoid bogus results from methods just defined on the parent extension. This is important for
permission-checks through extend, as they use min() to determine if any of the returns is FALSE. As min() doesn't
do type checking, an included NULL return would fail the permission checks.
The extension methods are defined during <link xmlns="http://xml.phpdox.net/src" value="__construct()"/> in <link xmlns="http://xml.phpdox.net/src" value="defineMethods()"/>.
</description>
        <param description="the name of the method to call on each extension" type="string" variable="$method"/>
        <param description="... up to 7 arguments to be passed to the method" type="mixed" variable="$a1"/>
        <return type="array"/>
      </docblock>
      <parameter name="method" byreference="false" type="{unknown}"/>
      <parameter name="a1" byreference="true" type="{unknown}" default="null"/>
      <parameter name="a2" byreference="true" type="{unknown}" default="null"/>
      <parameter name="a3" byreference="true" type="{unknown}" default="null"/>
      <parameter name="a4" byreference="true" type="{unknown}" default="null"/>
      <parameter name="a5" byreference="true" type="{unknown}" default="null"/>
      <parameter name="a6" byreference="true" type="{unknown}" default="null"/>
      <parameter name="a7" byreference="true" type="{unknown}" default="null"/>
    </method>
    <method name="getExtensionInstance" start="1027" end="1029" abstract="false" final="false" static="false" visibility="public">
      <docblock>
        <description compact="Get an extension instance attached to this object by name."/>
        <uses value="hasExtension()"/>
        <param type="string" variable="$extension"/>
        <return type="object">
          <type full="Extension" namespace="" name="Extension"/>
        </return>
      </docblock>
      <parameter name="extension" byreference="false" type="{unknown}"/>
    </method>
    <method name="hasExtension" start="1045" end="1047" abstract="false" final="false" static="false" visibility="public">
      <docblock>
        <description compact="Returns TRUE if this object instance has a specific extension applied in {@link $extension_instances}. Extension instances are initialized at constructor time, meaning if you use {@link add_extension()} afterwards, the added extension will just be added to new instances of the extended class. Use the static method {@link has_extension()} to check if a class (not an instance) has a specific extension.">Caution: Don't use singleton(&lt;class&gt;)-&gt;hasExtension() as it will
give you inconsistent results based on when the singleton was first
accessed.</description>
        <param description="Classname of an {@link Extension} subclass without parameters" type="string" variable="$extension"/>
        <return type="object">
          <type full="bool" namespace="" name="bool"/>
        </return>
      </docblock>
      <parameter name="extension" byreference="false" type="{unknown}"/>
    </method>
    <method name="getExtensionInstances" start="1056" end="1058" abstract="false" final="false" static="false" visibility="public">
      <docblock>
        <description compact="Get all extension instances for this specific object instance.">See <link xmlns="http://xml.phpdox.net/src" value="get_extensions()"/> to get all applied extension classes
for this class (not the instance).
</description>
        <return description="Map of {@link DataExtension} instances, keyed by classname." type="array"/>
      </docblock>
    </method>
    <method name="cacheToFile" start="1072" end="1092" abstract="false" final="false" static="false" visibility="public">
      <docblock>
        <description compact="Cache the results of an instance method in this object to a file, or if it is already cache return the cached results"/>
        <param description="the method name to cache" type="string" variable="$method"/>
        <param description="the cache lifetime in seconds" type="int" variable="$lifetime"/>
        <param description="custom cache ID to use" type="string" variable="$ID"/>
        <param description="an optional array of arguments" type="array" variable="$arguments"/>
        <return description="the cached data" type="mixed"/>
      </docblock>
      <parameter name="method" byreference="false" type="{unknown}"/>
      <parameter name="lifetime" byreference="false" type="integer" default="3600"/>
      <parameter name="ID" byreference="false" type="{unknown}" default="false"/>
      <parameter name="arguments" byreference="false" type="array"/>
    </method>
    <method name="clearCache" start="1097" end="1105" abstract="false" final="false" static="false" visibility="public">
      <docblock>
        <description compact="Clears the cache for the given cacheToFile call"/>
      </docblock>
      <parameter name="method" byreference="false" type="{unknown}"/>
      <parameter name="ID" byreference="false" type="{unknown}" default="false"/>
      <parameter name="arguments" byreference="false" type="array"/>
    </method>
    <method name="loadCache" start="1114" end="1122" abstract="false" final="false" static="false" visibility="protected">
      <docblock>
        <description compact="Loads a cache from the filesystem if a valid on is present and within the specified lifetime"/>
        <param description="the cache name" type="string" variable="$cache"/>
        <param description="the lifetime (in seconds) of the cache before it is invalid" type="int" variable="$lifetime"/>
        <return type="mixed"/>
      </docblock>
      <parameter name="cache" byreference="false" type="{unknown}"/>
      <parameter name="lifetime" byreference="false" type="integer" default="3600"/>
    </method>
    <method name="saveCache" start="1130" end="1132" abstract="false" final="false" static="false" visibility="protected">
      <docblock>
        <description compact="Save a piece of cached data to the file system"/>
        <param description="the cache name" type="string" variable="$cache"/>
        <param description="data to save (must be serializable)" type="mixed" variable="$data"/>
      </docblock>
      <parameter name="cache" byreference="false" type="{unknown}"/>
      <parameter name="data" byreference="false" type="{unknown}"/>
    </method>
    <method name="sanitiseCachename" start="1140" end="1142" abstract="false" final="false" static="false" visibility="protected">
      <docblock>
        <description compact="Strip a file name of special characters so it is suitable for use as a cache file name"/>
        <param type="string" variable="$name"/>
        <return description="the name with all special cahracters replaced with underscores" type="string"/>
      </docblock>
      <parameter name="name" byreference="false" type="{unknown}"/>
    </method>
  </parent>
  <interface full="IteratorAggregate" namespace="" name="IteratorAggregate">
    <extends full="Traversable" namespace="" name="Traversable"/>
    <method name="getIterator" abstract="false" static="false" visibility="public" final="false">
    <docblock>
      <description compact="Retrieve an external iterator"/>
      <return type="Traversable"/>
    </docblock>
  </method>
  </interface>
  <interface full="TemplateGlobalProvider" namespace="" name="TemplateGlobalProvider">
    <method name="get_template_global_variables" start="33" end="33" abstract="false" final="false" static="true" visibility="public">
      <docblock>
        <description compact="Called by SSViewer to get a list of global variables to expose to the template, the static method to call on this class to get the value for those variables, and the class to use for casting the returned value for use in a template">If the method to call is not included for a particular template variable, a method named the same as the
template variable will be called

If the casting class is not specified for a particular template variable, ViewableData::$default_cast is used

The first letter of the template variable is case-insensitive. However the method name is always case sensitive.</description>
        <abstract/>
        <return description="Returns an array of items. Each key =&gt; value pair is one of three forms:" type="array">- template name (no key)
 - template name =&gt; method name
 - template name =&gt; array(), where the array can contain these key =&gt; value pairs
    - "method" =&gt; method name
    - "casting" =&gt; casting class to use (i.e., Varchar, HTMLText, etc)</return>
      </docblock>
    </method>
  </interface>
</class>
