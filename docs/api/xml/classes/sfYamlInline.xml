<?xml version="1.0" encoding="UTF-8"?>
<class xmlns="http://xml.phpdox.net/src" full="sfYamlInline" namespace="" name="sfYamlInline" abstract="false" final="false" start="21" end="442">
  <file path="/var/www/_modules/ecommerce_test/trunk/docs/en/phpdox/../../../framework/thirdparty/zend_translate_railsyaml/library/Translate/Adapter/thirdparty/sfYaml/lib" file="sfYamlInline.php" realpath="/var/www/_modules/ecommerce_test/trunk/framework/thirdparty/zend_translate_railsyaml/library/Translate/Adapter/thirdparty/sfYaml/lib/sfYamlInline.php" size="11515" time="2015-03-14T10:42:29+13:00" unixtime="1426282949" sha1="780795d5b7449e14601dd365516c15a26324c24d" relative="framework/thirdparty/zend_translate_railsyaml/library/Translate/Adapter/thirdparty/sfYaml/lib/sfYamlInline.php"/>
  <docblock>
    <description compact="sfYamlInline implements a YAML parser/dumper for the YAML inline syntax."/>
    <package value="symfony"/>
    <subpackage value="yaml"/>
    <author value="Fabien Potencier &lt;fabien.potencier@symfony-project.com&gt;"/>
    <version value="SVN: $Id: sfYamlInline.class.php 16177 2009-03-11 08:32:48Z fabien $"/>
  </docblock>
  <constant name="REGEX_QUOTED_STRING" value="'(?:&quot;([^&quot;\\\\]*(?:\\\\.[^&quot;\\\\]*)*)&quot;|\'([^\']*(?:\'\'[^\']*)*)\')'"/>
  <method name="load" start="32" end="65" abstract="false" final="false" static="true" visibility="public">
    <docblock>
      <description compact="Convert a YAML string to a PHP array."/>
      <param description="A YAML string" type="string" variable="$value"/>
      <return description="A PHP array representing the YAML string" type="array"/>
    </docblock>
    <parameter name="value" byreference="false" type="{unknown}"/>
  </method>
  <method name="dump" start="74" end="122" abstract="false" final="false" static="true" visibility="public">
    <docblock>
      <description compact="Dumps a given PHP variable to a YAML string."/>
      <param description="The PHP variable to convert" type="mixed" variable="$value"/>
      <return description="The YAML string representing the PHP array" type="string"/>
    </docblock>
    <parameter name="value" byreference="false" type="{unknown}"/>
  </method>
  <method name="dumpArray" start="131" end="157" abstract="false" final="false" static="true" visibility="protected">
    <docblock>
      <description compact="Dumps a PHP array to a YAML string."/>
      <param description="The PHP array to dump" type="array" variable="$value"/>
      <return description="The YAML string representing the PHP array" type="string"/>
    </docblock>
    <parameter name="value" byreference="false" type="{unknown}"/>
    <inline>
      <comment value="array" line="133"/>
      <comment value="mapping" line="149"/>
    </inline>
  </method>
  <method name="parseScalar" start="170" end="205" abstract="false" final="false" static="true" visibility="public">
    <docblock>
      <description compact="Parses a scalar to a YAML string."/>
      <param type="object" variable="$scalar">
        <type full="scalar" namespace="" name="scalar"/>
      </param>
      <param type="string" variable="$delimiters"/>
      <param type="array" variable="$stringDelimiter"/>
      <param type="integer" variable="$i"/>
      <param type="boolean" variable="$evaluate"/>
      <return description="A YAML string" type="string"/>
    </docblock>
    <parameter name="scalar" byreference="false" type="{unknown}"/>
    <parameter name="delimiters" byreference="false" type="{unknown}" default="null"/>
    <parameter name="stringDelimiters" byreference="false" type="array"/>
    <parameter name="i" byreference="true" type="integer" default="0"/>
    <parameter name="evaluate" byreference="false" type="{unknown}" default="true"/>
    <inline>
      <comment value="quoted scalar" line="174"/>
    </inline>
  </method>
  <method name="parseQuotedScalar" start="215" end="238" abstract="false" final="false" static="true" visibility="protected">
    <docblock>
      <description compact="Parses a quoted scalar to YAML."/>
      <param type="string" variable="$scalar"/>
      <param type="integer" variable="$i"/>
      <return description="A YAML string" type="string"/>
    </docblock>
    <parameter name="scalar" byreference="false" type="{unknown}"/>
    <parameter name="i" byreference="true" type="{unknown}"/>
    <inline>
      <comment value="evaluate the string" line="226"/>
    </inline>
  </method>
  <method name="parseSequence" start="248" end="298" abstract="false" final="false" static="true" visibility="protected">
    <docblock>
      <description compact="Parses a sequence to a YAML string."/>
      <param type="string" variable="$sequence"/>
      <param type="integer" variable="$i"/>
      <return description="A YAML string" type="string"/>
    </docblock>
    <parameter name="sequence" byreference="false" type="{unknown}"/>
    <parameter name="i" byreference="true" type="integer" default="0"/>
    <inline>
      <comment value="[foo, bar, ...]" line="254"/>
    </inline>
  </method>
  <method name="parseMapping" start="308" end="365" abstract="false" final="false" static="true" visibility="protected">
    <docblock>
      <description compact="Parses a mapping to a YAML string."/>
      <param type="string" variable="$mapping"/>
      <param type="integer" variable="$i"/>
      <return description="A YAML string" type="string"/>
    </docblock>
    <parameter name="mapping" byreference="false" type="{unknown}"/>
    <parameter name="i" byreference="true" type="integer" default="0"/>
    <inline>
      <comment value="{foo: bar, bar:foo, ...}" line="314"/>
      <comment value="key" line="327"/>
      <comment value="value" line="330"/>
    </inline>
  </method>
  <method name="evaluateScalar" start="374" end="423" abstract="false" final="false" static="true" visibility="protected">
    <docblock>
      <description compact="Evaluates scalars and replaces magic values."/>
      <param type="string" variable="$scalar"/>
      <return description="A YAML string" type="string"/>
    </docblock>
    <parameter name="scalar" byreference="false" type="{unknown}"/>
  </method>
  <method name="getTimestampRegex" start="425" end="441" abstract="false" final="false" static="true" visibility="protected"/>
</class>
