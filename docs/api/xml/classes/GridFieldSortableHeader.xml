<?xml version="1.0" encoding="UTF-8"?>
<class xmlns="http://xml.phpdox.net/src" full="GridFieldSortableHeader" namespace="" name="GridFieldSortableHeader" abstract="false" final="false" start="12" end="260">
  <file path="/var/www/_modules/ecommerce_test/trunk/docs/en/phpdox/../../../framework/forms/gridfield" file="GridFieldSortableHeader.php" realpath="/var/www/_modules/ecommerce_test/trunk/framework/forms/gridfield/GridFieldSortableHeader.php" size="7877" time="2015-03-14T10:40:46+13:00" unixtime="1426282846" sha1="4be0e477472a963c4c90ce8874bf27b46b2db582" relative="framework/forms/gridfield/GridFieldSortableHeader.php"/>
  <docblock>
    <description compact="GridFieldSortableHeader adds column headers to a {@link GridField} that can also sort the columns."/>
    <see value="GridField"/>
    <package value="forms"/>
    <subpackage value="fields-gridfield"/>
  </docblock>
  <implements full="GridField_HTMLProvider" namespace="" name="GridField_HTMLProvider"/>
  <implements full="GridField_DataManipulator" namespace="" name="GridField_DataManipulator"/>
  <implements full="GridField_ActionProvider" namespace="" name="GridField_ActionProvider"/>
  <member name="throwExceptionOnBadDataType" type="{unknown}" default="true" visibility="protected" line="17">
    <docblock>
      <description compact="See {@link setThrowExceptionOnBadDataType()}"/>
    </docblock>
  </member>
  <member name="fieldSorting" type="array" visibility="public" line="22">
    <docblock>
      <description/>
      <var type="array"/>
    </docblock>
  </member>
  <method name="setThrowExceptionOnBadDataType" start="33" end="35" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="Determine what happens when this component is used with a list that isn't {@link SS_Filterable}.">- true:  An exception is thrown
 - false: This component will be ignored - it won't make any changes to the GridField.

By default, this is set to true so that it's clearer what's happening, but the predefined
{@link GridFieldConfig} subclasses set this to false for flexibility.</description>
    </docblock>
    <parameter name="throwExceptionOnBadDataType" byreference="false" type="{unknown}"/>
  </method>
  <method name="getThrowExceptionOnBadDataType" start="40" end="42" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="See {@link setThrowExceptionOnBadDataType()}"/>
    </docblock>
  </method>
  <method name="checkDataType" start="48" end="58" abstract="false" final="false" static="false" visibility="protected">
    <docblock>
      <description compact="Check that this dataList is of the right data type.">Returns false if it's a bad data type, and if appropriate, throws an exception.</description>
    </docblock>
    <parameter name="dataList" byreference="false" type="{unknown}"/>
  </method>
  <method name="setFieldSorting" start="66" end="69" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="Specify sortings with fieldname as the key, and actual fieldname to sort as value.">Example: array("MyCustomTitle"=&gt;"Title", "MyCustomBooleanField" =&gt; "ActualBooleanField")</description>
      <param type="array" variable="$casting"/>
    </docblock>
    <parameter name="sorting" byreference="false" type="{unknown}"/>
  </method>
  <method name="getFieldSorting" start="74" end="76" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description/>
      <return type="array"/>
    </docblock>
  </method>
  <method name="getHTMLFragments" start="81" end="164" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="Returns the header row providing titles with sort buttons"/>
    </docblock>
    <parameter name="gridField" byreference="false" type="{unknown}"/>
    <inline>
      <comment value="we have a relation column with dot notation" line="105"/>
      <comment value="@see DataObject::relField for approximation" line="106"/>
      <comment value="It's impossible to sort on a HasManyList/ManyManyList" line="112"/>
    </inline>
  </method>
  <method name="getActions" start="171" end="175" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description/>
      <param type="object" variable="$gridField">
        <type full="GridField" namespace="" name="GridField"/>
      </param>
      <return type="array"/>
    </docblock>
    <parameter name="gridField" byreference="false" type="{unknown}"/>
  </method>
  <method name="handleAction" start="177" end="192" abstract="false" final="false" static="false" visibility="public">
    <parameter name="gridField" byreference="false" type="object">
      <type full="\\GridField" namespace="\" name="GridField"/>
    </parameter>
    <parameter name="actionName" byreference="false" type="{unknown}"/>
    <parameter name="arguments" byreference="false" type="{unknown}"/>
    <parameter name="data" byreference="false" type="{unknown}"/>
  </method>
  <method name="getManipulatedData" start="203" end="259" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="Returns the manipulated (sorted) DataList. Field names will simply add an 'ORDER BY' clause, relation names will add appropriate joins to the {@link DataQuery} first."/>
      <param type="object">
        <type full="GridField" namespace="" name="GridField"/>
      </param>
      <param type="object">
        <type full="SS_List" namespace="" name="SS_List"/>
      </param>
      <return type="object">
        <type full="SS_List" namespace="" name="SS_List"/>
      </return>
    </docblock>
    <parameter name="gridField" byreference="false" type="object">
      <type full="\\GridField" namespace="\" name="GridField"/>
    </parameter>
    <parameter name="dataList" byreference="false" type="object">
      <type full="\\SS_List" namespace="\" name="SS_List"/>
    </parameter>
    <inline>
      <comment value="if we have a relation column with dot notation" line="213"/>
      <comment value="If we're not on the last item, we're looking at a relation" line="222"/>
      <comment value="Traverse to the relational list" line="224"/>
      <comment value="if the field isn't in the object tree then it is likely" line="232"/>
      <comment value="been aliased. In that event, assume what the user has" line="233"/>
      <comment value="provided is the correct value" line="234"/>
      <comment value="Store the last 'alias' name as it'll be used for the next" line="243"/>
      <comment value="join, or the 'sort' column" line="244"/>
      <comment value="We need to manually create our ORDER BY &quot;Foo&quot;.&quot;Bar&quot; string for relations," line="253"/>
      <comment value="as -&gt;sort() won't do it by itself. Blame PostgreSQL for making this necessary" line="254"/>
    </inline>
  </method>
  <interface full="GridField_HTMLProvider" namespace="" name="GridField_HTMLProvider">
    <extends full="GridFieldComponent" namespace="" name="GridFieldComponent"/>
    <method name="getHTMLFragments" start="38" end="38" abstract="false" final="false" static="false" visibility="public">
      <docblock>
        <description compact="Returns a map where the keys are fragment names and the values are pieces of HTML to add to these fragments.">Here are 4 built-in fragments: 'header', 'footer', 'before', and
'after', but components may also specify fragments of their own.
To specify a new fragment, specify a new fragment by including the
text "$DefineFragment(fragmentname)" in the HTML that you return.
Fragment names should only contain alphanumerics, -, and _.
If you attempt to return HTML for a fragment that doesn't exist, an
exception will be thrown when the <link xmlns="http://xml.phpdox.net/src" value="GridField"/> is rendered.
</description>
        <return type="array"/>
      </docblock>
      <parameter name="gridField" byreference="false" type="{unknown}"/>
    </method>
  </interface>
  <interface full="GridField_DataManipulator" namespace="" name="GridField_DataManipulator">
    <extends full="GridFieldComponent" namespace="" name="GridFieldComponent"/>
    <method name="getManipulatedData" start="166" end="166" abstract="false" final="false" static="false" visibility="public">
      <docblock>
        <description compact="Manipulate the {@link DataList} as needed by this grid modifier."/>
        <param type="object">
          <type full="GridField" namespace="" name="GridField"/>
        </param>
        <param type="object">
          <type full="SS_List" namespace="" name="SS_List"/>
        </param>
        <return type="object">
          <type full="DataList" namespace="" name="DataList"/>
        </return>
      </docblock>
      <parameter name="gridField" byreference="false" type="object">
        <type full="\\GridField" namespace="\" name="GridField"/>
      </parameter>
      <parameter name="dataList" byreference="false" type="object">
        <type full="\\SS_List" namespace="\" name="SS_List"/>
      </parameter>
    </method>
  </interface>
  <interface full="GridField_ActionProvider" namespace="" name="GridField_ActionProvider">
    <extends full="GridFieldComponent" namespace="" name="GridFieldComponent"/>
    <method name="getActions" start="129" end="129" abstract="false" final="false" static="false" visibility="public">
      <docblock>
        <description compact="Return a list of the actions handled by this action provider.">Used to identify the action later on through the $actionName parameter
in <link xmlns="http://xml.phpdox.net/src" value="handleAction"/>.
There is no namespacing on these actions, so you need to ensure that
they don't conflict with other components.
</description>
        <param type="object">
          <type full="GridField" namespace="" name="GridField"/>
        </param>
        <return description="with action identifier strings." type="object">
          <type full="Array" namespace="" name="Array"/>
        </return>
      </docblock>
      <parameter name="gridField" byreference="false" type="{unknown}"/>
    </method>
    <method name="handleAction" start="142" end="142" abstract="false" final="false" static="false" visibility="public">
      <docblock>
        <description compact="Handle an action on the given {@link GridField}.">Calls ALL components for every action handled, so the component needs
to ensure it only accepts actions it is actually supposed to handle.</description>
        <param type="object">
          <type full="GridField" namespace="" name="GridField"/>
        </param>
        <param description="Action identifier, see {@link getActions()}." type="object">
          <type full="String" namespace="" name="String"/>
        </param>
        <param description="Arguments relevant for this" type="object">
          <type full="Array" namespace="" name="Array"/>
        </param>
        <param description="All form data" type="object">
          <type full="Array" namespace="" name="Array"/>
        </param>
      </docblock>
      <parameter name="gridField" byreference="false" type="object">
        <type full="\\GridField" namespace="\" name="GridField"/>
      </parameter>
      <parameter name="actionName" byreference="false" type="{unknown}"/>
      <parameter name="arguments" byreference="false" type="{unknown}"/>
      <parameter name="data" byreference="false" type="{unknown}"/>
    </method>
  </interface>
</class>
