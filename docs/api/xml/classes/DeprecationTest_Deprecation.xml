<?xml version="1.0" encoding="UTF-8"?>
<class xmlns="http://xml.phpdox.net/src" full="DeprecationTest_Deprecation" namespace="" name="DeprecationTest_Deprecation" abstract="false" final="false" start="3" end="11">
  <file path="/var/www/_modules/ecommerce_test/trunk/docs/en/phpdox/../../../framework/tests/dev" file="DeprecationTest.php" realpath="/var/www/_modules/ecommerce_test/trunk/framework/tests/dev/DeprecationTest.php" size="3294" time="2015-03-14T10:41:07+13:00" unixtime="1426282867" sha1="82db39bfb9b4e9b8f4137b47b6f1ff67fcb6a7ec" relative="framework/tests/dev/DeprecationTest.php"/>
  <extends full="Deprecation" namespace="" name="Deprecation"/>
  <method name="get_module" start="4" end="6" abstract="false" final="false" static="true" visibility="public"/>
  <method name="get_method" start="8" end="10" abstract="false" final="false" static="true" visibility="public"/>
  <parent full="Deprecation" namespace="" name="Deprecation">
    <constant name="SCOPE_METHOD" value="1"/>
    <constant name="SCOPE_CLASS" value="2"/>
    <constant name="SCOPE_GLOBAL" value="4"/>
    <member name="version" type="{unknown}" visibility="protected" line="43">
      <docblock>
        <description/>
        <var type="string"/>
      </docblock>
    </member>
    <member name="module_version_overrides" type="array" visibility="protected" line="49">
      <docblock>
        <description/>
        <var type="array"/>
      </docblock>
    </member>
    <member name="notice_level" type="{unknown}" default="null" visibility="public" line="55">
      <docblock>
        <description/>
        <var description="- the notice level to raise on a deprecation notice. Defaults to E_USER_DEPRECATED if that exists," type="int">E_USER_NOTICE if not</var>
      </docblock>
    </member>
    <method name="notification_version" start="69" end="76" abstract="false" final="false" static="true" visibility="public">
      <docblock>
        <description compact="Set the version that is used to check against the version passed to notice. If the ::notice version is greater than or equal to this version, a message will be raised"/>
        <static/>
        <param description="-" variable="$ver" type="string">A php standard version string, see http://php.net/manual/en/function.version-compare.php for details.</param>
        <param description="string -" type="object" variable="$forModule">The name of a module. The passed version will be used as the check value for
   calls directly from this module rather than the global value<type full="null" namespace="" name="null"/></param>
        <return type="object">
          <type full="void" namespace="" name="void"/>
        </return>
      </docblock>
      <parameter name="ver" byreference="false" type="{unknown}"/>
      <parameter name="forModule" byreference="false" type="{unknown}" default="null"/>
    </method>
    <method name="get_calling_module_from_trace" start="86" end="97" abstract="false" final="false" static="true" visibility="protected">
      <docblock>
        <description compact="Given a backtrace, get the module name from the caller two removed (the caller of the method that called #notice)"/>
        <static/>
        <param description="- a backtrace as returned from debug_backtrace" variable="$backtrace" type="array"/>
        <return description="- the name of the module the call came from, or null if we can't determine" type="string"/>
      </docblock>
      <parameter name="backtrace" byreference="false" type="{unknown}"/>
    </method>
    <method name="get_called_method_from_trace" start="107" end="118" abstract="false" final="false" static="true" visibility="protected">
      <docblock>
        <description compact="Given a backtrace, get the method name from the immediate parent caller (the caller of #notice)"/>
        <static/>
        <param description="- a backtrace as returned from debug_backtrace" variable="$backtrace" type="array"/>
        <param description="1 (default) will return immediate caller, 2 will return caller's caller, etc." variable="$level" type="object">
          <type full="-" namespace="" name="-"/>
        </param>
        <return description="- the name of the method" type="string"/>
      </docblock>
      <parameter name="backtrace" byreference="false" type="{unknown}"/>
      <parameter name="level" byreference="false" type="integer" default="1"/>
    </method>
    <method name="notice" start="130" end="178" abstract="false" final="false" static="true" visibility="public">
      <docblock>
        <description compact="Raise a notice indicating the method is deprecated if the version passed as the second argument is greater than or equal to the check version set via ::notification_version"/>
        <static/>
        <param description="The notice to raise" variable="$string" type="object">
          <type full="-" namespace="" name="-"/>
        </param>
        <param description="The version at which this notice should start being raised" variable="$atVersion" type="object">
          <type full="-" namespace="" name="-"/>
        </param>
        <param description="- Notice relates to the method or class context its called in." type="object" variable="$scope">
          <type full="Boolean" namespace="" name="Boolean"/>
        </param>
        <return type="object">
          <type full="void" namespace="" name="void"/>
        </return>
      </docblock>
      <parameter name="atVersion" byreference="false" type="{unknown}"/>
      <parameter name="string" byreference="false" type="string" default="''"/>
      <parameter name="scope" byreference="false" type="{unknown}" default="Deprecation::SCOPE_METHOD"/>
      <inline>
        <comment value="Never raise deprecation notices in a live environment" line="131"/>
        <comment value="Getting a backtrace is slow, so we only do it if we need it" line="135"/>
        <comment value="If you pass #.#, assume #.#.0" line="138"/>
        <comment value="Check the version against the notice version" line="149"/>
        <comment value="Get the calling scope" line="151"/>
        <comment value="Get the level to raise the notice as" line="162"/>
        <comment value="Then raise the notice" line="166"/>
      </inline>
    </method>
    <method name="dump_settings" start="184" end="190" abstract="false" final="false" static="true" visibility="public">
      <docblock>
        <description compact="Method for when testing. Dump all the current version settings to a variable for later passing to restore"/>
        <return description="- opaque array that should only be used to pass to ::restore_version_settings" type="array"/>
      </docblock>
    </method>
    <method name="restore_settings" start="198" end="202" abstract="false" final="false" static="true" visibility="public">
      <docblock>
        <description compact="Method for when testing. Restore all the current version settings from a variable"/>
        <static/>
        <param description="- An array as returned by ::dump_version_settings" variable="$settings" type="array"/>
        <return type="object">
          <type full="void" namespace="" name="void"/>
        </return>
      </docblock>
      <parameter name="settings" byreference="false" type="{unknown}"/>
    </method>
  </parent>
</class>
