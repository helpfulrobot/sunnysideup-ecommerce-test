<?xml version="1.0" encoding="UTF-8"?>
<class xmlns="http://xml.phpdox.net/src" full="SQLQuery" namespace="" name="SQLQuery" abstract="false" final="false" start="13" end="1201">
  <file path="/var/www/_modules/ecommerce_test/trunk/docs/en/phpdox/../../../framework/model" file="SQLQuery.php" realpath="/var/www/_modules/ecommerce_test/trunk/framework/model/SQLQuery.php" size="33695" time="2015-03-14T10:40:57+13:00" unixtime="1426282857" sha1="0984f26aa466f635ffccdcd800c19ea981232e29" relative="framework/model/SQLQuery.php"/>
  <docblock>
    <description compact="Object representing a SQL query.">The various parts of the SQL query can be manipulated individually.

Caution: Only supports SELECT (default) and DELETE at the moment.</description>
    <todo value="Add support for INSERT and UPDATE queries"/>
    <package value="framework"/>
    <subpackage value="model"/>
  </docblock>
  <member name="select" type="array" visibility="protected" line="19">
    <docblock>
      <description compact="An array of SELECT fields, keyed by an optional alias."/>
      <var type="array"/>
    </docblock>
  </member>
  <member name="from" type="array" visibility="protected" line="25">
    <docblock>
      <description compact="An array of FROM clauses. The first one is just the table name."/>
      <var type="array"/>
    </docblock>
  </member>
  <member name="where" type="array" visibility="protected" line="31">
    <docblock>
      <description compact="An array of WHERE clauses."/>
      <var type="array"/>
    </docblock>
  </member>
  <member name="orderby" type="array" visibility="protected" line="39">
    <docblock>
      <description compact="An array of ORDER BY clauses, functions. Stores as an associative array of column / function to direction."/>
      <var type="string"/>
    </docblock>
  </member>
  <member name="groupby" type="array" visibility="protected" line="45">
    <docblock>
      <description compact="An array of GROUP BY clauses."/>
      <var type="array"/>
    </docblock>
  </member>
  <member name="having" type="array" visibility="protected" line="51">
    <docblock>
      <description compact="An array of having clauses."/>
      <var type="array"/>
    </docblock>
  </member>
  <member name="limit" type="array" visibility="protected" line="57">
    <docblock>
      <description compact="An array containing limit and offset keys for LIMIT clause."/>
      <var type="array"/>
    </docblock>
  </member>
  <member name="distinct" type="{unknown}" default="false" visibility="protected" line="63">
    <docblock>
      <description compact="If this is true DISTINCT will be added to the SQL."/>
      <var type="boolean"/>
    </docblock>
  </member>
  <member name="delete" type="{unknown}" default="false" visibility="protected" line="69">
    <docblock>
      <description compact="If this is true, this statement will delete rather than select."/>
      <var type="boolean"/>
    </docblock>
  </member>
  <member name="connective" type="string" default="'AND'" visibility="protected" line="75">
    <docblock>
      <description compact="The logical connective used to join WHERE clauses. Defaults to AND."/>
      <var type="string"/>
    </docblock>
  </member>
  <member name="replacementsOld" type="array" visibility="protected" line="82">
    <docblock>
      <description compact="Keep an internal register of find/replace pairs to execute when it's time to actually get the query SQL."/>
      <var type="array"/>
    </docblock>
  </member>
  <member name="replacementsNew" type="array" visibility="protected" line="89">
    <docblock>
      <description compact="Keep an internal register of find/replace pairs to execute when it's time to actually get the query SQL."/>
      <var type="array"/>
    </docblock>
  </member>
  <constructor name="__construct" start="102" end="112" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="Construct a new SQLQuery."/>
      <param description="An array of SELECT fields." type="array" variable="$select"/>
      <param description="An array of FROM clauses. The first one should be just the table name." type="array" variable="$from"/>
      <param description="An array of WHERE clauses." type="array" variable="$where"/>
      <param description="An array ORDER BY clause." type="array" variable="$orderby"/>
      <param description="An array of GROUP BY clauses." type="array" variable="$groupby"/>
      <param description="An array of HAVING clauses." type="array" variable="$having"/>
      <param description="A LIMIT clause or array with limit and offset keys" type="object" variable="$limit">
        <type full="array|string" namespace="" name="array|string"/>
      </param>
    </docblock>
    <parameter name="select" byreference="false" type="string" default="&quot;*&quot;"/>
    <parameter name="from" byreference="false" type="array"/>
    <parameter name="where" byreference="false" type="array"/>
    <parameter name="orderby" byreference="false" type="array"/>
    <parameter name="groupby" byreference="false" type="array"/>
    <parameter name="having" byreference="false" type="array"/>
    <parameter name="limit" byreference="false" type="array"/>
  </constructor>
  <method name="__get" start="114" end="126" abstract="false" final="false" static="false" visibility="public">
    <parameter name="field" byreference="false" type="{unknown}"/>
  </method>
  <method name="__set" start="128" end="144" abstract="false" final="false" static="false" visibility="public">
    <parameter name="field" byreference="false" type="{unknown}"/>
    <parameter name="value" byreference="false" type="{unknown}"/>
  </method>
  <method name="setSelect" start="161" end="169" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="Set the list of columns to be selected by the query.">&lt;code&gt;
 // pass fields to select as single parameter array
 $query-&gt;setSelect(array("Col1","Col2"))-&gt;setFrom("MyTable");

 // pass fields to select as multiple parameters
 $query-&gt;setSelect("Col1", "Col2")-&gt;setFrom("MyTable");
&lt;/code&gt;</description>
      <param type="object" variable="$fields">
        <type full="string|array" namespace="" name="string|array"/>
      </param>
      <param description="Clear existing select fields?" type="boolean" variable="$clear"/>
      <return type="object">
        <type full="SQLQuery" namespace="" name="SQLQuery"/>
      </return>
    </docblock>
    <parameter name="fields" byreference="false" type="{unknown}"/>
  </method>
  <method name="addSelect" start="186" end="203" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="Add to the list of columns to be selected by the query.">&lt;code&gt;
 // pass fields to select as single parameter array
 $query-&gt;addSelect(array("Col1","Col2"))-&gt;setFrom("MyTable");

 // pass fields to select as multiple parameters
 $query-&gt;addSelect("Col1", "Col2")-&gt;setFrom("MyTable");
&lt;/code&gt;</description>
      <param type="object" variable="$fields">
        <type full="string|array" namespace="" name="string|array"/>
      </param>
      <param description="Clear existing select fields?" type="boolean" variable="$clear"/>
      <return type="object">
        <type full="SQLQuery" namespace="" name="SQLQuery"/>
      </return>
    </docblock>
    <parameter name="fields" byreference="false" type="{unknown}"/>
  </method>
  <method name="select" start="205" end="208" abstract="false" final="false" static="false" visibility="public">
    <parameter name="fields" byreference="false" type="{unknown}"/>
  </method>
  <method name="selectField" start="218" end="225" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="Select an additional field."/>
      <param description="The field to select (escaped SQL statement)" variable="$field" type="object">
        <type full="String" namespace="" name="String"/>
      </param>
      <param description="The alias of that field (escaped SQL statement)." variable="$alias" type="object">Defaults to the unquoted column name of the $field parameter.<type full="String" namespace="" name="String"/></param>
      <return type="object">
        <type full="SQLQuery" namespace="" name="SQLQuery"/>
      </return>
    </docblock>
    <parameter name="field" byreference="false" type="{unknown}"/>
    <parameter name="alias" byreference="false" type="{unknown}" default="null"/>
  </method>
  <method name="expressionForField" start="235" end="237" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="Return the SQL expression for the given field alias.">Returns null if the given alias doesn't exist.
See <link xmlns="http://xml.phpdox.net/src" value="selectField()"/> for details on alias generation.
</description>
      <param type="object" variable="$field">
        <type full="String" namespace="" name="String"/>
      </param>
      <return type="object">
        <type full="String" namespace="" name="String"/>
      </return>
    </docblock>
    <parameter name="field" byreference="false" type="{unknown}"/>
  </method>
  <method name="setFrom" start="247" end="250" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="Set table for the SELECT clause."/>
      <example value="$query-&gt;setFrom(&quot;MyTable&quot;); // SELECT * FROM MyTable"/>
      <param description="Escaped SQL statement, usually an unquoted table name" type="object" variable="$from">
        <type full="string|array" namespace="" name="string|array"/>
      </param>
      <return type="object">
        <type full="SQLQuery" namespace="" name="SQLQuery"/>
      </return>
    </docblock>
    <parameter name="from" byreference="false" type="{unknown}"/>
  </method>
  <method name="addFrom" start="260" end="268" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="Add a table to the SELECT clause."/>
      <example value="$query-&gt;addFrom(&quot;MyTable&quot;); // SELECT * FROM MyTable"/>
      <param description="Escaped SQL statement, usually an unquoted table name" type="object" variable="$from">
        <type full="string|array" namespace="" name="string|array"/>
      </param>
      <return type="object">
        <type full="SQLQuery" namespace="" name="SQLQuery"/>
      </return>
    </docblock>
    <parameter name="from" byreference="false" type="{unknown}"/>
  </method>
  <method name="from" start="270" end="273" abstract="false" final="false" static="false" visibility="public">
    <parameter name="from" byreference="false" type="{unknown}"/>
  </method>
  <method name="addLeftJoin" start="287" end="298" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="Add a LEFT JOIN criteria to the FROM clause."/>
      <param description="Unquoted table name" type="string" variable="$table"/>
      <param description="The &quot;ON&quot; SQL fragment in a &quot;LEFT JOIN ... AS ... ON ...&quot; statement, Needs to be valid" type="string" variable="$onPredicate">(quoted) SQL.</param>
      <param description="Optional alias which makes it easier to identify and replace joins later on" type="string" variable="$tableAlias"/>
      <param description="A numerical index to control the order that joins are added to the query; lower order values" type="int" variable="$order">will cause the query to appear first. The default is 20, and joins created automatically by the
                  ORM have a value of 10.</param>
      <return type="object">
        <type full="SQLQuery" namespace="" name="SQLQuery"/>
      </return>
    </docblock>
    <parameter name="table" byreference="false" type="{unknown}"/>
    <parameter name="onPredicate" byreference="false" type="{unknown}"/>
    <parameter name="tableAlias" byreference="false" type="string" default="''"/>
    <parameter name="order" byreference="false" type="integer" default="20"/>
  </method>
  <method name="leftjoin" start="300" end="303" abstract="false" final="false" static="false" visibility="public">
    <parameter name="table" byreference="false" type="{unknown}"/>
    <parameter name="onPredicate" byreference="false" type="{unknown}"/>
    <parameter name="tableAlias" byreference="false" type="{unknown}" default="null"/>
    <parameter name="order" byreference="false" type="integer" default="20"/>
  </method>
  <method name="addInnerJoin" start="317" end="326" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="Add an INNER JOIN criteria to the FROM clause."/>
      <param description="Unquoted table name" type="string" variable="$table"/>
      <param description="The &quot;ON&quot; SQL fragment in an &quot;INNER JOIN ... AS ... ON ...&quot; statement. Needs to be" type="string" variable="$onPredicate">valid (quoted) SQL.</param>
      <param description="Optional alias which makes it easier to identify and replace joins later on" type="string" variable="$tableAlias"/>
      <param description="A numerical index to control the order that joins are added to the query; lower order values" type="int" variable="$order">will cause the query to appear first. The default is 20, and joins created automatically by the
                  ORM have a value of 10.</param>
      <return type="object">
        <type full="SQLQuery" namespace="" name="SQLQuery"/>
      </return>
    </docblock>
    <parameter name="table" byreference="false" type="{unknown}"/>
    <parameter name="onPredicate" byreference="false" type="{unknown}"/>
    <parameter name="tableAlias" byreference="false" type="{unknown}" default="null"/>
    <parameter name="order" byreference="false" type="integer" default="20"/>
  </method>
  <method name="innerjoin" start="328" end="331" abstract="false" final="false" static="false" visibility="public">
    <parameter name="table" byreference="false" type="{unknown}"/>
    <parameter name="onPredicate" byreference="false" type="{unknown}"/>
    <parameter name="tableAlias" byreference="false" type="{unknown}" default="null"/>
    <parameter name="order" byreference="false" type="integer" default="20"/>
  </method>
  <method name="addFilterToJoin" start="340" end="343" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="Add an additional filter (part of the ON clause) on a join."/>
      <param description="Table to join on from the original join" type="string" variable="$table"/>
      <param description="The &quot;ON&quot; SQL fragment (escaped)" type="string" variable="$filter"/>
      <return type="object">
        <type full="SQLQuery" namespace="" name="SQLQuery"/>
      </return>
    </docblock>
    <parameter name="table" byreference="false" type="{unknown}"/>
    <parameter name="filter" byreference="false" type="{unknown}"/>
  </method>
  <method name="setJoinFilter" start="352" end="355" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="Set the filter (part of the ON clause) on a join."/>
      <param description="Table to join on from the original join" type="string" variable="$table"/>
      <param description="The &quot;ON&quot; SQL fragment (escaped)" type="string" variable="$filter"/>
      <return type="object">
        <type full="SQLQuery" namespace="" name="SQLQuery"/>
      </return>
    </docblock>
    <parameter name="table" byreference="false" type="{unknown}"/>
    <parameter name="filter" byreference="false" type="{unknown}"/>
  </method>
  <method name="isJoinedTo" start="362" end="364" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="Returns true if we are already joining to the given table alias"/>
      <return type="boolean"/>
    </docblock>
    <parameter name="tableAlias" byreference="false" type="{unknown}"/>
  </method>
  <method name="queriedTables" start="371" end="390" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="Return a list of tables that this query is selecting from."/>
      <return description="Unquoted table names" type="array"/>
    </docblock>
    <inline>
      <comment value="Handle string replacements" line="383"/>
    </inline>
  </method>
  <method name="setDistinct" start="396" end="398" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="Set distinct property."/>
      <param type="boolean" variable="$value"/>
    </docblock>
    <parameter name="value" byreference="false" type="{unknown}"/>
  </method>
  <method name="getDistinct" start="404" end="406" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="Get the distinct property."/>
      <return type="boolean"/>
    </docblock>
  </method>
  <method name="setDelete" start="412" end="414" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="Set the delete property."/>
      <param type="boolean" variable="$value"/>
    </docblock>
    <parameter name="value" byreference="false" type="{unknown}"/>
  </method>
  <method name="getDelete" start="420" end="422" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="Get the delete property."/>
      <return type="boolean"/>
    </docblock>
  </method>
  <method name="setConnective" start="428" end="430" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="Set the connective property."/>
      <param type="boolean" variable="$value"/>
    </docblock>
    <parameter name="value" byreference="false" type="{unknown}"/>
  </method>
  <method name="getConnective" start="436" end="438" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="Get the connective property."/>
      <return type="string"/>
    </docblock>
  </method>
  <method name="getLimit" start="444" end="446" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="Get the limit property."/>
      <return type="array"/>
    </docblock>
  </method>
  <method name="setLimit" start="460" end="487" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="Pass LIMIT clause either as SQL snippet or in array format.">Internally, limit will always be stored as a map containing the keys 'start' and 'limit'</description>
      <param description="If passed as a string or array, assumes SQL escaped data." type="object" variable="$limit">Only applies for positive values, or if an $offset is set as well.<type full="int|string|array" namespace="" name="int|string|array"/></param>
      <param type="int" variable="$offset"/>
      <throws type="object">
        <type full="InvalidArgumentException" namespace="" name="InvalidArgumentException"/>
      </throws>
      <return description="This instance" type="object">
        <type full="SQLQuery" namespace="" name="SQLQuery"/>
      </return>
    </docblock>
    <parameter name="limit" byreference="false" type="{unknown}"/>
    <parameter name="offset" byreference="false" type="integer" default="0"/>
  </method>
  <method name="limit" start="489" end="492" abstract="false" final="false" static="false" visibility="public">
    <parameter name="limit" byreference="false" type="{unknown}"/>
    <parameter name="offset" byreference="false" type="integer" default="0"/>
  </method>
  <method name="setOrderBy" start="508" end="511" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="Set ORDER BY clause either as SQL snippet or in array format."/>
      <example value="$sql-&gt;setOrderBy(&quot;Column&quot;);"/>
      <example value="$sql-&gt;setOrderBy(&quot;Column DESC&quot;);"/>
      <example value="$sql-&gt;setOrderBy(&quot;Column DESC, ColumnTwo ASC&quot;);"/>
      <example value="$sql-&gt;setOrderBy(&quot;Column&quot;, &quot;DESC&quot;);"/>
      <example value="$sql-&gt;setOrderBy(array(&quot;Column&quot; =&gt; &quot;ASC&quot;, &quot;ColumnTwo&quot; =&gt; &quot;DESC&quot;));"/>
      <param description="Clauses to add (escaped SQL statement)" type="object" variable="$orderby">
        <type full="string|array" namespace="" name="string|array"/>
      </param>
      <param description="Sort direction, ASC or DESC" type="string" variable="$dir"/>
      <return type="object">
        <type full="SQLQuery" namespace="" name="SQLQuery"/>
      </return>
    </docblock>
    <parameter name="clauses" byreference="false" type="{unknown}" default="null"/>
    <parameter name="direction" byreference="false" type="{unknown}" default="null"/>
  </method>
  <method name="addOrderBy" start="527" end="589" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="Add ORDER BY clause either as SQL snippet or in array format."/>
      <example value="$sql-&gt;addOrderBy(&quot;Column&quot;);"/>
      <example value="$sql-&gt;addOrderBy(&quot;Column DESC&quot;);"/>
      <example value="$sql-&gt;addOrderBy(&quot;Column DESC, ColumnTwo ASC&quot;);"/>
      <example value="$sql-&gt;addOrderBy(&quot;Column&quot;, &quot;DESC&quot;);"/>
      <example value="$sql-&gt;addOrderBy(array(&quot;Column&quot; =&gt; &quot;ASC&quot;, &quot;ColumnTwo&quot; =&gt; &quot;DESC&quot;));"/>
      <param description="Clauses to add (escaped SQL statements)" type="object" variable="$clauses">
        <type full="string|array" namespace="" name="string|array"/>
      </param>
      <param description="Sort direction, ASC or DESC" type="string" variable="$dir"/>
      <return type="object">
        <type full="SQLQuery" namespace="" name="SQLQuery"/>
      </return>
    </docblock>
    <parameter name="clauses" byreference="false" type="{unknown}" default="null"/>
    <parameter name="direction" byreference="false" type="{unknown}" default="null"/>
    <inline>
      <comment value="If sort contains a public function call, let's move the sort clause into a" line="562"/>
      <comment value="separate selected field." line="563"/>
      <comment value="Some versions of MySQL choke if you have a group public function referenced" line="565"/>
      <comment value="directly in the ORDER BY" line="566"/>
      <comment value="public function calls and multi-word columns like &quot;CASE WHEN ...&quot;" line="572"/>
      <comment value="Move the clause to the select fragment, substituting a placeholder column in the sort fragment." line="575"/>
    </inline>
  </method>
  <method name="orderby" start="591" end="594" abstract="false" final="false" static="false" visibility="public">
    <parameter name="clauses" byreference="false" type="{unknown}" default="null"/>
    <parameter name="direction" byreference="false" type="{unknown}" default="null"/>
  </method>
  <method name="getDirectionFromString" start="603" end="612" abstract="false" final="false" static="false" visibility="private">
    <docblock>
      <description compact="Extract the direction part of a single-column order by clause."/>
      <param type="object">
        <type full="String" namespace="" name="String"/>
      </param>
      <param type="object">
        <type full="String" namespace="" name="String"/>
      </param>
      <return description="A two element array: array($column, $direction)" type="object">
        <type full="Array" namespace="" name="Array"/>
      </return>
    </docblock>
    <parameter name="value" byreference="false" type="{unknown}"/>
    <parameter name="defaultDirection" byreference="false" type="{unknown}" default="null"/>
  </method>
  <method name="getOrderBy" start="621" end="643" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="Returns the current order by as array if not already. To handle legacy statements which are stored as strings. Without clauses and directions, convert the orderby clause to something readable."/>
      <return type="array"/>
    </docblock>
    <inline>
      <comment value="spilt by any commas not within brackets" line="626"/>
    </inline>
  </method>
  <method name="reverseOrderBy" start="651" end="661" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="Reverses the order by clause by replacing ASC or DESC references in the current order by with it's corollary."/>
      <return type="object">
        <type full="SQLQuery" namespace="" name="SQLQuery"/>
      </return>
    </docblock>
  </method>
  <method name="setGroupBy" start="669" end="672" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="Set a GROUP BY clause."/>
      <param description="Escaped SQL statement" type="object" variable="$groupby">
        <type full="string|array" namespace="" name="string|array"/>
      </param>
      <return type="object">
        <type full="SQLQuery" namespace="" name="SQLQuery"/>
      </return>
    </docblock>
    <parameter name="groupby" byreference="false" type="{unknown}"/>
  </method>
  <method name="addGroupBy" start="680" end="688" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="Add a GROUP BY clause."/>
      <param description="Escaped SQL statement" type="object" variable="$groupby">
        <type full="string|array" namespace="" name="string|array"/>
      </param>
      <return type="object">
        <type full="SQLQuery" namespace="" name="SQLQuery"/>
      </return>
    </docblock>
    <parameter name="groupby" byreference="false" type="{unknown}"/>
  </method>
  <method name="groupby" start="690" end="693" abstract="false" final="false" static="false" visibility="public">
    <parameter name="where" byreference="false" type="{unknown}"/>
  </method>
  <method name="setHaving" start="701" end="704" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="Set a HAVING clause."/>
      <param type="object" variable="$having">
        <type full="string|array" namespace="" name="string|array"/>
      </param>
      <return type="object">
        <type full="SQLQuery" namespace="" name="SQLQuery"/>
      </return>
    </docblock>
    <parameter name="having" byreference="false" type="{unknown}"/>
  </method>
  <method name="addHaving" start="712" end="720" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="Add a HAVING clause"/>
      <param description="Escaped SQL statement" type="object" variable="$having">
        <type full="string|array" namespace="" name="string|array"/>
      </param>
      <return type="object">
        <type full="SQLQuery" namespace="" name="SQLQuery"/>
      </return>
    </docblock>
    <parameter name="having" byreference="false" type="{unknown}"/>
  </method>
  <method name="having" start="722" end="725" abstract="false" final="false" static="false" visibility="public">
    <parameter name="having" byreference="false" type="{unknown}"/>
  </method>
  <method name="setWhere" start="743" end="746" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="Set a WHERE clause.">There are two different ways of doing this:

&lt;code&gt;
 // the entire predicate as a single string
 $query-&gt;where("Column = 'Value'");

 // multiple predicates as an array
 $query-&gt;where(array("Column = 'Value'", "Column != 'Value'"));
&lt;/code&gt;</description>
      <param description="Predicate(s) to set, as escaped SQL statements." type="object" variable="$where">
        <type full="string|array" namespace="" name="string|array"/>
      </param>
      <return type="object">
        <type full="SQLQuery" namespace="" name="SQLQuery"/>
      </return>
    </docblock>
    <parameter name="where" byreference="false" type="{unknown}"/>
  </method>
  <method name="addWhere" start="764" end="772" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="Add a WHERE predicate.">There are two different ways of doing this:

&lt;code&gt;
 // the entire predicate as a single string
 $query-&gt;where("Column = 'Value'");

 // multiple predicates as an array
 $query-&gt;where(array("Column = 'Value'", "Column != 'Value'"));
&lt;/code&gt;</description>
      <param description="Predicate(s) to set, as escaped SQL statements." type="object" variable="$where">
        <type full="string|array" namespace="" name="string|array"/>
      </param>
      <return type="object">
        <type full="SQLQuery" namespace="" name="SQLQuery"/>
      </return>
    </docblock>
    <parameter name="where" byreference="false" type="{unknown}"/>
  </method>
  <method name="where" start="774" end="777" abstract="false" final="false" static="false" visibility="public">
    <parameter name="where" byreference="false" type="{unknown}"/>
  </method>
  <method name="whereAny" start="779" end="782" abstract="false" final="false" static="false" visibility="public">
    <parameter name="where" byreference="false" type="{unknown}"/>
  </method>
  <method name="setWhereAny" start="787" end="791" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description/>
      <param description="Predicate(s) to set, as escaped SQL statements." type="object" variable="$filters">
        <type full="String|array" namespace="" name="String|array"/>
      </param>
    </docblock>
    <parameter name="filters" byreference="false" type="{unknown}"/>
  </method>
  <method name="addWhereAny" start="796" end="800" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description/>
      <param description="Predicate(s) to set, as escaped SQL statements." type="object" variable="$filters">
        <type full="String|array" namespace="" name="String|array"/>
      </param>
    </docblock>
    <parameter name="filters" byreference="false" type="{unknown}"/>
  </method>
  <method name="useDisjunction" start="805" end="807" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="Use the disjunctive operator 'OR' to join filter expressions in the WHERE clause."/>
    </docblock>
  </method>
  <method name="useConjunction" start="812" end="814" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="Use the conjunctive operator 'AND' to join filter expressions in the WHERE clause."/>
    </docblock>
  </method>
  <method name="renameTable" start="822" end="825" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="Swap the use of one table with another."/>
      <param description="Name of the old table (unquoted, escaped)" type="string" variable="$old"/>
      <param description="Name of the new table (unquoted, escaped)" type="string" variable="$new"/>
    </docblock>
    <parameter name="old" byreference="false" type="{unknown}"/>
    <parameter name="new" byreference="false" type="{unknown}"/>
  </method>
  <method name="replaceText" start="833" end="836" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="Swap some text in the SQL query with another."/>
      <param description="The old text (escaped)" type="string" variable="$old"/>
      <param description="The new text (escaped)" type="string" variable="$new"/>
    </docblock>
    <parameter name="old" byreference="false" type="{unknown}"/>
    <parameter name="new" byreference="false" type="{unknown}"/>
  </method>
  <method name="getFilter" start="838" end="841" abstract="false" final="false" static="false" visibility="public"/>
  <method name="getFrom" start="847" end="849" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="Return a list of FROM clauses used internally."/>
      <return type="array"/>
    </docblock>
  </method>
  <method name="getHaving" start="855" end="857" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="Return a list of HAVING clauses used internally."/>
      <return type="array"/>
    </docblock>
  </method>
  <method name="getGroupBy" start="863" end="865" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="Return a list of GROUP BY clauses used internally."/>
      <return type="array"/>
    </docblock>
  </method>
  <method name="getWhere" start="871" end="873" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="Return a list of WHERE clauses used internally."/>
      <return type="array"/>
    </docblock>
  </method>
  <method name="getSelect" start="881" end="883" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="Return an itemised select list as a map, where keys are the aliases, and values are the column sources.">Aliases will always be provided (if the alias is implicit, the alias value will be inferred), and won't be
quoted.
E.g., 'Title' =&gt; '"SiteTree"."Title"'.</description>
    </docblock>
  </method>
  <method name="sql" start="890" end="927" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="Generate the SQL statement for this query."/>
      <return type="string"/>
    </docblock>
    <inline>
      <todo value="Don't require this internal-state manipulate-and-preserve - let sqlQueryToString() handle the new" line="891"/>
      <comment value="syntax" line="892"/>
      <comment value="Sort the joins" line="894"/>
      <comment value="Build from clauses" line="896"/>
      <comment value="$join can be something like this array structure" line="898"/>
      <comment value="array('type' =&gt; 'inner', 'table' =&gt; 'SiteTree', 'filter' =&gt; array(&quot;SiteTree.ID = 1&quot;," line="899"/>
      <comment value="&quot;Status = 'approved'&quot;, 'order' =&gt; 20))" line="900"/>
      <comment value="The query was most likely just created and then exectued." line="922"/>
    </inline>
  </method>
  <method name="__toString" start="934" end="940" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="Return the generated SQL string for this query"/>
      <return type="string"/>
    </docblock>
  </method>
  <method name="execute" start="946" end="948" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="Execute this query."/>
      <return type="object">
        <type full="SS_Query" namespace="" name="SS_Query"/>
      </return>
    </docblock>
  </method>
  <method name="filtersOnID" start="957" end="965" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="Checks whether this query is for a specific ID in a table"/>
      <todo value="Doesn't work with combined statements (e.g. &quot;Foo='bar' AND ID=5&quot;)"/>
      <return type="boolean"/>
    </docblock>
    <inline>
      <comment value="Sometimes the ID filter will be the 2nd element, if there's a ClasssName filter first." line="960"/>
    </inline>
  </method>
  <method name="filtersOnFK" start="974" end="979" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="Checks whether this query is filtering on a foreign key, ie finding a has_many relationship"/>
      <todo value="Doesn't work with combined statements (e.g. &quot;Foo='bar' AND ParentID=5&quot;)"/>
      <return type="boolean"/>
    </docblock>
  </method>
  <method name="unlimitedRowCount" start="987" end="1016" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="Return the number of rows in this query if the limit were removed.  Useful in paged data sets."/>
      <return type="int"/>
    </docblock>
    <parameter name="column" byreference="false" type="{unknown}" default="null"/>
    <inline>
      <comment value="we can't clear the select if we're relying on its output by a HAVING clause" line="988"/>
      <comment value="Choose a default column" line="998"/>
    </inline>
  </method>
  <method name="canSortBy" start="1021" end="1025" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="Returns true if this query can be sorted by the given field."/>
    </docblock>
    <parameter name="fieldName" byreference="false" type="{unknown}"/>
  </method>
  <method name="count" start="1036" end="1064" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="Return the number of rows in this query if the limit were removed.  Useful in paged data sets."/>
      <todo value="Respect HAVING and GROUPBY, which can affect the result-count"/>
      <param description="Quoted, escaped column name" type="object" variable="$column">
        <type full="String" namespace="" name="String"/>
      </param>
      <return type="int"/>
    </docblock>
    <parameter name="column" byreference="false" type="{unknown}" default="null"/>
    <inline>
      <comment value="Choose a default column" line="1037"/>
      <comment value="If there's a limit set, then that limit is going to heavily affect the count" line="1053"/>
    </inline>
  </method>
  <method name="aggregate" start="1072" end="1096" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="Return a new SQLQuery that calls the given aggregate functions on this data."/>
      <param description="aggregate expression, such as 'MAX(&quot;Balance&quot;)', or a set of them (as an escaped SQL statement)" variable="$column" type="object">
        <type full="An" namespace="" name="An"/>
      </param>
      <param description="optional alias for the aggregate column." variable="$alias" type="object">
        <type full="An" namespace="" name="An"/>
      </param>
    </docblock>
    <parameter name="column" byreference="false" type="{unknown}"/>
    <parameter name="alias" byreference="false" type="{unknown}" default="null"/>
    <inline>
      <comment value="don't set an ORDER BY clause if no limit has been set. It doesn't make" line="1075"/>
      <comment value="sense to add an ORDER BY if there is no limit, and it will break" line="1076"/>
      <comment value="queries to databases like MSSQL if you do so. Note that the reason" line="1077"/>
      <comment value="this came up is because DataQuery::initialiseQuery() introduces" line="1078"/>
      <comment value="a default sort." line="1079"/>
    </inline>
  </method>
  <method name="firstRow" start="1101" end="1106" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="Returns a query that returns only the first row of this query"/>
    </docblock>
  </method>
  <method name="lastRow" start="1111" end="1119" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="Returns a query that returns only the last row of this query"/>
    </docblock>
    <inline>
      <comment value="Limit index to start in case of empty results" line="1115"/>
    </inline>
  </method>
  <method name="getOrderedJoins" start="1130" end="1148" abstract="false" final="false" static="false" visibility="protected">
    <docblock>
      <description compact="Ensure that framework &quot;auto-generated&quot; table JOINs are first in the finalised SQL query.">This prevents issues where developer-initiated JOINs attempt to JOIN using relations that haven't actually
yet been scaffolded by the framework. Demonstrated by PostGres in errors like:
...ERROR: missing FROM-clause..."</description>
      <param description="- in the format of $this-&gt;select" variable="$from" type="array"/>
      <return description="- and reorderded list of selects" type="array"/>
    </docblock>
    <parameter name="from" byreference="false" type="{unknown}"/>
    <inline>
      <comment value="shift the first FROM table out from so we only deal with the JOINs" line="1131"/>
      <comment value="Put the first FROM table back into the results" line="1145"/>
    </inline>
  </method>
  <method name="mergesort" start="1159" end="1200" abstract="false" final="false" static="false" visibility="protected">
    <docblock>
      <description compact="Since uasort don't preserve the order of an array if the comparison is equal we have to resort to a merge sort. It's quick and stable: O(n*log(n))."/>
      <see value="http://stackoverflow.com/q/4353739/139301"/>
      <param description="&amp;$array - the array to sort" type="array"/>
      <param description="- the function to use for comparison" type="object" variable="$cmpFunction">
        <type full="callable" namespace="" name="callable"/>
      </param>
    </docblock>
    <parameter name="array" byreference="true" type="{unknown}"/>
    <parameter name="cmpFunction" byreference="false" type="string" default="'strcmp'"/>
    <inline>
      <comment value="Arrays of size &lt; 2 require no action." line="1160"/>
      <comment value="Split the array in half" line="1164"/>
      <comment value="Recurse to sort the two halves" line="1168"/>
      <comment value="If all of $array1 is &lt;= all of $array2, just append them." line="1171"/>
      <comment value="Merge the two sorted arrays into a single sorted array" line="1176"/>
      <comment value="Merge the remainder" line="1190"/>
    </inline>
  </method>
</class>
