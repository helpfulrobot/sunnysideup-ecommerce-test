<?xml version="1.0" encoding="UTF-8"?>
<class xmlns="http://xml.phpdox.net/src" full="Zend_Cache_Backend_File" namespace="" name="Zend_Cache_Backend_File" abstract="false" final="false" start="40" end="1007">
  <file path="/var/www/_modules/ecommerce_test/trunk/docs/en/phpdox/../../../framework/thirdparty/Zend/Cache/Backend" file="File.php" realpath="/var/www/_modules/ecommerce_test/trunk/framework/thirdparty/Zend/Cache/Backend/File.php" size="34770" time="2015-03-14T10:41:13+13:00" unixtime="1426282873" sha1="8ef05a575f02ba2612adc891618e9ecc61fa689d" relative="framework/thirdparty/Zend/Cache/Backend/File.php"/>
  <docblock>
    <description/>
    <package value="Zend_Cache"/>
    <subpackage value="Zend_Cache_Backend"/>
    <copyright value="Copyright (c) 2005-2011 Zend Technologies USA Inc. (http://www.zend.com)"/>
    <license name="http://framework.zend.com/license/new-bsd     New BSD License"/>
  </docblock>
  <extends full="Zend_Cache_Backend" namespace="" name="Zend_Cache_Backend"/>
  <implements full="Zend_Cache_Backend_ExtendedInterface" namespace="" name="Zend_Cache_Backend_ExtendedInterface"/>
  <member name="_options" type="array" visibility="protected" line="90">
    <docblock>
      <description compact="Available options">=====&gt; (string) cache_dir :
- Directory where to put the cache files

=====&gt; (boolean) file_locking :
- Enable / disable file_locking
- Can avoid cache corruption under bad circumstances but it doesn't work on multithread
webservers and on NFS filesystems for example

=====&gt; (boolean) read_control :
- Enable / disable read control
- If enabled, a control key is embeded in cache file and this key is compared with the one
calculated after the reading.

=====&gt; (string) read_control_type :
- Type of read control (only if read control is enabled). Available values are :
  'md5' for a md5 hash control (best but slowest)
  'crc32' for a crc32 hash control (lightly less safe but faster, better choice)
  'adler32' for an adler32 hash control (excellent choice too, faster than crc32)
  'strlen' for a length only test (fastest)

=====&gt; (int) hashed_directory_level :
- Hashed directory level
- Set the hashed directory structure level. 0 means "no hashed directory
structure", 1 means "one level of directory", 2 means "two levels"...
This option can speed up the cache only when you have many thousands of
cache file. Only specific benchs can help you to choose the perfect value
for you. Maybe, 1 or 2 is a good start.

=====&gt; (int) hashed_directory_umask :
- Umask for hashed directory structure

=====&gt; (string) file_name_prefix :
- prefix for cache files
- be really carefull with this option because a too generic value in a system cache dir
  (like /tmp) can cause disasters when cleaning the cache

=====&gt; (int) cache_file_umask :
- Umask for cache files

=====&gt; (int) metatadatas_array_max_size :
- max size for the metadatas array (don't change this value unless you
  know what you are doing)</description>
      <var description="available options" type="array"/>
    </docblock>
  </member>
  <member name="_metadatasArray" type="array" visibility="protected" line="107">
    <docblock>
      <description compact="Array of metadatas (each item is an associative array)"/>
      <var type="array"/>
    </docblock>
  </member>
  <constructor name="__construct" start="117" end="141" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="Constructor"/>
      <param description="associative array of options" type="array" variable="$options"/>
      <throws type="object">
        <type full="Zend_Cache_Exception" namespace="" name="Zend_Cache_Exception"/>
      </throws>
      <return type="object">
        <type full="void" namespace="" name="void"/>
      </return>
    </docblock>
    <parameter name="options" byreference="false" type="array"/>
    <inline>
      <comment value="particular case for this option" line="120"/>
      <comment value="particular case for this option" line="125"/>
      <comment value="See #ZF-4422" line="134"/>
      <comment value="See #ZF-4422" line="138"/>
    </inline>
  </constructor>
  <method name="setCacheDir" start="151" end="164" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="Set the cache_dir (particular case of setOption() method)"/>
      <param type="string" variable="$value"/>
      <param description="If true, add a trailing separator is necessary" type="boolean" variable="$trailingSeparator"/>
      <throws type="object">
        <type full="Zend_Cache_Exception" namespace="" name="Zend_Cache_Exception"/>
      </throws>
      <return type="object">
        <type full="void" namespace="" name="void"/>
      </return>
    </docblock>
    <parameter name="value" byreference="false" type="{unknown}"/>
    <parameter name="trailingSeparator" byreference="false" type="{unknown}" default="true"/>
    <inline>
      <comment value="add a trailing DIRECTORY_SEPARATOR if necessary" line="160"/>
    </inline>
  </method>
  <method name="load" start="173" end="193" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="Test if a cache is available for the given id and (if yes) return it (false else)"/>
      <param description="cache id" type="string" variable="$id"/>
      <param description="if set to true, the cache validity won't be tested" type="boolean" variable="$doNotTestCacheValidity"/>
      <return description="cached datas" type="object">
        <type full="string|false" namespace="" name="string|false"/>
      </return>
    </docblock>
    <parameter name="id" byreference="false" type="{unknown}"/>
    <parameter name="doNotTestCacheValidity" byreference="false" type="{unknown}" default="false"/>
    <inline>
      <comment value="The cache is not hit !" line="176"/>
      <comment value="Problem detected by the read control !" line="186"/>
    </inline>
  </method>
  <method name="test" start="201" end="205" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="Test if a cache is available or not (for the given id)"/>
      <param description="cache id" type="string" variable="$id"/>
      <return description="false (a cache is not available) or &quot;last modified&quot; timestamp (int) of the available cache record" type="mixed"/>
    </docblock>
    <parameter name="id" byreference="false" type="{unknown}"/>
  </method>
  <method name="save" start="219" end="251" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="Save some string datas into a cache record">Note : $data is always "string" (serialization is done by the
core not by the backend)</description>
      <param description="Datas to cache" type="string" variable="$data"/>
      <param description="Cache id" type="string" variable="$id"/>
      <param description="Array of strings, the cache record will be tagged by each string entry" type="array" variable="$tags"/>
      <param description="If != false, set a specific lifetime for this cache record (null =&gt; infinite lifetime)" type="int" variable="$specificLifetime"/>
      <return description="true if no problem" type="boolean"/>
    </docblock>
    <parameter name="data" byreference="false" type="{unknown}"/>
    <parameter name="id" byreference="false" type="{unknown}"/>
    <parameter name="tags" byreference="false" type="array"/>
    <parameter name="specificLifetime" byreference="false" type="{unknown}" default="false"/>
    <inline>
      <comment value="maybe, we just have to build the directory structure" line="226"/>
    </inline>
  </method>
  <method name="remove" start="259" end="265" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="Remove a cache record"/>
      <param description="cache id" type="string" variable="$id"/>
      <return description="true if no problem" type="boolean"/>
    </docblock>
    <parameter name="id" byreference="false" type="{unknown}"/>
  </method>
  <method name="clean" start="285" end="290" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="Clean some cache records">Available modes are :

Zend_Cache::CLEANING_MODE_ALL (default)    =&gt; remove all cache entries ($tags is not used)
Zend_Cache::CLEANING_MODE_OLD              =&gt; remove too old cache entries ($tags is not used)
Zend_Cache::CLEANING_MODE_MATCHING_TAG     =&gt; remove cache entries matching all given tags
                                              ($tags can be an array of strings or a single string)
Zend_Cache::CLEANING_MODE_NOT_MATCHING_TAG =&gt; remove cache entries not {matching one of the given tags}
                                              ($tags can be an array of strings or a single string)
Zend_Cache::CLEANING_MODE_MATCHING_ANY_TAG =&gt; remove cache entries matching any given tags
                                              ($tags can be an array of strings or a single string)</description>
      <param description="clean mode" type="string" variable="$mode"/>
      <param description="array $tags array of tags" type="object">
        <type full="tags" namespace="" name="tags"/>
      </param>
      <return description="true if no problem" type="boolean"/>
    </docblock>
    <parameter name="mode" byreference="false" type="{unknown}" default="Zend_Cache::CLEANING_MODE_ALL"/>
    <parameter name="tags" byreference="false" type="array"/>
    <inline>
      <comment value="We use this protected method to hide the recursive stuff" line="287"/>
    </inline>
  </method>
  <method name="getIds" start="297" end="300" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="Return an array of stored cache ids"/>
      <return description="array of stored cache ids (string)" type="array"/>
    </docblock>
  </method>
  <method name="getTags" start="307" end="310" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="Return an array of stored tags"/>
      <return description="array of stored tags (string)" type="array"/>
    </docblock>
  </method>
  <method name="getIdsMatchingTags" start="320" end="323" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="Return an array of stored cache ids which match given tags">In case of multiple tags, a logical AND is made between tags</description>
      <param description="array of tags" type="array" variable="$tags"/>
      <return description="array of matching cache ids (string)" type="array"/>
    </docblock>
    <parameter name="tags" byreference="false" type="array"/>
  </method>
  <method name="getIdsNotMatchingTags" start="333" end="336" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="Return an array of stored cache ids which don't match given tags">In case of multiple tags, a logical OR is made between tags</description>
      <param description="array of tags" type="array" variable="$tags"/>
      <return description="array of not matching cache ids (string)" type="array"/>
    </docblock>
    <parameter name="tags" byreference="false" type="array"/>
  </method>
  <method name="getIdsMatchingAnyTags" start="346" end="349" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="Return an array of stored cache ids which match any given tags">In case of multiple tags, a logical AND is made between tags</description>
      <param description="array of tags" type="array" variable="$tags"/>
      <return description="array of any matching cache ids (string)" type="array"/>
    </docblock>
    <parameter name="tags" byreference="false" type="array"/>
  </method>
  <method name="getFillingPercentage" start="357" end="369" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="Return the filling percentage of the backend storage"/>
      <throws type="object">
        <type full="Zend_Cache_Exception" namespace="" name="Zend_Cache_Exception"/>
      </throws>
      <return description="integer between 0 and 100" type="int"/>
    </docblock>
  </method>
  <method name="getMetadatas" start="382" end="396" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="Return an array of metadatas for the given cache id">The array must include these keys :
- expire : the expire timestamp
- tags : a string array of tags
- mtime : timestamp of last modification time</description>
      <param description="cache id" type="string" variable="$id"/>
      <return description="array of metadatas (false if the cache id is not found)" type="array"/>
    </docblock>
    <parameter name="id" byreference="false" type="{unknown}"/>
  </method>
  <method name="touch" start="405" end="425" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="Give (if possible) an extra lifetime to the given cache id"/>
      <param description="cache id" type="string" variable="$id"/>
      <param type="int" variable="$extraLifetime"/>
      <return description="true if ok" type="boolean"/>
    </docblock>
    <parameter name="id" byreference="false" type="{unknown}"/>
    <parameter name="extraLifetime" byreference="false" type="{unknown}"/>
  </method>
  <method name="getCapabilities" start="441" end="451" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="Return an associative array of capabilities (booleans) of the backend">The array must include these keys :
- automatic_cleaning (is automating cleaning necessary)
- tags (are tags supported)
- expired_read (is it possible to read expired cache records
                (for doNotTestCacheValidity option for example))
- priority does the backend deal with priority when saving
- infinite_lifetime (is infinite lifetime can work with this backend)
- get_list (is it possible to get the list of cache ids and the complete list of tags)</description>
      <return description="associative of with capabilities" type="array"/>
    </docblock>
  </method>
  <method name="___expire" start="460" end="467" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="PUBLIC METHOD FOR UNIT TESTING ONLY !">Force a cache record to expire</description>
      <param description="cache id" type="string" variable="$id"/>
    </docblock>
    <parameter name="id" byreference="false" type="{unknown}"/>
  </method>
  <method name="_getMetadatas" start="475" end="487" abstract="false" final="false" static="false" visibility="protected">
    <docblock>
      <description compact="Get a metadatas record"/>
      <param description="Cache id" type="string" variable="$id"/>
      <return description="Associative array of metadatas" type="object">
        <type full="array|false" namespace="" name="array|false"/>
      </return>
    </docblock>
    <parameter name="id" byreference="false" type="{unknown}"/>
  </method>
  <method name="_setMetadatas" start="497" end="511" abstract="false" final="false" static="false" visibility="protected">
    <docblock>
      <description compact="Set a metadatas record"/>
      <param description="Cache id" type="string" variable="$id"/>
      <param description="Associative array of metadatas" type="array" variable="$metadatas"/>
      <param description="optional pass false to disable saving to file" type="boolean" variable="$save"/>
      <return description="True if no problem" type="boolean"/>
    </docblock>
    <parameter name="id" byreference="false" type="{unknown}"/>
    <parameter name="metadatas" byreference="false" type="{unknown}"/>
    <parameter name="save" byreference="false" type="{unknown}" default="true"/>
  </method>
  <method name="_delMetadatas" start="519" end="526" abstract="false" final="false" static="false" visibility="protected">
    <docblock>
      <description compact="Drop a metadata record"/>
      <param description="Cache id" type="string" variable="$id"/>
      <return description="True if no problem" type="boolean"/>
    </docblock>
    <parameter name="id" byreference="false" type="{unknown}"/>
  </method>
  <method name="_cleanMetadatas" start="533" end="536" abstract="false" final="false" static="false" visibility="protected">
    <docblock>
      <description compact="Clear the metadatas array"/>
      <return type="object">
        <type full="void" namespace="" name="void"/>
      </return>
    </docblock>
  </method>
  <method name="_loadMetadatas" start="544" end="553" abstract="false" final="false" static="false" visibility="protected">
    <docblock>
      <description compact="Load metadatas from disk"/>
      <param description="Cache id" type="string" variable="$id"/>
      <return description="Metadatas associative array" type="object">
        <type full="array|false" namespace="" name="array|false"/>
      </return>
    </docblock>
    <parameter name="id" byreference="false" type="{unknown}"/>
  </method>
  <method name="_saveMetadatas" start="562" end="570" abstract="false" final="false" static="false" visibility="protected">
    <docblock>
      <description compact="Save metadatas to disk"/>
      <param description="Cache id" type="string" variable="$id"/>
      <param description="Associative array" type="array" variable="$metadatas"/>
      <return description="True if no problem" type="boolean"/>
    </docblock>
    <parameter name="id" byreference="false" type="{unknown}"/>
    <parameter name="metadatas" byreference="false" type="{unknown}"/>
  </method>
  <method name="_metadatasFile" start="578" end="583" abstract="false" final="false" static="false" visibility="protected">
    <docblock>
      <description compact="Make and return a file name (with path) for metadatas"/>
      <param description="Cache id" type="string" variable="$id"/>
      <return description="Metadatas file name (with path)" type="string"/>
    </docblock>
    <parameter name="id" byreference="false" type="{unknown}"/>
  </method>
  <method name="_isMetadatasFile" start="591" end="599" abstract="false" final="false" static="false" visibility="protected">
    <docblock>
      <description compact="Check if the given filename is a metadatas one"/>
      <param description="File name" type="string" variable="$fileName"/>
      <return description="True if it's a metadatas one" type="boolean"/>
    </docblock>
    <parameter name="fileName" byreference="false" type="{unknown}"/>
  </method>
  <method name="_remove" start="610" end="621" abstract="false" final="false" static="false" visibility="protected">
    <docblock>
      <description compact="Remove a file">If we can't remove the file (because of locks or any problem), we will touch
the file to invalidate it</description>
      <param description="Complete file path" type="string" variable="$file"/>
      <return description="True if ok" type="boolean"/>
    </docblock>
    <parameter name="file" byreference="false" type="{unknown}"/>
    <inline>
      <comment value="we can't remove the file (because of locks or any problem)" line="616"/>
    </inline>
  </method>
  <method name="_clean" start="642" end="733" abstract="false" final="false" static="false" visibility="protected">
    <docblock>
      <description compact="Clean some cache records (protected method used for recursive stuff)">Available modes are :
Zend_Cache::CLEANING_MODE_ALL (default)    =&gt; remove all cache entries ($tags is not used)
Zend_Cache::CLEANING_MODE_OLD              =&gt; remove too old cache entries ($tags is not used)
Zend_Cache::CLEANING_MODE_MATCHING_TAG     =&gt; remove cache entries matching all given tags
                                              ($tags can be an array of strings or a single string)
Zend_Cache::CLEANING_MODE_NOT_MATCHING_TAG =&gt; remove cache entries not {matching one of the given tags}
                                              ($tags can be an array of strings or a single string)
Zend_Cache::CLEANING_MODE_MATCHING_ANY_TAG =&gt; remove cache entries matching any given tags
                                              ($tags can be an array of strings or a single string)</description>
      <param description="Directory to clean" type="string" variable="$dir"/>
      <param description="Clean mode" type="string" variable="$mode"/>
      <param description="Array of tags" type="array" variable="$tags"/>
      <throws type="object">
        <type full="Zend_Cache_Exception" namespace="" name="Zend_Cache_Exception"/>
      </throws>
      <return description="True if no problem" type="boolean"/>
    </docblock>
    <parameter name="dir" byreference="false" type="{unknown}"/>
    <parameter name="mode" byreference="false" type="{unknown}" default="Zend_Cache::CLEANING_MODE_ALL"/>
    <parameter name="tags" byreference="false" type="array"/>
    <inline>
      <comment value="On some systems it is impossible to distinguish between empty match and an error." line="651"/>
      <comment value="in CLEANING_MODE_ALL, we drop anything, even remainings old metadatas files" line="658"/>
      <comment value="Recursive call" line="724"/>
      <comment value="we try to drop the structure too" line="727"/>
    </inline>
  </method>
  <method name="_get" start="735" end="817" abstract="false" final="false" static="false" visibility="protected">
    <parameter name="dir" byreference="false" type="{unknown}"/>
    <parameter name="mode" byreference="false" type="{unknown}"/>
    <parameter name="tags" byreference="false" type="array"/>
    <inline>
      <comment value="On some systems it is impossible to distinguish between empty match and an error." line="744"/>
      <comment value="Recursive call" line="807"/>
    </inline>
  </method>
  <method name="_expireTime" start="824" end="830" abstract="false" final="false" static="false" visibility="protected">
    <docblock>
      <description compact="Compute &amp; return the expire time"/>
      <return description="expire time (unix timestamp)" type="int"/>
    </docblock>
    <parameter name="lifetime" byreference="false" type="{unknown}"/>
  </method>
  <method name="_hash" start="840" end="854" abstract="false" final="false" static="false" visibility="protected">
    <docblock>
      <description compact="Make a control key with the string containing datas"/>
      <param description="Data" type="string" variable="$data"/>
      <param description="Type of control 'md5', 'crc32' or 'strlen'" type="string" variable="$controlType"/>
      <throws type="object">
        <type full="Zend_Cache_Exception" namespace="" name="Zend_Cache_Exception"/>
      </throws>
      <return description="Control key" type="string"/>
    </docblock>
    <parameter name="data" byreference="false" type="{unknown}"/>
    <parameter name="controlType" byreference="false" type="{unknown}"/>
  </method>
  <method name="_idToFileName" start="862" end="867" abstract="false" final="false" static="false" visibility="protected">
    <docblock>
      <description compact="Transform a cache id into a file name and return it"/>
      <param description="Cache id" type="string" variable="$id"/>
      <return description="File name" type="string"/>
    </docblock>
    <parameter name="id" byreference="false" type="{unknown}"/>
  </method>
  <method name="_file" start="875" end="880" abstract="false" final="false" static="false" visibility="protected">
    <docblock>
      <description compact="Make and return a file name (with path)"/>
      <param description="Cache id" type="string" variable="$id"/>
      <return description="File name (with path)" type="string"/>
    </docblock>
    <parameter name="id" byreference="false" type="{unknown}"/>
  </method>
  <method name="_path" start="889" end="906" abstract="false" final="false" static="false" visibility="protected">
    <docblock>
      <description compact="Return the complete directory path of a filename (including hashedDirectoryStructure)"/>
      <param description="Cache id" type="string" variable="$id"/>
      <param description="if true, returns array of directory parts instead of single string" type="boolean" variable="$parts"/>
      <return description="Complete directory path" type="string"/>
    </docblock>
    <parameter name="id" byreference="false" type="{unknown}"/>
    <parameter name="parts" byreference="false" type="{unknown}" default="false"/>
  </method>
  <method name="_recursiveMkdirAndChmod" start="914" end="927" abstract="false" final="false" static="false" visibility="protected">
    <docblock>
      <description compact="Make the directory strucuture for the given id"/>
      <param description="cache id" type="string" variable="$id"/>
      <return description="true" type="boolean"/>
    </docblock>
    <parameter name="id" byreference="false" type="{unknown}"/>
  </method>
  <method name="_test" start="936" end="946" abstract="false" final="false" static="false" visibility="protected">
    <docblock>
      <description compact="Test if the given cache id is available (and still valid as a cache record)"/>
      <param description="Cache id" type="string" variable="$id"/>
      <param description="If set to true, the cache validity won't be tested" type="boolean" variable="$doNotTestCacheValidity"/>
      <return description="false (a cache is not available) or &quot;last modified&quot; timestamp (int) of the available cache record" type="object">
        <type full="boolean|mixed" namespace="" name="boolean|mixed"/>
      </return>
    </docblock>
    <parameter name="id" byreference="false" type="{unknown}"/>
    <parameter name="doNotTestCacheValidity" byreference="false" type="{unknown}"/>
  </method>
  <method name="_fileGetContents" start="954" end="968" abstract="false" final="false" static="false" visibility="protected">
    <docblock>
      <description compact="Return the file content of the given file"/>
      <param description="File complete path" type="string" variable="$file"/>
      <return description="File content (or false if problem)" type="string"/>
    </docblock>
    <parameter name="file" byreference="false" type="{unknown}"/>
  </method>
  <method name="_filePutContents" start="977" end="993" abstract="false" final="false" static="false" visibility="protected">
    <docblock>
      <description compact="Put the given string into the given file"/>
      <param description="File complete path" type="string" variable="$file"/>
      <param description="String to put in file" type="string" variable="$string"/>
      <return description="true if no problem" type="boolean"/>
    </docblock>
    <parameter name="file" byreference="false" type="{unknown}"/>
    <parameter name="string" byreference="false" type="{unknown}"/>
  </method>
  <method name="_fileNameToId" start="1001" end="1005" abstract="false" final="false" static="false" visibility="protected">
    <docblock>
      <description compact="Transform a file name into cache id and return it"/>
      <param description="File name" type="string" variable="$fileName"/>
      <return description="Cache id" type="string"/>
    </docblock>
    <parameter name="fileName" byreference="false" type="{unknown}"/>
  </method>
  <parent full="Zend_Cache_Backend" namespace="" name="Zend_Cache_Backend">
    <member name="_directives" type="array" visibility="protected" line="44">
      <docblock>
        <description compact="Frontend or Core directives">=====&gt; (int) lifetime :
- Cache lifetime (in seconds)
- If null, the cache is valid forever

=====&gt; (int) logging :
- if set to true, a logging is activated throw Zend_Log</description>
        <var description="directives" type="array"/>
      </docblock>
    </member>
    <member name="_options" type="array" visibility="protected" line="55">
      <docblock>
        <description compact="Available options"/>
        <var description="available options" type="array"/>
      </docblock>
    </member>
    <constructor name="__construct" start="64" end="69" abstract="false" final="false" static="false" visibility="public">
      <docblock>
        <description compact="Constructor"/>
        <param description="Associative array of options" type="array" variable="$options"/>
        <throws type="object">
          <type full="Zend_Cache_Exception" namespace="" name="Zend_Cache_Exception"/>
        </throws>
        <return type="object">
          <type full="void" namespace="" name="void"/>
        </return>
      </docblock>
      <parameter name="options" byreference="false" type="array"/>
    </constructor>
    <method name="setDirectives" start="78" end="93" abstract="false" final="false" static="false" visibility="public">
      <docblock>
        <description compact="Set the frontend directives"/>
        <param description="Assoc of directives" type="array" variable="$directives"/>
        <throws type="object">
          <type full="Zend_Cache_Exception" namespace="" name="Zend_Cache_Exception"/>
        </throws>
        <return type="object">
          <type full="void" namespace="" name="void"/>
        </return>
      </docblock>
      <parameter name="directives" byreference="false" type="{unknown}"/>
    </method>
    <method name="setOption" start="103" end="112" abstract="false" final="false" static="false" visibility="public">
      <docblock>
        <description compact="Set an option"/>
        <param type="string" variable="$name"/>
        <param type="mixed" variable="$value"/>
        <throws type="object">
          <type full="Zend_Cache_Exception" namespace="" name="Zend_Cache_Exception"/>
        </throws>
        <return type="object">
          <type full="void" namespace="" name="void"/>
        </return>
      </docblock>
      <parameter name="name" byreference="false" type="{unknown}"/>
      <parameter name="value" byreference="false" type="{unknown}"/>
    </method>
    <method name="getLifetime" start="123" end="129" abstract="false" final="false" static="false" visibility="public">
      <docblock>
        <description compact="Get the life time">if $specificLifetime is not false, the given specific life time is used
else, the global lifetime is used</description>
        <param type="int" variable="$specificLifetime"/>
        <return description="Cache life time" type="int"/>
      </docblock>
      <parameter name="specificLifetime" byreference="false" type="{unknown}"/>
    </method>
    <method name="isAutomaticCleaningAvailable" start="139" end="142" abstract="false" final="false" static="false" visibility="public">
      <docblock>
        <description compact="Return true if the automatic cleaning is available for the backend">DEPRECATED : use getCapabilities() instead</description>
        <deprecated/>
        <return type="boolean"/>
      </docblock>
    </method>
    <method name="getTmpDir" start="152" end="198" abstract="false" final="false" static="false" visibility="public">
      <docblock>
        <description compact="Determine system TMP directory and detect if we have read access">inspired from Zend_File_Transfer_Adapter_Abstract</description>
        <return type="string"/>
        <throws description="if unable to determine directory" type="object">
          <type full="Zend_Cache_Exception" namespace="" name="Zend_Cache_Exception"/>
        </throws>
      </docblock>
      <inline>
        <comment value="Attemp to detect by creating a temporary file" line="182"/>
      </inline>
    </method>
    <method name="_isGoodTmpDir" start="206" end="214" abstract="false" final="false" static="false" visibility="protected">
      <docblock>
        <description compact="Verify if the given temporary directory is readable and writable"/>
        <param description="temporary directory" type="string" variable="$dir"/>
        <return description="true if the directory is ok" type="boolean"/>
      </docblock>
      <parameter name="dir" byreference="false" type="{unknown}"/>
    </method>
    <method name="_loggerSanity" start="224" end="244" abstract="false" final="false" static="false" visibility="protected">
      <docblock>
        <description compact="Make sure if we enable logging that the Zend_Log class is available.">Create a default log object if none is set.</description>
        <throws type="object">
          <type full="Zend_Cache_Exception" namespace="" name="Zend_Cache_Exception"/>
        </throws>
        <return type="object">
          <type full="void" namespace="" name="void"/>
        </return>
      </docblock>
      <inline>
        <comment value="Create a default logger to the standard output stream" line="237"/>
      </inline>
    </method>
    <method name="_log" start="253" end="267" abstract="false" final="false" static="false" visibility="protected">
      <docblock>
        <description compact="Log a message at the WARN (4) priority."/>
        <param type="string" variable="$message"/>
        <throws type="object">
          <type full="Zend_Cache_Exception" namespace="" name="Zend_Cache_Exception"/>
        </throws>
        <return type="object">
          <type full="void" namespace="" name="void"/>
        </return>
      </docblock>
      <parameter name="message" byreference="false" type="{unknown}"/>
      <parameter name="priority" byreference="false" type="integer" default="4"/>
    </method>
  </parent>
  <interface full="Zend_Cache_Backend_ExtendedInterface" namespace="" name="Zend_Cache_Backend_ExtendedInterface">
    <extends full="Zend_Cache_Backend_Interface" namespace="" name="Zend_Cache_Backend_Interface"/>
    <method name="getIds" start="42" end="42" abstract="false" final="false" static="false" visibility="public">
      <docblock>
        <description compact="Return an array of stored cache ids"/>
        <return description="array of stored cache ids (string)" type="array"/>
      </docblock>
    </method>
    <method name="getTags" start="49" end="49" abstract="false" final="false" static="false" visibility="public">
      <docblock>
        <description compact="Return an array of stored tags"/>
        <return description="array of stored tags (string)" type="array"/>
      </docblock>
    </method>
    <method name="getIdsMatchingTags" start="59" end="59" abstract="false" final="false" static="false" visibility="public">
      <docblock>
        <description compact="Return an array of stored cache ids which match given tags">In case of multiple tags, a logical AND is made between tags</description>
        <param description="array of tags" type="array" variable="$tags"/>
        <return description="array of matching cache ids (string)" type="array"/>
      </docblock>
      <parameter name="tags" byreference="false" type="array"/>
    </method>
    <method name="getIdsNotMatchingTags" start="69" end="69" abstract="false" final="false" static="false" visibility="public">
      <docblock>
        <description compact="Return an array of stored cache ids which don't match given tags">In case of multiple tags, a logical OR is made between tags</description>
        <param description="array of tags" type="array" variable="$tags"/>
        <return description="array of not matching cache ids (string)" type="array"/>
      </docblock>
      <parameter name="tags" byreference="false" type="array"/>
    </method>
    <method name="getIdsMatchingAnyTags" start="79" end="79" abstract="false" final="false" static="false" visibility="public">
      <docblock>
        <description compact="Return an array of stored cache ids which match any given tags">In case of multiple tags, a logical AND is made between tags</description>
        <param description="array of tags" type="array" variable="$tags"/>
        <return description="array of any matching cache ids (string)" type="array"/>
      </docblock>
      <parameter name="tags" byreference="false" type="array"/>
    </method>
    <method name="getFillingPercentage" start="86" end="86" abstract="false" final="false" static="false" visibility="public">
      <docblock>
        <description compact="Return the filling percentage of the backend storage"/>
        <return description="integer between 0 and 100" type="int"/>
      </docblock>
    </method>
    <method name="getMetadatas" start="99" end="99" abstract="false" final="false" static="false" visibility="public">
      <docblock>
        <description compact="Return an array of metadatas for the given cache id">The array must include these keys :
- expire : the expire timestamp
- tags : a string array of tags
- mtime : timestamp of last modification time</description>
        <param description="cache id" type="string" variable="$id"/>
        <return description="array of metadatas (false if the cache id is not found)" type="array"/>
      </docblock>
      <parameter name="id" byreference="false" type="{unknown}"/>
    </method>
    <method name="touch" start="108" end="108" abstract="false" final="false" static="false" visibility="public">
      <docblock>
        <description compact="Give (if possible) an extra lifetime to the given cache id"/>
        <param description="cache id" type="string" variable="$id"/>
        <param type="int" variable="$extraLifetime"/>
        <return description="true if ok" type="boolean"/>
      </docblock>
      <parameter name="id" byreference="false" type="{unknown}"/>
      <parameter name="extraLifetime" byreference="false" type="{unknown}"/>
    </method>
    <method name="getCapabilities" start="124" end="124" abstract="false" final="false" static="false" visibility="public">
      <docblock>
        <description compact="Return an associative array of capabilities (booleans) of the backend">The array must include these keys :
- automatic_cleaning (is automating cleaning necessary)
- tags (are tags supported)
- expired_read (is it possible to read expired cache records
                (for doNotTestCacheValidity option for example))
- priority does the backend deal with priority when saving
- infinite_lifetime (is infinite lifetime can work with this backend)
- get_list (is it possible to get the list of cache ids and the complete list of tags)</description>
        <return description="associative of with capabilities" type="array"/>
      </docblock>
    </method>
  </interface>
</class>
