<?xml version="1.0" encoding="UTF-8"?>
<class xmlns="http://xml.phpdox.net/src" full="SimpleLexer" namespace="" name="SimpleLexer" abstract="false" final="false" start="180" end="443">
  <file path="/var/www/_modules/ecommerce_test/trunk/docs/en/phpdox/../../../framework/thirdparty/simpletest" file="parser.php" realpath="/var/www/_modules/ecommerce_test/trunk/framework/thirdparty/simpletest/parser.php" size="25738" time="2015-03-14T10:41:58+13:00" unixtime="1426282918" sha1="e4607f7477e6361d65714d9315478fe8a6a5ff2e" relative="framework/thirdparty/simpletest/parser.php"/>
  <docblock>
    <description compact="Accepts text and breaks it into tokens.">Some optimisation to make the sure the
   content is only scanned by the PHP regex
   parser once. Lexer modes must not start
   with leading underscores.
   @package SimpleTest
   @subpackage WebTester</description>
  </docblock>
  <member name="_regexes" type="{unknown}" visibility="public" line="181"/>
  <member name="_parser" type="{unknown}" visibility="public" line="182"/>
  <member name="_mode" type="{unknown}" visibility="public" line="183"/>
  <member name="_mode_handlers" type="{unknown}" visibility="public" line="184"/>
  <member name="_case" type="{unknown}" visibility="public" line="185"/>
  <method name="SimpleLexer" start="196" end="202" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="Sets up the lexer in case insensitive matching    by default.">@param SimpleSaxParser $parser  Handling strategy by
                                   reference.
   @param string $start            Starting handler.
   @param boolean $case            True for case sensitive.
   @access public</description>
    </docblock>
    <parameter name="parser" byreference="true" type="{unknown}"/>
    <parameter name="start" byreference="false" type="string" default="&quot;accept&quot;"/>
    <parameter name="case" byreference="false" type="{unknown}" default="false"/>
  </method>
  <method name="addPattern" start="215" end="223" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="Adds a token search pattern for a particular    parsing mode. The pattern does not change the    current mode.">@param string $pattern      Perl style regex, but ( and )
                               lose the usual meaning.
   @param string $mode         Should only apply this
                               pattern when dealing with
                               this type of input.
   @access public</description>
    </docblock>
    <parameter name="pattern" byreference="false" type="{unknown}"/>
    <parameter name="mode" byreference="false" type="string" default="&quot;accept&quot;"/>
  </method>
  <method name="addEntryPattern" start="238" end="246" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="Adds a pattern that will enter a new parsing    mode. Useful for entering parenthesis, strings,    tags, etc.">@param string $pattern      Perl style regex, but ( and )
                               lose the usual meaning.
   @param string $mode         Should only apply this
                               pattern when dealing with
                               this type of input.
   @param string $new_mode     Change parsing to this new
                               nested mode.
   @access public</description>
    </docblock>
    <parameter name="pattern" byreference="false" type="{unknown}"/>
    <parameter name="mode" byreference="false" type="{unknown}"/>
    <parameter name="new_mode" byreference="false" type="{unknown}"/>
  </method>
  <method name="addExitPattern" start="256" end="264" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="Adds a pattern that will exit the current mode    and re-enter the previous one.">@param string $pattern      Perl style regex, but ( and )
                               lose the usual meaning.
   @param string $mode         Mode to leave.
   @access public</description>
    </docblock>
    <parameter name="pattern" byreference="false" type="{unknown}"/>
    <parameter name="mode" byreference="false" type="{unknown}"/>
  </method>
  <method name="addSpecialPattern" start="278" end="286" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="Adds a pattern that has a special mode. Acts as an entry    and exit pattern in one go, effectively calling a special    parser handler for this token only.">@param string $pattern      Perl style regex, but ( and )
                               lose the usual meaning.
   @param string $mode         Should only apply this
                               pattern when dealing with
                               this type of input.
   @param string $special      Use this mode for this one token.
   @access public</description>
    </docblock>
    <parameter name="pattern" byreference="false" type="{unknown}"/>
    <parameter name="mode" byreference="false" type="{unknown}"/>
    <parameter name="special" byreference="false" type="{unknown}"/>
  </method>
  <method name="mapHandler" start="294" end="296" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="Adds a mapping from a mode to another handler.">@param string $mode        Mode to be remapped.
   @param string $handler     New target handler.
   @access public</description>
    </docblock>
    <parameter name="mode" byreference="false" type="{unknown}"/>
    <parameter name="handler" byreference="false" type="{unknown}"/>
  </method>
  <method name="parse" start="308" end="330" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="Splits the page text into tokens. Will fail    if the handlers report an error or if no    content is consumed. If successful then each    unparsed and parsed token invokes a call to the    held listener.">@param string $raw        Raw HTML text.
   @return boolean           True on success, else false.
   @access public</description>
    </docblock>
    <parameter name="raw" byreference="false" type="{unknown}"/>
  </method>
  <method name="_dispatchTokens" start="344" end="366" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="Sends the matched token and any leading unmatched    text to the parser changing the lexer to a new    mode if one is listed.">@param string $unmatched    Unmatched leading portion.
   @param string $matched      Actual token match.
   @param string $mode         Mode after match. A boolean
                               false mode causes no change.
   @return boolean             False if there was any error
                               from the parser.
   @access private</description>
    </docblock>
    <parameter name="unmatched" byreference="false" type="{unknown}"/>
    <parameter name="matched" byreference="false" type="{unknown}"/>
    <parameter name="mode" byreference="false" type="{unknown}" default="false"/>
  </method>
  <method name="_isModeEnd" start="376" end="378" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="Tests to see if the new mode is actually to leave    the current mode and pop an item from the matching    mode stack.">@param string $mode    Mode to test.
   @return boolean        True if this is the exit mode.
   @access private</description>
    </docblock>
    <parameter name="mode" byreference="false" type="{unknown}"/>
  </method>
  <method name="_isSpecialMode" start="388" end="390" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="Test to see if the mode is one where this mode    is entered for this token only and automatically    leaves immediately afterwoods.">@param string $mode    Mode to test.
   @return boolean        True if this is the exit mode.
   @access private</description>
    </docblock>
    <parameter name="mode" byreference="false" type="{unknown}"/>
  </method>
  <method name="_decodeSpecial" start="399" end="401" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="Strips the magic underscore marking single token    modes.">@param string $mode    Mode to decode.
   @return string         Underlying mode name.
   @access private</description>
    </docblock>
    <parameter name="mode" byreference="false" type="{unknown}"/>
  </method>
  <method name="_invokeParser" start="412" end="418" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="Calls the parser method named after the current    mode. Empty content will be ignored. The lexer    has a parser handler for each mode in the lexer.">@param string $content        Text parsed.
   @param boolean $is_match      Token is recognised rather
                                 than unparsed data.
   @access private</description>
    </docblock>
    <parameter name="content" byreference="false" type="{unknown}"/>
    <parameter name="is_match" byreference="false" type="{unknown}"/>
  </method>
  <method name="_reduce" start="434" end="442" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="Tries to match a chunk of text and if successful    removes the recognised chunk and any leading    unparsed data. Empty strings will not be matched.">@param string $raw         The subject to parse. This is the
                              content that will be eaten.
   @return array/boolean      Three item list of unparsed
                              content followed by the
                              recognised token and finally the
                              action the parser is to take.
                              True if no match, false if there
                              is a parsing error.
   @access private</description>
    </docblock>
    <parameter name="raw" byreference="false" type="{unknown}"/>
  </method>
  <extender full="SimpleHtmlLexer" namespace="" name="SimpleHtmlLexer"/>
</class>
