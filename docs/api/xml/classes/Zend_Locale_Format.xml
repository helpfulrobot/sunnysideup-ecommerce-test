<?xml version="1.0" encoding="UTF-8"?>
<class xmlns="http://xml.phpdox.net/src" full="Zend_Locale_Format" namespace="" name="Zend_Locale_Format" abstract="false" final="false" start="35" end="1313">
  <file path="/var/www/_modules/ecommerce_test/trunk/docs/en/phpdox/../../../framework/thirdparty/Zend/Locale" file="Format.php" realpath="/var/www/_modules/ecommerce_test/trunk/framework/thirdparty/Zend/Locale/Format.php" size="55825" time="2015-03-14T10:41:29+13:00" unixtime="1426282889" sha1="eef0358b9dd698d6805107a138622ab1f391c29b" relative="framework/thirdparty/Zend/Locale/Format.php"/>
  <docblock>
    <description/>
    <category value="Zend"/>
    <package value="Zend_Locale"/>
    <subpackage value="Format"/>
    <copyright value="Copyright (c) 2005-2012 Zend Technologies USA Inc. (http://www.zend.com)"/>
    <license name="http://framework.zend.com/license/new-bsd     New BSD License"/>
  </docblock>
  <constant name="STANDARD" value="'auto'"/>
  <member name="_options" type="array" visibility="private" line="39"/>
  <method name="setOptions" start="64" end="68" abstract="false" final="false" static="true" visibility="public">
    <docblock>
      <description compact="Sets class wide options, if no option was given, the actual set options will be returned The 'precision' option of a value is used to truncate or stretch extra digits. -1 means not to touch the extra digits.">The 'locale' option helps when parsing numbers and dates using separators and month names.
The date format 'format_type' option selects between CLDR/ISO date format specifier tokens and PHP's date() tokens.
The 'fix_date' option enables or disables heuristics that attempt to correct invalid dates.
The 'number_format' option can be used to specify a default number format string
The 'date_format' option can be used to specify a default date format string, but beware of using getDate(),
checkDateFormat() and getTime() after using setOptions() with a 'format'.  To use these four methods
with the default date format for a locale, use array('date_format' =&gt; null, 'locale' =&gt; $locale) for their options.</description>
      <param description="Array of options, keyed by option name: format_type = 'iso' | 'php', fix_date = true | false," type="array" variable="$options">locale = Zend_Locale | locale string, precision = whole number between -1 and 30</param>
      <throws type="object">
        <type full="Zend_Locale_Exception" namespace="" name="Zend_Locale_Exception"/>
      </throws>
      <return description="array if no option was given" type="object">
        <type full="Options" namespace="" name="Options"/>
      </return>
    </docblock>
    <parameter name="options" byreference="false" type="array"/>
  </method>
  <method name="_checkOptions" start="79" end="178" abstract="false" final="false" static="true" visibility="private">
    <docblock>
      <description compact="Internal function for checking the options array of proper input values See {@link setOptions()} for details."/>
      <param description="Array of options, keyed by option name: format_type = 'iso' | 'php', fix_date = true | false," type="array" variable="$options">locale = Zend_Locale | locale string, precision = whole number between -1 and 30</param>
      <throws type="object">
        <type full="Zend_Locale_Exception" namespace="" name="Zend_Locale_Exception"/>
      </throws>
      <return description="array if no option was given" type="object">
        <type full="Options" namespace="" name="Options"/>
      </return>
    </docblock>
    <parameter name="options" byreference="false" type="array"/>
  </method>
  <method name="convertNumerals" start="196" end="226" abstract="false" final="false" static="true" visibility="public">
    <docblock>
      <description compact="Changes the numbers/digits within a given string from one script to another 'Decimal' representated the stardard numbers 0-9, if a script does not exist an exception will be thrown.">Examples for conversion from Arabic to Latin numerals:
  convertNumerals('١١٠ Tests', 'Arab'); -&gt; returns '100 Tests'
Example for conversion from Latin to Arabic numerals:
  convertNumerals('100 Tests', 'Latn', 'Arab'); -&gt; returns '١١٠ Tests'</description>
      <param description="String to convert" type="string" variable="$input"/>
      <param description="Script to parse, see {@link Zend_Locale::getScriptList()} for details." type="string" variable="$from"/>
      <param description="OPTIONAL Script to convert to" type="string" variable="$to"/>
      <return description="Returns the converted input" type="string"/>
      <throws type="object">
        <type full="Zend_Locale_Exception" namespace="" name="Zend_Locale_Exception"/>
      </throws>
    </docblock>
    <parameter name="input" byreference="false" type="{unknown}"/>
    <parameter name="from" byreference="false" type="{unknown}"/>
    <parameter name="to" byreference="false" type="{unknown}" default="null"/>
  </method>
  <method name="getNumber" start="244" end="286" abstract="false" final="false" static="true" visibility="public">
    <docblock>
      <description compact="Returns the normalized number from a localized one Parsing depends on given locale (grouping and decimal)">Examples for input:
'2345.4356,1234' = 23455456.1234
'+23,3452.123' = 233452.123
'12343 ' = 12343
'-9456' = -9456
'0' = 0</description>
      <param description="Input string to parse for numbers" type="string" variable="$input"/>
      <param description="Options: locale, precision. See {@link setOptions()} for details." type="array" variable="$options"/>
      <return description="Returns the extracted number" type="string"/>
      <throws type="object">
        <type full="Zend_Locale_Exception" namespace="" name="Zend_Locale_Exception"/>
      </throws>
    </docblock>
    <parameter name="input" byreference="false" type="{unknown}"/>
    <parameter name="options" byreference="false" type="array"/>
    <inline>
      <comment value="Get correct signs for this locale" line="256"/>
      <comment value="Change locale input to be default number" line="258"/>
    </inline>
  </method>
  <method name="toNumber" start="300" end="489" abstract="false" final="false" static="true" visibility="public">
    <docblock>
      <description compact="Returns a locale formatted number depending on the given options.">The seperation and fraction sign is used from the set locale.
##0.#  -&gt; 12345.12345 -&gt; 12345.12345
##0.00 -&gt; 12345.12345 -&gt; 12345.12
##,##0.00 -&gt; 12345.12345 -&gt; 12,345.12</description>
      <param description="Localized number string" type="string" variable="$input"/>
      <param description="Options: number_format, locale, precision. See {@link setOptions()} for details." type="array" variable="$options"/>
      <return description="locale formatted number" type="string"/>
      <throws type="object">
        <type full="Zend_Locale_Exception" namespace="" name="Zend_Locale_Exception"/>
      </throws>
    </docblock>
    <parameter name="value" byreference="false" type="{unknown}"/>
    <parameter name="options" byreference="false" type="array"/>
    <inline>
      <comment value="load class within method for speed" line="302"/>
      <comment value="Get correct signs for this locale" line="310"/>
      <comment value="Get format" line="320"/>
      <comment value="get number parts" line="362"/>
      <comment value="get fraction and format lengths" line="387"/>
      <comment value="Add fraction" line="415"/>
      <comment value="Add seperation" line="441"/>
      <comment value="no seperation" line="443"/>
      <comment value="set negative sign" line="474"/>
    </inline>
  </method>
  <method name="_seperateFormat" start="491" end="507" abstract="false" final="false" static="true" visibility="private">
    <parameter name="format" byreference="false" type="{unknown}"/>
    <parameter name="value" byreference="false" type="{unknown}"/>
    <parameter name="precision" byreference="false" type="{unknown}"/>
  </method>
  <method name="isNumber" start="517" end="541" abstract="false" final="false" static="true" visibility="public">
    <docblock>
      <description compact="Checks if the input contains a normalized or localized number"/>
      <param description="Localized number string" type="string" variable="$input"/>
      <param description="Options: locale. See {@link setOptions()} for details." type="array" variable="$options"/>
      <return description="Returns true if a number was found" type="boolean"/>
    </docblock>
    <parameter name="input" byreference="false" type="{unknown}"/>
    <parameter name="options" byreference="false" type="array"/>
    <inline>
      <comment value="Get correct signs for this locale" line="525"/>
    </inline>
  </method>
  <method name="_getRegexForType" start="549" end="642" abstract="false" final="false" static="true" visibility="private">
    <docblock>
      <description compact="Internal method to convert cldr number syntax into regex"/>
      <param type="string" variable="$type"/>
      <return type="string"/>
    </docblock>
    <parameter name="type" byreference="false" type="{unknown}"/>
    <parameter name="options" byreference="false" type="{unknown}"/>
  </method>
  <method name="getFloat" start="651" end="654" abstract="false" final="false" static="true" visibility="public">
    <docblock>
      <description compact="Alias for getNumber"/>
      <param description="Number to localize" type="string" variable="$value"/>
      <param description="Options: locale, precision. See {@link setOptions()} for details." type="array" variable="$options"/>
      <return type="float"/>
    </docblock>
    <parameter name="input" byreference="false" type="{unknown}"/>
    <parameter name="options" byreference="false" type="array"/>
  </method>
  <method name="toFloat" start="664" end="668" abstract="false" final="false" static="true" visibility="public">
    <docblock>
      <description compact="Returns a locale formatted integer number Alias for toNumber()"/>
      <param description="Number to normalize" type="string" variable="$value"/>
      <param description="Options: locale, precision. See {@link setOptions()} for details." type="array" variable="$options"/>
      <return description="Locale formatted number" type="string"/>
    </docblock>
    <parameter name="value" byreference="false" type="{unknown}"/>
    <parameter name="options" byreference="false" type="array"/>
  </method>
  <method name="isFloat" start="678" end="681" abstract="false" final="false" static="true" visibility="public">
    <docblock>
      <description compact="Returns if a float was found Alias for isNumber()"/>
      <param description="Localized number string" type="string" variable="$input"/>
      <param description="Options: locale. See {@link setOptions()} for details." type="array" variable="$options"/>
      <return description="Returns true if a number was found" type="boolean"/>
    </docblock>
    <parameter name="value" byreference="false" type="{unknown}"/>
    <parameter name="options" byreference="false" type="array"/>
  </method>
  <method name="getInteger" start="699" end="703" abstract="false" final="false" static="true" visibility="public">
    <docblock>
      <description compact="Returns the first found integer from an string Parsing depends on given locale (grouping and decimal)">Examples for input:
'  2345.4356,1234' = 23455456
'+23,3452.123' = 233452
' 12343 ' = 12343
'-9456km' = -9456
'0' = 0
'(-){0,1}(\d+(\.){0,1})*(\,){0,1})\d+'</description>
      <param description="Input string to parse for numbers" type="string" variable="$input"/>
      <param description="Options: locale. See {@link setOptions()} for details." type="array" variable="$options"/>
      <return description="Returns the extracted number" type="integer"/>
    </docblock>
    <parameter name="input" byreference="false" type="{unknown}"/>
    <parameter name="options" byreference="false" type="array"/>
  </method>
  <method name="toInteger" start="712" end="717" abstract="false" final="false" static="true" visibility="public">
    <docblock>
      <description compact="Returns a localized number"/>
      <param description="Number to normalize" type="string" variable="$value"/>
      <param description="Options: locale. See {@link setOptions()} for details." type="array" variable="$options"/>
      <return description="Locale formatted number" type="string"/>
    </docblock>
    <parameter name="value" byreference="false" type="{unknown}"/>
    <parameter name="options" byreference="false" type="array"/>
  </method>
  <method name="isInteger" start="726" end="737" abstract="false" final="false" static="true" visibility="public">
    <docblock>
      <description compact="Returns if a integer was found"/>
      <param description="Localized number string" type="string" variable="$input"/>
      <param description="Options: locale. See {@link setOptions()} for details." type="array" variable="$options"/>
      <return description="Returns true if a integer was found" type="boolean"/>
    </docblock>
    <parameter name="value" byreference="false" type="{unknown}"/>
    <parameter name="options" byreference="false" type="array"/>
  </method>
  <method name="convertPhpToIsoFormat" start="751" end="772" abstract="false" final="false" static="true" visibility="public">
    <docblock>
      <description compact="Converts a format string from PHP's date format to ISO format Remember that Zend Date always returns localized string, so a month name which returns the english month in php's date() will return the translated month name with this function... use 'en' as locale if you are in need of the original english names">The conversion has the following restrictions:
'a', 'A' - Meridiem is not explicit upper/lowercase, you have to upper/lowercase the translated value yourself</description>
      <param description="Format string in PHP's date format" type="string" variable="$format"/>
      <return description="Format string in ISO format" type="string"/>
    </docblock>
    <parameter name="format" byreference="false" type="{unknown}"/>
  </method>
  <method name="_parseDate" start="781" end="1098" abstract="false" final="false" static="true" visibility="private">
    <docblock>
      <description compact="Parse date and split in named array fields"/>
      <param description="Date string to parse" type="string" variable="$date"/>
      <param description="Options: format_type, fix_date, locale, date_format. See {@link setOptions()} for details." type="array" variable="$options"/>
      <return description="Possible array members: day, month, year, hour, minute, second, fixed, format" type="array"/>
    </docblock>
    <parameter name="date" byreference="false" type="{unknown}"/>
    <parameter name="options" byreference="false" type="{unknown}"/>
    <inline>
      <comment value="working copy" line="792"/>
      <comment value="save the format used to normalize $number (convenience)" line="793"/>
      <comment value="save the locale used to normalize $number (convenience)" line="794"/>
      <comment value="erase day string" line="827"/>
      <comment value="prepare to convert month name to their numeric equivalents, if requested," line="843"/>
      <comment value="and we have a $options['locale']" line="844"/>
      <comment value="get daytime" line="877"/>
      <comment value="split number parts" line="886"/>
      <comment value="AM/PM correction" line="982"/>
      <comment value="fix false month" line="996"/>
      <comment value="fix switched values d &lt;&gt; y" line="1017"/>
      <comment value="fix switched values M &lt;&gt; y" line="1037"/>
      <comment value="fix switched values M &lt;&gt; d" line="1057"/>
    </inline>
  </method>
  <method name="_replaceMonth" start="1108" end="1125" abstract="false" final="false" static="true" visibility="protected">
    <docblock>
      <description compact="Search $number for a month name found in $monthlist, and replace if found."/>
      <param description="Date string (modified)" type="string" variable="$number"/>
      <param description="List of month names" type="array" variable="$monthlist"/>
      <return description="Position of replaced string (false if nothing replaced)" type="object">
        <type full="int|false" namespace="" name="int|false"/>
      </return>
    </docblock>
    <parameter name="number" byreference="true" type="{unknown}"/>
    <parameter name="monthlist" byreference="false" type="{unknown}"/>
    <inline>
      <comment value="If $locale was invalid, $monthlist will default to a &quot;root&quot; identity" line="1110"/>
      <comment value="mapping for each month number from 1 to 12." line="1111"/>
      <comment value="If no $locale was given, or $locale was invalid, do not use this identity mapping to normalize." line="1112"/>
      <comment value="Otherwise, translate locale aware month names in $number to their numeric equivalents." line="1113"/>
    </inline>
  </method>
  <method name="getDateFormat" start="1134" end="1143" abstract="false" final="false" static="true" visibility="public">
    <docblock>
      <description compact="Returns the default date format for $locale."/>
      <param description="OPTIONAL Locale of $number, possibly in string form (e.g. 'de_AT')" type="object" variable="$locale">
        <type full="string|Zend_Locale" namespace="" name="string|Zend_Locale"/>
      </param>
      <return description="format" type="string"/>
      <throws description="throws an exception when locale data is broken" type="object">
        <type full="Zend_Locale_Exception" namespace="" name="Zend_Locale_Exception"/>
      </throws>
    </docblock>
    <parameter name="locale" byreference="false" type="{unknown}" default="null"/>
  </method>
  <method name="getDate" start="1158" end="1167" abstract="false" final="false" static="true" visibility="public">
    <docblock>
      <description compact="Returns an array with the normalized date from an locale date a input of 10.01.2006 without a $locale would return: array ('day' =&gt; 10, 'month' =&gt; 1, 'year' =&gt; 2006) The 'locale' option is only used to convert human readable day and month names to their numeric equivalents.">The 'format' option allows specification of self-defined date formats,
when not using the default format for the 'locale'.</description>
      <param description="Date string" type="string" variable="$date"/>
      <param description="Options: format_type, fix_date, locale, date_format. See {@link setOptions()} for details." type="array" variable="$options"/>
      <return description="Possible array members: day, month, year, hour, minute, second, fixed, format" type="array"/>
    </docblock>
    <parameter name="date" byreference="false" type="{unknown}"/>
    <parameter name="options" byreference="false" type="array"/>
  </method>
  <method name="checkDateFormat" start="1178" end="1225" abstract="false" final="false" static="true" visibility="public">
    <docblock>
      <description compact="Returns if the given datestring contains all date parts from the given format.">If no format is given, the default date format from the locale is used
If you want to check if the date is a proper date you should use Zend_Date::isDate()</description>
      <param description="Date string" type="string" variable="$date"/>
      <param description="Options: format_type, fix_date, locale, date_format. See {@link setOptions()} for details." type="array" variable="$options"/>
      <return type="boolean"/>
    </docblock>
    <parameter name="date" byreference="false" type="{unknown}"/>
    <parameter name="options" byreference="false" type="array"/>
    <inline>
      <comment value="day expected but not parsed" line="1192"/>
      <comment value="month expected but not parsed" line="1197"/>
      <comment value="year expected but not parsed" line="1202"/>
      <comment value="second expected but not parsed" line="1208"/>
      <comment value="minute expected but not parsed" line="1213"/>
      <comment value="hour expected but not parsed" line="1218"/>
    </inline>
  </method>
  <method name="getTimeFormat" start="1233" end="1241" abstract="false" final="false" static="true" visibility="public">
    <docblock>
      <description compact="Returns the default time format for $locale."/>
      <param description="OPTIONAL Locale of $number, possibly in string form (e.g. 'de_AT')" type="object" variable="$locale">
        <type full="string|Zend_Locale" namespace="" name="string|Zend_Locale"/>
      </param>
      <return description="format" type="string"/>
    </docblock>
    <parameter name="locale" byreference="false" type="{unknown}" default="null"/>
  </method>
  <method name="getTime" start="1255" end="1263" abstract="false" final="false" static="true" visibility="public">
    <docblock>
      <description compact="Returns an array with 'hour', 'minute', and 'second' elements extracted from $time according to the order described in $format.  For a format of 'H:m:s', and an input of 11:20:55, getTime() would return: array ('hour' =&gt; 11, 'minute' =&gt; 20, 'second' =&gt; 55) The optional $locale parameter may be used to help extract times from strings containing both a time and a day or month name."/>
      <param description="Time string" type="string" variable="$time"/>
      <param description="Options: format_type, fix_date, locale, date_format. See {@link setOptions()} for details." type="array" variable="$options"/>
      <return description="Possible array members: day, month, year, hour, minute, second, fixed, format" type="array"/>
    </docblock>
    <parameter name="time" byreference="false" type="{unknown}"/>
    <parameter name="options" byreference="false" type="array"/>
  </method>
  <method name="getDateTimeFormat" start="1271" end="1279" abstract="false" final="false" static="true" visibility="public">
    <docblock>
      <description compact="Returns the default datetime format for $locale."/>
      <param description="OPTIONAL Locale of $number, possibly in string form (e.g. 'de_AT')" type="object" variable="$locale">
        <type full="string|Zend_Locale" namespace="" name="string|Zend_Locale"/>
      </param>
      <return description="format" type="string"/>
    </docblock>
    <parameter name="locale" byreference="false" type="{unknown}" default="null"/>
  </method>
  <method name="getDateTime" start="1293" end="1301" abstract="false" final="false" static="true" visibility="public">
    <docblock>
      <description compact="Returns an array with 'year', 'month', 'day', 'hour', 'minute', and 'second' elements extracted from $datetime according to the order described in $format.  For a format of 'd.M.y H:m:s', and an input of 10.05.1985 11:20:55, getDateTime() would return: array ('year' =&gt; 1985, 'month' =&gt; 5, 'day' =&gt; 10, 'hour' =&gt; 11, 'minute' =&gt; 20, 'second' =&gt; 55) The optional $locale parameter may be used to help extract times from strings containing both a time and a day or month name."/>
      <param description="DateTime string" type="string" variable="$datetime"/>
      <param description="Options: format_type, fix_date, locale, date_format. See {@link setOptions()} for details." type="array" variable="$options"/>
      <return description="Possible array members: day, month, year, hour, minute, second, fixed, format" type="array"/>
    </docblock>
    <parameter name="datetime" byreference="false" type="{unknown}"/>
    <parameter name="options" byreference="false" type="array"/>
  </method>
  <method name="_getUniCodeSupport" start="1309" end="1312" abstract="false" final="false" static="true" visibility="protected">
    <docblock>
      <description compact="Internal method to detect of Unicode supports UTF8 which should be enabled within vanilla php installations"/>
      <return type="boolean"/>
    </docblock>
  </method>
</class>
