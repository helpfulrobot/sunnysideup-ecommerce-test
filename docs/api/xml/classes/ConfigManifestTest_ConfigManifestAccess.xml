<?xml version="1.0" encoding="UTF-8"?>
<class xmlns="http://xml.phpdox.net/src" full="ConfigManifestTest_ConfigManifestAccess" namespace="" name="ConfigManifestTest_ConfigManifestAccess" abstract="false" final="false" start="3" end="7">
  <file path="/var/www/_modules/ecommerce_test/trunk/docs/en/phpdox/../../../framework/tests/core/manifest" file="ConfigManifestTest.php" realpath="/var/www/_modules/ecommerce_test/trunk/framework/tests/core/manifest/ConfigManifestTest.php" size="15777" time="2015-03-14T10:41:06+13:00" unixtime="1426282866" sha1="f20194955d571218d626a848ae1396581a8d6dae" relative="framework/tests/core/manifest/ConfigManifestTest.php"/>
  <extends full="SS_ConfigManifest" namespace="" name="SS_ConfigManifest"/>
  <method name="relativeOrder" start="4" end="6" abstract="false" final="false" static="false" visibility="public">
    <parameter name="a" byreference="false" type="{unknown}"/>
    <parameter name="b" byreference="false" type="{unknown}"/>
  </method>
  <parent full="SS_ConfigManifest" namespace="" name="SS_ConfigManifest">
    <member name="base" type="{unknown}" visibility="protected" line="13">
      <docblock>
        <var description="- The base path used when building the manifest" type="string"/>
      </docblock>
    </member>
    <member name="key" type="{unknown}" visibility="protected" line="16">
      <docblock>
        <var description="- A string to prepend to all cache keys to ensure all keys are unique to just this $base" type="string"/>
      </docblock>
    </member>
    <member name="includeTests" type="{unknown}" visibility="protected" line="19">
      <docblock>
        <var description="- Whether `test` directories should be searched when searching for configuration" type="object">
          <type full="bool" namespace="" name="bool"/>
        </var>
      </docblock>
    </member>
    <member name="variantKeySpec" type="{unknown}" default="false" visibility="protected" line="26">
      <docblock>
        <description compact="All the values needed to be collected to determine the correct combination of fragements for the current environment."/>
        <var type="array"/>
      </docblock>
    </member>
    <member name="phpConfigSources" type="array" visibility="protected" line="32">
      <docblock>
        <description compact="All the _config.php files. Need to be included every request &amp; can't be cached. Not variant specific."/>
        <var type="array"/>
      </docblock>
    </member>
    <member name="yamlConfigFragments" type="array" visibility="protected" line="38">
      <docblock>
        <description compact="All the _config/*.yml fragments pre-parsed and sorted in ascending include order. Not variant specific."/>
        <var type="array"/>
      </docblock>
    </member>
    <member name="yamlConfig" type="array" visibility="public" line="44">
      <docblock>
        <description compact="The calculated config from _config/*.yml, sorted, filtered and merged. Variant specific."/>
        <var type="array"/>
      </docblock>
    </member>
    <member name="yamlConfigVariantKey" type="{unknown}" default="null" visibility="protected" line="50">
      <docblock>
        <description compact="The variant key state as when yamlConfig was loaded"/>
        <var type="string"/>
      </docblock>
    </member>
    <member name="configChangeCallbacks" type="array" visibility="protected" line="55">
      <docblock>
        <description/>
        <var description="A list of callbacks to be called whenever the content of yamlConfig changes" type="object">
          <type full="[callback]" namespace="" name="[callback]"/>
        </var>
      </docblock>
    </member>
    <member name="modules" type="array" visibility="public" line="62">
      <docblock>
        <description compact="A side-effect of collecting the _config fragments is the calculation of all module directories, since the definition of a module is &quot;a directory that contains either a _config.php file or a _config directory"/>
        <var type="array"/>
      </docblock>
    </member>
    <method name="addModule" start="65" end="71" abstract="false" final="false" static="false" visibility="public">
      <docblock>
        <description compact="Adds a path as a module"/>
      </docblock>
      <parameter name="path" byreference="false" type="{unknown}"/>
    </method>
    <method name="moduleExists" start="74" end="76" abstract="false" final="false" static="false" visibility="public">
      <docblock>
        <description compact="Returns true if the passed module exists"/>
      </docblock>
      <parameter name="module" byreference="false" type="{unknown}"/>
    </method>
    <constructor name="__construct" start="85" end="108" abstract="false" final="false" static="false" visibility="public">
      <docblock>
        <description compact="Constructs and initialises a new configuration object, either loading from the cache or re-scanning for classes."/>
        <param description="The project base path." type="string" variable="$base"/>
        <param description="Force the manifest to be regenerated." type="object" variable="$forceRegen">
          <type full="bool" namespace="" name="bool"/>
        </param>
      </docblock>
      <parameter name="base" byreference="false" type="{unknown}"/>
      <parameter name="includeTests" byreference="false" type="{unknown}" default="false"/>
      <parameter name="forceRegen" byreference="false" type="{unknown}" default="false"/>
      <inline>
        <comment value="Get the Zend Cache to load/store cache into" line="90"/>
        <comment value="Unless we're forcing regen, try loading from cache" line="93"/>
        <comment value="The PHP config sources are always needed" line="95"/>
        <comment value="Get the variant key spec" line="97"/>
        <comment value="If we don't have a variantKeySpec (because we're forcing regen, or it just wasn't in the cache), generate it" line="101"/>
        <comment value="At this point $this-&gt;variantKeySpec will always contain something valid, so we can build the variant" line="106"/>
      </inline>
    </constructor>
    <method name="getCache" start="114" end="120" abstract="false" final="false" static="false" visibility="protected">
      <docblock>
        <description compact="Provides a hook for mock unit tests despite no DI"/>
        <return type="object">
          <type full="Zend_Cache_Frontend" namespace="" name="Zend_Cache_Frontend"/>
        </return>
      </docblock>
    </method>
    <method name="registerChangeCallback" start="131" end="133" abstract="false" final="false" static="false" visibility="public">
      <docblock>
        <description compact="Register a callback to be called whenever the calculated merged config changes">In some situations the merged config can change - for instance, code in _config.php can cause which Only
and Except fragments match. Registering a callback with this function allows code to be called when
this happens.</description>
        <param type="object" variable="$callback">
          <type full="callback" namespace="" name="callback"/>
        </param>
      </docblock>
      <parameter name="callback" byreference="false" type="{unknown}"/>
    </method>
    <method name="activateConfig" start="139" end="145" abstract="false" final="false" static="false" visibility="public">
      <docblock>
        <description compact="Includes all of the php _config.php files found by this manifest. Called by SS_Config when adding this manifest"/>
        <return type="object">
          <type full="void" namespace="" name="void"/>
        </return>
      </docblock>
    </method>
    <method name="get" start="156" end="159" abstract="false" final="false" static="false" visibility="public">
      <docblock>
        <description compact="Gets the (merged) config value for the given class and config property name"/>
        <param description="- The class to get the config property value for" type="string" variable="$class"/>
        <param description="- The config property to get the value for" type="string" variable="$name"/>
        <param description="- What to return if no value was contained in any YAML file for the passed $class and $name" type="object" variable="$default">
          <type full="any" namespace="" name="any"/>
        </param>
        <return description="- The merged set of all values contained in all the YAML configuration files for the passed" type="object">$class and $name, or $default if there are none<type full="any" namespace="" name="any"/></return>
      </docblock>
      <parameter name="class" byreference="false" type="{unknown}"/>
      <parameter name="name" byreference="false" type="{unknown}"/>
      <parameter name="default" byreference="false" type="{unknown}" default="null"/>
    </method>
    <method name="variantKey" start="169" end="185" abstract="false" final="false" static="false" visibility="public">
      <docblock>
        <description compact="Returns the string that uniquely identifies this variant. The variant is the combination of classes, modules, environment, environment variables and constants that selects which yaml fragments actually make it into the configuration because of &quot;only&quot; and &quot;except&quot; rules."/>
        <return type="string"/>
      </docblock>
      <inline>
        <comment value="Copy to fill in actual values" line="170"/>
      </inline>
    </method>
    <method name="regenerate" start="196" end="226" abstract="false" final="false" static="false" visibility="public">
      <docblock>
        <description compact="Completely regenerates the manifest file. Scans through finding all php _config.php and yaml _config/*.ya?ml files,parses the yaml files into fragments, sorts them and figures out what values need to be checked to pick the correct variant.">Does _not_ build the actual variant</description>
        <param description="Cache the result." type="object" variable="$cache">
          <type full="bool" namespace="" name="bool"/>
        </param>
      </docblock>
      <parameter name="includeTests" byreference="false" type="{unknown}" default="false"/>
      <parameter name="cache" byreference="false" type="{unknown}" default="true"/>
    </method>
    <method name="addSourceConfigFile" start="234" end="238" abstract="false" final="false" static="false" visibility="public">
      <docblock>
        <description compact="Handle finding a php file. We just keep a record of all php files found, we don't include them at this stage">Public so that ManifestFileFinder can call it. Not for general use.</description>
      </docblock>
      <parameter name="basename" byreference="false" type="{unknown}"/>
      <parameter name="pathname" byreference="false" type="{unknown}"/>
      <parameter name="depth" byreference="false" type="{unknown}"/>
      <inline>
        <comment value="Add this module too" line="236"/>
      </inline>
    </method>
    <method name="addYAMLConfigFile" start="247" end="321" abstract="false" final="false" static="false" visibility="public">
      <docblock>
        <description compact="Handle finding a yml file. Parse the file by spliting it into header/fragment pairs, and normalising some of the header values (especially: give anonymous name if none assigned, splt/complete before and after matchers)">Public so that ManifestFileFinder can call it. Not for general use.</description>
      </docblock>
      <parameter name="basename" byreference="false" type="{unknown}"/>
      <parameter name="pathname" byreference="false" type="{unknown}"/>
      <parameter name="depth" byreference="false" type="{unknown}"/>
      <inline>
        <comment value="Keep track of all the modules we've seen" line="250"/>
        <comment value="Use the Zend copy of this script to prevent class conflicts when RailsYaml is included" line="253"/>
        <comment value="The base header" line="258"/>
        <comment value="Make sure the linefeeds are all converted to \n, PCRE '$' will not match anything else." line="264"/>
        <comment value="YAML parsers really should handle this properly themselves, but neither spyc nor symfony-yaml do. So we" line="267"/>
        <comment value="follow in their vein and just do what we need, not what the spec says" line="268"/>
        <comment value="If only one document, it's a headerless fragment. So just add it with an anonymous name" line="271"/>
      </inline>
    </method>
    <method name="sortYamlFragments" start="333" end="376" abstract="false" final="false" static="false" visibility="protected">
      <docblock>
        <description compact="Sorts the YAML fragments so that the &quot;before&quot; and &quot;after&quot; rules are met.">Throws an error if there's a loop

We can't use regular sorts here - we need a topological sort. Easiest
way is with a DAG, so build up a DAG based on the before/after rules, then
sort that.</description>
        <return type="object">
          <type full="void" namespace="" name="void"/>
        </return>
      </docblock>
      <inline>
        <comment value="Build a directed graph" line="336"/>
      </inline>
    </method>
    <method name="relativeOrder" start="386" end="438" abstract="false" final="false" static="false" visibility="protected">
      <docblock>
        <description compact="Return a string &quot;after&quot;, &quot;before&quot; or &quot;undefined&quot; depending on whether the YAML fragment array element passed as $a should be positioned after, before, or either compared to the YAML fragment array element passed as $b"/>
        <param description="- a YAML config fragment as loaded by addYAMLConfigFile" variable="$a" type="object">
          <type full="Array" namespace="" name="Array"/>
        </param>
        <param description="- a YAML config fragment as loaded by addYAMLConfigFile" variable="$b" type="object">
          <type full="Array" namespace="" name="Array"/>
        </param>
        <return description="&quot;after&quot;, &quot;before&quot; or &quot;undefined&quot;" type="string"/>
      </docblock>
      <parameter name="a" byreference="false" type="{unknown}"/>
      <parameter name="b" byreference="false" type="{unknown}"/>
      <inline>
        <comment value="Do the same thing for after and before" line="389"/>
        <comment value="Figure out for each rule, which part matches" line="393"/>
        <comment value="If part is *, we match _unless_ the opposite rule has a non-* matcher than also matches $b" line="398"/>
        <comment value="Figure out the specificness of each match. 1 an actual match, 0 for a wildcard match, remove if no match" line="411"/>
      </inline>
    </method>
    <method name="prefilterYamlFragments" start="448" end="466" abstract="false" final="false" static="false" visibility="public">
      <docblock>
        <description compact="This function filters the loaded yaml fragments, removing any that can't ever have their &quot;only&quot; and &quot;except&quot; rules match.">Some tests in "only" and "except" rules need to be checked per request, but some are manifest based -
these are invariant over requests and only need checking on manifest rebuild. So we can prefilter these before
saving yamlConfigFragments to speed up the process of checking the per-request variant/</description>
      </docblock>
    </method>
    <method name="matchesPrefilterVariantRules" start="476" end="497" abstract="false" final="false" static="false" visibility="public">
      <docblock>
        <description compact="Returns false if the prefilterable parts of the rule aren't met, and true if they are"/>
        <param description="- A hash of rules as allowed in the only or except portion of a config fragment header" variable="$rules" type="array"/>
        <return description="- True if the rules are met, false if not. (Note that depending on whether we were passed an" type="object">only or an except rule,
which values means accept or reject a fragment<type full="bool" namespace="" name="bool"/></return>
      </docblock>
      <parameter name="rules" byreference="false" type="{unknown}"/>
      <inline>
        <comment value="Needs to be truthy, but not true" line="477"/>
      </inline>
    </method>
    <method name="buildVariantKeySpec" start="503" end="510" abstract="false" final="false" static="false" visibility="public">
      <docblock>
        <description compact="Builds the variant key spec - the list of values that need to be build to give a key that uniquely identifies this variant."/>
      </docblock>
    </method>
    <method name="addVariantKeySpecRules" start="515" end="544" abstract="false" final="false" static="false" visibility="public">
      <docblock>
        <description compact="Adds any variables referenced in the passed rules to the $this-&gt;variantKeySpec array"/>
      </docblock>
      <parameter name="rules" byreference="false" type="{unknown}"/>
    </method>
    <method name="buildYamlConfigVariant" start="553" end="596" abstract="false" final="false" static="false" visibility="public">
      <docblock>
        <description compact="Calculates which yaml config fragments are applicable in this variant, and merge those all together into the $this-&gt;yamlConfig propperty">Checks cache and takes care of loading yamlConfigFragments if they aren't already present, but expects
$variantKeySpec to already be set</description>
      </docblock>
      <parameter name="cache" byreference="false" type="{unknown}" default="true"/>
      <inline>
        <comment value="Only try loading from cache if we don't have the fragments already loaded, as there's no way to know if a" line="554"/>
        <comment value="given variant is stale compared to the complete set of fragments" line="555"/>
        <comment value="First try and just load the exact variant" line="557"/>
        <comment value="If we still don't have any fragments we have to build them" line="568"/>
        <comment value="Since yamlConfig has changed, call any callbacks that are interested" line="594"/>
      </inline>
    </method>
    <method name="matchesVariantRules" start="601" end="646" abstract="false" final="false" static="false" visibility="public">
      <docblock>
        <description compact="Returns false if the non-prefilterable parts of the rule aren't met, and true if they are"/>
      </docblock>
      <parameter name="rules" byreference="false" type="{unknown}"/>
      <inline>
        <comment value="Needs to be truthy, but not true" line="602"/>
      </inline>
    </method>
    <method name="mergeInYamlFragment" start="654" end="658" abstract="false" final="false" static="false" visibility="public">
      <docblock>
        <description compact="Recursively merge a yaml fragment's configuration array into the primary merged configuration array."/>
        <param variable="$into"/>
        <param variable="$fragment"/>
        <return type="object">
          <type full="void" namespace="" name="void"/>
        </return>
      </docblock>
      <parameter name="into" byreference="true" type="{unknown}"/>
      <parameter name="fragment" byreference="false" type="{unknown}"/>
    </method>
  </parent>
</class>
