<?xml version="1.0" encoding="UTF-8"?>
<class xmlns="http://xml.phpdox.net/src" full="GridFieldFilterHeader" namespace="" name="GridFieldFilterHeader" abstract="false" final="false" start="11" end="164">
  <file path="/var/www/_modules/ecommerce_test/trunk/docs/en/phpdox/../../../framework/forms/gridfield" file="GridFieldFilterHeader.php" realpath="/var/www/_modules/ecommerce_test/trunk/framework/forms/gridfield/GridFieldFilterHeader.php" size="5291" time="2015-03-14T10:40:46+13:00" unixtime="1426282846" sha1="ecd72e8419907b4fc2564667256d6a37764f5f80" relative="framework/forms/gridfield/GridFieldFilterHeader.php"/>
  <docblock>
    <description compact="GridFieldFilterHeader alters the {@link GridField} with some filtering fields in the header of each column."/>
    <see value="GridField"/>
    <package value="forms"/>
    <subpackage value="fields-gridfield"/>
  </docblock>
  <implements full="GridField_HTMLProvider" namespace="" name="GridField_HTMLProvider"/>
  <implements full="GridField_DataManipulator" namespace="" name="GridField_DataManipulator"/>
  <implements full="GridField_ActionProvider" namespace="" name="GridField_ActionProvider"/>
  <member name="throwExceptionOnBadDataType" type="{unknown}" default="true" visibility="protected" line="16">
    <docblock>
      <description compact="See {@link setThrowExceptionOnBadDataType()}"/>
    </docblock>
  </member>
  <method name="setThrowExceptionOnBadDataType" start="27" end="29" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="Determine what happens when this component is used with a list that isn't {@link SS_Filterable}.">- true: An exception is thrown
 - false: This component will be ignored - it won't make any changes to the GridField.

By default, this is set to true so that it's clearer what's happening, but the predefined
{@link GridFieldConfig} subclasses set this to false for flexibility.</description>
    </docblock>
    <parameter name="throwExceptionOnBadDataType" byreference="false" type="{unknown}"/>
  </method>
  <method name="getThrowExceptionOnBadDataType" start="34" end="36" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="See {@link setThrowExceptionOnBadDataType()}"/>
    </docblock>
  </method>
  <method name="checkDataType" start="42" end="52" abstract="false" final="false" static="false" visibility="protected">
    <docblock>
      <description compact="Check that this dataList is of the right data type.">Returns false if it's a bad data type, and if appropriate, throws an exception.</description>
    </docblock>
    <parameter name="dataList" byreference="false" type="{unknown}"/>
  </method>
  <method name="getActions" start="59" end="63" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description/>
      <param type="object" variable="$gridField">
        <type full="GridField" namespace="" name="GridField"/>
      </param>
      <return type="array"/>
    </docblock>
    <parameter name="gridField" byreference="false" type="{unknown}"/>
  </method>
  <method name="handleAction" start="65" end="78" abstract="false" final="false" static="false" visibility="public">
    <parameter name="gridField" byreference="false" type="object">
      <type full="\\GridField" namespace="\" name="GridField"/>
    </parameter>
    <parameter name="actionName" byreference="false" type="{unknown}"/>
    <parameter name="arguments" byreference="false" type="{unknown}"/>
    <parameter name="data" byreference="false" type="{unknown}"/>
  </method>
  <method name="getManipulatedData" start="87" end="103" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description/>
      <param type="object" variable="$gridField">
        <type full="GridField" namespace="" name="GridField"/>
      </param>
      <param type="object" variable="$dataList">
        <type full="SS_List" namespace="" name="SS_List"/>
      </param>
      <return type="object">
        <type full="SS_List" namespace="" name="SS_List"/>
      </return>
    </docblock>
    <parameter name="gridField" byreference="false" type="object">
      <type full="\\GridField" namespace="\" name="GridField"/>
    </parameter>
    <parameter name="dataList" byreference="false" type="object">
      <type full="\\SS_List" namespace="\" name="SS_List"/>
    </parameter>
  </method>
  <method name="getHTMLFragments" start="105" end="163" abstract="false" final="false" static="false" visibility="public">
    <parameter name="gridField" byreference="false" type="{unknown}"/>
  </method>
  <interface full="GridField_HTMLProvider" namespace="" name="GridField_HTMLProvider">
    <extends full="GridFieldComponent" namespace="" name="GridFieldComponent"/>
    <method name="getHTMLFragments" start="38" end="38" abstract="false" final="false" static="false" visibility="public">
      <docblock>
        <description compact="Returns a map where the keys are fragment names and the values are pieces of HTML to add to these fragments.">Here are 4 built-in fragments: 'header', 'footer', 'before', and
'after', but components may also specify fragments of their own.
To specify a new fragment, specify a new fragment by including the
text "$DefineFragment(fragmentname)" in the HTML that you return.
Fragment names should only contain alphanumerics, -, and _.
If you attempt to return HTML for a fragment that doesn't exist, an
exception will be thrown when the <link xmlns="http://xml.phpdox.net/src" value="GridField"/> is rendered.
</description>
        <return type="array"/>
      </docblock>
      <parameter name="gridField" byreference="false" type="{unknown}"/>
    </method>
  </interface>
  <interface full="GridField_DataManipulator" namespace="" name="GridField_DataManipulator">
    <extends full="GridFieldComponent" namespace="" name="GridFieldComponent"/>
    <method name="getManipulatedData" start="166" end="166" abstract="false" final="false" static="false" visibility="public">
      <docblock>
        <description compact="Manipulate the {@link DataList} as needed by this grid modifier."/>
        <param type="object">
          <type full="GridField" namespace="" name="GridField"/>
        </param>
        <param type="object">
          <type full="SS_List" namespace="" name="SS_List"/>
        </param>
        <return type="object">
          <type full="DataList" namespace="" name="DataList"/>
        </return>
      </docblock>
      <parameter name="gridField" byreference="false" type="object">
        <type full="\\GridField" namespace="\" name="GridField"/>
      </parameter>
      <parameter name="dataList" byreference="false" type="object">
        <type full="\\SS_List" namespace="\" name="SS_List"/>
      </parameter>
    </method>
  </interface>
  <interface full="GridField_ActionProvider" namespace="" name="GridField_ActionProvider">
    <extends full="GridFieldComponent" namespace="" name="GridFieldComponent"/>
    <method name="getActions" start="129" end="129" abstract="false" final="false" static="false" visibility="public">
      <docblock>
        <description compact="Return a list of the actions handled by this action provider.">Used to identify the action later on through the $actionName parameter
in <link xmlns="http://xml.phpdox.net/src" value="handleAction"/>.
There is no namespacing on these actions, so you need to ensure that
they don't conflict with other components.
</description>
        <param type="object">
          <type full="GridField" namespace="" name="GridField"/>
        </param>
        <return description="with action identifier strings." type="object">
          <type full="Array" namespace="" name="Array"/>
        </return>
      </docblock>
      <parameter name="gridField" byreference="false" type="{unknown}"/>
    </method>
    <method name="handleAction" start="142" end="142" abstract="false" final="false" static="false" visibility="public">
      <docblock>
        <description compact="Handle an action on the given {@link GridField}.">Calls ALL components for every action handled, so the component needs
to ensure it only accepts actions it is actually supposed to handle.</description>
        <param type="object">
          <type full="GridField" namespace="" name="GridField"/>
        </param>
        <param description="Action identifier, see {@link getActions()}." type="object">
          <type full="String" namespace="" name="String"/>
        </param>
        <param description="Arguments relevant for this" type="object">
          <type full="Array" namespace="" name="Array"/>
        </param>
        <param description="All form data" type="object">
          <type full="Array" namespace="" name="Array"/>
        </param>
      </docblock>
      <parameter name="gridField" byreference="false" type="object">
        <type full="\\GridField" namespace="\" name="GridField"/>
      </parameter>
      <parameter name="actionName" byreference="false" type="{unknown}"/>
      <parameter name="arguments" byreference="false" type="{unknown}"/>
      <parameter name="data" byreference="false" type="{unknown}"/>
    </method>
  </interface>
</class>
