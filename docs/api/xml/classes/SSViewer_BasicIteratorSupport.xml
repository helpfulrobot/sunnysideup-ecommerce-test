<?xml version="1.0" encoding="UTF-8"?>
<class xmlns="http://xml.phpdox.net/src" full="SSViewer_BasicIteratorSupport" namespace="" name="SSViewer_BasicIteratorSupport" abstract="false" final="false" start="193" end="349">
  <file path="/var/www/_modules/ecommerce_test/trunk/docs/en/phpdox/../../../framework/view" file="SSViewer.php" realpath="/var/www/_modules/ecommerce_test/trunk/framework/view/SSViewer.php" size="39375" time="2015-03-14T10:42:30+13:00" unixtime="1426282950" sha1="ef64a4a35a6f49d03bf1437c3b95405f06b93b27" relative="framework/view/SSViewer.php"/>
  <docblock>
    <description compact="Defines an extra set of basic methods that can be used in templates that are not defined on sub-classes of {@link ViewableData}."/>
    <package value="framework"/>
    <subpackage value="view"/>
  </docblock>
  <implements full="TemplateIteratorProvider" namespace="" name="TemplateIteratorProvider"/>
  <member name="iteratorPos" type="{unknown}" visibility="protected" line="195"/>
  <member name="iteratorTotalItems" type="{unknown}" visibility="protected" line="196"/>
  <method name="get_template_iterator_variables" start="198" end="213" abstract="false" final="false" static="true" visibility="public"/>
  <method name="iteratorProperties" start="221" end="224" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="Set the current iterator properties - where we are on the iterator."/>
      <param description="position in iterator" type="int" variable="$pos"/>
      <param description="total number of items" type="int" variable="$totalItems"/>
    </docblock>
    <parameter name="pos" byreference="false" type="{unknown}"/>
    <parameter name="totalItems" byreference="false" type="{unknown}"/>
  </method>
  <method name="First" start="231" end="233" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="Returns true if this object is the first in a set."/>
      <return type="object">
        <type full="bool" namespace="" name="bool"/>
      </return>
    </docblock>
  </method>
  <method name="Last" start="240" end="242" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="Returns true if this object is the last in a set."/>
      <return type="object">
        <type full="bool" namespace="" name="bool"/>
      </return>
    </docblock>
  </method>
  <method name="FirstLast" start="249" end="253" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="Returns 'first' or 'last' if this is the first or last object in the set."/>
      <return type="object">
        <type full="string|null" namespace="" name="string|null"/>
      </return>
    </docblock>
  </method>
  <method name="Middle" start="260" end="262" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="Return true if this object is between the first &amp; last objects."/>
      <return type="object">
        <type full="bool" namespace="" name="bool"/>
      </return>
    </docblock>
  </method>
  <method name="MiddleString" start="269" end="271" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="Return 'middle' if this object is between the first &amp; last objects."/>
      <return type="object">
        <type full="string|null" namespace="" name="string|null"/>
      </return>
    </docblock>
  </method>
  <method name="Even" start="280" end="282" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="Return true if this object is an even item in the set.">The count starts from $startIndex, which defaults to 1.</description>
      <param description="Number to start count from." type="int" variable="$startIndex"/>
      <return type="object">
        <type full="bool" namespace="" name="bool"/>
      </return>
    </docblock>
    <parameter name="startIndex" byreference="false" type="integer" default="1"/>
  </method>
  <method name="Odd" start="290" end="292" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="Return true if this is an odd item in the set."/>
      <param description="Number to start count from." type="int" variable="$startIndex"/>
      <return type="object">
        <type full="bool" namespace="" name="bool"/>
      </return>
    </docblock>
    <parameter name="startIndex" byreference="false" type="integer" default="1"/>
  </method>
  <method name="EvenOdd" start="300" end="302" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="Return 'even' or 'odd' if this object is in an even or odd position in the set respectively."/>
      <param description="Number to start count from." type="int" variable="$startIndex"/>
      <return type="string"/>
    </docblock>
    <parameter name="startIndex" byreference="false" type="integer" default="1"/>
  </method>
  <method name="Pos" start="311" end="313" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="Return the numerical position of this object in the container set. The count starts at $startIndex.">The default is the give the position using a 1-based index.</description>
      <param description="Number to start count from." type="int" variable="$startIndex"/>
      <return type="int"/>
    </docblock>
    <parameter name="startIndex" byreference="false" type="integer" default="1"/>
  </method>
  <method name="TotalItems" start="320" end="322" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="Return the total number of &quot;sibling&quot; items in the dataset."/>
      <return type="int"/>
    </docblock>
  </method>
  <method name="Modulus" start="331" end="333" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="Returns the modulus of the numerical position of the item in the data set.">The count starts from $startIndex, which defaults to 1.</description>
      <param description="The number to perform Mod operation to." type="int" variable="$Mod"/>
      <param description="Number to start count from." type="int" variable="$startIndex"/>
      <return type="int"/>
    </docblock>
    <parameter name="mod" byreference="false" type="{unknown}"/>
    <parameter name="startIndex" byreference="false" type="integer" default="1"/>
  </method>
  <method name="MultipleOf" start="343" end="345" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="Returns true or false depending on if the pos of the iterator is a multiple of a specific number.">So, &lt;% if MultipleOf(3) %&gt; would return true on indexes: 3,6,9,12,15, etc.
The count starts from $offset, which defaults to 1.</description>
      <param description="The multiple of which to return" type="int" variable="$factor"/>
      <param description="Number to start count from." type="int" variable="$offset"/>
      <return type="object">
        <type full="bool" namespace="" name="bool"/>
      </return>
    </docblock>
    <parameter name="factor" byreference="false" type="{unknown}"/>
    <parameter name="offset" byreference="false" type="integer" default="1"/>
  </method>
  <interface full="TemplateIteratorProvider" namespace="" name="TemplateIteratorProvider">
    <method name="get_template_iterator_variables" start="33" end="33" abstract="false" final="false" static="true" visibility="public">
      <docblock>
        <description compact="Called by SSViewer to get a list of iterator variables to expose to the template, the instance method to call on an instance of this class to get the value for those variables, and the class to use for casting the returned value for use in a template">If the method to call is not included for a particular template variable, a method named the same as the
template variable will be called

If the casting class is not specified for a particular template variable, ViewableData::$default_cast is used

The first letter of the template variable is case-insensitive. However the method name is always case sensitive.</description>
        <abstract/>
        <return description="Returns an array of items. Each key =&gt; value pair is one of three forms:" type="array">- template name (no key)
 - template name =&gt; method name
 - template name =&gt; array(), where the array can contain these key =&gt; value pairs
    - "method" =&gt; method name
    - "casting" =&gt; casting class to use (i.e., Varchar, HTMLText, etc)</return>
      </docblock>
    </method>
    <method name="iteratorProperties" start="45" end="45" abstract="false" final="false" static="false" visibility="public">
      <docblock>
        <description compact="Set the current iterator properties - where we are on the iterator.">This is called by SSViewer prior to calling any of the variables exposed to the template (that is, as returned
from a call to get_template_iterator_variables)</description>
        <abstract/>
        <param description="position in iterator" type="int" variable="$pos"/>
        <param description="total number of items" type="int" variable="$totalItems"/>
      </docblock>
      <parameter name="pos" byreference="false" type="{unknown}"/>
      <parameter name="totalItems" byreference="false" type="{unknown}"/>
    </method>
  </interface>
</class>
