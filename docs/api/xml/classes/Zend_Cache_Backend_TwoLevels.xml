<?xml version="1.0" encoding="UTF-8"?>
<class xmlns="http://xml.phpdox.net/src" full="Zend_Cache_Backend_TwoLevels" namespace="" name="Zend_Cache_Backend_TwoLevels" abstract="false" final="false" start="42" end="536">
  <file path="/var/www/_modules/ecommerce_test/trunk/docs/en/phpdox/../../../framework/thirdparty/Zend/Cache/Backend" file="TwoLevels.php" realpath="/var/www/_modules/ecommerce_test/trunk/framework/thirdparty/Zend/Cache/Backend/TwoLevels.php" size="19715" time="2015-03-14T10:41:13+13:00" unixtime="1426282873" sha1="ec010a4d85650c9aed3be5e54123acaa46767904" relative="framework/thirdparty/Zend/Cache/Backend/TwoLevels.php"/>
  <docblock>
    <description/>
    <package value="Zend_Cache"/>
    <subpackage value="Zend_Cache_Backend"/>
    <copyright value="Copyright (c) 2005-2011 Zend Technologies USA Inc. (http://www.zend.com)"/>
    <license name="http://framework.zend.com/license/new-bsd     New BSD License"/>
  </docblock>
  <extends full="Zend_Cache_Backend" namespace="" name="Zend_Cache_Backend"/>
  <implements full="Zend_Cache_Backend_ExtendedInterface" namespace="" name="Zend_Cache_Backend_ExtendedInterface"/>
  <member name="_options" type="array" visibility="protected" line="80">
    <docblock>
      <description compact="Available options">=====&gt; (string) slow_backend :
- Slow backend name
- Must implement the Zend_Cache_Backend_ExtendedInterface
- Should provide a big storage

=====&gt; (string) fast_backend :
- Flow backend name
- Must implement the Zend_Cache_Backend_ExtendedInterface
- Must be much faster than slow_backend

=====&gt; (array) slow_backend_options :
- Slow backend options (see corresponding backend)

=====&gt; (array) fast_backend_options :
- Fast backend options (see corresponding backend)

=====&gt; (int) stats_update_factor :
- Disable / Tune the computation of the fast backend filling percentage
- When saving a record into cache :
    1               =&gt; systematic computation of the fast backend filling percentage
    x (integer) &gt; 1 =&gt; computation of the fast backend filling percentage randomly 1 times on x cache write

=====&gt; (boolean) slow_backend_custom_naming :
=====&gt; (boolean) fast_backend_custom_naming :
=====&gt; (boolean) slow_backend_autoload :
=====&gt; (boolean) fast_backend_autoload :
- See Zend_Cache::factory() method

=====&gt; (boolean) auto_refresh_fast_cache
- If true, auto refresh the fast cache when a cache record is hit</description>
      <var description="available options" type="array"/>
    </docblock>
  </member>
  <member name="_slowBackend" type="{unknown}" visibility="protected" line="98">
    <docblock>
      <description compact="Slow Backend"/>
      <var type="object">
        <type full="Zend_Cache_Backend_ExtendedInterface" namespace="" name="Zend_Cache_Backend_ExtendedInterface"/>
      </var>
    </docblock>
  </member>
  <member name="_fastBackend" type="{unknown}" visibility="protected" line="105">
    <docblock>
      <description compact="Fast Backend"/>
      <var type="object">
        <type full="Zend_Cache_Backend_ExtendedInterface" namespace="" name="Zend_Cache_Backend_ExtendedInterface"/>
      </var>
    </docblock>
  </member>
  <member name="_fastBackendFillingPercentage" type="{unknown}" default="null" visibility="protected" line="112">
    <docblock>
      <description compact="Cache for the fast backend filling percentage"/>
      <var type="int"/>
    </docblock>
  </member>
  <constructor name="__construct" start="121" end="159" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="Constructor"/>
      <param description="Associative array of options" type="array" variable="$options"/>
      <throws type="object">
        <type full="Zend_Cache_Exception" namespace="" name="Zend_Cache_Exception"/>
      </throws>
      <return type="object">
        <type full="void" namespace="" name="void"/>
      </return>
    </docblock>
    <parameter name="options" byreference="false" type="array"/>
  </constructor>
  <method name="test" start="167" end="175" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="Test if a cache is available or not (for the given id)"/>
      <param description="cache id" type="string" variable="$id"/>
      <return description="(a cache is not available) or &quot;last modified&quot; timestamp (int) of the available cache record" type="object">
        <type full="mixed|false" namespace="" name="mixed|false"/>
      </return>
    </docblock>
    <parameter name="id" byreference="false" type="{unknown}"/>
  </method>
  <method name="save" start="190" end="213" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="Save some string datas into a cache record">Note : $data is always "string" (serialization is done by the
core not by the backend)</description>
      <param description="Datas to cache" type="string" variable="$data"/>
      <param description="Cache id" type="string" variable="$id"/>
      <param description="Array of strings, the cache record will be tagged by each string entry" type="array" variable="$tags"/>
      <param description="If != false, set a specific lifetime for this cache record (null =&gt; infinite lifetime)" type="int" variable="$specificLifetime"/>
      <param description="integer between 0 (very low priority) and 10 (maximum priority) used by some particular backends" type="int" variable="$priority"/>
      <return description="true if no problem" type="boolean"/>
    </docblock>
    <parameter name="data" byreference="false" type="{unknown}"/>
    <parameter name="id" byreference="false" type="{unknown}"/>
    <parameter name="tags" byreference="false" type="array"/>
    <parameter name="specificLifetime" byreference="false" type="{unknown}" default="false"/>
    <parameter name="priority" byreference="false" type="integer" default="8"/>
  </method>
  <method name="load" start="224" end="251" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="Test if a cache is available for the given id and (if yes) return it (false else)">Note : return value is always "string" (unserialization is done by the core not by the backend)</description>
      <param description="Cache id" type="string" variable="$id"/>
      <param description="If set to true, the cache validity won't be tested" type="boolean" variable="$doNotTestCacheValidity"/>
      <return description="cached datas" type="object">
        <type full="string|false" namespace="" name="string|false"/>
      </return>
    </docblock>
    <parameter name="id" byreference="false" type="{unknown}"/>
    <parameter name="doNotTestCacheValidity" byreference="false" type="{unknown}" default="false"/>
    <inline>
      <comment value="there is no cache at all for this id" line="230"/>
      <comment value="maybe, we have to refresh the fast cache ?" line="235"/>
      <comment value="no need to refresh the fast cache with priority = 10" line="238"/>
      <comment value="we have the time to refresh the fast cache" line="242"/>
      <comment value="we can refresh the fast cache" line="245"/>
    </inline>
  </method>
  <method name="remove" start="259" end="264" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="Remove a cache record"/>
      <param description="Cache id" type="string" variable="$id"/>
      <return description="True if no problem" type="boolean"/>
    </docblock>
    <parameter name="id" byreference="false" type="{unknown}"/>
  </method>
  <method name="clean" start="284" end="325" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="Clean some cache records">Available modes are :
Zend_Cache::CLEANING_MODE_ALL (default)    =&gt; remove all cache entries ($tags is not used)
Zend_Cache::CLEANING_MODE_OLD              =&gt; remove too old cache entries ($tags is not used)
Zend_Cache::CLEANING_MODE_MATCHING_TAG     =&gt; remove cache entries matching all given tags
                                              ($tags can be an array of strings or a single string)
Zend_Cache::CLEANING_MODE_NOT_MATCHING_TAG =&gt; remove cache entries not {matching one of the given tags}
                                              ($tags can be an array of strings or a single string)
Zend_Cache::CLEANING_MODE_MATCHING_ANY_TAG =&gt; remove cache entries matching any given tags
                                              ($tags can be an array of strings or a single string)</description>
      <param description="Clean mode" type="string" variable="$mode"/>
      <param description="Array of tags" type="array" variable="$tags"/>
      <throws type="object">
        <type full="Zend_Cache_Exception" namespace="" name="Zend_Cache_Exception"/>
      </throws>
      <return description="true if no problem" type="boolean"/>
    </docblock>
    <parameter name="mode" byreference="false" type="{unknown}" default="Zend_Cache::CLEANING_MODE_ALL"/>
    <parameter name="tags" byreference="false" type="array"/>
  </method>
  <method name="getIds" start="332" end="335" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="Return an array of stored cache ids"/>
      <return description="array of stored cache ids (string)" type="array"/>
    </docblock>
  </method>
  <method name="getTags" start="342" end="345" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="Return an array of stored tags"/>
      <return description="array of stored tags (string)" type="array"/>
    </docblock>
  </method>
  <method name="getIdsMatchingTags" start="355" end="358" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="Return an array of stored cache ids which match given tags">In case of multiple tags, a logical AND is made between tags</description>
      <param description="array of tags" type="array" variable="$tags"/>
      <return description="array of matching cache ids (string)" type="array"/>
    </docblock>
    <parameter name="tags" byreference="false" type="array"/>
  </method>
  <method name="getIdsNotMatchingTags" start="368" end="371" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="Return an array of stored cache ids which don't match given tags">In case of multiple tags, a logical OR is made between tags</description>
      <param description="array of tags" type="array" variable="$tags"/>
      <return description="array of not matching cache ids (string)" type="array"/>
    </docblock>
    <parameter name="tags" byreference="false" type="array"/>
  </method>
  <method name="getIdsMatchingAnyTags" start="381" end="384" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="Return an array of stored cache ids which match any given tags">In case of multiple tags, a logical AND is made between tags</description>
      <param description="array of tags" type="array" variable="$tags"/>
      <return description="array of any matching cache ids (string)" type="array"/>
    </docblock>
    <parameter name="tags" byreference="false" type="array"/>
  </method>
  <method name="getFillingPercentage" start="391" end="394" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="Return the filling percentage of the backend storage"/>
      <return description="integer between 0 and 100" type="int"/>
    </docblock>
  </method>
  <method name="getMetadatas" start="407" end="410" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="Return an array of metadatas for the given cache id">The array must include these keys :
- expire : the expire timestamp
- tags : a string array of tags
- mtime : timestamp of last modification time</description>
      <param description="cache id" type="string" variable="$id"/>
      <return description="array of metadatas (false if the cache id is not found)" type="array"/>
    </docblock>
    <parameter name="id" byreference="false" type="{unknown}"/>
  </method>
  <method name="touch" start="419" end="422" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="Give (if possible) an extra lifetime to the given cache id"/>
      <param description="cache id" type="string" variable="$id"/>
      <param type="int" variable="$extraLifetime"/>
      <return description="true if ok" type="boolean"/>
    </docblock>
    <parameter name="id" byreference="false" type="{unknown}"/>
    <parameter name="extraLifetime" byreference="false" type="{unknown}"/>
  </method>
  <method name="getCapabilities" start="438" end="449" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="Return an associative array of capabilities (booleans) of the backend">The array must include these keys :
- automatic_cleaning (is automating cleaning necessary)
- tags (are tags supported)
- expired_read (is it possible to read expired cache records
                (for doNotTestCacheValidity option for example))
- priority does the backend deal with priority when saving
- infinite_lifetime (is infinite lifetime can work with this backend)
- get_list (is it possible to get the list of cache ids and the complete list of tags)</description>
      <return description="associative of with capabilities" type="array"/>
    </docblock>
  </method>
  <method name="_prepareData" start="459" end="471" abstract="false" final="false" static="false" visibility="private">
    <docblock>
      <description compact="Prepare a serialized array to store datas and metadatas informations"/>
      <param description="data to store" type="string" variable="$data"/>
      <param description="original lifetime" type="int" variable="$lifetime"/>
      <param description="priority" type="int" variable="$priority"/>
      <return description="serialize array to store into cache" type="string"/>
    </docblock>
    <parameter name="data" byreference="false" type="{unknown}"/>
    <parameter name="lifetime" byreference="false" type="{unknown}"/>
    <parameter name="priority" byreference="false" type="{unknown}"/>
  </method>
  <method name="_getFastLifetime" start="481" end="497" abstract="false" final="false" static="false" visibility="private">
    <docblock>
      <description compact="Compute and return the lifetime for the fast backend"/>
      <param description="original lifetime" type="int" variable="$lifetime"/>
      <param description="priority" type="int" variable="$priority"/>
      <param description="maximum lifetime" type="int" variable="$maxLifetime"/>
      <return description="lifetime for the fast backend" type="int"/>
    </docblock>
    <parameter name="lifetime" byreference="false" type="{unknown}"/>
    <parameter name="priority" byreference="false" type="{unknown}"/>
    <parameter name="maxLifetime" byreference="false" type="{unknown}" default="null"/>
    <inline>
      <comment value="if no lifetime, we have an infinite lifetime" line="484"/>
      <comment value="we need to use arbitrary lifetimes" line="485"/>
    </inline>
  </method>
  <method name="___expire" start="506" end="510" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="PUBLIC METHOD FOR UNIT TESTING ONLY !">Force a cache record to expire</description>
      <param description="cache id" type="string" variable="$id"/>
    </docblock>
    <parameter name="id" byreference="false" type="{unknown}"/>
  </method>
  <method name="_getFastFillingPercentage" start="512" end="534" abstract="false" final="false" static="false" visibility="private">
    <parameter name="mode" byreference="false" type="{unknown}"/>
    <inline>
      <comment value="mode saving" line="516"/>
    </inline>
  </method>
  <parent full="Zend_Cache_Backend" namespace="" name="Zend_Cache_Backend">
    <member name="_directives" type="array" visibility="protected" line="44">
      <docblock>
        <description compact="Frontend or Core directives">=====&gt; (int) lifetime :
- Cache lifetime (in seconds)
- If null, the cache is valid forever

=====&gt; (int) logging :
- if set to true, a logging is activated throw Zend_Log</description>
        <var description="directives" type="array"/>
      </docblock>
    </member>
    <member name="_options" type="array" visibility="protected" line="55">
      <docblock>
        <description compact="Available options"/>
        <var description="available options" type="array"/>
      </docblock>
    </member>
    <constructor name="__construct" start="64" end="69" abstract="false" final="false" static="false" visibility="public">
      <docblock>
        <description compact="Constructor"/>
        <param description="Associative array of options" type="array" variable="$options"/>
        <throws type="object">
          <type full="Zend_Cache_Exception" namespace="" name="Zend_Cache_Exception"/>
        </throws>
        <return type="object">
          <type full="void" namespace="" name="void"/>
        </return>
      </docblock>
      <parameter name="options" byreference="false" type="array"/>
    </constructor>
    <method name="setDirectives" start="78" end="93" abstract="false" final="false" static="false" visibility="public">
      <docblock>
        <description compact="Set the frontend directives"/>
        <param description="Assoc of directives" type="array" variable="$directives"/>
        <throws type="object">
          <type full="Zend_Cache_Exception" namespace="" name="Zend_Cache_Exception"/>
        </throws>
        <return type="object">
          <type full="void" namespace="" name="void"/>
        </return>
      </docblock>
      <parameter name="directives" byreference="false" type="{unknown}"/>
    </method>
    <method name="setOption" start="103" end="112" abstract="false" final="false" static="false" visibility="public">
      <docblock>
        <description compact="Set an option"/>
        <param type="string" variable="$name"/>
        <param type="mixed" variable="$value"/>
        <throws type="object">
          <type full="Zend_Cache_Exception" namespace="" name="Zend_Cache_Exception"/>
        </throws>
        <return type="object">
          <type full="void" namespace="" name="void"/>
        </return>
      </docblock>
      <parameter name="name" byreference="false" type="{unknown}"/>
      <parameter name="value" byreference="false" type="{unknown}"/>
    </method>
    <method name="getLifetime" start="123" end="129" abstract="false" final="false" static="false" visibility="public">
      <docblock>
        <description compact="Get the life time">if $specificLifetime is not false, the given specific life time is used
else, the global lifetime is used</description>
        <param type="int" variable="$specificLifetime"/>
        <return description="Cache life time" type="int"/>
      </docblock>
      <parameter name="specificLifetime" byreference="false" type="{unknown}"/>
    </method>
    <method name="isAutomaticCleaningAvailable" start="139" end="142" abstract="false" final="false" static="false" visibility="public">
      <docblock>
        <description compact="Return true if the automatic cleaning is available for the backend">DEPRECATED : use getCapabilities() instead</description>
        <deprecated/>
        <return type="boolean"/>
      </docblock>
    </method>
    <method name="getTmpDir" start="152" end="198" abstract="false" final="false" static="false" visibility="public">
      <docblock>
        <description compact="Determine system TMP directory and detect if we have read access">inspired from Zend_File_Transfer_Adapter_Abstract</description>
        <return type="string"/>
        <throws description="if unable to determine directory" type="object">
          <type full="Zend_Cache_Exception" namespace="" name="Zend_Cache_Exception"/>
        </throws>
      </docblock>
      <inline>
        <comment value="Attemp to detect by creating a temporary file" line="182"/>
      </inline>
    </method>
    <method name="_isGoodTmpDir" start="206" end="214" abstract="false" final="false" static="false" visibility="protected">
      <docblock>
        <description compact="Verify if the given temporary directory is readable and writable"/>
        <param description="temporary directory" type="string" variable="$dir"/>
        <return description="true if the directory is ok" type="boolean"/>
      </docblock>
      <parameter name="dir" byreference="false" type="{unknown}"/>
    </method>
    <method name="_loggerSanity" start="224" end="244" abstract="false" final="false" static="false" visibility="protected">
      <docblock>
        <description compact="Make sure if we enable logging that the Zend_Log class is available.">Create a default log object if none is set.</description>
        <throws type="object">
          <type full="Zend_Cache_Exception" namespace="" name="Zend_Cache_Exception"/>
        </throws>
        <return type="object">
          <type full="void" namespace="" name="void"/>
        </return>
      </docblock>
      <inline>
        <comment value="Create a default logger to the standard output stream" line="237"/>
      </inline>
    </method>
    <method name="_log" start="253" end="267" abstract="false" final="false" static="false" visibility="protected">
      <docblock>
        <description compact="Log a message at the WARN (4) priority."/>
        <param type="string" variable="$message"/>
        <throws type="object">
          <type full="Zend_Cache_Exception" namespace="" name="Zend_Cache_Exception"/>
        </throws>
        <return type="object">
          <type full="void" namespace="" name="void"/>
        </return>
      </docblock>
      <parameter name="message" byreference="false" type="{unknown}"/>
      <parameter name="priority" byreference="false" type="integer" default="4"/>
    </method>
  </parent>
  <interface full="Zend_Cache_Backend_ExtendedInterface" namespace="" name="Zend_Cache_Backend_ExtendedInterface">
    <extends full="Zend_Cache_Backend_Interface" namespace="" name="Zend_Cache_Backend_Interface"/>
    <method name="getIds" start="42" end="42" abstract="false" final="false" static="false" visibility="public">
      <docblock>
        <description compact="Return an array of stored cache ids"/>
        <return description="array of stored cache ids (string)" type="array"/>
      </docblock>
    </method>
    <method name="getTags" start="49" end="49" abstract="false" final="false" static="false" visibility="public">
      <docblock>
        <description compact="Return an array of stored tags"/>
        <return description="array of stored tags (string)" type="array"/>
      </docblock>
    </method>
    <method name="getIdsMatchingTags" start="59" end="59" abstract="false" final="false" static="false" visibility="public">
      <docblock>
        <description compact="Return an array of stored cache ids which match given tags">In case of multiple tags, a logical AND is made between tags</description>
        <param description="array of tags" type="array" variable="$tags"/>
        <return description="array of matching cache ids (string)" type="array"/>
      </docblock>
      <parameter name="tags" byreference="false" type="array"/>
    </method>
    <method name="getIdsNotMatchingTags" start="69" end="69" abstract="false" final="false" static="false" visibility="public">
      <docblock>
        <description compact="Return an array of stored cache ids which don't match given tags">In case of multiple tags, a logical OR is made between tags</description>
        <param description="array of tags" type="array" variable="$tags"/>
        <return description="array of not matching cache ids (string)" type="array"/>
      </docblock>
      <parameter name="tags" byreference="false" type="array"/>
    </method>
    <method name="getIdsMatchingAnyTags" start="79" end="79" abstract="false" final="false" static="false" visibility="public">
      <docblock>
        <description compact="Return an array of stored cache ids which match any given tags">In case of multiple tags, a logical AND is made between tags</description>
        <param description="array of tags" type="array" variable="$tags"/>
        <return description="array of any matching cache ids (string)" type="array"/>
      </docblock>
      <parameter name="tags" byreference="false" type="array"/>
    </method>
    <method name="getFillingPercentage" start="86" end="86" abstract="false" final="false" static="false" visibility="public">
      <docblock>
        <description compact="Return the filling percentage of the backend storage"/>
        <return description="integer between 0 and 100" type="int"/>
      </docblock>
    </method>
    <method name="getMetadatas" start="99" end="99" abstract="false" final="false" static="false" visibility="public">
      <docblock>
        <description compact="Return an array of metadatas for the given cache id">The array must include these keys :
- expire : the expire timestamp
- tags : a string array of tags
- mtime : timestamp of last modification time</description>
        <param description="cache id" type="string" variable="$id"/>
        <return description="array of metadatas (false if the cache id is not found)" type="array"/>
      </docblock>
      <parameter name="id" byreference="false" type="{unknown}"/>
    </method>
    <method name="touch" start="108" end="108" abstract="false" final="false" static="false" visibility="public">
      <docblock>
        <description compact="Give (if possible) an extra lifetime to the given cache id"/>
        <param description="cache id" type="string" variable="$id"/>
        <param type="int" variable="$extraLifetime"/>
        <return description="true if ok" type="boolean"/>
      </docblock>
      <parameter name="id" byreference="false" type="{unknown}"/>
      <parameter name="extraLifetime" byreference="false" type="{unknown}"/>
    </method>
    <method name="getCapabilities" start="124" end="124" abstract="false" final="false" static="false" visibility="public">
      <docblock>
        <description compact="Return an associative array of capabilities (booleans) of the backend">The array must include these keys :
- automatic_cleaning (is automating cleaning necessary)
- tags (are tags supported)
- expired_read (is it possible to read expired cache records
                (for doNotTestCacheValidity option for example))
- priority does the backend deal with priority when saving
- infinite_lifetime (is infinite lifetime can work with this backend)
- get_list (is it possible to get the list of cache ids and the complete list of tags)</description>
        <return description="associative of with capabilities" type="array"/>
      </docblock>
    </method>
  </interface>
</class>
