<?xml version="1.0" encoding="UTF-8"?>
<class xmlns="http://xml.phpdox.net/src" full="Member_GroupSet" namespace="" name="Member_GroupSet" abstract="false" final="false" start="1615" end="1656">
  <file path="/var/www/_modules/ecommerce_test/trunk/docs/en/phpdox/../../../framework/security" file="Member.php" realpath="/var/www/_modules/ecommerce_test/trunk/framework/security/Member.php" size="53293" time="2015-03-14T10:41:01+13:00" unixtime="1426282861" sha1="f6408d8b5ac1f4ae0c8cf56cdbd49c731d34905c" relative="framework/security/Member.php"/>
  <docblock>
    <description compact="Represents a set of Groups attached to a member.">Handles the hierarchy logic.</description>
    <package value="framework"/>
    <subpackage value="security"/>
  </docblock>
  <extends full="ManyManyList" namespace="" name="ManyManyList"/>
  <constructor name="__construct" start="1616" end="1624" abstract="false" final="false" static="false" visibility="public">
    <parameter name="dataClass" byreference="false" type="{unknown}"/>
    <parameter name="joinTable" byreference="false" type="{unknown}"/>
    <parameter name="localKey" byreference="false" type="{unknown}"/>
    <parameter name="foreignKey" byreference="false" type="{unknown}"/>
    <parameter name="extraFields" byreference="false" type="array"/>
    <inline>
      <comment value="Bypass the many-many constructor" line="1617"/>
    </inline>
  </constructor>
  <method name="foreignIDFilter" start="1629" end="1651" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="Link this group set to a specific member."/>
    </docblock>
    <parameter name="id" byreference="false" type="{unknown}" default="null"/>
    <inline>
      <comment value="Find directly applied groups" line="1632"/>
      <comment value="Get all ancestors" line="1636"/>
      <comment value="Add a filter to this DataList" line="1644"/>
    </inline>
  </method>
  <method name="foreignIDWriteFilter" start="1653" end="1655" abstract="false" final="false" static="false" visibility="public">
    <parameter name="id" byreference="false" type="{unknown}" default="null"/>
  </method>
  <parent full="ManyManyList" namespace="" name="ManyManyList">
    <extends full="RelationList" namespace="" name="RelationList"/>
    <member name="joinTable" type="{unknown}" visibility="protected" line="14">
      <docblock>
        <description/>
        <var description="$joinTable" type="string"/>
      </docblock>
    </member>
    <member name="localKey" type="{unknown}" visibility="protected" line="19">
      <docblock>
        <description/>
        <var description="$localKey" type="string"/>
      </docblock>
    </member>
    <member name="foreignKey" type="{unknown}" visibility="protected" line="24">
      <docblock>
        <description/>
        <var description="$foreignKey" type="string"/>
      </docblock>
    </member>
    <member name="extraFields" type="{unknown}" visibility="protected" line="29">
      <docblock>
        <description/>
        <var description="$extraFields" type="array"/>
      </docblock>
    </member>
    <member name="_compositeExtraFields" type="array" visibility="protected" line="34">
      <docblock>
        <description/>
        <var description="$_compositeExtraFields" type="array"/>
      </docblock>
    </member>
    <constructor name="__construct" start="54" end="71" abstract="false" final="false" static="false" visibility="public">
      <docblock>
        <description compact="Create a new ManyManyList object.">A ManyManyList object represents a list of <link xmlns="http://xml.phpdox.net/src" value="DataObject"/> records
that correspond to a many-many relationship.
Generation of the appropriate record set is left up to the caller, using
the normal <link xmlns="http://xml.phpdox.net/src" value="DataList"/> methods. Addition arguments are used to
support <invalid xmlns="http://xml.phpdox.net/src" annotation="@link" value="add()"/> and <link xmlns="http://xml.phpdox.net/src" value="remove()"/> methods.
</description>
        <param description="The class of the DataObjects that this will list." type="string" variable="$dataClass"/>
        <param description="The name of the table whose entries define the content of this many_many relation." type="string" variable="$joinTable"/>
        <param description="The key in the join table that maps to the dataClass' PK." type="string" variable="$localKey"/>
        <param description="The key in the join table that maps to joined class' PK." type="string" variable="$foreignKey"/>
        <param description="A map of field =&gt; fieldtype of extra fields on the join table." type="string" variable="$extraFields"/>
        <example value="new ManyManyList('Group','Group_Members', 'GroupID', 'MemberID');"/>
      </docblock>
      <parameter name="dataClass" byreference="false" type="{unknown}"/>
      <parameter name="joinTable" byreference="false" type="{unknown}"/>
      <parameter name="localKey" byreference="false" type="{unknown}"/>
      <parameter name="foreignKey" byreference="false" type="{unknown}"/>
      <parameter name="extraFields" byreference="false" type="array"/>
      <inline>
        <comment value="Join to the many-many join table" line="64"/>
        <comment value="Add the extra fields to the query" line="67"/>
      </inline>
    </constructor>
    <method name="appendExtraFieldsToQuery" start="79" end="102" abstract="false" final="false" static="false" visibility="protected">
      <docblock>
        <description compact="Adds the many_many_extraFields to the select of the underlying {@link DataQuery}."/>
        <return type="object">
          <type full="void" namespace="" name="void"/>
        </return>
      </docblock>
      <inline>
        <comment value="append the composite field names to the select" line="88"/>
        <comment value="cache" line="93"/>
      </inline>
    </method>
    <method name="createDataObject" start="110" end="143" abstract="false" final="false" static="false" visibility="protected">
      <docblock>
        <description compact="Create a DataObject from the given SQL row."/>
        <param type="array" variable="$row"/>
        <return type="object">
          <type full="DataObject" namespace="" name="DataObject"/>
        </return>
      </docblock>
      <parameter name="row" byreference="false" type="{unknown}"/>
      <inline>
        <comment value="remove any composed fields" line="111"/>
        <comment value="convert joined extra fields into their composite field" line="116"/>
        <comment value="types." line="117"/>
        <comment value="don't duplicate data in the record" line="124"/>
      </inline>
    </method>
    <method name="foreignIDFilter" start="153" end="164" abstract="false" final="false" static="false" visibility="protected">
      <docblock>
        <description compact="Return a filter expression for when getting the contents of the relationship for some foreign ID"/>
        <param type="int" variable="$id"/>
        <return type="string"/>
      </docblock>
      <parameter name="id" byreference="false" type="{unknown}" default="null"/>
      <inline>
        <comment value="Apply relation filter" line="156"/>
      </inline>
    </method>
    <method name="foreignIDWriteFilter" start="175" end="177" abstract="false" final="false" static="false" visibility="protected">
      <docblock>
        <description compact="Return a filter expression for the join table when writing to the join table">When writing (add, remove, removeByID), we need to filter the join table to just the relevant
entries. However some subclasses of ManyManyList (Member_GroupSet) modify foreignIDFilter to
include additional calculated entries, so we need different filters when reading and when writing</description>
        <return type="string"/>
      </docblock>
      <parameter name="id" byreference="false" type="{unknown}" default="null"/>
    </method>
    <method name="add" start="187" end="261" abstract="false" final="false" static="false" visibility="public">
      <docblock>
        <description compact="Add an item to this many_many relationship. Does so by adding an entry to the joinTable."/>
        <param type="mixed" variable="$item"/>
        <param description="A map of additional columns to insert into the" type="array" variable="$extraFields">joinTable</param>
      </docblock>
      <parameter name="item" byreference="false" type="{unknown}"/>
      <parameter name="extraFields" byreference="false" type="{unknown}" default="null"/>
      <inline>
        <comment value="Validate foreignID" line="202"/>
        <comment value="Insert or update" line="215"/>
      </inline>
    </method>
    <method name="remove" start="271" end="277" abstract="false" final="false" static="false" visibility="public">
      <docblock>
        <description compact="Remove the given item from this list.">Note that for a ManyManyList, the item is never actually deleted, only
the join table is affected.</description>
        <param type="object" variable="$item">
          <type full="DataObject" namespace="" name="DataObject"/>
        </param>
      </docblock>
      <parameter name="item" byreference="false" type="{unknown}"/>
    </method>
    <method name="removeByID" start="287" end="301" abstract="false" final="false" static="false" visibility="public">
      <docblock>
        <description compact="Remove the given item from this list.">Note that for a ManyManyList, the item is never actually deleted, only
the join table is affected</description>
        <param description="The item ID" type="int" variable="$itemID"/>
      </docblock>
      <parameter name="itemID" byreference="false" type="{unknown}"/>
    </method>
    <method name="removeAll" start="309" end="335" abstract="false" final="false" static="false" visibility="public">
      <docblock>
        <description compact="Remove all items from this many-many join.  To remove a subset of items, filter it first."/>
        <return type="object">
          <type full="void" namespace="" name="void"/>
        </return>
      </docblock>
      <inline>
        <comment value="Remove the join to the join table to avoid MySQL row locking issues." line="312"/>
        <comment value="ensure any default sorting is removed, ORDER BY can break DELETE clauses" line="324"/>
        <comment value="Use a sub-query as SQLite does not support setting delete targets in" line="327"/>
        <comment value="joined queries." line="328"/>
      </inline>
    </method>
    <method name="getExtraData" start="346" end="368" abstract="false" final="false" static="false" visibility="public">
      <docblock>
        <description compact="Find the extra field data for a single row of the relationship join table, given the known child ID."/>
        <param description="The name of the component" type="string" variable="$componentName"/>
        <param description="The ID of the child for the relationship" type="int" variable="$itemID"/>
        <return description="Map of fieldName =&gt; fieldValue" type="array"/>
      </docblock>
      <parameter name="componentName" byreference="false" type="{unknown}"/>
      <parameter name="itemID" byreference="false" type="{unknown}"/>
      <inline>
        <todo value="Optimize into a single query instead of one per extra field" line="353"/>
      </inline>
    </method>
    <method name="getJoinTable" start="375" end="377" abstract="false" final="false" static="false" visibility="public">
      <docblock>
        <description compact="Gets the join table used for the relationship."/>
        <return description="the name of the table" type="string"/>
      </docblock>
    </method>
    <method name="getLocalKey" start="384" end="386" abstract="false" final="false" static="false" visibility="public">
      <docblock>
        <description compact="Gets the key used to store the ID of the local/parent object."/>
        <return description="the field name" type="string"/>
      </docblock>
    </method>
    <method name="getForeignKey" start="393" end="395" abstract="false" final="false" static="false" visibility="public">
      <docblock>
        <description compact="Gets the key used to store the ID of the foreign/child object."/>
        <return description="the field name" type="string"/>
      </docblock>
    </method>
    <method name="getExtraFields" start="402" end="404" abstract="false" final="false" static="false" visibility="public">
      <docblock>
        <description compact="Gets the extra fields included in the relationship."/>
        <return description="a map of field names to types" type="array"/>
      </docblock>
    </method>
  </parent>
  <parent full="RelationList" namespace="" name="RelationList">
    <extends full="DataList" namespace="" name="DataList"/>
    <method name="getForeignID" start="13" end="15" abstract="false" final="false" static="false" visibility="public"/>
    <method name="forForeignID" start="23" end="47" abstract="false" final="false" static="false" visibility="public">
      <docblock>
        <description compact="Returns a copy of this list with the ManyMany relationship linked to the given foreign ID."/>
        <param description="An ID or an array of IDs." type="object" variable="$id">
          <type full="int|array" namespace="" name="int|array"/>
        </param>
      </docblock>
      <parameter name="id" byreference="false" type="{unknown}"/>
      <inline>
        <comment value="Turn a 1-element array into a simple value" line="24"/>
        <comment value="Calculate the new filter" line="27"/>
      </inline>
    </method>
    <method name="foreignIDFilter" start="55" end="55" abstract="true" final="false" static="false" visibility="protected">
      <docblock>
        <description compact="Returns a where clause that filters the members of this relationship to just the related items."/>
        <param description="An ID or an array of IDs - if not provided, will use the current ids as per getForeignID" variable="$id" type="object">
          <type full="(optional)" namespace="" name="(optional)"/>
        </param>
      </docblock>
      <parameter name="id" byreference="false" type="{unknown}" default="null"/>
    </method>
  </parent>
  <parent full="DataList" namespace="" name="DataList">
    <extends full="ViewableData" namespace="" name="ViewableData"/>
    <member name="dataClass" type="{unknown}" visibility="protected" line="31">
      <docblock>
        <description compact="The DataObject class name that this data list is querying"/>
        <var type="string"/>
      </docblock>
    </member>
    <member name="dataQuery" type="{unknown}" visibility="protected" line="38">
      <docblock>
        <description compact="The {@link DataQuery} object responsible for getting this DataList's records"/>
        <var type="object">
          <type full="DataQuery" namespace="" name="DataQuery"/>
        </var>
      </docblock>
    </member>
    <member name="model" type="{unknown}" visibility="protected" line="45">
      <docblock>
        <description compact="The DataModel from which this DataList comes."/>
        <var type="object">
          <type full="DataModel" namespace="" name="DataModel"/>
        </var>
      </docblock>
    </member>
    <member name="inAlterDataQueryCall" type="{unknown}" default="false" visibility="protected" line="100">
      <docblock>
        <description/>
        <var description="- Indicates if we are in an alterDataQueryCall already, so alterDataQuery can be re-entrant" type="object">
          <type full="bool" namespace="" name="bool"/>
        </var>
      </docblock>
    </member>
    <constructor name="__construct" start="53" end="58" abstract="false" final="false" static="false" visibility="public">
      <docblock>
        <description compact="Create a new DataList.">No querying is done on construction, but the initial query schema is set up.</description>
        <param description="- The DataObject class to query." type="string" variable="$dataClass"/>
      </docblock>
      <parameter name="dataClass" byreference="false" type="{unknown}"/>
    </constructor>
    <method name="setDataModel" start="65" end="67" abstract="false" final="false" static="false" visibility="public">
      <docblock>
        <description compact="Set the DataModel"/>
        <param type="object" variable="$model">
          <type full="DataModel" namespace="" name="DataModel"/>
        </param>
      </docblock>
      <parameter name="model" byreference="false" type="object">
        <type full="\\DataModel" namespace="\" name="DataModel"/>
      </parameter>
    </method>
    <method name="dataClass" start="74" end="76" abstract="false" final="false" static="false" visibility="public">
      <docblock>
        <description compact="Get the dataClass name for this DataList, ie the DataObject ClassName"/>
        <return type="string"/>
      </docblock>
    </method>
    <method name="__clone" start="81" end="83" abstract="false" final="false" static="false" visibility="public">
      <docblock>
        <description compact="When cloning this object, clone the dataQuery object as well"/>
      </docblock>
    </method>
    <method name="dataQuery" start="93" end="95" abstract="false" final="false" static="false" visibility="public">
      <docblock>
        <description compact="Return a copy of the internal {@link DataQuery} object">Because the returned value is a copy, modifying it won't affect this list's contents. If
you want to alter the data query directly, use the alterDataQuery method</description>
        <return type="object">
          <type full="DataQuery" namespace="" name="DataQuery"/>
        </return>
      </docblock>
    </method>
    <method name="alterDataQuery" start="117" end="142" abstract="false" final="false" static="false" visibility="public">
      <docblock>
        <description compact="Return a new DataList instance with the underlying {@link DataQuery} object altered">If you want to alter the underlying dataQuery for this list, this wrapper method
will ensure that you can do so without mutating the existing List object.

It clones this list, calls the passed callback function with the dataQuery of the new
list as it's first parameter (and the list as it's second), then returns the list

Note that this function is re-entrant - it's safe to call this inside a callback passed to
alterDataQuery</description>
        <param variable="$callback"/>
        <return type="object">
          <type full="DataList" namespace="" name="DataList"/>
        </return>
      </docblock>
      <parameter name="callback" byreference="false" type="{unknown}"/>
    </method>
    <method name="setDataQuery" start="150" end="154" abstract="false" final="false" static="false" visibility="public">
      <docblock>
        <description compact="Return a new DataList instance with the underlying {@link DataQuery} object changed"/>
        <param type="object" variable="$dataQuery">
          <type full="DataQuery" namespace="" name="DataQuery"/>
        </param>
        <return type="object">
          <type full="DataList" namespace="" name="DataList"/>
        </return>
      </docblock>
      <parameter name="dataQuery" byreference="false" type="object">
        <type full="\\DataQuery" namespace="\" name="DataQuery"/>
      </parameter>
    </method>
    <method name="setDataQueryParam" start="156" end="169" abstract="false" final="false" static="false" visibility="public">
      <parameter name="keyOrArray" byreference="false" type="{unknown}"/>
      <parameter name="val" byreference="false" type="{unknown}" default="null"/>
    </method>
    <method name="sql" start="176" end="178" abstract="false" final="false" static="false" visibility="public">
      <docblock>
        <description compact="Returns the SQL query that will be used to get this DataList's records.  Good for debugging. :-)"/>
        <return type="object">
          <type full="SQLQuery" namespace="" name="SQLQuery"/>
        </return>
      </docblock>
    </method>
    <method name="where" start="186" end="190" abstract="false" final="false" static="false" visibility="public">
      <docblock>
        <description compact="Return a new DataList instance with a WHERE clause added to this list's query."/>
        <param description="Escaped SQL statement" type="string" variable="$filter"/>
        <return type="object">
          <type full="DataList" namespace="" name="DataList"/>
        </return>
      </docblock>
      <parameter name="filter" byreference="false" type="{unknown}"/>
    </method>
    <method name="canSortBy" start="198" end="200" abstract="false" final="false" static="false" visibility="public">
      <docblock>
        <description compact="Returns true if this DataList can be sorted by the given field."/>
        <param type="string" variable="$fieldName"/>
        <return type="boolean"/>
      </docblock>
      <parameter name="fieldName" byreference="false" type="{unknown}"/>
    </method>
    <method name="canFilterBy" start="207" end="212" abstract="false" final="false" static="false" visibility="public">
      <docblock>
        <description/>
        <param type="string" variable="$fieldName"/>
        <return type="boolean"/>
      </docblock>
      <parameter name="fieldName" byreference="false" type="{unknown}"/>
    </method>
    <method name="limit" start="221" end="225" abstract="false" final="false" static="false" visibility="public">
      <docblock>
        <description compact="Return a new DataList instance with the records returned in this query restricted by a limit clause."/>
        <param type="int" variable="$limit"/>
        <param type="int" variable="$offset"/>
      </docblock>
      <parameter name="limit" byreference="false" type="{unknown}"/>
      <parameter name="offset" byreference="false" type="integer" default="0"/>
    </method>
    <method name="distinct" start="232" end="236" abstract="false" final="false" static="false" visibility="public">
      <docblock>
        <description compact="Return a new DataList instance with distinct records or not"/>
        <param type="object" variable="$value">
          <type full="bool" namespace="" name="bool"/>
        </param>
      </docblock>
      <parameter name="value" byreference="false" type="{unknown}"/>
    </method>
    <method name="sort" start="252" end="308" abstract="false" final="false" static="false" visibility="public">
      <docblock>
        <description compact="Return a new DataList instance as a copy of this data list with the sort order set."/>
        <see value="SS_List::sort()"/>
        <see value="SQLQuery::orderby"/>
        <example value="$list = $list-&gt;sort('Name'); // default ASC sorting"/>
        <example value="$list = $list-&gt;sort('Name DESC'); // DESC sorting"/>
        <example value="$list = $list-&gt;sort('Name', 'ASC');"/>
        <example value="$list = $list-&gt;sort(array('Name'=&gt;'ASC', 'Age'=&gt;'DESC'));"/>
        <param description="Escaped SQL statement. If passed as array, all keys and values are assumed to be escaped." type="object">
          <type full="String|array" namespace="" name="String|array"/>
        </param>
        <return type="object">
          <type full="DataList" namespace="" name="DataList"/>
        </return>
      </docblock>
    </method>
    <method name="filter" start="327" end="338" abstract="false" final="false" static="false" visibility="public">
      <docblock>
        <description compact="Return a copy of this list which only includes items with these charactaristics"/>
        <see value="SS_List::filter()"/>
        <example value="$list = $list-&gt;filter('Name', 'bob'); // only bob in the list"/>
        <example value="$list = $list-&gt;filter('Name', array('aziz', 'bob'); // aziz and bob in list"/>
        <example value="$list = $list-&gt;filter(array('Name'=&gt;'bob, 'Age'=&gt;21)); // bob with the age 21"/>
        <example value="$list = $list-&gt;filter(array('Name'=&gt;'bob, 'Age'=&gt;array(21, 43))); // bob with the Age 21 or 43"/>
        <example value="$list = $list-&gt;filter(array('Name'=&gt;array('aziz','bob'), 'Age'=&gt;array(21, 43)));">// aziz with the age 21 or 43 and bob with the Age 21 or 43</example>
        <todo value="extract the sql from $customQuery into a SQLGenerator class"/>
        <param description="Key and Value pairs, the array values are automatically sanitised for the DB query" type="object">
          <type full="string|array" namespace="" name="string|array"/>
        </param>
        <return type="object">
          <type full="DataList" namespace="" name="DataList"/>
        </return>
      </docblock>
      <inline>
        <comment value="Validate and process arguments" line="328"/>
      </inline>
    </method>
    <method name="addFilter" start="343" end="355" abstract="false" final="false" static="false" visibility="public">
      <docblock>
        <description compact="Return a new instance of the list with an added filter"/>
      </docblock>
      <parameter name="filterArray" byreference="false" type="{unknown}"/>
    </method>
    <method name="filterAny" start="381" end="417" abstract="false" final="false" static="false" visibility="public">
      <docblock>
        <description compact="Return a copy of this list which contains items matching any of these charactaristics."/>
        <example value="// only bob in the list">$list = $list-&gt;filterAny('Name', 'bob');
         // SQL: WHERE "Name" = 'bob'</example>
        <example value="// azis or bob in the list">$list = $list-&gt;filterAny('Name', array('aziz', 'bob');
         // SQL: WHERE ("Name" IN ('aziz','bob'))</example>
        <example value="// bob or anyone aged 21 in the list">$list = $list-&gt;filterAny(array('Name'=&gt;'bob, 'Age'=&gt;21));
         // SQL: WHERE ("Name" = 'bob' OR "Age" = '21')</example>
        <example value="// bob or anyone aged 21 or 43 in the list">$list = $list-&gt;filterAny(array('Name'=&gt;'bob, 'Age'=&gt;array(21, 43)));
         // SQL: WHERE ("Name" = 'bob' OR ("Age" IN ('21', '43'))</example>
        <example value="// all bobs, phils or anyone aged 21 or 43 in the list">$list = $list-&gt;filterAny(array('Name'=&gt;array('bob','phil'), 'Age'=&gt;array(21, 43)));
         // SQL: WHERE (("Name" IN ('bob', 'phil')) OR ("Age" IN ('21', '43'))</example>
        <todo value="extract the sql from this method into a SQLGenerator class"/>
        <param description="See {@link filter()}" type="object">
          <type full="string|array" namespace="" name="string|array"/>
        </param>
        <return type="object">
          <type full="DataList" namespace="" name="DataList"/>
        </return>
      </docblock>
    </method>
    <method name="filterByCallback" start="428" end="440" abstract="false" final="false" static="false" visibility="public">
      <docblock>
        <description compact="Note that, in the current implementation, the filtered list will be an ArrayList, but this may change in a future implementation."/>
        <see value="SS_Filterable::filterByCallback()"/>
        <example value="$list = $list-&gt;filterByCallback(function($item, $list) { return $item-&gt;Age == 9; })"/>
        <param type="object" variable="$callback">
          <type full="callable" namespace="" name="callable"/>
        </param>
        <return description="(this may change in future implementations)" type="object">
          <type full="ArrayList" namespace="" name="ArrayList"/>
        </return>
      </docblock>
      <parameter name="callback" byreference="false" type="{unknown}"/>
    </method>
    <method name="getRelationName" start="452" end="471" abstract="false" final="false" static="false" visibility="public">
      <docblock>
        <description compact="Translates a {@link Object} relation name to a Database name and apply the relation join to the query.  Throws an InvalidArgumentException if the $field doesn't correspond to a relation."/>
        <throws type="object">
          <type full="InvalidArgumentException" namespace="" name="InvalidArgumentException"/>
        </throws>
        <param type="string" variable="$field"/>
        <return type="string"/>
      </docblock>
      <parameter name="field" byreference="false" type="{unknown}"/>
    </method>
    <method name="exclude" start="516" end="552" abstract="false" final="false" static="false" visibility="public">
      <docblock>
        <description compact="Return a copy of this list which does not contain any items with these charactaristics"/>
        <see value="SS_List::exclude()"/>
        <example value="$list = $list-&gt;exclude('Name', 'bob'); // exclude bob from list"/>
        <example value="$list = $list-&gt;exclude('Name', array('aziz', 'bob'); // exclude aziz and bob from list"/>
        <example value="$list = $list-&gt;exclude(array('Name'=&gt;'bob, 'Age'=&gt;21)); // exclude bob that has Age 21"/>
        <example value="$list = $list-&gt;exclude(array('Name'=&gt;'bob, 'Age'=&gt;array(21, 43))); // exclude bob with Age 21 or 43"/>
        <example value="$list = $list-&gt;exclude(array('Name'=&gt;array('bob','phil'), 'Age'=&gt;array(21, 43)));">// bob age 21 or 43, phil age 21 or 43 would be excluded</example>
        <todo value="extract the sql from this method into a SQLGenerator class"/>
        <param description="Escaped SQL statement. If passed as array, all keys and values are assumed to be escaped." type="object">
          <type full="string|array" namespace="" name="string|array"/>
        </param>
        <return type="object">
          <type full="DataList" namespace="" name="DataList"/>
        </return>
      </docblock>
    </method>
    <method name="subtract" start="563" end="571" abstract="false" final="false" static="false" visibility="public">
      <docblock>
        <description compact="This method returns a copy of this list that does not contain any DataObjects that exists in $list">The $list passed needs to contain the same dataclass as $this</description>
        <param type="object" variable="$list">
          <type full="SS_List" namespace="" name="SS_List"/>
        </param>
        <return type="object">
          <type full="DataList" namespace="" name="DataList"/>
        </return>
        <throws type="object">
          <type full="BadMethodCallException" namespace="" name="BadMethodCallException"/>
        </throws>
      </docblock>
      <parameter name="list" byreference="false" type="object">
        <type full="\\SS_List" namespace="\" name="SS_List"/>
      </parameter>
    </method>
    <method name="innerJoin" start="581" end="585" abstract="false" final="false" static="false" visibility="public">
      <docblock>
        <description compact="Return a new DataList instance with an inner join clause added to this list's query."/>
        <param description="Table name (unquoted and as escaped SQL)" type="string" variable="$table"/>
        <param description="Escaped SQL statement, e.g. '&quot;Table1&quot;.&quot;ID&quot; = &quot;Table2&quot;.&quot;ID&quot;'" type="string" variable="$onClause"/>
        <param description="- if you want this table to be aliased under another name" type="string" variable="$alias"/>
        <return type="object">
          <type full="DataList" namespace="" name="DataList"/>
        </return>
      </docblock>
      <parameter name="table" byreference="false" type="{unknown}"/>
      <parameter name="onClause" byreference="false" type="{unknown}"/>
      <parameter name="alias" byreference="false" type="{unknown}" default="null"/>
    </method>
    <method name="leftJoin" start="595" end="599" abstract="false" final="false" static="false" visibility="public">
      <docblock>
        <description compact="Return a new DataList instance with a left join clause added to this list's query."/>
        <param description="Table name (unquoted and as escaped SQL)" type="string" variable="$table"/>
        <param description="Escaped SQL statement, e.g. '&quot;Table1&quot;.&quot;ID&quot; = &quot;Table2&quot;.&quot;ID&quot;'" type="string" variable="$onClause"/>
        <param description="- if you want this table to be aliased under another name" type="string" variable="$alias"/>
        <return type="object">
          <type full="DataList" namespace="" name="DataList"/>
        </return>
      </docblock>
      <parameter name="table" byreference="false" type="{unknown}"/>
      <parameter name="onClause" byreference="false" type="{unknown}"/>
      <parameter name="alias" byreference="false" type="{unknown}" default="null"/>
    </method>
    <method name="toArray" start="607" end="617" abstract="false" final="false" static="false" visibility="public">
      <docblock>
        <description compact="Return an array of the actual items that this DataList contains at this stage.">This is when the query is actually executed.</description>
        <return type="array"/>
      </docblock>
    </method>
    <method name="toNestedArray" start="624" end="632" abstract="false" final="false" static="false" visibility="public">
      <docblock>
        <description compact="Return this list as an array and every object it as an sub array as well"/>
        <return type="object">
          <type full="type" namespace="" name="type"/>
        </return>
      </docblock>
    </method>
    <method name="each" start="640" end="646" abstract="false" final="false" static="false" visibility="public">
      <docblock>
        <description compact="Walks the list using the specified callback"/>
        <param type="object" variable="$callback">
          <type full="callable" namespace="" name="callable"/>
        </param>
        <return type="object">
          <type full="DataList" namespace="" name="DataList"/>
        </return>
      </docblock>
      <parameter name="callback" byreference="false" type="{unknown}"/>
    </method>
    <method name="debug" start="648" end="656" abstract="false" final="false" static="false" visibility="public"/>
    <method name="map" start="665" end="667" abstract="false" final="false" static="false" visibility="public">
      <docblock>
        <description compact="Returns a map of this list"/>
        <param description="- the 'key' field of the result array" type="string" variable="$keyField"/>
        <param description="- the value field of the result array" type="string" variable="$titleField"/>
        <return type="object">
          <type full="SS_Map" namespace="" name="SS_Map"/>
        </return>
      </docblock>
      <parameter name="keyField" byreference="false" type="string" default="'ID'"/>
      <parameter name="titleField" byreference="false" type="string" default="'Title'"/>
    </method>
    <method name="createDataObject" start="675" end="694" abstract="false" final="false" static="false" visibility="protected">
      <docblock>
        <description compact="Create a DataObject from the given SQL row"/>
        <param type="array" variable="$row"/>
        <return type="object">
          <type full="DataObject" namespace="" name="DataObject"/>
        </return>
      </docblock>
      <parameter name="row" byreference="false" type="{unknown}"/>
      <inline>
        <comment value="Failover from RecordClassName to ClassName" line="678"/>
        <comment value="Instantiate the class mentioned in RecordClassName only if it exists, otherwise default to $this-&gt;dataClass" line="683"/>
        <comment value="set query params on the DataObject to tell the lazy loading mechanism the context the object creation context" line="690"/>
      </inline>
    </method>
    <method name="getIterator" start="702" end="704" abstract="false" final="false" static="false" visibility="public">
      <docblock>
        <description compact="Returns an Iterator for this DataList.">This function allows you to use DataLists in foreach loops</description>
        <return type="object">
          <type full="ArrayIterator" namespace="" name="ArrayIterator"/>
        </return>
      </docblock>
    </method>
    <method name="count" start="711" end="713" abstract="false" final="false" static="false" visibility="public">
      <docblock>
        <description compact="Return the number of items in this DataList"/>
        <return type="int"/>
      </docblock>
    </method>
    <method name="max" start="721" end="723" abstract="false" final="false" static="false" visibility="public">
      <docblock>
        <description compact="Return the maximum value of the given field in this DataList"/>
        <param type="string" variable="$fieldName"/>
        <return type="mixed"/>
      </docblock>
      <parameter name="fieldName" byreference="false" type="{unknown}"/>
    </method>
    <method name="min" start="731" end="733" abstract="false" final="false" static="false" visibility="public">
      <docblock>
        <description compact="Return the minimum value of the given field in this DataList"/>
        <param type="string" variable="$fieldName"/>
        <return type="mixed"/>
      </docblock>
      <parameter name="fieldName" byreference="false" type="{unknown}"/>
    </method>
    <method name="avg" start="741" end="743" abstract="false" final="false" static="false" visibility="public">
      <docblock>
        <description compact="Return the average value of the given field in this DataList"/>
        <param type="string" variable="$fieldName"/>
        <return type="mixed"/>
      </docblock>
      <parameter name="fieldName" byreference="false" type="{unknown}"/>
    </method>
    <method name="sum" start="751" end="753" abstract="false" final="false" static="false" visibility="public">
      <docblock>
        <description compact="Return the sum of the values of the given field in this DataList"/>
        <param type="string" variable="$fieldName"/>
        <return type="mixed"/>
      </docblock>
      <parameter name="fieldName" byreference="false" type="{unknown}"/>
    </method>
    <method name="first" start="761" end="765" abstract="false" final="false" static="false" visibility="public">
      <docblock>
        <description compact="Returns the first item in this DataList"/>
        <return type="object">
          <type full="DataObject" namespace="" name="DataObject"/>
        </return>
      </docblock>
    </method>
    <method name="last" start="772" end="776" abstract="false" final="false" static="false" visibility="public">
      <docblock>
        <description compact="Returns the last item in this DataList">@return DataObject</description>
      </docblock>
    </method>
    <method name="exists" start="783" end="785" abstract="false" final="false" static="false" visibility="public">
      <docblock>
        <description compact="Returns true if this DataList has items"/>
        <return type="object">
          <type full="bool" namespace="" name="bool"/>
        </return>
      </docblock>
    </method>
    <method name="getRange" start="794" end="797" abstract="false" final="false" static="false" visibility="public">
      <docblock>
        <description compact="Get a sub-range of this dataobjectset as an array"/>
        <param type="int" variable="$offset"/>
        <param type="int" variable="$length"/>
        <return type="object">
          <type full="DataList" namespace="" name="DataList"/>
        </return>
      </docblock>
      <parameter name="offset" byreference="false" type="{unknown}"/>
      <parameter name="length" byreference="false" type="{unknown}"/>
    </method>
    <method name="find" start="806" end="815" abstract="false" final="false" static="false" visibility="public">
      <docblock>
        <description compact="Find the first DataObject of this DataList where the given key = value"/>
        <param type="string" variable="$key"/>
        <param type="string" variable="$value"/>
        <return type="object">
          <type full="DataObject|null" namespace="" name="DataObject|null"/>
        </return>
      </docblock>
      <parameter name="key" byreference="false" type="{unknown}"/>
      <parameter name="value" byreference="false" type="{unknown}"/>
    </method>
    <method name="setQueriedColumns" start="823" end="827" abstract="false" final="false" static="false" visibility="public">
      <docblock>
        <description compact="Restrict the columns to fetch into this DataList"/>
        <param type="array" variable="$queriedColumns"/>
        <return type="object">
          <type full="DataList" namespace="" name="DataList"/>
        </return>
      </docblock>
      <parameter name="queriedColumns" byreference="false" type="{unknown}"/>
    </method>
    <method name="byIDs" start="835" end="839" abstract="false" final="false" static="false" visibility="public">
      <docblock>
        <description compact="Filter this list to only contain the given Primary IDs"/>
        <param description="Array of integers, will be automatically cast/escaped." type="array" variable="$ids"/>
        <return type="object">
          <type full="DataList" namespace="" name="DataList"/>
        </return>
      </docblock>
      <parameter name="ids" byreference="false" type="array"/>
      <inline>
        <comment value="sanitize" line="836"/>
      </inline>
    </method>
    <method name="byID" start="847" end="850" abstract="false" final="false" static="false" visibility="public">
      <docblock>
        <description compact="Return the first DataObject with the given ID"/>
        <param type="int" variable="$id"/>
        <return type="object">
          <type full="DataObject" namespace="" name="DataObject"/>
        </return>
      </docblock>
      <parameter name="id" byreference="false" type="{unknown}"/>
    </method>
    <method name="column" start="858" end="860" abstract="false" final="false" static="false" visibility="public">
      <docblock>
        <description compact="Returns an array of a single field value for all items in the list."/>
        <param type="string" variable="$colName"/>
        <return type="array"/>
      </docblock>
      <parameter name="colName" byreference="false" type="string" default="&quot;ID&quot;"/>
    </method>
    <method name="setByIDList" start="870" end="892" abstract="false" final="false" static="false" visibility="public">
      <docblock>
        <description compact="Sets the ComponentSet to be the given ID list.">Records will be added and deleted as appropriate.</description>
        <param description="List of IDs." type="array" variable="$idList"/>
      </docblock>
      <parameter name="idList" byreference="false" type="{unknown}"/>
      <inline>
        <comment value="Index current data" line="873"/>
        <comment value="Keep track of items to delete" line="878"/>
        <comment value="add items in the list" line="881"/>
        <comment value="$id is the database ID of the record" line="882"/>
        <comment value="Remove any items that haven't been mentioned" line="890"/>
      </inline>
    </method>
    <method name="getIDList" start="898" end="901" abstract="false" final="false" static="false" visibility="public">
      <docblock>
        <description compact="Returns an array with both the keys and values set to the IDs of the records in this list."/>
      </docblock>
    </method>
    <method name="relation" start="915" end="918" abstract="false" final="false" static="false" visibility="public">
      <docblock>
        <description compact="Returns a HasManyList or ManyMany list representing the querying of a relation across all objects in this data list.  For it to work, the relation must be defined on the data class that you used to create this DataList.">Example: Get members from all Groups:

    DataList::Create("Group")-&gt;relation("Members")</description>
        <param type="string" variable="$relationName"/>
        <return type="object">
          <type full="HasManyList|ManyManyList" namespace="" name="HasManyList|ManyManyList"/>
        </return>
      </docblock>
      <parameter name="relationName" byreference="false" type="{unknown}"/>
    </method>
    <method name="dbObject" start="920" end="922" abstract="false" final="false" static="false" visibility="public">
      <parameter name="fieldName" byreference="false" type="{unknown}"/>
    </method>
    <method name="addMany" start="930" end="935" abstract="false" final="false" static="false" visibility="public">
      <docblock>
        <description compact="Add a number of items to the component set."/>
        <param description="Items to add, as either DataObjects or IDs." type="array" variable="$items"/>
        <return type="object">
          <type full="DataList" namespace="" name="DataList"/>
        </return>
      </docblock>
      <parameter name="items" byreference="false" type="{unknown}"/>
    </method>
    <method name="removeMany" start="943" end="948" abstract="false" final="false" static="false" visibility="public">
      <docblock>
        <description compact="Remove the items from this list with the given IDs"/>
        <param type="array" variable="$idList"/>
        <return type="object">
          <type full="DataList" namespace="" name="DataList"/>
        </return>
      </docblock>
      <parameter name="idList" byreference="false" type="{unknown}"/>
    </method>
    <method name="removeByFilter" start="956" end="961" abstract="false" final="false" static="false" visibility="public">
      <docblock>
        <description compact="Remove every element in this DataList matching the given $filter."/>
        <param description="- a sql type where filter" type="string" variable="$filter"/>
        <return type="object">
          <type full="DataList" namespace="" name="DataList"/>
        </return>
      </docblock>
      <parameter name="filter" byreference="false" type="{unknown}"/>
    </method>
    <method name="removeAll" start="968" end="973" abstract="false" final="false" static="false" visibility="public">
      <docblock>
        <description compact="Remove every element in this DataList."/>
        <return type="object">
          <type full="DataList" namespace="" name="DataList"/>
        </return>
      </docblock>
    </method>
    <method name="add" start="981" end="984" abstract="false" final="false" static="false" visibility="public">
      <docblock>
        <description compact="This method are overloaded by HasManyList and ManyMany list to perform more sophisticated list manipulation"/>
        <param type="object" variable="$item">
          <type full="type" namespace="" name="type"/>
        </param>
      </docblock>
      <parameter name="item" byreference="false" type="{unknown}"/>
    </method>
    <method name="newObject" start="991" end="994" abstract="false" final="false" static="false" visibility="public">
      <docblock>
        <description compact="Return a new item to add to this DataList."/>
        <todo value="This doesn't factor in filters."/>
      </docblock>
      <parameter name="initialFields" byreference="false" type="{unknown}" default="null"/>
    </method>
    <method name="remove" start="1003" end="1006" abstract="false" final="false" static="false" visibility="public">
      <docblock>
        <description compact="Remove this item by deleting it"/>
        <param type="object" variable="$item">
          <type full="DataClass" namespace="" name="DataClass"/>
        </param>
        <todo value="Allow for amendment of this behaviour - for example, we can remove an item from">an "ActiveItems" DataList by chaning the status to inactive.</todo>
      </docblock>
      <parameter name="item" byreference="false" type="{unknown}"/>
      <inline>
        <comment value="By default, we remove an item from a DataList by deleting it." line="1004"/>
      </inline>
    </method>
    <method name="removeByID" start="1013" end="1019" abstract="false" final="false" static="false" visibility="public">
      <docblock>
        <description compact="Remove an item from this DataList by ID"/>
        <param description="- The primary ID" type="int" variable="$itemID"/>
      </docblock>
      <parameter name="itemID" byreference="false" type="{unknown}"/>
    </method>
    <method name="reverse" start="1026" end="1030" abstract="false" final="false" static="false" visibility="public">
      <docblock>
        <description compact="Reverses a list of items."/>
        <return type="object">
          <type full="DataList" namespace="" name="DataList"/>
        </return>
      </docblock>
    </method>
    <method name="push" start="1037" end="1039" abstract="false" final="false" static="false" visibility="public">
      <docblock>
        <description compact="This method won't function on DataLists due to the specific query that it represent"/>
        <param type="mixed" variable="$item"/>
      </docblock>
      <parameter name="item" byreference="false" type="{unknown}"/>
    </method>
    <method name="insertFirst" start="1046" end="1048" abstract="false" final="false" static="false" visibility="public">
      <docblock>
        <description compact="This method won't function on DataLists due to the specific query that it represent"/>
        <param type="mixed" variable="$item"/>
      </docblock>
      <parameter name="item" byreference="false" type="{unknown}"/>
    </method>
    <method name="shift" start="1054" end="1056" abstract="false" final="false" static="false" visibility="public">
      <docblock>
        <description compact="This method won't function on DataLists due to the specific query that it represent"/>
      </docblock>
    </method>
    <method name="replace" start="1062" end="1064" abstract="false" final="false" static="false" visibility="public">
      <docblock>
        <description compact="This method won't function on DataLists due to the specific query that it represent"/>
      </docblock>
    </method>
    <method name="merge" start="1070" end="1072" abstract="false" final="false" static="false" visibility="public">
      <docblock>
        <description compact="This method won't function on DataLists due to the specific query that it represent"/>
      </docblock>
    </method>
    <method name="removeDuplicates" start="1078" end="1081" abstract="false" final="false" static="false" visibility="public">
      <docblock>
        <description compact="This method won't function on DataLists due to the specific query that it represent"/>
      </docblock>
    </method>
    <method name="offsetExists" start="1089" end="1091" abstract="false" final="false" static="false" visibility="public">
      <docblock>
        <description compact="Returns whether an item with $key exists"/>
        <param type="mixed" variable="$key"/>
        <return type="object">
          <type full="bool" namespace="" name="bool"/>
        </return>
      </docblock>
      <parameter name="key" byreference="false" type="{unknown}"/>
    </method>
    <method name="offsetGet" start="1099" end="1101" abstract="false" final="false" static="false" visibility="public">
      <docblock>
        <description compact="Returns item stored in list with index $key"/>
        <param type="mixed" variable="$key"/>
        <return type="object">
          <type full="DataObject" namespace="" name="DataObject"/>
        </return>
      </docblock>
      <parameter name="key" byreference="false" type="{unknown}"/>
    </method>
    <method name="offsetSet" start="1109" end="1111" abstract="false" final="false" static="false" visibility="public">
      <docblock>
        <description compact="Set an item with the key in $key"/>
        <param type="mixed" variable="$key"/>
        <param type="mixed" variable="$value"/>
      </docblock>
      <parameter name="key" byreference="false" type="{unknown}"/>
      <parameter name="value" byreference="false" type="{unknown}"/>
    </method>
    <method name="offsetUnset" start="1118" end="1120" abstract="false" final="false" static="false" visibility="public">
      <docblock>
        <description compact="Unset an item with the key in $key"/>
        <param type="mixed" variable="$key"/>
      </docblock>
      <parameter name="key" byreference="false" type="{unknown}"/>
    </method>
  </parent>
  <parent full="ViewableData" namespace="" name="ViewableData">
    <extends full="Object" namespace="" name="Object"/>
    <member name="failover" type="{unknown}" visibility="protected" line="51">
      <docblock>
        <description compact="A failover object to attempt to get data from if it is not present on this object."/>
        <var type="object">
          <type full="ViewableData" namespace="" name="ViewableData"/>
        </var>
      </docblock>
    </member>
    <member name="customisedObject" type="{unknown}" visibility="protected" line="56">
      <docblock>
        <description/>
        <var type="object">
          <type full="ViewableData" namespace="" name="ViewableData"/>
        </var>
      </docblock>
    </member>
    <method name="castingObjectCreator" start="72" end="74" abstract="false" final="false" static="true" visibility="public">
      <docblock>
        <description compact="Converts a field spec into an object creator. For example: &quot;Int&quot; becomes &quot;new Int($fieldName);&quot; and &quot;Varchar(50)&quot; becomes &quot;new Varchar($fieldName, 50);&quot;."/>
        <param description="The field spec" type="string" variable="$fieldSchema"/>
        <return type="string"/>
      </docblock>
      <parameter name="fieldSchema" byreference="false" type="{unknown}"/>
    </method>
    <method name="castingObjectCreatorPair" start="83" end="85" abstract="false" final="false" static="true" visibility="public">
      <docblock>
        <description compact="Convert a field schema (e.g. &quot;Varchar(50)&quot;) into a casting object creator array that contains both a className and castingHelper constructor code. See {@link castingObjectCreator} for more information about the constructor."/>
        <param type="string" variable="$fieldSchema"/>
        <return type="array"/>
      </docblock>
      <parameter name="fieldSchema" byreference="false" type="{unknown}"/>
    </method>
    <method name="__isset" start="95" end="97" abstract="false" final="false" static="false" visibility="public">
      <docblock>
        <description compact="Check if a field exists on this object or its failover."/>
        <param type="string" variable="$property"/>
        <return type="object">
          <type full="bool" namespace="" name="bool"/>
        </return>
      </docblock>
      <parameter name="property" byreference="false" type="{unknown}"/>
    </method>
    <method name="__get" start="106" end="114" abstract="false" final="false" static="false" visibility="public">
      <docblock>
        <description compact="Get the value of a property/field on this object. This will check if a method called get{$property} exists, then check if a field is available using {@link ViewableData::getField()}, then fall back on a failover object."/>
        <param type="string" variable="$property"/>
        <return type="mixed"/>
      </docblock>
      <parameter name="property" byreference="false" type="{unknown}"/>
    </method>
    <method name="__set" start="123" end="129" abstract="false" final="false" static="false" visibility="public">
      <docblock>
        <description compact="Set a property/field on this object. This will check for the existence of a method called set{$property}, then use the {@link ViewableData::setField()} method."/>
        <param type="string" variable="$property"/>
        <param type="mixed" variable="$value"/>
      </docblock>
      <parameter name="property" byreference="false" type="{unknown}"/>
      <parameter name="value" byreference="false" type="{unknown}"/>
    </method>
    <method name="hasField" start="137" end="139" abstract="false" final="false" static="false" visibility="public">
      <docblock>
        <description compact="Check if a field exists on this object. This should be overloaded in child classes."/>
        <param type="string" variable="$field"/>
        <return type="object">
          <type full="bool" namespace="" name="bool"/>
        </return>
      </docblock>
      <parameter name="field" byreference="false" type="{unknown}"/>
    </method>
    <method name="getField" start="147" end="149" abstract="false" final="false" static="false" visibility="public">
      <docblock>
        <description compact="Get the value of a field on this object. This should be overloaded in child classes."/>
        <param type="string" variable="$field"/>
        <return type="mixed"/>
      </docblock>
      <parameter name="field" byreference="false" type="{unknown}"/>
    </method>
    <method name="setField" start="157" end="159" abstract="false" final="false" static="false" visibility="public">
      <docblock>
        <description compact="Set a field on this object. This should be overloaded in child classes."/>
        <param type="string" variable="$field"/>
        <param type="mixed" variable="$value"/>
      </docblock>
      <parameter name="field" byreference="false" type="{unknown}"/>
      <parameter name="value" byreference="false" type="{unknown}"/>
    </method>
    <method name="defineMethods" start="167" end="186" abstract="false" final="false" static="false" visibility="public">
      <docblock>
        <description compact="Add methods from the {@link ViewableData::$failover} object, as well as wrapping any methods prefixed with an underscore into a {@link ViewableData::cachedCall()}."/>
      </docblock>
    </method>
    <method name="customise" start="197" end="209" abstract="false" final="false" static="false" visibility="public">
      <docblock>
        <description compact="Merge some arbitrary data in with this object. This method returns a {@link ViewableData_Customised} instance with references to both this and the new custom data.">Note that any fields you specify will take precedence over the fields on this object.</description>
        <param type="object" variable="$data">
          <type full="array|ViewableData" namespace="" name="array|ViewableData"/>
        </param>
        <return type="object">
          <type full="ViewableData_Customised" namespace="" name="ViewableData_Customised"/>
        </return>
      </docblock>
      <parameter name="data" byreference="false" type="{unknown}"/>
    </method>
    <method name="setCustomisedObj" start="214" end="216" abstract="false" final="false" static="false" visibility="public">
      <docblock>
        <description/>
        <param type="object" variable="$object">
          <type full="ViewableData" namespace="" name="ViewableData"/>
        </param>
      </docblock>
      <parameter name="object" byreference="false" type="object">
        <type full="\\ViewableData" namespace="\" name="ViewableData"/>
      </parameter>
    </method>
    <method name="castingHelperPair" start="231" end="234" abstract="false" final="false" static="false" visibility="public">
      <docblock>
        <description compact="Get the class a field on this object would be casted to, as well as the casting helper for casting a field to an object (see {@link ViewableData::castingHelper()} for information on casting helpers).">The returned array contains two keys:
 - className: the class the field would be casted to (e.g. "Varchar")
 - castingHelper: the casting helper for casting the field (e.g. "return new Varchar($fieldName)")</description>
        <param type="string" variable="$field"/>
        <return type="array"/>
      </docblock>
      <parameter name="field" byreference="false" type="{unknown}"/>
    </method>
    <method name="castingHelper" start="243" end="252" abstract="false" final="false" static="false" visibility="public">
      <docblock>
        <description compact="Return the &quot;casting helper&quot; (a piece of PHP code that when evaluated creates a casted value object) for a field on this object."/>
        <param type="string" variable="$field"/>
        <return type="string"/>
      </docblock>
      <parameter name="field" byreference="false" type="{unknown}"/>
    </method>
    <method name="castingClass" start="260" end="267" abstract="false" final="false" static="false" visibility="public">
      <docblock>
        <description compact="Get the class name a field on this object will be casted to"/>
        <param type="string" variable="$field"/>
        <return type="string"/>
      </docblock>
      <parameter name="field" byreference="false" type="{unknown}"/>
    </method>
    <method name="escapeTypeForField" start="275" end="279" abstract="false" final="false" static="false" visibility="public">
      <docblock>
        <description compact="Return the string-format type for the given field."/>
        <param type="string" variable="$field"/>
        <return description="'xml'|'raw'" type="string"/>
      </docblock>
      <parameter name="field" byreference="false" type="{unknown}"/>
    </method>
    <method name="buildCastingCache" start="286" end="308" abstract="false" final="false" static="false" visibility="public">
      <docblock>
        <description compact="Save the casting cache for this object (including data from any failovers) into a variable"/>
        <param type="object" variable="$cache">
          <type full="reference" namespace="" name="reference"/>
        </param>
      </docblock>
      <parameter name="cache" byreference="true" type="{unknown}"/>
    </method>
    <method name="renderWith" start="323" end="340" abstract="false" final="false" static="false" visibility="public">
      <docblock>
        <description compact="Render this object into the template, and get the result as a string. You can pass one of the following as the $template parameter:  - a template name (e.g. Page)  - an array of possible template names - the first valid one will be used  - an SSViewer instance"/>
        <param description="the template to render into" type="object" variable="$template">
          <type full="string|array|SSViewer" namespace="" name="string|array|SSViewer"/>
        </param>
        <param description="fields to customise() the object with before rendering" type="array" variable="$customFields"/>
        <return type="object">
          <type full="HTMLText" namespace="" name="HTMLText"/>
        </return>
      </docblock>
      <parameter name="template" byreference="false" type="{unknown}"/>
      <parameter name="customFields" byreference="false" type="{unknown}" default="null"/>
    </method>
    <method name="obj" start="352" end="390" abstract="false" final="false" static="false" visibility="public">
      <docblock>
        <description compact="Get the value of a field on this object, automatically inserting the value into any available casting objects that have been specified."/>
        <param type="string" variable="$fieldName"/>
        <param type="array" variable="$arguments"/>
        <param description="if TRUE, the value will ALWAYS be casted to an object before being returned," type="object" variable="$forceReturnedObject">even if there is no explicit casting information<type full="bool" namespace="" name="bool"/></param>
        <param description="a custom cache name" type="string" variable="$cacheName"/>
      </docblock>
      <parameter name="fieldName" byreference="false" type="{unknown}"/>
      <parameter name="arguments" byreference="false" type="{unknown}" default="null"/>
      <parameter name="forceReturnedObject" byreference="false" type="{unknown}" default="true"/>
      <parameter name="cache" byreference="false" type="{unknown}" default="false"/>
      <parameter name="cacheName" byreference="false" type="{unknown}" default="null"/>
      <inline>
        <comment value="HACK: Don't call the deprecated FormField::Name() method" line="356"/>
      </inline>
    </method>
    <method name="cachedCall" start="400" end="402" abstract="false" final="false" static="false" visibility="public">
      <docblock>
        <description compact="A simple wrapper around {@link ViewableData::obj()} that automatically caches the result so it can be used again without re-running the method."/>
        <param type="string" variable="$field"/>
        <param type="array" variable="$arguments"/>
        <param description="an optional custom cache identifier" type="string" variable="$identifier"/>
      </docblock>
      <parameter name="field" byreference="false" type="{unknown}"/>
      <parameter name="arguments" byreference="false" type="{unknown}" default="null"/>
      <parameter name="identifier" byreference="false" type="{unknown}" default="null"/>
    </method>
    <method name="hasValue" start="413" end="422" abstract="false" final="false" static="false" visibility="public">
      <docblock>
        <description compact="Checks if a given method/field has a valid value. If the result is an object, this will return the result of the exists method, otherwise will check if the result is not just an empty paragraph tag."/>
        <param type="string" variable="$field"/>
        <param type="array" variable="$arguments"/>
        <param type="object" variable="$cache">
          <type full="bool" namespace="" name="bool"/>
        </param>
        <return type="object">
          <type full="bool" namespace="" name="bool"/>
        </return>
      </docblock>
      <parameter name="field" byreference="false" type="{unknown}"/>
      <parameter name="arguments" byreference="false" type="{unknown}" default="null"/>
      <parameter name="cache" byreference="false" type="{unknown}" default="true"/>
    </method>
    <method name="XML_val" start="435" end="438" abstract="false" final="false" static="false" visibility="public">
      <docblock>
        <description compact="Get the string value of a field on this object that has been suitable escaped to be inserted directly into a template."/>
      </docblock>
      <parameter name="field" byreference="false" type="{unknown}"/>
      <parameter name="arguments" byreference="false" type="{unknown}" default="null"/>
      <parameter name="cache" byreference="false" type="{unknown}" default="false"/>
    </method>
    <method name="RAW_val" start="443" end="445" abstract="false" final="false" static="false" visibility="public">
      <docblock>
        <description compact="Return the value of the field without any escaping being applied."/>
      </docblock>
      <parameter name="field" byreference="false" type="{unknown}"/>
      <parameter name="arguments" byreference="false" type="{unknown}" default="null"/>
      <parameter name="cache" byreference="false" type="{unknown}" default="true"/>
    </method>
    <method name="SQL_val" start="450" end="452" abstract="false" final="false" static="false" visibility="public">
      <docblock>
        <description compact="Return the value of a field in an SQL-safe format."/>
      </docblock>
      <parameter name="field" byreference="false" type="{unknown}"/>
      <parameter name="arguments" byreference="false" type="{unknown}" default="null"/>
      <parameter name="cache" byreference="false" type="{unknown}" default="true"/>
    </method>
    <method name="JS_val" start="457" end="459" abstract="false" final="false" static="false" visibility="public">
      <docblock>
        <description compact="Return the value of a field in a JavaScript-save format."/>
      </docblock>
      <parameter name="field" byreference="false" type="{unknown}"/>
      <parameter name="arguments" byreference="false" type="{unknown}" default="null"/>
      <parameter name="cache" byreference="false" type="{unknown}" default="true"/>
    </method>
    <method name="ATT_val" start="464" end="466" abstract="false" final="false" static="false" visibility="public">
      <docblock>
        <description compact="Return the value of a field escaped suitable to be inserted into an XML node attribute."/>
      </docblock>
      <parameter name="field" byreference="false" type="{unknown}"/>
      <parameter name="arguments" byreference="false" type="{unknown}" default="null"/>
      <parameter name="cache" byreference="false" type="{unknown}" default="true"/>
    </method>
    <method name="getXMLValues" start="476" end="484" abstract="false" final="false" static="false" visibility="public">
      <docblock>
        <description compact="Get an array of XML-escaped values by field name"/>
        <param description="an array of field names" type="array" variable="$elements"/>
        <return type="array"/>
      </docblock>
      <parameter name="fields" byreference="false" type="{unknown}"/>
    </method>
    <method name="getIterator" start="496" end="498" abstract="false" final="false" static="false" visibility="public">
      <docblock>
        <description compact="Return a single-item iterator so you can iterate over the fields of a single record.">This is useful so you can use a single record inside a &lt;% control %&gt; block in a template - and then use
to access individual fields on this object.</description>
        <return type="object">
          <type full="ArrayIterator" namespace="" name="ArrayIterator"/>
        </return>
      </docblock>
    </method>
    <method name="Me" start="508" end="510" abstract="false" final="false" static="false" visibility="public">
      <docblock>
        <description compact="When rendering some objects it is necessary to iterate over the object being rendered, to do this, you need access to itself."/>
        <return type="object">
          <type full="ViewableData" namespace="" name="ViewableData"/>
        </return>
      </docblock>
    </method>
    <method name="ThemeDir" start="524" end="533" abstract="false" final="false" static="false" visibility="public">
      <docblock>
        <description compact="Return the directory if the current active theme (relative to the site root).">This method is useful for things such as accessing theme images from your template without hardcoding the theme
page - e.g. &lt;img src="$ThemeDir/images/something.gif"&gt;.

This method should only be used when a theme is currently active. However, it will fall over to the current
project directory.</description>
        <param description="the subtheme path to get" type="string" variable="$subtheme"/>
        <return type="string"/>
      </docblock>
      <parameter name="subtheme" byreference="false" type="{unknown}" default="false"/>
    </method>
    <method name="CSSClasses" start="545" end="561" abstract="false" final="false" static="false" visibility="public">
      <docblock>
        <description compact="Get part of the current classes ancestry to be used as a CSS class.">This method returns an escaped string of CSS classes representing the current classes ancestry until it hits a
stop point - e.g. "Page DataObject ViewableData".</description>
        <param description="the class to stop at (default: ViewableData)" type="string" variable="$stopAtClass"/>
        <return type="string"/>
        <uses value="ClassInfo"/>
      </docblock>
      <parameter name="stopAtClass" byreference="false" type="string" default="'ViewableData'"/>
      <inline>
        <comment value="optionally add template identifier" line="555"/>
      </inline>
    </method>
    <method name="Debug" start="568" end="570" abstract="false" final="false" static="false" visibility="public">
      <docblock>
        <description compact="Return debug information about this object that can be rendered into a template"/>
        <return type="object">
          <type full="ViewableData_Debugger" namespace="" name="ViewableData_Debugger"/>
        </return>
      </docblock>
    </method>
  </parent>
  <parent full="Object" namespace="" name="Object">
    <member name="class" type="{unknown}" visibility="public" line="54">
      <docblock>
        <description/>
        <var description="the class name" type="string"/>
      </docblock>
    </member>
    <member name="extension_instances" type="array" visibility="protected" line="67">
      <docblock>
        <description/>
        <var description="all current extension instances." type="array"/>
      </docblock>
    </member>
    <member name="beforeExtendCallbacks" type="array" visibility="protected" line="75">
      <docblock>
        <description compact="List of callbacks to call prior to extensions having extend called on them, each grouped by methodName."/>
        <var type="object">
          <type full="array[callable]" namespace="" name="array[callable]"/>
        </var>
      </docblock>
    </member>
    <member name="afterExtendCallbacks" type="array" visibility="protected" line="98">
      <docblock>
        <description compact="List of callbacks to call after extensions having extend called on them, each grouped by methodName."/>
        <var type="object">
          <type full="array[callable]" namespace="" name="array[callable]"/>
        </var>
      </docblock>
    </member>
    <method name="config" start="60" end="62" abstract="false" final="false" static="true" visibility="public">
      <docblock>
        <description compact="Get a configuration accessor for this class. Short hand for Config::inst()-&gt;get($this-&gt;class, .....)."/>
        <return type="object">
          <type full="Config_ForClass|null" namespace="" name="Config_ForClass|null"/>
        </return>
      </docblock>
    </method>
    <method name="beforeExtending" start="85" end="90" abstract="false" final="false" static="false" visibility="protected">
      <docblock>
        <description compact="Allows user code to hook into Object::extend prior to control being delegated to extensions. Each callback will be reset once called."/>
        <param description="The name of the method to hook into" type="string" variable="$method"/>
        <param description="The callback to execute" type="object" variable="$callback">
          <type full="callable" namespace="" name="callable"/>
        </param>
      </docblock>
      <parameter name="method" byreference="false" type="{unknown}"/>
      <parameter name="callback" byreference="false" type="{unknown}"/>
    </method>
    <method name="afterExtending" start="108" end="113" abstract="false" final="false" static="false" visibility="protected">
      <docblock>
        <description compact="Allows user code to hook into Object::extend after control being delegated to extensions. Each callback will be reset once called."/>
        <param description="The name of the method to hook into" type="string" variable="$method"/>
        <param description="The callback to execute" type="object" variable="$callback">
          <type full="callable" namespace="" name="callable"/>
        </param>
      </docblock>
      <parameter name="method" byreference="false" type="{unknown}"/>
      <parameter name="callback" byreference="false" type="{unknown}"/>
    </method>
    <method name="create" start="132" end="143" abstract="false" final="false" static="true" visibility="public">
      <docblock>
        <description compact="An implementation of the factory method, allows you to create an instance of a class">This method first for strong class overloads (singletons &amp; DB interaction), then custom class overloads. If an
overload is found, an instance of this is returned rather than the original class. To overload a class, use
{@link Object::useCustomClass()}

This can be called in one of two ways - either calling via the class directly,
or calling on Object and passing the class name as the first parameter. The following
are equivalent:
   $list = DataList::create('SiteTree');
  $list = SiteTree::get();</description>
        <param description="the class name" type="string" variable="$class"/>
        <param description="... arguments to pass to the constructor" type="mixed" variable="$arguments"/>
        <return type="object">
          <type full="static" namespace="" name="static"/>
        </return>
      </docblock>
      <inline>
        <comment value="Class to create should be the calling class if not Object," line="135"/>
        <comment value="otherwise the first parameter" line="136"/>
      </inline>
    </method>
    <method name="create_from_string" start="169" end="188" abstract="false" final="false" static="true" visibility="public">
      <docblock>
        <description compact="Create an object from a string representation.  It treats it as a PHP constructor without the 'new' keyword.  It also manages to construct the object without the use of eval().">Construction itself is done with Object::create(), so that Object::useCustomClass() calls
are respected.

`Object::create_from_string("Versioned('Stage','Live')")` will return the result of
`Versioned::create('Stage', 'Live);`

It is designed for simple, clonable objects.  The first time this method is called for a given
string it is cached, and clones of that object are returned.

If you pass the $firstArg argument, this will be prepended to the constructor arguments. It's
impossible to pass null as the firstArg argument.

`Object::create_from_string("Varchar(50)", "MyField")` will return the result of
`Vachar::create('MyField', '50');`

Arguments are always strings, although this is a quirk of the current implementation rather
than something that can be relied upon.</description>
      </docblock>
      <parameter name="classSpec" byreference="false" type="{unknown}"/>
      <parameter name="firstArg" byreference="false" type="{unknown}" default="null"/>
      <inline>
        <comment value="an $extension value can contain parameters as a string," line="171"/>
        <comment value="e.g. &quot;Versioned('Stage','Live')&quot;" line="172"/>
      </inline>
    </method>
    <method name="parse_class_spec" start="194" end="274" abstract="false" final="false" static="true" visibility="public">
      <docblock>
        <description compact="Parses a class-spec, such as &quot;Versioned('Stage','Live')&quot;, as passed to create_from_string().">Returns a 2-elemnent array, with classname and arguments</description>
      </docblock>
      <parameter name="classSpec" byreference="false" type="{unknown}"/>
      <inline>
        <comment value="Keep track of the current bucket that we're putting data into" line="200"/>
        <comment value="Get the class naem" line="207"/>
      </inline>
    </method>
    <method name="strong_create" start="284" end="293" abstract="false" final="false" static="true" visibility="public">
      <docblock>
        <description compact="Similar to {@link Object::create()}, except that classes are only overloaded if you set the $strong parameter to TRUE when using {@link Object::useCustomClass()}"/>
        <param description="the class name" type="string" variable="$class"/>
        <param description="... arguments to pass to the constructor" type="mixed" variable="$arguments"/>
        <return type="object">
          <type full="static" namespace="" name="static"/>
        </return>
      </docblock>
    </method>
    <method name="useCustomClass" start="304" end="310" abstract="false" final="false" static="true" visibility="public">
      <docblock>
        <description compact="This class allows you to overload classes with other classes when they are constructed using the factory method {@link Object::create()}"/>
        <param description="the class to replace" type="string" variable="$oldClass"/>
        <param description="the class to replace it with" type="string" variable="$newClass"/>
        <param description="allows you to enforce a certain class replacement under all circumstances. This is used in" type="object" variable="$strong">singletons and DB interaction classes<type full="bool" namespace="" name="bool"/></param>
      </docblock>
      <parameter name="oldClass" byreference="false" type="{unknown}"/>
      <parameter name="newClass" byreference="false" type="{unknown}"/>
      <parameter name="strong" byreference="false" type="{unknown}" default="false"/>
    </method>
    <method name="getCustomClass" start="318" end="326" abstract="false" final="false" static="true" visibility="public">
      <docblock>
        <description compact="If a class has been overloaded, get the class name it has been overloaded with - otherwise return the class name"/>
        <param description="the class to check" type="string" variable="$class"/>
        <return description="the class that would be created if you called {@link Object::create()} with the class" type="string"/>
      </docblock>
      <parameter name="class" byreference="false" type="{unknown}"/>
    </method>
    <method name="static_lookup" start="339" end="374" abstract="false" final="false" static="true" visibility="public">
      <docblock>
        <description compact="Get the value of a static property of a class, even in that property is declared protected (but not private), without any inheritance, merging or parent lookup if it doesn't exist on the given class."/>
        <static/>
        <param description="The class to get the static from" variable="$class" type="object">
          <type full="-" namespace="" name="-"/>
        </param>
        <param description="The property to get from the class" variable="$name" type="object">
          <type full="-" namespace="" name="-"/>
        </param>
        <param description="- The value to return if property doesn't exist on class" type="object" variable="$default">
          <type full="null" namespace="" name="null"/>
        </param>
        <return description="- The value of the static property $name on class $class, or $default if that property is not" type="object">defined<type full="any" namespace="" name="any"/></return>
      </docblock>
      <parameter name="class" byreference="false" type="{unknown}"/>
      <parameter name="name" byreference="false" type="{unknown}"/>
      <parameter name="default" byreference="false" type="{unknown}" default="null"/>
    </method>
    <method name="get_static" start="391" end="394" abstract="false" final="false" static="true" visibility="public">
      <docblock>
        <description compact="Get a static variable, taking into account SS's inbuild static caches and pseudo-statics">This method first checks for any extra values added by <link xmlns="http://xml.phpdox.net/src" value="Object::add_static_var()"/>, and attemps to traverse
up the extra static var chain until it reaches the top, or it reaches a replacement static.
If any extra values are discovered, they are then merged with the default PHP static values, or in some cases
completely replace the default PHP static when you set $replace = true, and do not define extra data on any
child classes
</description>
        <param type="string" variable="$class"/>
        <param description="the property name" type="string" variable="$name"/>
        <param description="if set to TRUE, force a regeneration of the static cache" type="object" variable="$uncached">
          <type full="bool" namespace="" name="bool"/>
        </param>
        <return type="mixed"/>
      </docblock>
      <parameter name="class" byreference="false" type="{unknown}"/>
      <parameter name="name" byreference="false" type="{unknown}"/>
      <parameter name="uncached" byreference="false" type="{unknown}" default="false"/>
    </method>
    <method name="set_static" start="403" end="406" abstract="false" final="false" static="true" visibility="public">
      <docblock>
        <description compact="Set a static variable"/>
        <param type="string" variable="$class"/>
        <param description="the property name to set" type="string" variable="$name"/>
        <param type="mixed" variable="$value"/>
      </docblock>
      <parameter name="class" byreference="false" type="{unknown}"/>
      <parameter name="name" byreference="false" type="{unknown}"/>
      <parameter name="value" byreference="false" type="{unknown}"/>
    </method>
    <method name="uninherited_static" start="415" end="418" abstract="false" final="false" static="true" visibility="public">
      <docblock>
        <description compact="Get an uninherited static variable - a variable that is explicity set in this class, and not in the parent class."/>
        <param type="string" variable="$class"/>
        <param type="string" variable="$name"/>
        <return type="mixed"/>
      </docblock>
      <parameter name="class" byreference="false" type="{unknown}"/>
      <parameter name="name" byreference="false" type="{unknown}"/>
      <parameter name="uncached" byreference="false" type="{unknown}" default="false"/>
    </method>
    <method name="combined_static" start="430" end="435" abstract="false" final="false" static="true" visibility="public">
      <docblock>
        <description compact="Traverse down a class ancestry and attempt to merge all the uninherited static values for a particular static into a single variable"/>
        <param type="string" variable="$class"/>
        <param description="the static name" type="string" variable="$name"/>
        <param description="an optional parent class name to begin merging statics down from, rather than traversing" type="string" variable="$ceiling">the entire hierarchy</param>
        <return type="mixed"/>
      </docblock>
      <parameter name="class" byreference="false" type="{unknown}"/>
      <parameter name="name" byreference="false" type="{unknown}"/>
      <parameter name="ceiling" byreference="false" type="{unknown}" default="false"/>
    </method>
    <method name="addStaticVars" start="444" end="447" abstract="false" final="false" static="true" visibility="public">
      <docblock>
        <description compact="Merge in a set of additional static variables"/>
        <param type="string" variable="$class"/>
        <param description="in a [property name] =&gt; [value] format" type="array" variable="$properties"/>
        <param description="replace existing static vars" type="object" variable="$replace">
          <type full="bool" namespace="" name="bool"/>
        </param>
      </docblock>
      <parameter name="class" byreference="false" type="{unknown}"/>
      <parameter name="properties" byreference="false" type="{unknown}"/>
      <parameter name="replace" byreference="false" type="{unknown}" default="false"/>
    </method>
    <method name="add_static_var" start="465" end="470" abstract="false" final="false" static="true" visibility="public">
      <docblock>
        <description compact="Add a static variable without replacing it completely if possible, but merging in with both existing PHP statics and existing psuedo-statics. Uses PHP's array_merge_recursive() with if the $replace argument is FALSE.">Documentation from http://php.net/array_merge_recursive:
If the input arrays have the same string keys, then the values for these keys are merged together
into an array, and this is done recursively, so that if one of the values is an array itself,
the function will merge it with a corresponding entry in another array too.
If, however, the arrays have the same numeric key, the later value will not overwrite the original value,
but will be appended.</description>
        <param type="string" variable="$class"/>
        <param description="the static name" type="string" variable="$name"/>
        <param type="mixed" variable="$value"/>
        <param description="completely replace existing static values" type="object" variable="$replace">
          <type full="bool" namespace="" name="bool"/>
        </param>
      </docblock>
      <parameter name="class" byreference="false" type="{unknown}"/>
      <parameter name="name" byreference="false" type="{unknown}"/>
      <parameter name="value" byreference="false" type="{unknown}"/>
      <parameter name="replace" byreference="false" type="{unknown}" default="false"/>
    </method>
    <method name="has_extension" start="481" end="503" abstract="false" final="false" static="true" visibility="public">
      <docblock>
        <description compact="Return TRUE if a class has a specified extension.">This supports backwards-compatible format (static Object::has_extension($requiredExtension))
and new format ($object-&gt;has_extension($class, $requiredExtension))</description>
        <param description="if 1 argument supplied, the class name of the extension to" type="string" variable="$classOrExtension">check for; if 2 supplied, the class name to test</param>
        <param description="used only if 2 arguments supplied" type="string" variable="$requiredExtension"/>
        <param description="if the extension has to match the required extension and not be a subclass" type="boolean" variable="$strict"/>
      </docblock>
      <parameter name="classOrExtension" byreference="false" type="{unknown}"/>
      <parameter name="requiredExtension" byreference="false" type="{unknown}" default="null"/>
      <parameter name="strict" byreference="false" type="{unknown}" default="false"/>
      <inline>
        <comment value="BC support" line="482"/>
      </inline>
    </method>
    <method name="add_extension" start="523" end="565" abstract="false" final="false" static="true" visibility="public">
      <docblock>
        <description compact="Add an extension to a specific class.">The preferred method for adding extensions is through YAML config,
since it avoids autoloading the class, and is easier to override in
more specific configurations.
As an alternative, extensions can be added to a specific class
directly in the <link xmlns="http://xml.phpdox.net/src" value="Object::$extensions"/> array.
See <link xmlns="http://xml.phpdox.net/src" value="SiteTree::$extensions"/> for examples.
Keep in mind that the extension will only be applied to new
instances, not existing ones (including all instances created through <link xmlns="http://xml.phpdox.net/src" value="singleton()"/>).
</description>
        <see value="http://doc.silverstripe.org/framework/en/trunk/reference/dataextension"/>
        <param description="Class that should be extended - has to be a subclass of {@link Object}" type="string" variable="$class"/>
        <param description="Subclass of {@link Extension} with optional parameters" type="string" variable="$extension">as a string, e.g. "Versioned" or "Translatable('Param')"</param>
      </docblock>
      <parameter name="classOrExtension" byreference="false" type="{unknown}"/>
      <parameter name="extension" byreference="false" type="{unknown}" default="null"/>
      <inline>
        <comment value="unset some caches" line="545"/>
        <comment value="load statics now for DataObject classes" line="559"/>
      </inline>
    </method>
    <method name="remove_extension" start="584" end="614" abstract="false" final="false" static="true" visibility="public">
      <docblock>
        <description compact="Remove an extension from a class.">Keep in mind that this won't revert any datamodel additions
of the extension at runtime, unless its used before the
schema building kicks in (in your _config.php).
Doesn't remove the extension from any <link xmlns="http://xml.phpdox.net/src" value="Object"/>instances which are already created, but will have an
effect on new extensions.
Clears any previously created singletons through <link xmlns="http://xml.phpdox.net/src" value="singleton()"/>to avoid side-effects from stale extension information.
</description>
        <todo value="Add support for removing extensions with parameters"/>
        <param description="Classname of an {@link Extension} subclass, without parameters" type="string" variable="$extension"/>
      </docblock>
      <parameter name="extension" byreference="false" type="{unknown}"/>
      <inline>
        <comment value="remove any instances of the extension with parameters" line="589"/>
        <comment value="extensions with parameters will be stored in config as" line="594"/>
        <comment value="ExtensionName(&quot;Param&quot;)." line="595"/>
        <comment value="unset singletons to avoid side-effects" line="604"/>
        <comment value="unset some caches" line="607"/>
      </inline>
    </method>
    <method name="get_extensions" start="623" end="635" abstract="false" final="false" static="true" visibility="public">
      <docblock>
        <description/>
        <param type="string" variable="$class"/>
        <param description="Include the argument string in the return array," type="object" variable="$includeArgumentString">FALSE would return array("Versioned"), TRUE returns array("Versioned('Stage','Live')").<type full="bool" namespace="" name="bool"/></param>
        <return description="Numeric array of either {@link DataExtension} classnames," type="array">or eval'ed classname strings with constructor arguments.</return>
      </docblock>
      <parameter name="class" byreference="false" type="{unknown}"/>
      <parameter name="includeArgumentString" byreference="false" type="{unknown}" default="false"/>
    </method>
    <method name="get_extra_config_sources" start="641" end="678" abstract="false" final="false" static="true" visibility="public">
      <parameter name="class" byreference="false" type="{unknown}" default="null"/>
      <inline>
        <comment value="If this class is unextendable, NOP" line="644"/>
        <comment value="Get a list of extensions" line="650"/>
        <comment value="Build a list of all sources;" line="654"/>
      </inline>
    </method>
    <constructor name="__construct" start="680" end="699" abstract="false" final="false" static="false" visibility="public"/>
    <method name="__call" start="711" end="765" abstract="false" final="false" static="false" visibility="public">
      <docblock>
        <description compact="Attemps to locate and call a method dynamically added to a class at runtime if a default cannot be located">You can add extra methods to a class using <link xmlns="http://xml.phpdox.net/src" value="Extensions"/>, <link xmlns="http://xml.phpdox.net/src" value="Object::createMethod()"/> or
<link xmlns="http://xml.phpdox.net/src" value="Object::addWrapperMethod()"/></description>
        <param type="string" variable="$method"/>
        <param type="array" variable="$arguments"/>
        <return type="mixed"/>
      </docblock>
      <parameter name="method" byreference="false" type="{unknown}"/>
      <parameter name="arguments" byreference="false" type="{unknown}"/>
      <inline>
        <comment value="If the method cache was cleared by an an Object::add_extension() / Object::remove_extension()" line="712"/>
        <comment value="call, then we should rebuild it." line="713"/>
      </inline>
    </method>
    <method name="hasMethod" start="778" end="780" abstract="false" final="false" static="false" visibility="public">
      <docblock>
        <description compact="Return TRUE if a method exists on this object">This should be used rather than PHP's inbuild method_exists() as it takes into account methods added via
extensions</description>
        <param type="string" variable="$method"/>
        <return type="object">
          <type full="bool" namespace="" name="bool"/>
        </return>
      </docblock>
      <parameter name="method" byreference="false" type="{unknown}"/>
    </method>
    <method name="allMethodNames" start="788" end="798" abstract="false" final="false" static="false" visibility="public">
      <docblock>
        <description compact="Return the names of all the methods available on this object"/>
        <param description="include methods added dynamically at runtime" type="object" variable="$custom">
          <type full="bool" namespace="" name="bool"/>
        </param>
        <return type="array"/>
      </docblock>
      <parameter name="custom" byreference="false" type="{unknown}" default="false"/>
    </method>
    <method name="defineMethods" start="807" end="821" abstract="false" final="false" static="false" visibility="protected">
      <docblock>
        <description compact="Adds any methods from {@link Extension} instances attached to this object.">All these methods can then be called directly on the instance (transparently
mapped through <link xmlns="http://xml.phpdox.net/src" value="__call()"/>), or called explicitly through <link xmlns="http://xml.phpdox.net/src" value="extend()"/>.
</description>
        <uses value="addMethodsFrom()"/>
      </docblock>
    </method>
    <method name="addMethodsFrom" start="829" end="864" abstract="false" final="false" static="false" visibility="protected">
      <docblock>
        <description compact="Add all the methods from an object property (which is an {@link Extension}) to this object."/>
        <param description="the property name" type="string" variable="$property"/>
        <param description="an index to use if the property is an array" type="object" variable="$index">
          <type full="string|int" namespace="" name="string|int"/>
        </param>
      </docblock>
      <parameter name="property" byreference="false" type="{unknown}"/>
      <parameter name="index" byreference="false" type="{unknown}" default="null"/>
    </method>
    <method name="addWrapperMethod" start="873" end="878" abstract="false" final="false" static="false" visibility="protected">
      <docblock>
        <description compact="Add a wrapper method - a method which points to another method with a different name. For example, Thumbnail(x) can be wrapped to generateThumbnail(x)"/>
        <param description="the method name to wrap" type="string" variable="$method"/>
        <param description="the method name to wrap to" type="string" variable="$wrap"/>
      </docblock>
      <parameter name="method" byreference="false" type="{unknown}"/>
      <parameter name="wrap" byreference="false" type="{unknown}"/>
    </method>
    <method name="createMethod" start="888" end="892" abstract="false" final="false" static="false" visibility="protected">
      <docblock>
        <description compact="Add an extra method using raw PHP code passed as a string"/>
        <param description="the method name" type="string" variable="$method"/>
        <param description="the PHP code - arguments will be in an array called $args, while you can access this object" type="string" variable="$code">by using $obj. Note that you cannot call protected methods, as the method is actually an external
       function</param>
      </docblock>
      <parameter name="method" byreference="false" type="{unknown}"/>
      <parameter name="code" byreference="false" type="{unknown}"/>
    </method>
    <method name="stat" start="899" end="901" abstract="false" final="false" static="false" visibility="public">
      <docblock>
        <description/>
        <see value="Object::get_static()"/>
      </docblock>
      <parameter name="name" byreference="false" type="{unknown}"/>
      <parameter name="uncached" byreference="false" type="{unknown}" default="false"/>
    </method>
    <method name="set_stat" start="906" end="908" abstract="false" final="false" static="false" visibility="public">
      <docblock>
        <description/>
        <see value="Object::set_static()"/>
      </docblock>
      <parameter name="name" byreference="false" type="{unknown}"/>
      <parameter name="value" byreference="false" type="{unknown}"/>
    </method>
    <method name="uninherited" start="913" end="915" abstract="false" final="false" static="false" visibility="public">
      <docblock>
        <description/>
        <see value="Object::uninherited_static()"/>
      </docblock>
      <parameter name="name" byreference="false" type="{unknown}"/>
    </method>
    <method name="exists" start="927" end="929" abstract="false" final="false" static="false" visibility="public">
      <docblock>
        <description compact="Return true if this object &quot;exists&quot; i.e. has a sensible value">This method should be overriden in subclasses to provide more context about the classes state. For example, a
{@link DataObject} class could return false when it is deleted from the database</description>
        <return type="object">
          <type full="bool" namespace="" name="bool"/>
        </return>
      </docblock>
    </method>
    <method name="parentClass" start="934" end="936" abstract="false" final="false" static="false" visibility="public">
      <docblock>
        <description/>
        <return description="this classes parent class" type="string"/>
      </docblock>
    </method>
    <method name="is_a" start="944" end="946" abstract="false" final="false" static="false" visibility="public">
      <docblock>
        <description compact="Check if this class is an instance of a specific class, or has that class as one of its parents"/>
        <param type="string" variable="$class"/>
        <return type="object">
          <type full="bool" namespace="" name="bool"/>
        </return>
      </docblock>
      <parameter name="class" byreference="false" type="{unknown}"/>
    </method>
    <method name="__toString" start="951" end="953" abstract="false" final="false" static="false" visibility="public">
      <docblock>
        <description/>
        <return description="the class name" type="string"/>
      </docblock>
    </method>
    <method name="invokeWithExtensions" start="966" end="971" abstract="false" final="false" static="false" visibility="public">
      <docblock>
        <description compact="Calls a method if available on both this object and all applied {@link Extensions}, and then attempts to merge all results into an array"/>
        <param description="the method name to call" type="string" variable="$method"/>
        <param description="a single argument to pass" type="mixed" variable="$argument"/>
        <return type="mixed"/>
        <todo value="integrate inheritance rules"/>
      </docblock>
      <parameter name="method" byreference="false" type="{unknown}"/>
      <parameter name="argument" byreference="false" type="{unknown}" default="null"/>
    </method>
    <method name="extend" start="988" end="1017" abstract="false" final="false" static="false" visibility="public">
      <docblock>
        <description compact="Run the given function on all of this object's extensions. Note that this method originally returned void, so if you wanted to return results, you're hosed">Currently returns an array, with an index resulting every time the function is called. Only adds returns if
they're not NULL, to avoid bogus results from methods just defined on the parent extension. This is important for
permission-checks through extend, as they use min() to determine if any of the returns is FALSE. As min() doesn't
do type checking, an included NULL return would fail the permission checks.
The extension methods are defined during <link xmlns="http://xml.phpdox.net/src" value="__construct()"/> in <link xmlns="http://xml.phpdox.net/src" value="defineMethods()"/>.
</description>
        <param description="the name of the method to call on each extension" type="string" variable="$method"/>
        <param description="... up to 7 arguments to be passed to the method" type="mixed" variable="$a1"/>
        <return type="array"/>
      </docblock>
      <parameter name="method" byreference="false" type="{unknown}"/>
      <parameter name="a1" byreference="true" type="{unknown}" default="null"/>
      <parameter name="a2" byreference="true" type="{unknown}" default="null"/>
      <parameter name="a3" byreference="true" type="{unknown}" default="null"/>
      <parameter name="a4" byreference="true" type="{unknown}" default="null"/>
      <parameter name="a5" byreference="true" type="{unknown}" default="null"/>
      <parameter name="a6" byreference="true" type="{unknown}" default="null"/>
      <parameter name="a7" byreference="true" type="{unknown}" default="null"/>
    </method>
    <method name="getExtensionInstance" start="1027" end="1029" abstract="false" final="false" static="false" visibility="public">
      <docblock>
        <description compact="Get an extension instance attached to this object by name."/>
        <uses value="hasExtension()"/>
        <param type="string" variable="$extension"/>
        <return type="object">
          <type full="Extension" namespace="" name="Extension"/>
        </return>
      </docblock>
      <parameter name="extension" byreference="false" type="{unknown}"/>
    </method>
    <method name="hasExtension" start="1045" end="1047" abstract="false" final="false" static="false" visibility="public">
      <docblock>
        <description compact="Returns TRUE if this object instance has a specific extension applied in {@link $extension_instances}. Extension instances are initialized at constructor time, meaning if you use {@link add_extension()} afterwards, the added extension will just be added to new instances of the extended class. Use the static method {@link has_extension()} to check if a class (not an instance) has a specific extension.">Caution: Don't use singleton(&lt;class&gt;)-&gt;hasExtension() as it will
give you inconsistent results based on when the singleton was first
accessed.</description>
        <param description="Classname of an {@link Extension} subclass without parameters" type="string" variable="$extension"/>
        <return type="object">
          <type full="bool" namespace="" name="bool"/>
        </return>
      </docblock>
      <parameter name="extension" byreference="false" type="{unknown}"/>
    </method>
    <method name="getExtensionInstances" start="1056" end="1058" abstract="false" final="false" static="false" visibility="public">
      <docblock>
        <description compact="Get all extension instances for this specific object instance.">See <link xmlns="http://xml.phpdox.net/src" value="get_extensions()"/> to get all applied extension classes
for this class (not the instance).
</description>
        <return description="Map of {@link DataExtension} instances, keyed by classname." type="array"/>
      </docblock>
    </method>
    <method name="cacheToFile" start="1072" end="1092" abstract="false" final="false" static="false" visibility="public">
      <docblock>
        <description compact="Cache the results of an instance method in this object to a file, or if it is already cache return the cached results"/>
        <param description="the method name to cache" type="string" variable="$method"/>
        <param description="the cache lifetime in seconds" type="int" variable="$lifetime"/>
        <param description="custom cache ID to use" type="string" variable="$ID"/>
        <param description="an optional array of arguments" type="array" variable="$arguments"/>
        <return description="the cached data" type="mixed"/>
      </docblock>
      <parameter name="method" byreference="false" type="{unknown}"/>
      <parameter name="lifetime" byreference="false" type="integer" default="3600"/>
      <parameter name="ID" byreference="false" type="{unknown}" default="false"/>
      <parameter name="arguments" byreference="false" type="array"/>
    </method>
    <method name="clearCache" start="1097" end="1105" abstract="false" final="false" static="false" visibility="public">
      <docblock>
        <description compact="Clears the cache for the given cacheToFile call"/>
      </docblock>
      <parameter name="method" byreference="false" type="{unknown}"/>
      <parameter name="ID" byreference="false" type="{unknown}" default="false"/>
      <parameter name="arguments" byreference="false" type="array"/>
    </method>
    <method name="loadCache" start="1114" end="1122" abstract="false" final="false" static="false" visibility="protected">
      <docblock>
        <description compact="Loads a cache from the filesystem if a valid on is present and within the specified lifetime"/>
        <param description="the cache name" type="string" variable="$cache"/>
        <param description="the lifetime (in seconds) of the cache before it is invalid" type="int" variable="$lifetime"/>
        <return type="mixed"/>
      </docblock>
      <parameter name="cache" byreference="false" type="{unknown}"/>
      <parameter name="lifetime" byreference="false" type="integer" default="3600"/>
    </method>
    <method name="saveCache" start="1130" end="1132" abstract="false" final="false" static="false" visibility="protected">
      <docblock>
        <description compact="Save a piece of cached data to the file system"/>
        <param description="the cache name" type="string" variable="$cache"/>
        <param description="data to save (must be serializable)" type="mixed" variable="$data"/>
      </docblock>
      <parameter name="cache" byreference="false" type="{unknown}"/>
      <parameter name="data" byreference="false" type="{unknown}"/>
    </method>
    <method name="sanitiseCachename" start="1140" end="1142" abstract="false" final="false" static="false" visibility="protected">
      <docblock>
        <description compact="Strip a file name of special characters so it is suitable for use as a cache file name"/>
        <param type="string" variable="$name"/>
        <return description="the name with all special cahracters replaced with underscores" type="string"/>
      </docblock>
      <parameter name="name" byreference="false" type="{unknown}"/>
    </method>
  </parent>
  <interface full="IteratorAggregate" namespace="" name="IteratorAggregate">
    <extends full="Traversable" namespace="" name="Traversable"/>
    <method name="getIterator" abstract="false" static="false" visibility="public" final="false">
    <docblock>
      <description compact="Retrieve an external iterator"/>
      <return type="Traversable"/>
    </docblock>
  </method>
  </interface>
  <interface full="SS_List" namespace="" name="SS_List">
    <extends full="ArrayAccess" namespace="" name="ArrayAccess"/>
    <extends full="Countable" namespace="" name="Countable"/>
    <extends full="IteratorAggregate" namespace="" name="IteratorAggregate"/>
    <method name="toArray" start="15" end="15" abstract="false" final="false" static="false" visibility="public">
      <docblock>
        <description compact="Returns all the items in the list in an array."/>
        <return type="object">
          <type full="arary" namespace="" name="arary"/>
        </return>
      </docblock>
    </method>
    <method name="toNestedArray" start="22" end="22" abstract="false" final="false" static="false" visibility="public">
      <docblock>
        <description compact="Returns the contents of the list as an array of maps."/>
        <return type="array"/>
      </docblock>
    </method>
    <method name="add" start="30" end="30" abstract="false" final="false" static="false" visibility="public">
      <docblock>
        <description compact="Adds an item to the list, making no guarantees about where it will appear."/>
        <param type="mixed" variable="$item"/>
      </docblock>
      <parameter name="item" byreference="false" type="{unknown}"/>
    </method>
    <method name="remove" start="37" end="37" abstract="false" final="false" static="false" visibility="public">
      <docblock>
        <description compact="Removes an item from the list."/>
        <param type="mixed" variable="$item"/>
      </docblock>
      <parameter name="item" byreference="false" type="{unknown}"/>
    </method>
    <method name="first" start="44" end="44" abstract="false" final="false" static="false" visibility="public">
      <docblock>
        <description compact="Returns the first item in the list."/>
        <return type="mixed"/>
      </docblock>
    </method>
    <method name="last" start="51" end="51" abstract="false" final="false" static="false" visibility="public">
      <docblock>
        <description compact="Returns the last item in the list."/>
        <return type="mixed"/>
      </docblock>
    </method>
    <method name="map" start="61" end="61" abstract="false" final="false" static="false" visibility="public">
      <docblock>
        <description compact="Returns a map of a key field to a value field of all the items in the list."/>
        <param type="string" variable="$keyfield"/>
        <param type="string" variable="$titlefield"/>
        <return type="array"/>
      </docblock>
      <parameter name="keyfield" byreference="false" type="string" default="'ID'"/>
      <parameter name="titlefield" byreference="false" type="string" default="'Title'"/>
    </method>
    <method name="find" start="71" end="71" abstract="false" final="false" static="false" visibility="public">
      <docblock>
        <description compact="Returns the first item in the list where the key field is equal to the value."/>
        <param type="string" variable="$key"/>
        <param type="mixed" variable="$value"/>
        <return type="mixed"/>
      </docblock>
      <parameter name="key" byreference="false" type="{unknown}"/>
      <parameter name="value" byreference="false" type="{unknown}"/>
    </method>
    <method name="column" start="79" end="79" abstract="false" final="false" static="false" visibility="public">
      <docblock>
        <description compact="Returns an array of a single field value for all items in the list."/>
        <param type="string" variable="$colName"/>
        <return type="array"/>
      </docblock>
      <parameter name="colName" byreference="false" type="string" default="&quot;ID&quot;"/>
    </method>
    <method name="each" start="87" end="87" abstract="false" final="false" static="false" visibility="public">
      <docblock>
        <description compact="Walks the list using the specified callback"/>
        <param type="object" variable="$callback">
          <type full="callable" namespace="" name="callable"/>
        </param>
        <return type="mixed"/>
      </docblock>
      <parameter name="callback" byreference="false" type="{unknown}"/>
    </method>
  </interface>
  <interface full="SS_Filterable" namespace="" name="SS_Filterable">
    <method name="canFilterBy" start="21" end="21" abstract="false" final="false" static="false" visibility="public">
      <docblock>
        <description compact="Returns TRUE if the list can be filtered by a given field expression."/>
        <param type="string" variable="$by"/>
        <return type="object">
          <type full="bool" namespace="" name="bool"/>
        </return>
      </docblock>
      <parameter name="by" byreference="false" type="{unknown}"/>
    </method>
    <method name="filter" start="34" end="34" abstract="false" final="false" static="false" visibility="public">
      <docblock>
        <description compact="Return a new instance of this list that only includes items with these charactaristics"/>
        <return type="object">
          <type full="SS_Filterable" namespace="" name="SS_Filterable"/>
        </return>
        <example value="$list = $list-&gt;filter('Name', 'bob'); // only bob in the list"/>
        <example value="$list = $list-&gt;filter('Name', array('aziz', 'bob'); // aziz and bob in list"/>
        <example value="$list = $list-&gt;filter(array('Name'=&gt;'bob, 'Age'=&gt;21)); // bob with the age 21"/>
        <example value="$list = $list-&gt;filter(array('Name'=&gt;'bob, 'Age'=&gt;array(21, 43))); // bob with the Age 21 or 43"/>
        <example value="$list = $list-&gt;filter(array('Name'=&gt;array('aziz','bob'), 'Age'=&gt;array(21, 43)));">// aziz with the age 21 or 43 and bob with the Age 21 or 43</example>
      </docblock>
    </method>
    <method name="exclude" start="47" end="47" abstract="false" final="false" static="false" visibility="public">
      <docblock>
        <description compact="Return a new instance of this list that excludes any items with these charactaristics"/>
        <return type="object">
          <type full="SS_Filterable" namespace="" name="SS_Filterable"/>
        </return>
        <example value="$list = $list-&gt;exclude('Name', 'bob'); // exclude bob from list"/>
        <example value="$list = $list-&gt;exclude('Name', array('aziz', 'bob'); // exclude aziz and bob from list"/>
        <example value="$list = $list-&gt;exclude(array('Name'=&gt;'bob, 'Age'=&gt;21)); // exclude bob that has Age 21"/>
        <example value="$list = $list-&gt;exclude(array('Name'=&gt;'bob, 'Age'=&gt;array(21, 43))); // exclude bob with Age 21 or 43"/>
        <example value="$list = $list-&gt;exclude(array('Name'=&gt;array('bob','phil'), 'Age'=&gt;array(21, 43)));">// bob age 21 or 43, phil age 21 or 43 would be excluded</example>
      </docblock>
    </method>
    <method name="filterByCallback" start="57" end="57" abstract="false" final="false" static="false" visibility="public">
      <docblock>
        <description compact="Return a new instance of this list that excludes any items with these charactaristics Filter this List by a callback function. The function will be passed each record of the List in turn, and must return true for the record to be included. Returns the filtered list."/>
        <example value="$list = $list-&gt;filterByCallback(function($item, $list) { return $item-&gt;Age == 9; })"/>
        <return type="object">
          <type full="SS_Filterable" namespace="" name="SS_Filterable"/>
        </return>
      </docblock>
      <parameter name="callback" byreference="false" type="{unknown}"/>
    </method>
  </interface>
  <interface full="SS_Sortable" namespace="" name="SS_Sortable">
    <method name="canSortBy" start="21" end="21" abstract="false" final="false" static="false" visibility="public">
      <docblock>
        <description compact="Returns TRUE if the list can be sorted by a field."/>
        <param type="string" variable="$by"/>
        <return type="object">
          <type full="bool" namespace="" name="bool"/>
        </return>
      </docblock>
      <parameter name="by" byreference="false" type="{unknown}"/>
    </method>
    <method name="sort" start="33" end="33" abstract="false" final="false" static="false" visibility="public">
      <docblock>
        <description compact="Return a new instance of this list that is sorted by one or more fields. You can either pass in a single field name and direction, or a map of field names to sort directions."/>
        <return type="object">
          <type full="SS_Sortable" namespace="" name="SS_Sortable"/>
        </return>
        <example value="$list = $list-&gt;sort('Name'); // default ASC sorting"/>
        <example value="$list = $list-&gt;sort('Name DESC'); // DESC sorting"/>
        <example value="$list = $list-&gt;sort('Name', 'ASC');"/>
        <example value="$list = $list-&gt;sort(array('Name'=&gt;'ASC,'Age'=&gt;'DESC'));"/>
      </docblock>
    </method>
    <method name="reverse" start="42" end="42" abstract="false" final="false" static="false" visibility="public">
      <docblock>
        <description compact="Return a new instance of this list based on reversing the current sort."/>
        <return type="object">
          <type full="SS_Sortable" namespace="" name="SS_Sortable"/>
        </return>
        <example value="$list = $list-&gt;reverse();"/>
      </docblock>
    </method>
  </interface>
  <interface full="SS_Limitable" namespace="" name="SS_Limitable">
    <method name="limit" start="22" end="22" abstract="false" final="false" static="false" visibility="public">
      <docblock>
        <description compact="Returns a new instance of this list where no more than $limit records are included.">If $offset is specified, then that many records at the beginning of the list will be skipped.
This matches the behaviour of the SQL LIMIT clause.</description>
        <return type="object">
          <type full="SS_Limitable" namespace="" name="SS_Limitable"/>
        </return>
      </docblock>
      <parameter name="limit" byreference="false" type="{unknown}"/>
      <parameter name="offset" byreference="false" type="integer" default="0"/>
    </method>
  </interface>
</class>
