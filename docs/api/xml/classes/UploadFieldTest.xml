<?xml version="1.0" encoding="UTF-8"?>
<class xmlns="http://xml.phpdox.net/src" full="UploadFieldTest" namespace="" name="UploadFieldTest" abstract="false" final="false" start="7" end="900">
  <file path="/var/www/_modules/ecommerce_test/trunk/docs/en/phpdox/../../../framework/tests/forms/uploadfield" file="UploadFieldTest.php" realpath="/var/www/_modules/ecommerce_test/trunk/framework/tests/forms/uploadfield/UploadFieldTest.php" size="40022" time="2015-03-14T10:41:09+13:00" unixtime="1426282869" sha1="21d01828e2a553607c2cc9c21b6859f977963901" relative="framework/tests/forms/uploadfield/UploadFieldTest.php"/>
  <docblock>
    <description/>
    <package value="framework"/>
    <subpackage value="tests"/>
  </docblock>
  <extends full="FunctionalTest" namespace="" name="FunctionalTest"/>
  <member name="fixture_file" type="string" default="'UploadFieldTest.yml'" visibility="protected" line="9"/>
  <member name="extraDataObjects" type="array" visibility="protected" line="11"/>
  <member name="requiredExtensions" type="array" visibility="protected" line="13"/>
  <method name="testUploadNoRelation" start="20" end="31" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="Test that files can be uploaded against an object with no relation"/>
    </docblock>
  </method>
  <method name="testUploadHasOneRelation" start="36" end="62" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="Test that an object can be uploaded against an object with a has_one relation"/>
    </docblock>
    <inline>
      <comment value="Unset existing has_one relation before re-uploading" line="39"/>
      <comment value="Firstly, ensure the file can be uploaded" line="44"/>
      <comment value="Secondly, ensure that simply uploading an object does not save the file against the relation" line="52"/>
      <comment value="Thirdly, test submitting the form with the encoded data" line="56"/>
    </inline>
  </method>
  <method name="testUploadHasOneRelationWithExtendedFile" start="67" end="93" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="Tests that has_one relations work with subclasses of File"/>
    </docblock>
    <inline>
      <comment value="Unset existing has_one relation before re-uploading" line="70"/>
      <comment value="Test that the file can be safely uploaded" line="75"/>
      <comment value="Test that the record isn't written to automatically" line="83"/>
      <comment value="Test that saving the form writes the record" line="87"/>
    </inline>
  </method>
  <method name="testUploadHasManyRelation" start="99" end="122" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="Test that has_many relations work with files"/>
    </docblock>
    <inline>
      <comment value="Test that uploaded files can be posted to a has_many relation" line="104"/>
      <comment value="Test that the record isn't written to automatically" line="112"/>
      <comment value="Existing two files should be retained" line="114"/>
      <comment value="Test that saving the form writes the record" line="116"/>
    </inline>
  </method>
  <method name="testUploadManyManyRelation" start="127" end="154" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="Test that many_many relationships work with files"/>
    </docblock>
    <inline>
      <comment value="Test that uploaded files can be posted to a many_many relation" line="133"/>
      <comment value="Test that the record isn't written to automatically" line="141"/>
      <comment value="Existing file count should be retained" line="143"/>
      <comment value="Test that saving the form writes the record" line="146"/>
      <comment value="New record should appear here now" line="152"/>
    </inline>
  </method>
  <method name="testAllowedExtensions" start="161" end="181" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="Partially covered by {@link UploadTest-&gt;testUploadAcceptsAllowedExtension()}, but this test additionally verifies that those constraints are actually enforced in this controller method."/>
    </docblock>
  </method>
  <method name="testAllowedMaxFileNumberWithHasOne" start="186" end="216" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="Test that has_one relations do not support multiple files"/>
    </docblock>
    <inline>
      <comment value="Get references for each file to upload" line="189"/>
      <comment value="Test each of the three cases - has one with no max filel limit, has one with a limit of" line="194"/>
      <comment value="one, has one with a limit of more than one (makes no sense, but should test it anyway)." line="195"/>
      <comment value="Each of them should public function in the same way - attaching the first file should work, the" line="196"/>
      <comment value="second should cause an error." line="197"/>
      <comment value="Unset existing has_one relation before re-uploading" line="200"/>
      <comment value="Post form with two files for this field, should result in an error" line="205"/>
      <comment value="Strictly, a has_one should not allow two files, but this is overridden" line="209"/>
      <comment value="by the setAllowedMaxFileNumber(2) call" line="210"/>
      <comment value="Assert that the form fails if the maximum number of files is exceeded" line="213"/>
    </inline>
  </method>
  <method name="testAllowedMaxFileNumberWithHasMany" start="221" end="246" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="Test that max number of items on has_many is validated"/>
    </docblock>
    <inline>
      <comment value="The 'HasManyFilesMaxTwo' field has a maximum of two files able to be attached to it." line="224"/>
      <comment value="We want to add files to it until we attempt to add the third. We expect that the first" line="225"/>
      <comment value="two should work and the third will fail." line="226"/>
      <comment value="Get references for each file to upload" line="230"/>
      <comment value="Write the first element, should be okay." line="235"/>
      <comment value="Write the second element, should be okay." line="239"/>
      <comment value="Write the third element, should result in error." line="243"/>
    </inline>
  </method>
  <method name="testRemoveFromHasOne" start="251" end="268" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="Test that files can be removed from has_one relations"/>
    </docblock>
    <inline>
      <comment value="Check record exists" line="255"/>
      <comment value="Remove from record" line="258"/>
      <comment value="Check file is removed" line="262"/>
      <comment value="Check file object itself exists" line="266"/>
    </inline>
  </method>
  <method name="testRemoveFromHasMany" start="273" end="291" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="Test that items can be removed from has_many"/>
    </docblock>
    <inline>
      <comment value="Check record has two files attached" line="278"/>
      <comment value="Remove file 2" line="281"/>
      <comment value="check only file 3 is left" line="285"/>
      <comment value="Check file 2 object itself exists" line="289"/>
    </inline>
  </method>
  <method name="testRemoveFromManyMany" start="296" end="316" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="Test that items can be removed from many_many"/>
    </docblock>
    <inline>
      <comment value="Check that both files are currently set" line="301"/>
      <comment value="Remove file 4" line="305"/>
      <comment value="check only file 5 is left" line="309"/>
      <comment value="check file 4 object exists" line="314"/>
    </inline>
  </method>
  <method name="testDeleteFromHasOne" start="321" end="343" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="Test that files can be deleted from has_one and the filesystem"/>
    </docblock>
    <inline>
      <comment value="Check that file initially exists" line="327"/>
      <comment value="Delete physical file and update record" line="331"/>
      <comment value="Check that file is not set against record" line="337"/>
      <comment value="Check that the physical file is deleted" line="341"/>
    </inline>
  </method>
  <method name="testDeleteFromHasMany" start="348" end="372" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="Test that files can be deleted from has_many and the filesystem"/>
    </docblock>
    <inline>
      <comment value="Check that files initially exists" line="355"/>
      <comment value="Delete physical file and update record without file 2" line="360"/>
      <comment value="Test that file is removed from record" line="366"/>
      <comment value="Test that physical file is removed" line="370"/>
    </inline>
  </method>
  <method name="testDeleteFromManyMany" start="377" end="414" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="Test that files can be deleted from many_many and the filesystem"/>
    </docblock>
    <inline>
      <comment value="Test that files initially exist" line="385"/>
      <comment value="Delete physical file and update record without file 4" line="394"/>
      <comment value="Check file is removed from record" line="398"/>
      <comment value="Check physical file is removed from filesystem" line="403"/>
      <comment value="Test record-based permissions" line="406"/>
      <comment value="Test that folders can't be deleted" line="410"/>
    </inline>
  </method>
  <method name="testView" start="419" end="442" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="Test control output html"/>
    </docblock>
  </method>
  <method name="testEdit" start="444" end="475" abstract="false" final="false" static="false" visibility="public">
    <inline>
      <comment value="Test record-based permissions" line="462"/>
      <comment value="Test folder permissions" line="469"/>
    </inline>
  </method>
  <method name="testGetRecord" start="477" end="494" abstract="false" final="false" static="false" visibility="public"/>
  <method name="testSetItems" start="496" end="521" abstract="false" final="false" static="false" visibility="public">
    <inline>
      <comment value="Field with no record attached" line="503"/>
      <comment value="Anonymous field" line="508"/>
      <comment value="Field with has_one auto-detected" line="514"/>
    </inline>
  </method>
  <method name="testGetItems" start="523" end="549" abstract="false" final="false" static="false" visibility="public">
    <inline>
      <comment value="Anonymous field" line="526"/>
      <comment value="Field with has_one auto-detected" line="531"/>
      <comment value="Field with has_many auto-detected" line="536"/>
      <comment value="Field with many_many auto-detected" line="541"/>
    </inline>
  </method>
  <method name="testReadonly" start="551" end="569" abstract="false" final="false" static="false" visibility="public"/>
  <method name="testDisabled" start="571" end="587" abstract="false" final="false" static="false" visibility="public"/>
  <method name="testCanUpload" start="589" end="601" abstract="false" final="false" static="false" visibility="public"/>
  <method name="testCanUploadWithPermissionCode" start="603" end="619" abstract="false" final="false" static="false" visibility="public"/>
  <method name="testCanAttachExisting" start="621" end="641" abstract="false" final="false" static="false" visibility="public">
    <inline>
      <comment value="Test requests to select files have the correct given permission" line="636"/>
    </inline>
  </method>
  <method name="testSelect" start="643" end="661" abstract="false" final="false" static="false" visibility="public">
    <inline>
      <comment value="A bit too much coupling with GridField, but a full template overload would make things too complex" line="655"/>
    </inline>
  </method>
  <method name="testFileExists" start="666" end="724" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="Tests that UploadField::fileexist works"/>
    </docblock>
    <inline>
      <comment value="Check that fileexist works on subfolders" line="669"/>
      <comment value="Check that filexists works on root folder" line="676"/>
      <comment value="Check that uploaded files can be detected in the root" line="682"/>
      <comment value="Check that uploaded files can be detected" line="692"/>
      <comment value="Test that files with invalid characters are rewritten safely and both report exists" line="701"/>
      <comment value="Check that uploaded files can be detected in the root" line="702"/>
      <comment value="With original file" line="708"/>
      <comment value="With rewritten file" line="713"/>
      <comment value="Test that attempts to navigate outside of the directory return false" line="719"/>
    </inline>
  </method>
  <method name="getMockForm" start="726" end="728" abstract="false" final="false" static="false" visibility="protected"/>
  <method name="getUploadFile" start="733" end="747" abstract="false" final="false" static="false" visibility="protected">
    <docblock>
      <description/>
      <return description="Emulating an entry in the $_FILES superglobal" type="object">
        <type full="Array" namespace="" name="Array"/>
      </return>
    </docblock>
    <parameter name="tmpFileName" byreference="false" type="string" default="'UploadFieldTest-testUpload.txt'"/>
    <inline>
      <comment value="emulates the $_FILES array" line="739"/>
    </inline>
  </method>
  <method name="mockUploadFileIDs" start="756" end="782" abstract="false" final="false" static="false" visibility="protected">
    <docblock>
      <description compact="Simulates a form post to the test controller with the specified file IDs"/>
      <param description="Name of field to assign ids to" type="string" variable="$fileField"/>
      <param description="list of file IDs" type="array" variable="$ids"/>
      <return description="Array with key 'errors'" type="boolean"/>
    </docblock>
    <parameter name="fileField" byreference="false" type="{unknown}"/>
    <parameter name="ids" byreference="false" type="{unknown}"/>
    <inline>
      <comment value="collate file ids" line="758"/>
      <comment value="Normal post requests can't submit empty array values for fields" line="768"/>
    </inline>
  </method>
  <method name="mockFileUpload" start="791" end="798" abstract="false" final="false" static="false" visibility="protected">
    <docblock>
      <description compact="Simulates a file upload"/>
      <param description="Name of the field to mock upload for" type="string" variable="$fileField"/>
      <param description="Name of temporary file to upload" type="array" variable="$tmpFileName"/>
      <return description="form response" type="object">
        <type full="SS_HTTPResponse" namespace="" name="SS_HTTPResponse"/>
      </return>
    </docblock>
    <parameter name="fileField" byreference="false" type="{unknown}"/>
    <parameter name="tmpFileName" byreference="false" type="{unknown}"/>
  </method>
  <method name="mockFileExists" start="800" end="804" abstract="false" final="false" static="false" visibility="protected">
    <parameter name="fileField" byreference="false" type="{unknown}"/>
    <parameter name="fileName" byreference="false" type="{unknown}"/>
  </method>
  <method name="mockFileEditForm" start="813" end="817" abstract="false" final="false" static="false" visibility="protected">
    <docblock>
      <description compact="Gets the edit form for the given file"/>
      <param description="Name of the field" type="string" variable="$fileField"/>
      <param description="ID of the file to delete" type="integer" variable="$fileID"/>
      <return description="form response" type="object">
        <type full="SS_HTTPResponse" namespace="" name="SS_HTTPResponse"/>
      </return>
    </docblock>
    <parameter name="fileField" byreference="false" type="{unknown}"/>
    <parameter name="fileID" byreference="false" type="{unknown}"/>
  </method>
  <method name="mockFileEdit" start="827" end="832" abstract="false" final="false" static="false" visibility="protected">
    <docblock>
      <description compact="Mocks edit submissions to a file"/>
      <param description="Name of the field" type="string" variable="$fileField"/>
      <param description="ID of the file to delete" type="integer" variable="$fileID"/>
      <param description="Fields to update" type="array" variable="$fields"/>
      <return description="form response" type="object">
        <type full="SS_HTTPResponse" namespace="" name="SS_HTTPResponse"/>
      </return>
    </docblock>
    <parameter name="fileField" byreference="false" type="{unknown}"/>
    <parameter name="fileID" byreference="false" type="{unknown}"/>
    <parameter name="fields" byreference="false" type="array"/>
  </method>
  <method name="mockFileDelete" start="841" end="846" abstract="false" final="false" static="false" visibility="protected">
    <docblock>
      <description compact="Simulates a physical file deletion"/>
      <param description="Name of the field" type="string" variable="$fileField"/>
      <param description="ID of the file to delete" type="integer" variable="$fileID"/>
      <return description="form response" type="object">
        <type full="SS_HTTPResponse" namespace="" name="SS_HTTPResponse"/>
      </return>
    </docblock>
    <parameter name="fileField" byreference="false" type="{unknown}"/>
    <parameter name="fileID" byreference="false" type="{unknown}"/>
  </method>
  <method name="setUp" start="848" end="868" abstract="false" final="false" static="false" visibility="public">
    <inline>
      <comment value="Create a test folders for each of the fixture references" line="853"/>
      <comment value="Create a test files for each of the fixture references" line="860"/>
    </inline>
  </method>
  <method name="tearDown" start="870" end="898" abstract="false" final="false" static="false" visibility="public">
    <inline>
      <comment value="Remove the test files that we've created" line="873"/>
      <comment value="Remove the test folders that we've crated" line="880"/>
      <comment value="Remove left over folders and any files that may exist" line="889"/>
      <comment value="Remove file uploaded to root folder" line="894"/>
    </inline>
  </method>
  <parent full="FunctionalTest" namespace="" name="FunctionalTest">
    <extends full="SapphireTest" namespace="" name="SapphireTest"/>
    <member name="disable_themes" type="{unknown}" default="false" visibility="protected" line="33">
      <docblock>
        <description compact="Set this to true on your sub-class to disable the use of themes in this test.">This can be handy for functional testing of modules without having to worry about whether a user has changed
behaviour by replacing the theme.</description>
        <var type="object">
          <type full="bool" namespace="" name="bool"/>
        </var>
      </docblock>
    </member>
    <member name="use_draft_site" type="{unknown}" default="false" visibility="protected" line="40">
      <docblock>
        <description compact="Set this to true on your sub-class to use the draft site by default for every test in this class."/>
        <var type="object">
          <type full="bool" namespace="" name="bool"/>
        </var>
      </docblock>
    </member>
    <member name="mainSession" type="{unknown}" default="null" visibility="protected" line="45">
      <docblock>
        <description/>
        <var type="object">
          <type full="TestSession" namespace="" name="TestSession"/>
        </var>
      </docblock>
    </member>
    <member name="cssParser" type="{unknown}" default="null" visibility="protected" line="52">
      <docblock>
        <description compact="CSSContentParser for the most recently requested page."/>
        <var type="object">
          <type full="CSSContentParser" namespace="" name="CSSContentParser"/>
        </var>
      </docblock>
    </member>
    <member name="autoFollowRedirection" type="{unknown}" default="true" visibility="protected" line="61">
      <docblock>
        <description compact="If this is true, then 30x Location headers will be automatically followed.">If not, then you will have to manaully call $this-&gt;mainSession-&gt;followRedirection() to follow them.
However, this will let you inspect the intermediary headers</description>
        <var type="object">
          <type full="bool" namespace="" name="bool"/>
        </var>
      </docblock>
    </member>
    <member name="originalTheme" type="{unknown}" default="null" visibility="protected" line="66">
      <docblock>
        <description/>
        <var type="string"/>
      </docblock>
    </member>
    <method name="session" start="73" end="75" abstract="false" final="false" static="false" visibility="public">
      <docblock>
        <description compact="Returns the {@link Session} object for this test"/>
        <return type="object">
          <type full="Session" namespace="" name="Session"/>
        </return>
      </docblock>
    </method>
    <method name="setUp" start="77" end="100" abstract="false" final="false" static="false" visibility="public">
      <inline>
        <comment value="Skip calling FunctionalTest directly." line="78"/>
        <comment value="Disable theme, if necessary" line="84"/>
        <comment value="Switch to draft site, if necessary" line="90"/>
        <comment value="Unprotect the site, tests are running with the assumption it's off. They will enable it on a case-by-case" line="95"/>
        <comment value="basis." line="96"/>
      </inline>
    </method>
    <method name="tearDown" start="102" end="111" abstract="false" final="false" static="false" visibility="public"/>
    <method name="withBaseURL" start="118" end="123" abstract="false" final="false" static="false" visibility="protected">
      <docblock>
        <description compact="Run a test while mocking the base url with the provided value"/>
        <param description="The base URL to use for this test" type="string" variable="$url"/>
        <param description="The test to run" type="object" variable="$callback">
          <type full="callable" namespace="" name="callable"/>
        </param>
      </docblock>
      <parameter name="url" byreference="false" type="{unknown}"/>
      <parameter name="callback" byreference="false" type="{unknown}"/>
    </method>
    <method name="withBaseFolder" start="130" end="135" abstract="false" final="false" static="false" visibility="protected">
      <docblock>
        <description compact="Run a test while mocking the base folder with the provided value"/>
        <param description="The base folder to use for this test" type="string" variable="$folder"/>
        <param description="The test to run" type="object" variable="$callback">
          <type full="callable" namespace="" name="callable"/>
        </param>
      </docblock>
      <parameter name="folder" byreference="false" type="{unknown}"/>
      <parameter name="callback" byreference="false" type="{unknown}"/>
    </method>
    <method name="get" start="147" end="154" abstract="false" final="false" static="false" visibility="public">
      <docblock>
        <description compact="Submit a get request"/>
        <uses value="Director::test()"/>
        <param type="string" variable="$url"/>
        <param type="object" variable="$session">
          <type full="Session" namespace="" name="Session"/>
        </param>
        <param type="array" variable="$headers"/>
        <param type="array" variable="$cookies"/>
        <return type="object">
          <type full="SS_HTTPResponse" namespace="" name="SS_HTTPResponse"/>
        </return>
      </docblock>
      <parameter name="url" byreference="false" type="{unknown}"/>
      <parameter name="session" byreference="false" type="{unknown}" default="null"/>
      <parameter name="headers" byreference="false" type="{unknown}" default="null"/>
      <parameter name="cookies" byreference="false" type="{unknown}" default="null"/>
    </method>
    <method name="post" start="168" end="175" abstract="false" final="false" static="false" visibility="public">
      <docblock>
        <description compact="Submit a post request"/>
        <uses value="Director::test()"/>
        <param type="string" variable="$url"/>
        <param type="array" variable="$data"/>
        <param type="array" variable="$headers"/>
        <param type="object" variable="$session">
          <type full="Session" namespace="" name="Session"/>
        </param>
        <param type="string" variable="$body"/>
        <param type="array" variable="$cookies"/>
        <return type="object">
          <type full="SS_HTTPResponse" namespace="" name="SS_HTTPResponse"/>
        </return>
      </docblock>
      <parameter name="url" byreference="false" type="{unknown}"/>
      <parameter name="data" byreference="false" type="{unknown}"/>
      <parameter name="headers" byreference="false" type="{unknown}" default="null"/>
      <parameter name="session" byreference="false" type="{unknown}" default="null"/>
      <parameter name="body" byreference="false" type="{unknown}" default="null"/>
      <parameter name="cookies" byreference="false" type="{unknown}" default="null"/>
    </method>
    <method name="submitForm" start="196" end="203" abstract="false" final="false" static="false" visibility="public">
      <docblock>
        <description compact="Submit the form with the given HTML ID, filling it out with the given data.">Acts on the most recent response.

Any data parameters have to be present in the form, with exact form field name
and values, otherwise they are removed from the submission.

Caution: Parameter names have to be formatted
as they are in the form submission, not as they are interpreted by PHP.
Wrong: array('mycheckboxvalues' =&gt; array(1 =&gt; 'one', 2 =&gt; 'two'))
Right: array('mycheckboxvalues[1]' =&gt; 'one', 'mycheckboxvalues[2]' =&gt; 'two')</description>
        <see value="http://www.simpletest.org/en/form_testing_documentation.html"/>
        <param description="HTML 'id' attribute of a form (loaded through a previous response)" type="string" variable="$formID"/>
        <param description="HTML 'name' attribute of the button (NOT the 'id' attribute)" type="string" variable="$button"/>
        <param description="Map of GET/POST data." type="array" variable="$data"/>
        <return type="object">
          <type full="SS_HTTPResponse" namespace="" name="SS_HTTPResponse"/>
        </return>
      </docblock>
      <parameter name="formID" byreference="false" type="{unknown}"/>
      <parameter name="button" byreference="false" type="{unknown}" default="null"/>
      <parameter name="data" byreference="false" type="array"/>
    </method>
    <method name="content" start="210" end="212" abstract="false" final="false" static="false" visibility="public">
      <docblock>
        <description compact="Return the most recent content"/>
        <return type="string"/>
      </docblock>
    </method>
    <method name="findAttribute" start="220" end="228" abstract="false" final="false" static="false" visibility="public">
      <docblock>
        <description compact="Find an attribute in a SimpleXMLElement object by name."/>
        <param type="object" variable="$object">
          <type full="SimpleXMLElement" namespace="" name="SimpleXMLElement"/>
        </param>
        <param description="Name of attribute to find" type="string" variable="$attribute"/>
        <return description="object of the attribute" type="object">
          <type full="SimpleXMLElement" namespace="" name="SimpleXMLElement"/>
        </return>
      </docblock>
      <parameter name="object" byreference="false" type="{unknown}"/>
      <parameter name="attribute" byreference="false" type="{unknown}"/>
    </method>
    <method name="cssParser" start="235" end="238" abstract="false" final="false" static="false" visibility="public">
      <docblock>
        <description compact="Return a CSSContentParser for the most recent content."/>
        <return type="object">
          <type full="CSSContentParser" namespace="" name="CSSContentParser"/>
        </return>
      </docblock>
    </method>
    <method name="assertPartialMatchBySelector" start="252" end="271" abstract="false" final="false" static="false" visibility="public">
      <docblock>
        <description compact="Assert that the most recently queried page contains a number of content tags specified by a CSS selector.">The given CSS selector will be applied to the HTML of the most recent page.  The content of every matching tag
will be examined. The assertion fails if one of the expectedMatches fails to appear.

Note: &amp;nbsp; characters are stripped from the content; make sure that your assertions take this into account.</description>
        <param description="A basic CSS selector, e.g. 'li.jobs h3'" type="string" variable="$selector"/>
        <param description="The content of at least one of the matched tags" type="object" variable="$expectedMatches">
          <type full="array|string" namespace="" name="array|string"/>
        </param>
        <throws type="object">
          <type full="PHPUnit_Framework_AssertionFailedError" namespace="" name="PHPUnit_Framework_AssertionFailedError"/>
        </throws>
        <return type="boolean"/>
      </docblock>
      <parameter name="selector" byreference="false" type="{unknown}"/>
      <parameter name="expectedMatches" byreference="false" type="{unknown}"/>
    </method>
    <method name="assertExactMatchBySelector" start="285" end="301" abstract="false" final="false" static="false" visibility="public">
      <docblock>
        <description compact="Assert that the most recently queried page contains a number of content tags specified by a CSS selector.">The given CSS selector will be applied to the HTML of the most recent page.  The full HTML of every matching tag
will be examined. The assertion fails if one of the expectedMatches fails to appear.

Note: &amp;nbsp; characters are stripped from the content; make sure that your assertions take this into account.</description>
        <param description="A basic CSS selector, e.g. 'li.jobs h3'" type="string" variable="$selector"/>
        <param description="The content of *all* matching tags as an array" type="object" variable="$expectedMatches">
          <type full="array|string" namespace="" name="array|string"/>
        </param>
        <throws type="object">
          <type full="PHPUnit_Framework_AssertionFailedError" namespace="" name="PHPUnit_Framework_AssertionFailedError"/>
        </throws>
        <return type="boolean"/>
      </docblock>
      <parameter name="selector" byreference="false" type="{unknown}"/>
      <parameter name="expectedMatches" byreference="false" type="{unknown}"/>
    </method>
    <method name="assertPartialHTMLMatchBySelector" start="315" end="333" abstract="false" final="false" static="false" visibility="public">
      <docblock>
        <description compact="Assert that the most recently queried page contains a number of content tags specified by a CSS selector.">The given CSS selector will be applied to the HTML of the most recent page.  The content of every matching tag
will be examined. The assertion fails if one of the expectedMatches fails to appear.

Note: &amp;nbsp; characters are stripped from the content; make sure that your assertions take this into account.</description>
        <param description="A basic CSS selector, e.g. 'li.jobs h3'" type="string" variable="$selector"/>
        <param description="The content of at least one of the matched tags" type="object" variable="$expectedMatches">
          <type full="array|string" namespace="" name="array|string"/>
        </param>
        <throws type="object">
          <type full="PHPUnit_Framework_AssertionFailedError" namespace="" name="PHPUnit_Framework_AssertionFailedError"/>
        </throws>
        <return type="boolean"/>
      </docblock>
      <parameter name="selector" byreference="false" type="{unknown}"/>
      <parameter name="expectedMatches" byreference="false" type="{unknown}"/>
    </method>
    <method name="assertExactHTMLMatchBySelector" start="347" end="359" abstract="false" final="false" static="false" visibility="public">
      <docblock>
        <description compact="Assert that the most recently queried page contains a number of content tags specified by a CSS selector.">The given CSS selector will be applied to the HTML of the most recent page.  The full HTML of every matching tag
will be examined. The assertion fails if one of the expectedMatches fails to appear.

Note: &amp;nbsp; characters are stripped from the content; make sure that your assertions take this into account.</description>
        <param description="A basic CSS selector, e.g. 'li.jobs h3'" type="string" variable="$selector"/>
        <param description="The content of *all* matched tags as an array" type="object" variable="$expectedMatches">
          <type full="array|string" namespace="" name="array|string"/>
        </param>
        <throws type="object">
          <type full="PHPUnit_Framework_AssertionFailedError" namespace="" name="PHPUnit_Framework_AssertionFailedError"/>
        </throws>
        <return type="boolean"/>
      </docblock>
      <parameter name="selector" byreference="false" type="{unknown}"/>
      <parameter name="expectedMatches" byreference="false" type="{unknown}"/>
    </method>
    <method name="logInAs" start="365" end="371" abstract="false" final="false" static="false" visibility="public">
      <docblock>
        <description compact="Log in as the given member"/>
        <param description="ID, fixture codename, or Member object of the member that you want to log in" variable="$member" type="object">
          <type full="The" namespace="" name="The"/>
        </param>
      </docblock>
      <parameter name="member" byreference="false" type="{unknown}"/>
    </method>
    <method name="useDraftSite" start="380" end="389" abstract="false" final="false" static="false" visibility="public">
      <docblock>
        <description compact="Use the draft (stage) site for testing.">This is helpful if you're not testing publication functionality and don't want "stage management" cluttering
your test.</description>
        <param description="toggle the use of the draft site" type="object">
          <type full="bool" namespace="" name="bool"/>
        </param>
      </docblock>
      <parameter name="enabled" byreference="false" type="{unknown}" default="true"/>
    </method>
    <method name="stat" start="397" end="399" abstract="false" final="false" static="false" visibility="public">
      <docblock>
        <description compact="Return a static variable from this class."/>
        <param type="string" variable="$varName"/>
        <return type="mixed"/>
      </docblock>
      <parameter name="varName" byreference="false" type="{unknown}"/>
    </method>
    <method name="get_disable_themes" start="404" end="406" abstract="false" final="false" static="true" visibility="public">
      <docblock>
        <description/>
        <return type="object">
          <type full="bool" namespace="" name="bool"/>
        </return>
      </docblock>
    </method>
    <method name="get_use_draft_site" start="411" end="413" abstract="false" final="false" static="true" visibility="public">
      <docblock>
        <description/>
        <return type="object">
          <type full="bool" namespace="" name="bool"/>
        </return>
      </docblock>
    </method>
  </parent>
  <parent full="SapphireTest" namespace="" name="SapphireTest">
    <extends full="PHPUnit_Framework_TestCase" namespace="" name="PHPUnit_Framework_TestCase"/>
    <member name="fixture_file" type="{unknown}" default="null" visibility="protected" line="27">
      <docblock>
        <description compact="Path to fixture data for this test run.">If passed as an array, multiple fixture files will be loaded.
Please note that you won't be able to refer with "=&gt;" notation
between the fixtures, they act independent of each other.</description>
        <var type="object">
          <type full="string|array" namespace="" name="string|array"/>
        </var>
      </docblock>
    </member>
    <member name="fixtureFactory" type="{unknown}" visibility="protected" line="32">
      <docblock>
        <description/>
        <var type="object">
          <type full="FixtureFactory" namespace="" name="FixtureFactory"/>
        </var>
      </docblock>
    </member>
    <member name="skipTest" type="{unknown}" default="false" visibility="protected" line="37">
      <docblock>
        <description/>
        <var description="Set whether to include this test in the TestRunner or to skip this." type="object">
          <type full="bool" namespace="" name="bool"/>
        </var>
      </docblock>
    </member>
    <member name="usesDatabase" type="{unknown}" default="null" visibility="protected" line="44">
      <docblock>
        <description/>
        <var description="If set to TRUE, this will force a test database to be generated" type="object">in <link xmlns="http://xml.phpdox.net/src" value="setUp()"/>. Note that this flag is overruled by the presence of a
<link xmlns="http://xml.phpdox.net/src" value="$fixture_file"/>, which always forces a database build.
<type full="Boolean" namespace="" name="Boolean"/></var>
      </docblock>
    </member>
    <member name="originalMailer" type="{unknown}" visibility="protected" line="46"/>
    <member name="originalMemberPasswordValidator" type="{unknown}" visibility="protected" line="47"/>
    <member name="originalRequirements" type="{unknown}" visibility="protected" line="48"/>
    <member name="originalIsRunningTest" type="{unknown}" visibility="protected" line="49"/>
    <member name="originalTheme" type="{unknown}" visibility="protected" line="50"/>
    <member name="originalNestedURLsState" type="{unknown}" visibility="protected" line="51"/>
    <member name="originalMemoryLimit" type="{unknown}" visibility="protected" line="52"/>
    <member name="mailer" type="{unknown}" visibility="protected" line="54"/>
    <member name="regular_manifest" type="{unknown}" visibility="protected" line="59">
      <docblock>
        <description compact="Pointer to the manifest that isn't a test manifest"/>
      </docblock>
    </member>
    <member name="is_running_test" type="{unknown}" default="false" visibility="protected" line="64">
      <docblock>
        <description/>
        <var type="boolean"/>
      </docblock>
    </member>
    <member name="test_class_manifest" type="{unknown}" visibility="protected" line="66"/>
    <member name="requireDefaultRecordsFrom" type="array" visibility="protected" line="73">
      <docblock>
        <description compact="By default, setUp() does not require default records. Pass class names in here, and the require/augment default records function will be called on them."/>
      </docblock>
    </member>
    <member name="illegalExtensions" type="array" visibility="protected" line="83">
      <docblock>
        <description compact="A list of extensions that can't be applied during the execution of this run.  If they are applied, they will be temporarily removed and a database migration called.">The keys of the are the classes that the extensions can't be applied the extensions to, and
the values are an array of illegal extensions on that class.</description>
      </docblock>
    </member>
    <member name="requiredExtensions" type="array" visibility="protected" line="98">
      <docblock>
        <description compact="A list of extensions that must be applied during the execution of this run.  If they are not applied, they will be temporarily added and a database migration called.">The keys of the are the classes to apply the extensions to, and the values are an array
of required extensions on that class.

Example:
&lt;code&gt;
array("MyTreeDataObject" =&gt; array("Versioned", "Hierarchy"))
&lt;/code&gt;</description>
      </docblock>
    </member>
    <member name="extraDataObjects" type="array" visibility="protected" line="106">
      <docblock>
        <description compact="By default, the test database won't contain any DataObjects that have the interface TestOnly.">This variable lets you define additional TestOnly DataObjects to set up for this test.
Set it to an array of DataObject subclass names.</description>
      </docblock>
    </member>
    <member name="backupGlobals" type="{unknown}" default="FALSE" visibility="protected" line="114">
      <docblock>
        <description compact="We need to disabling backing up of globals to avoid overriding the few globals SilverStripe relies on, like $lang for the i18n subsystem."/>
        <see value="http://sebastian-bergmann.de/archives/797-Global-Variables-and-PHPUnit.html"/>
      </docblock>
    </member>
    <member name="fixtures" type="array" visibility="protected" line="164">
      <docblock>
        <description/>
        <var description="$fixtures Array of {@link YamlFixture} instances" type="array"/>
        <deprecated value="3.1 Use $fixtureFactory instad"/>
      </docblock>
    </member>
    <member name="model" type="{unknown}" visibility="protected" line="166"/>
    <member name="cache_generatedMembers" type="array" visibility="protected" line="884">
      <docblock>
        <description compact="Cache for logInWithPermission()"/>
      </docblock>
    </member>
    <method name="is_running_test" start="131" end="133" abstract="false" final="false" static="true" visibility="public">
      <docblock>
        <description compact="Determines if unit tests are currently run (via {@link TestRunner}).">This is used as a cheap replacement for fully mockable state
in certain contiditions (e.g. access checks).
Caution: When set to FALSE, certain controllers might bypass
access checks, so this is a very security sensitive setting.</description>
        <return type="boolean"/>
      </docblock>
    </method>
    <method name="set_is_running_test" start="135" end="137" abstract="false" final="false" static="true" visibility="public">
      <parameter name="bool" byreference="false" type="{unknown}"/>
    </method>
    <method name="set_test_class_manifest" start="142" end="144" abstract="false" final="false" static="true" visibility="public">
      <docblock>
        <description compact="Set the manifest to be used to look up test classes by helper functions"/>
      </docblock>
      <parameter name="manifest" byreference="false" type="{unknown}"/>
    </method>
    <method name="get_test_class_manifest" start="149" end="151" abstract="false" final="false" static="true" visibility="public">
      <docblock>
        <description compact="Return the manifest being used to look up test classes by helper functions"/>
      </docblock>
    </method>
    <method name="get_fixture_file" start="156" end="158" abstract="false" final="false" static="true" visibility="public">
      <docblock>
        <description/>
        <return type="object">
          <type full="String" namespace="" name="String"/>
        </return>
      </docblock>
    </method>
    <method name="setUp" start="168" end="277" abstract="false" final="false" static="false" visibility="public">
      <inline>
        <comment value="We cannot run the tests on this abstract class." line="169"/>
        <comment value="Mark test as being run" line="180"/>
        <comment value="i18n needs to be set to the defaults or tests fail" line="184"/>
        <comment value="Set default timezone consistently to avoid NZ-specific dependencies" line="189"/>
        <comment value="Remove password validation" line="192"/>
        <comment value="Set up email" line="211"/>
        <todo value="this could be a special test model" line="217"/>
        <comment value="Set up fixture" line="220"/>
        <comment value="echo &quot;Re-creating temp database... &quot;;" line="225"/>
        <comment value="Support fixture paths relative to the test class, rather than relative to webroot" line="246"/>
        <comment value="String checking is faster than file_exists() calls." line="247"/>
        <comment value="backwards compatibility: Load first fixture into $this-&gt;fixture" line="260"/>
        <comment value="Preserve memory settings" line="269"/>
        <comment value="turn off template debugging" line="272"/>
        <comment value="Clear requirements" line="275"/>
      </inline>
    </method>
    <method name="setUpOnce" start="287" end="330" abstract="false" final="false" static="false" visibility="public">
      <docblock>
        <description compact="Called once per test case ({@link SapphireTest} subclass).">This is different to <link xmlns="http://xml.phpdox.net/src" value="setUp()"/>, which gets called once
per method. Useful to initialize expensive operations which
don't change state for any called method inside the test,
e.g. dynamically adding an extension. See <link xmlns="http://xml.phpdox.net/src" value="tearDownOnce()"/>for tearing down the state again.
</description>
      </docblock>
      <inline>
        <comment value="Remove any illegal extensions that are present" line="294"/>
        <comment value="Add any required extensions that aren't present" line="306"/>
        <comment value="If we have made changes to the extensions present, then migrate the database schema." line="319"/>
        <comment value="clear singletons, they're caching old extension info" line="324"/>
        <comment value="which is used in DatabaseAdmin-&gt;doBuild()" line="325"/>
        <comment value="Set default timezone consistently to avoid NZ-specific dependencies" line="328"/>
      </inline>
    </method>
    <method name="tearDownOnce" start="335" end="356" abstract="false" final="false" static="false" visibility="public">
      <docblock>
        <description compact="tearDown method that's called once per test class rather once per test method."/>
      </docblock>
      <inline>
        <comment value="If we have made changes to the extensions present, then migrate the database schema." line="336"/>
        <comment value="Remove extensions added for testing" line="338"/>
        <comment value="Reapply ones removed" line="345"/>
      </inline>
    </method>
    <method name="getFixtureFactory" start="361" end="364" abstract="false" final="false" static="false" visibility="public">
      <docblock>
        <description/>
        <return type="object">
          <type full="FixtureFactory" namespace="" name="FixtureFactory"/>
        </return>
      </docblock>
    </method>
    <method name="setFixtureFactory" start="366" end="369" abstract="false" final="false" static="false" visibility="public">
      <parameter name="factory" byreference="false" type="object">
        <type full="\\FixtureFactory" namespace="\" name="FixtureFactory"/>
      </parameter>
    </method>
    <method name="idFromFixture" start="378" end="390" abstract="false" final="false" static="false" visibility="protected">
      <docblock>
        <description compact="Get the ID of an object from the fixture."/>
        <param description="data class, as specified in your fixture file.  Parent classes won't work" variable="$className" type="object">
          <type full="The" namespace="" name="The"/>
        </param>
        <param description="identifier string, as provided in your fixture file" variable="$identifier" type="object">
          <type full="The" namespace="" name="The"/>
        </param>
        <return type="int"/>
      </docblock>
      <parameter name="className" byreference="false" type="{unknown}"/>
      <parameter name="identifier" byreference="false" type="{unknown}"/>
    </method>
    <method name="allFixtureIDs" start="399" end="401" abstract="false" final="false" static="false" visibility="protected">
      <docblock>
        <description compact="Return all of the IDs in the fixture of a particular class name.">Will collate all IDs form all fixtures if multiple fixtures are provided.</description>
        <param type="string" variable="$className"/>
        <return description="map of fixture-identifier =&gt; object-id" type="object">
          <type full="A" namespace="" name="A"/>
        </return>
      </docblock>
      <parameter name="className" byreference="false" type="{unknown}"/>
    </method>
    <method name="objFromFixture" start="411" end="423" abstract="false" final="false" static="false" visibility="protected">
      <docblock>
        <description compact="Get an object from the fixture."/>
        <param description="The data class, as specified in your fixture file. Parent classes won't work" type="string" variable="$className"/>
        <param description="The identifier string, as provided in your fixture file" type="string" variable="$identifier"/>
        <return type="object">
          <type full="DataObject" namespace="" name="DataObject"/>
        </return>
      </docblock>
      <parameter name="className" byreference="false" type="{unknown}"/>
      <parameter name="identifier" byreference="false" type="{unknown}"/>
    </method>
    <method name="loadFixture" start="432" end="436" abstract="false" final="false" static="false" visibility="public">
      <docblock>
        <description compact="Load a YAML fixture file into the database.">Once loaded, you can use idFromFixture() and objFromFixture() to get items from the fixture.
Doesn't clear existing fixtures.</description>
        <param description="location of the .yml fixture file, relative to the site base dir" variable="$fixtureFile" type="object">
          <type full="The" namespace="" name="The"/>
        </param>
      </docblock>
      <parameter name="fixtureFile" byreference="false" type="{unknown}"/>
    </method>
    <method name="clearFixtures" start="442" end="445" abstract="false" final="false" static="false" visibility="public">
      <docblock>
        <description compact="Clear all fixtures which were previously loaded through {@link loadFixture()}"/>
      </docblock>
    </method>
    <method name="getCurrentAbsolutePath" start="452" end="456" abstract="false" final="false" static="false" visibility="protected">
      <docblock>
        <description compact="Useful for writing unit tests without hardcoding folder structures."/>
        <return description="Absolute path to current class." type="object">
          <type full="String" namespace="" name="String"/>
        </return>
      </docblock>
    </method>
    <method name="getCurrentRelativePath" start="461" end="466" abstract="false" final="false" static="false" visibility="protected">
      <docblock>
        <description/>
        <return description="File path relative to webroot" type="object">
          <type full="String" namespace="" name="String"/>
        </return>
      </docblock>
    </method>
    <method name="tearDown" start="468" end="504" abstract="false" final="false" static="false" visibility="public">
      <inline>
        <comment value="Preserve memory settings" line="469"/>
        <comment value="Restore email configuration" line="472"/>
        <comment value="Restore password validation" line="479"/>
        <comment value="Restore requirements" line="484"/>
        <comment value="Mark test as no longer being run - we use originalIsRunningTest to allow for nested SapphireTest calls" line="489"/>
        <comment value="Reset mocked datetime" line="493"/>
        <comment value="Stop the redirection that might have been requested in the test." line="496"/>
        <comment value="Note: Ideally a clean Controller should be created for each test." line="497"/>
        <comment value="Now all tests executed in a batch share the same controller." line="498"/>
      </inline>
    </method>
    <method name="assertContains" start="506" end="516" abstract="false" final="false" static="true" visibility="public">
      <parameter name="needle" byreference="false" type="{unknown}"/>
      <parameter name="haystack" byreference="false" type="{unknown}"/>
      <parameter name="message" byreference="false" type="string" default="''"/>
      <parameter name="ignoreCase" byreference="false" type="{unknown}" default="FALSE"/>
      <parameter name="checkForObjectIdentity" byreference="false" type="{unknown}" default="TRUE"/>
      <parameter name="checkForNonObjectIdentity" byreference="false" type="{unknown}" default="false"/>
    </method>
    <method name="assertNotContains" start="518" end="528" abstract="false" final="false" static="true" visibility="public">
      <parameter name="needle" byreference="false" type="{unknown}"/>
      <parameter name="haystack" byreference="false" type="{unknown}"/>
      <parameter name="message" byreference="false" type="string" default="''"/>
      <parameter name="ignoreCase" byreference="false" type="{unknown}" default="FALSE"/>
      <parameter name="checkForObjectIdentity" byreference="false" type="{unknown}" default="TRUE"/>
      <parameter name="checkForNonObjectIdentity" byreference="false" type="{unknown}" default="false"/>
    </method>
    <method name="clearEmails" start="533" end="535" abstract="false" final="false" static="false" visibility="public">
      <docblock>
        <description compact="Clear the log of emails sent"/>
      </docblock>
    </method>
    <method name="findEmail" start="547" end="549" abstract="false" final="false" static="false" visibility="public">
      <docblock>
        <description compact="Search for an email that was sent.">All of the parameters can either be a string, or, if they start with "/", a PREG-compatible regular expression.</description>
        <param variable="$to"/>
        <param variable="$from"/>
        <param variable="$subject"/>
        <param variable="$content"/>
        <return description="Contains keys: 'type', 'to', 'from', 'subject','content', 'plainContent', 'attachedFiles'," type="array">'customHeaders', 'htmlContent', 'inlineImages'</return>
      </docblock>
      <parameter name="to" byreference="false" type="{unknown}"/>
      <parameter name="from" byreference="false" type="{unknown}" default="null"/>
      <parameter name="subject" byreference="false" type="{unknown}" default="null"/>
      <parameter name="content" byreference="false" type="{unknown}" default="null"/>
    </method>
    <method name="assertEmailSent" start="561" end="576" abstract="false" final="false" static="false" visibility="public">
      <docblock>
        <description compact="Assert that the matching email was sent since the last call to clearEmails() All of the parameters can either be a string, or, if they start with &quot;/&quot;, a PREG-compatible regular expression."/>
        <param variable="$to"/>
        <param variable="$from"/>
        <param variable="$subject"/>
        <param variable="$content"/>
        <return description="Contains the keys: 'type', 'to', 'from', 'subject', 'content', 'plainContent', 'attachedFiles'," type="array">'customHeaders', 'htmlContent', inlineImages'</return>
      </docblock>
      <parameter name="to" byreference="false" type="{unknown}"/>
      <parameter name="from" byreference="false" type="{unknown}" default="null"/>
      <parameter name="subject" byreference="false" type="{unknown}" default="null"/>
      <parameter name="content" byreference="false" type="{unknown}" default="null"/>
    </method>
    <method name="assertDOSContains" start="599" end="622" abstract="false" final="false" static="false" visibility="public">
      <docblock>
        <description compact="Assert that the given {@link SS_List} includes DataObjects matching the given key-value pairs.  Each match must correspond to 1 distinct record."/>
        <param description="patterns to match.  Each pattern is a map of key-value pairs.  You can" variable="$matches" type="object">either pass a single pattern or an array of patterns.<type full="The" namespace="" name="The"/></param>
        <param description="{@link SS_List} to test." variable="$dataObjectSet" type="object">Examples
--------
Check that $members includes an entry with Email = sam@example.com:
     $this-&gt;assertDOSContains(array('Email' =&gt; '...@example.com'), $members);

Check that $members includes entries with Email = sam@example.com and with
Email = ingo@example.com:
     $this-&gt;assertDOSContains(array(
        array('Email' =&gt; '...@example.com'),
        array('Email' =&gt; 'i...@example.com'),
     ), $members);<type full="The" namespace="" name="The"/></param>
      </docblock>
      <parameter name="matches" byreference="false" type="{unknown}"/>
      <parameter name="dataObjectSet" byreference="false" type="{unknown}"/>
      <inline>
        <comment value="Remove it from $extracted so that we don't get duplicate mapping." line="607"/>
        <comment value="We couldn't find a match - assertion failed" line="614"/>
      </inline>
    </method>
    <method name="assertDOSEquals" start="641" end="674" abstract="false" final="false" static="false" visibility="public">
      <docblock>
        <description compact="Assert that the given {@link SS_List} includes only DataObjects matching the given key-value pairs.  Each match must correspond to 1 distinct record."/>
        <param description="patterns to match.  Each pattern is a map of key-value pairs.  You can" variable="$matches" type="object">either pass a single pattern or an array of patterns.<type full="The" namespace="" name="The"/></param>
        <param description="{@link SS_List} to test." variable="$dataObjectSet" type="object">Example
--------
Check that *only* the entries Sam Minnee and Ingo Schommer exist in $members.  Order doesn't
matter:
    $this-&gt;assertDOSEquals(array(
       array('FirstName' =&gt;'Sam', 'Surname' =&gt; 'Minnee'),
       array('FirstName' =&gt; 'Ingo', 'Surname' =&gt; 'Schommer'),
     ), $members);<type full="The" namespace="" name="The"/></param>
      </docblock>
      <parameter name="matches" byreference="false" type="{unknown}"/>
      <parameter name="dataObjectSet" byreference="false" type="{unknown}"/>
      <inline>
        <comment value="Remove it from $extracted so that we don't get duplicate mapping." line="651"/>
        <comment value="We couldn't find a match - assertion failed" line="658"/>
        <comment value="If we have leftovers than the DOS has extra data that shouldn't be there" line="667"/>
      </inline>
    </method>
    <method name="assertDOSAllMatch" start="688" end="699" abstract="false" final="false" static="false" visibility="public">
      <docblock>
        <description compact="Assert that the every record in the given {@link SS_List} matches the given key-value pairs."/>
        <param description="pattern to match.  The pattern is a map of key-value pairs." variable="$match" type="object">
          <type full="The" namespace="" name="The"/>
        </param>
        <param description="{@link SS_List} to test." variable="$dataObjectSet" type="object">Example
--------
Check that every entry in $members has a Status of 'Active':
    $this-&gt;assertDOSAllMatch(array('Status' =&gt; 'Active'), $members);<type full="The" namespace="" name="The"/></param>
      </docblock>
      <parameter name="match" byreference="false" type="{unknown}"/>
      <parameter name="dataObjectSet" byreference="false" type="{unknown}"/>
    </method>
    <method name="using_temp_db" start="723" end="728" abstract="false" final="false" static="true" visibility="public">
      <docblock>
        <description compact="Returns true if we are currently using a temporary database"/>
      </docblock>
    </method>
    <method name="kill_temp_db" start="730" end="747" abstract="false" final="false" static="true" visibility="public">
      <inline>
        <comment value="Delete our temporary database" line="731"/>
        <comment value="Some DataExtensions keep a static cache of information that needs to" line="736"/>
        <comment value="be reset whenever the database is killed" line="737"/>
        <comment value="echo &quot;Deleted temp database &quot; . $dbConn-&gt;currentDatabase() . &quot;\n&quot;;" line="743"/>
      </inline>
    </method>
    <method name="empty_temp_db" start="752" end="765" abstract="false" final="false" static="true" visibility="public">
      <docblock>
        <description compact="Remove all content from the temporary database."/>
      </docblock>
      <inline>
        <comment value="Some DataExtensions keep a static cache of information that needs to" line="757"/>
        <comment value="be reset whenever the database is cleaned out" line="758"/>
      </inline>
    </method>
    <method name="create_temp_db" start="767" end="792" abstract="false" final="false" static="true" visibility="public">
      <inline>
        <comment value="Disable PHPUnit error handling" line="768"/>
        <comment value="Create a temporary database, and force the connection to use UTC for time" line="771"/>
        <comment value="Reinstate PHPUnit error handling" line="788"/>
      </inline>
    </method>
    <method name="delete_all_temp_dbs" start="794" end="807" abstract="false" final="false" static="true" visibility="public"/>
    <method name="resetDBSchema" start="813" end="848" abstract="false" final="false" static="false" visibility="public">
      <docblock>
        <description compact="Reset the testing database's schema."/>
        <param description="true, the extraDataObjects tables will also be included" variable="$includeExtraDataObjects" type="object">
          <type full="If" namespace="" name="If"/>
        </param>
      </docblock>
      <parameter name="includeExtraDataObjects" byreference="false" type="{unknown}" default="false"/>
      <inline>
        <comment value="clear singletons, they're caching old extension info which is used in DatabaseAdmin-&gt;doBuild()" line="817"/>
        <comment value="Check if class exists before trying to instantiate - this sidesteps any manifest weirdness" line="828"/>
        <comment value="If we have additional dataobjects which need schema, do so here:" line="835"/>
      </inline>
    </method>
    <method name="logInWithPermission" start="854" end="879" abstract="false" final="false" static="false" visibility="public">
      <docblock>
        <description compact="Create a member and group with the given permission code, and log in with it.">Returns the member ID.</description>
      </docblock>
      <parameter name="permCode" byreference="false" type="string" default="&quot;ADMIN&quot;"/>
    </method>
  </parent>
  <parent full="PHPUnit_Framework_TestCase" namespace="" name="PHPUnit_Framework_TestCase"/>
</class>
