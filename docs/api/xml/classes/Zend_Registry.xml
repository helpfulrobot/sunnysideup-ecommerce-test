<?xml version="1.0" encoding="UTF-8"?>
<class xmlns="http://xml.phpdox.net/src" full="Zend_Registry" namespace="" name="Zend_Registry" abstract="false" final="false" start="30" end="209">
  <file path="/var/www/_modules/ecommerce_test/trunk/docs/en/phpdox/../../../framework/thirdparty/Zend" file="Registry.php" realpath="/var/www/_modules/ecommerce_test/trunk/framework/thirdparty/Zend/Registry.php" size="6100" time="2015-03-14T10:41:30+13:00" unixtime="1426282890" sha1="2f17cc3f17d5b27b6a369f4dd048dcaee1942beb" relative="framework/thirdparty/Zend/Registry.php"/>
  <docblock>
    <description compact="Generic storage class helps to manage global data."/>
    <category value="Zend"/>
    <package value="Zend_Registry"/>
    <copyright value="Copyright (c) 2005-2011 Zend Technologies USA Inc. (http://www.zend.com)"/>
    <license name="http://framework.zend.com/license/new-bsd     New BSD License"/>
  </docblock>
  <extends full="ArrayObject" namespace="" name="ArrayObject"/>
  <member name="_registryClassName" type="string" default="'Zend_Registry'" visibility="private" line="36">
    <docblock>
      <description compact="Class name of the singleton registry object."/>
      <var type="string"/>
    </docblock>
  </member>
  <member name="_registry" type="{unknown}" default="null" visibility="private" line="42">
    <docblock>
      <description compact="Registry object provides storage for shared objects."/>
      <var type="object">
        <type full="Zend_Registry" namespace="" name="Zend_Registry"/>
      </var>
    </docblock>
  </member>
  <method name="getInstance" start="49" end="56" abstract="false" final="false" static="true" visibility="public">
    <docblock>
      <description compact="Retrieves the default registry instance."/>
      <return type="object">
        <type full="Zend_Registry" namespace="" name="Zend_Registry"/>
      </return>
    </docblock>
  </method>
  <method name="setInstance" start="66" end="75" abstract="false" final="false" static="true" visibility="public">
    <docblock>
      <description compact="Set the default registry instance to a specified instance."/>
      <param description="An object instance of type Zend_Registry," type="object" variable="$registry">or a subclass.<type full="Zend_Registry" namespace="" name="Zend_Registry"/></param>
      <return type="object">
        <type full="void" namespace="" name="void"/>
      </return>
      <throws description="if registry is already initialized." type="object">
        <type full="Zend_Exception" namespace="" name="Zend_Exception"/>
      </throws>
    </docblock>
    <parameter name="registry" byreference="false" type="object">
      <type full="\\Zend_Registry" namespace="\" name="Zend_Registry"/>
    </parameter>
  </method>
  <method name="init" start="82" end="85" abstract="false" final="false" static="true" visibility="protected">
    <docblock>
      <description compact="Initialize the default registry instance."/>
      <return type="object">
        <type full="void" namespace="" name="void"/>
      </return>
    </docblock>
  </method>
  <method name="setClassName" start="97" end="118" abstract="false" final="false" static="true" visibility="public">
    <docblock>
      <description compact="Set the class name to use for the default registry instance.">Does not affect the currently initialized instance, it only applies
for the next time you instantiate.</description>
      <param type="string" variable="$registryClassName"/>
      <return type="object">
        <type full="void" namespace="" name="void"/>
      </return>
      <throws description="if the registry is initialized or if the" type="object">class name is not valid.<type full="Zend_Exception" namespace="" name="Zend_Exception"/></throws>
    </docblock>
    <parameter name="registryClassName" byreference="false" type="string" default="'Zend_Registry'"/>
    <inline>
      <comment value="@see Zend_Loader" line="109"/>
    </inline>
  </method>
  <method name="_unsetInstance" start="125" end="128" abstract="false" final="false" static="true" visibility="public">
    <docblock>
      <description compact="Unset the default registry instance.">Primarily used in tearDown() in unit tests.</description>
      <returns value="void"/>
    </docblock>
  </method>
  <method name="get" start="141" end="151" abstract="false" final="false" static="true" visibility="public">
    <docblock>
      <description compact="getter method, basically same as offsetGet().">This method can be called from an object of type Zend_Registry, or it
can be called statically.  In the latter case, it uses the default
static instance stored in the class.</description>
      <param description="- get the value associated with $index" type="string" variable="$index"/>
      <return type="mixed"/>
      <throws description="if no entry is registerd for $index." type="object">
        <type full="Zend_Exception" namespace="" name="Zend_Exception"/>
      </throws>
    </docblock>
    <parameter name="index" byreference="false" type="{unknown}"/>
  </method>
  <method name="set" start="165" end="169" abstract="false" final="false" static="true" visibility="public">
    <docblock>
      <description compact="setter method, basically same as offsetSet().">This method can be called from an object of type Zend_Registry, or it
can be called statically.  In the latter case, it uses the default
static instance stored in the class.</description>
      <param description="The location in the ArrayObject in which to store" type="string" variable="$index">the value.</param>
      <param description="The object to store in the ArrayObject." type="mixed" variable="$value"/>
      <return type="object">
        <type full="void" namespace="" name="void"/>
      </return>
    </docblock>
    <parameter name="index" byreference="false" type="{unknown}"/>
    <parameter name="value" byreference="false" type="{unknown}"/>
  </method>
  <method name="isRegistered" start="178" end="184" abstract="false" final="false" static="true" visibility="public">
    <docblock>
      <description compact="Returns TRUE if the $index is a named value in the registry, or FALSE if $index was not found in the registry."/>
      <param type="string" variable="$index"/>
      <return type="boolean"/>
    </docblock>
    <parameter name="index" byreference="false" type="{unknown}"/>
  </method>
  <constructor name="__construct" start="193" end="196" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="Constructs a parent ArrayObject with default ARRAY_AS_PROPS to allow acces as an object"/>
      <param description="data array" type="array" variable="$array"/>
      <param description="ArrayObject flags" type="integer" variable="$flags"/>
    </docblock>
    <parameter name="array" byreference="false" type="array"/>
    <parameter name="flags" byreference="false" type="{unknown}" default="parent::ARRAY_AS_PROPS"/>
  </constructor>
  <method name="offsetExists" start="204" end="207" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description/>
      <param type="string" variable="$index"/>
      <returns value="mixed">Workaround for http://bugs.php.net/bug.php?id=40442 (ZF-960).</returns>
    </docblock>
    <parameter name="index" byreference="false" type="{unknown}"/>
  </method>
  <parent full="ArrayObject" namespace="" name="ArrayObject">
    <constant name="" value="1">
    <docblock>
      <var type="integer"/>
    </docblock>
  </constant>
    <constant name="" value="2">
    <docblock>
      <var type="integer"/>
    </docblock>
  </constant>
    <constructor name="__construct" abstract="false" static="false" visibility="public" final="false">
    <docblock>
      <description compact="Construct a new array object"/>
      <return type="void"/>
    </docblock>
    <parameter name="input" optional="true" byreference="false" type="object" class="mixed"/>
    <parameter name="flags" optional="true" byreference="false" type="int"/>
    <parameter name="iterator_class" optional="true" byreference="false" type="string"/>
  </constructor>
    <method name="append" abstract="false" static="false" visibility="public" final="false">
    <docblock>
      <description compact="Appends the value">Appends a new value as the last element.</description>
      <return type="void"/>
    </docblock>
    <parameter name="value" optional="false" byreference="false" type="object" class="mixed"/>
  </method>
    <method name="asort" abstract="false" static="false" visibility="public" final="false">
    <docblock>
      <description compact="Sort the entries by value"/>
      <return type="void"/>
    </docblock>
  </method>
    <method name="count" abstract="false" static="false" visibility="public" final="false">
    <docblock>
      <description compact="Get the number of public properties in the ArrayObject"/>
      <return type="int"/>
    </docblock>
  </method>
    <method name="exchangeArray" abstract="false" static="false" visibility="public" final="false">
    <docblock>
      <description compact="Exchange the array for another one."/>
      <return type="array"/>
    </docblock>
    <parameter name="input" optional="false" byreference="false" type="object" class="mixed"/>
  </method>
    <method name="getArrayCopy" abstract="false" static="false" visibility="public" final="false">
    <docblock>
      <description compact="Creates a copy of the ArrayObject."/>
      <return type="array"/>
    </docblock>
  </method>
    <method name="getFlags" abstract="false" static="false" visibility="public" final="false">
    <docblock>
      <description compact="Gets the behavior flags."/>
      <return type="int"/>
    </docblock>
  </method>
    <method name="getIterator" abstract="false" static="false" visibility="public" final="false">
    <docblock>
      <description compact="Create a new iterator from an ArrayObject instance"/>
      <return type="ArrayIterator"/>
    </docblock>
  </method>
    <method name="getIteratorClass" abstract="false" static="false" visibility="public" final="false">
    <docblock>
      <description compact="Gets the iterator classname for the ArrayObject."/>
      <return type="string"/>
    </docblock>
  </method>
    <method name="ksort" abstract="false" static="false" visibility="public" final="false">
    <docblock>
      <description compact="Sort the entries by key"/>
      <return type="void"/>
    </docblock>
  </method>
    <method name="natcasesort" abstract="false" static="false" visibility="public" final="false">
    <docblock>
      <description compact="Sort an array using a case insensitive &quot;natural order&quot; algorithm">This method is a case insensitive version of ArrayObject::natsort.</description>
      <return type="void"/>
    </docblock>
  </method>
    <method name="natsort" abstract="false" static="false" visibility="public" final="false">
    <docblock>
      <description compact="Sort entries using a &quot;natural order&quot; algorithm"/>
      <return type="void"/>
    </docblock>
  </method>
    <method name="offsetExists" abstract="false" static="false" visibility="public" final="false">
    <docblock>
      <description compact="Returns whether the requested index exists"/>
      <return type="bool"/>
    </docblock>
    <parameter name="index" optional="false" byreference="false" type="object" class="mixed"/>
  </method>
    <method name="offsetGet" abstract="false" static="false" visibility="public" final="false">
    <docblock>
      <description compact="Returns the value at the specified index"/>
      <return type="mixed"/>
    </docblock>
    <parameter name="index" optional="false" byreference="false" type="object" class="mixed"/>
  </method>
    <method name="offsetSet" abstract="false" static="false" visibility="public" final="false">
    <docblock>
      <description compact="Sets the value at the specified index to newval"/>
      <return type="void"/>
    </docblock>
    <parameter name="index" optional="false" byreference="false" type="object" class="mixed"/>
    <parameter name="newval" optional="false" byreference="false" type="object" class="mixed"/>
  </method>
    <method name="offsetUnset" abstract="false" static="false" visibility="public" final="false">
    <docblock>
      <description compact="Unsets the value at the specified index"/>
      <return type="void"/>
    </docblock>
    <parameter name="index" optional="false" byreference="false" type="object" class="mixed"/>
  </method>
    <method name="serialize" abstract="false" static="false" visibility="public" final="false">
    <docblock>
      <description compact="Serialize an ArrayObject"/>
      <return type="void"/>
    </docblock>
  </method>
    <method name="setFlags" abstract="false" static="false" visibility="public" final="false">
    <docblock>
      <description compact="Sets the behavior flags."/>
      <return type="void"/>
    </docblock>
    <parameter name="flags" optional="false" byreference="false" type="int"/>
  </method>
    <method name="setIteratorClass" abstract="false" static="false" visibility="public" final="false">
    <docblock>
      <description compact="Sets the iterator classname for the ArrayObject."/>
      <return type="void"/>
    </docblock>
    <parameter name="iterator_class" optional="false" byreference="false" type="string"/>
  </method>
    <method name="uasort" abstract="false" static="false" visibility="public" final="false">
    <docblock>
      <description compact="Sort the entries with a user-defined comparison function and maintain key association">This function sorts the entries such that keys maintain their correlation with the entry that they are associated with, using a user-defined comparison function.</description>
      <return type="void"/>
    </docblock>
    <parameter name="cmp_function" optional="false" byreference="false" type="object" class="callable"/>
  </method>
    <method name="uksort" abstract="false" static="false" visibility="public" final="false">
    <docblock>
      <description compact="Sort the entries by keys using a user-defined comparison function"/>
      <return type="void"/>
    </docblock>
    <parameter name="cmp_function" optional="false" byreference="false" type="object" class="callable"/>
  </method>
    <method name="unserialize" abstract="false" static="false" visibility="public" final="false">
    <docblock>
      <description compact="Unserialize an ArrayObject"/>
      <return type="void"/>
    </docblock>
    <parameter name="serialized" optional="false" byreference="false" type="string"/>
  </method>
  </parent>
  <interface full="IteratorAggregate" namespace="" name="IteratorAggregate">
    <extends full="Traversable" namespace="" name="Traversable"/>
    <method name="getIterator" abstract="false" static="false" visibility="public" final="false">
    <docblock>
      <description compact="Retrieve an external iterator"/>
      <return type="Traversable"/>
    </docblock>
  </method>
  </interface>
</class>
