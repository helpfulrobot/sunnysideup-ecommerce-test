<?xml version="1.0" encoding="UTF-8"?>
<class xmlns="http://xml.phpdox.net/src" full="Injector" namespace="" name="Injector" abstract="false" final="false" start="126" end="896">
  <file path="/var/www/_modules/ecommerce_test/trunk/docs/en/phpdox/../../../framework/control/injector" file="Injector.php" realpath="/var/www/_modules/ecommerce_test/trunk/framework/control/injector/Injector.php" size="27293" time="2015-03-14T10:39:29+13:00" unixtime="1426282769" sha1="be9bceebe3db509afb7965314008ea0e2365604f" relative="framework/control/injector/Injector.php"/>
  <docblock>
    <description compact="A simple injection manager that manages creating objects and injecting dependencies between them. It borrows quite a lot from ideas taken from Spring's configuration, but is adapted to the stateless PHP way of doing things.">In its simplest form, the dependency injector can be used as a mechanism to
instantiate objects. Simply call

Injector::inst()-&gt;get('ClassName')

and a new instance of ClassName will be created and returned to you.

Classes can have specific configuration defined for them to
indicate dependencies that should be injected. This takes the form of
a static variable $dependencies defined in the class (or configuration),
which indicates the name of a property that should be set.

eg

&lt;code&gt;
class MyController extends Controller {

	public $permissions;
	public $defaultText;

	static $dependencies = array(
		'defaultText'		=&gt; 'Override in configuration',
		'permissions'		=&gt; '%$PermissionService',
	);
}
&lt;/code&gt;

will result in an object of type MyController having the defaultText property
set to 'Override in configuration', and an object identified
as PermissionService set into the property called 'permissions'. The %$
syntax tells the injector to look the provided name up as an item to be created
by the Injector itself.

A key concept of the injector is whether to manage the object as

* A pseudo-singleton, in that only one item will be created for a particular
  identifier (but the same class could be used for multiple identifiers)
* A prototype, where the same configuration is used, but a new object is
  created each time
* unmanaged, in which case a new object is created and injected, but no
  information about its state is managed.

Additional configuration of items managed by the injector can be done by
providing configuration for the types, either by manually loading in an
array describing the configuration, or by specifying the configuration
for a type via SilverStripe's configuration mechanism.

Specify a configuration array of the format

array(
	array(
		'id'			=&gt; 'BeanId',					// the name to be used if diff from the filename
		'priority'		=&gt; 1,							// priority. If another bean is defined with the same ID,
														// but has a lower priority, it is NOT overridden
		'class'			=&gt; 'ClassName',					// the name of the PHP class
		'src'			=&gt; '/path/to/file'				// the location of the class
		'type'			=&gt; 'singleton|prototype'		// if you want prototype object generation, set it as the
		                                                // type
														// By default, singleton is assumed

		'factory' =&gt; 'FactoryService'					// A factory service to use to create instances.
		'construct'		=&gt; array(						// properties to set at construction
			'scalar',
			'%$BeanId',
		)
		'properties'	=&gt; array(
			'name' =&gt; 'value'							// scalar value
			'name' =&gt; '%$BeanId',						// a reference to another bean
			'name' =&gt; array(
				'scalar',
				'%$BeanId'
			)
		)
	)
	// alternatively
	'MyBean'		=&gt; array(
		'class'			=&gt; 'ClassName',
	)
	// or simply
	'OtherBean'		=&gt; 'SomeClass',
)

In addition to specifying the bindings directly in the configuration,
you can simply create a publicly accessible property on the target
class which will automatically be injected if the autoScanProperties
option is set to true. This means a class defined as

&lt;code&gt;
class MyController extends Controller {

	private $permissionService;

	public setPermissionService($p) {
		$this-&gt;permissionService = $p;
	}
}
&lt;/code&gt;

will have setPermissionService called if

* Injector::inst()-&gt;setAutoScanProperties(true) is called and
* A service named 'PermissionService' has been configured</description>
    <author value="marcus@silverstripe.com.au"/>
    <package value="framework"/>
    <subpackage value="injector"/>
    <license name="BSD License http://silverstripe.org/bsd-license/"/>
  </docblock>
  <member name="serviceCache" type="{unknown}" visibility="private" line="133">
    <docblock>
      <description compact="Local store of all services"/>
      <var type="array"/>
    </docblock>
  </member>
  <member name="injectMap" type="{unknown}" visibility="private" line="140">
    <docblock>
      <description compact="Cache of items that need to be mapped for each service that gets injected"/>
      <var type="array"/>
    </docblock>
  </member>
  <member name="specs" type="{unknown}" visibility="private" line="147">
    <docblock>
      <description compact="A store of all the service configurations that have been defined."/>
      <var type="array"/>
    </docblock>
  </member>
  <member name="autoProperties" type="{unknown}" visibility="private" line="153">
    <docblock>
      <description compact="A map of all the properties that should be automagically set on all objects instantiated by the injector"/>
    </docblock>
  </member>
  <member name="instance" type="{unknown}" visibility="private" line="160">
    <docblock>
      <description compact="A singleton if you want to use it that way"/>
      <var type="object">
        <type full="Injector" namespace="" name="Injector"/>
      </var>
    </docblock>
  </member>
  <member name="autoScanProperties" type="{unknown}" default="false" visibility="private" line="168">
    <docblock>
      <description compact="Indicates whether or not to automatically scan properties in injected objects to auto inject stuff, similar to the way grails does things."/>
      <var type="boolean"/>
    </docblock>
  </member>
  <member name="objectCreator" type="{unknown}" visibility="protected" line="182">
    <docblock>
      <description compact="The default factory used to create new instances.">The <link xmlns="http://xml.phpdox.net/src" value="InjectionCreator"/> is used by default, which simply directly
creates objects. This can be changed to use a different default creation
method if desired.
Each individual component can also specify a custom factory to use by
using the `factory` parameter.
</description>
      <var type="object">
        <type full="SilverStripe\Framework\Injector\Factory" namespace="SilverStripe\Framework\Injector" name="Factory"/>
      </var>
    </docblock>
  </member>
  <member name="configLocator" type="{unknown}" visibility="protected" line="189">
    <docblock>
      <description compact="Locator for determining Config properties for services"/>
      <var type="object">
        <type full="ServiceConfigurationLocator" namespace="" name="ServiceConfigurationLocator"/>
      </var>
    </docblock>
  </member>
  <constructor name="__construct" start="197" end="218" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="Create a new injector."/>
      <param type="array" variable="$config">Service configuration</param>
    </docblock>
    <parameter name="config" byreference="false" type="{unknown}" default="null"/>
  </constructor>
  <member name="nestedFrom" type="{unknown}" default="null" visibility="protected" line="225">
    <docblock>
      <description compact="The injector instance this one was copied from when Injector::nest() was called."/>
      <var type="object">
        <type full="Injector" namespace="" name="Injector"/>
      </var>
    </docblock>
  </member>
  <method name="inst" start="233" end="238" abstract="false" final="false" static="true" visibility="public">
    <docblock>
      <description compact="If a user wants to use the injector as a static reference"/>
      <param type="array" variable="$config"/>
      <return type="object">
        <type full="Injector" namespace="" name="Injector"/>
      </return>
    </docblock>
    <parameter name="config" byreference="false" type="{unknown}" default="null"/>
  </method>
  <method name="set_inst" start="246" end="248" abstract="false" final="false" static="true" visibility="public">
    <docblock>
      <description compact="Sets the default global injector instance."/>
      <param type="object" variable="$instance">
        <type full="Injector" namespace="" name="Injector"/>
      </param>
      <return description="Reference to new active Injector instance" type="object">
        <type full="Injector" namespace="" name="Injector"/>
      </return>
    </docblock>
    <parameter name="instance" byreference="false" type="object">
      <type full="\\Injector" namespace="\" name="Injector"/>
    </parameter>
  </method>
  <method name="nest" start="260" end="266" abstract="false" final="false" static="true" visibility="public">
    <docblock>
      <description compact="Make the newly active {@link Injector} be a copy of the current active {@link Injector} instance.">You can then make changes to the injector with methods such as
<link xmlns="http://xml.phpdox.net/src" value="Injector::inst()-&gt;registerService()"/> which will be discarded
upon a subsequent call to <link xmlns="http://xml.phpdox.net/src" value="Injector::unnest()"/></description>
      <return description="Reference to new active Injector instance" type="object">
        <type full="Injector" namespace="" name="Injector"/>
      </return>
    </docblock>
  </method>
  <method name="unnest" start="274" end="276" abstract="false" final="false" static="true" visibility="public">
    <docblock>
      <description compact="Change the active Injector back to the Injector instance the current active Injector object was copied from."/>
      <return description="Reference to restored active Injector instance" type="object">
        <type full="Injector" namespace="" name="Injector"/>
      </return>
    </docblock>
  </method>
  <method name="setAutoScanProperties" start="283" end="285" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="Indicate whether we auto scan injected objects for properties to set."/>
      <param type="boolean" variable="$val"/>
    </docblock>
    <parameter name="val" byreference="false" type="{unknown}"/>
  </method>
  <method name="setObjectCreator" start="292" end="294" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="Sets the default factory to use for creating new objects."/>
      <param type="object" variable="$obj">
        <type full="SilverStripe\Framework\Injector\Factory" namespace="SilverStripe\Framework\Injector" name="Factory"/>
      </param>
    </docblock>
    <parameter name="obj" byreference="false" type="object">
      <type full="SilverStripe\Framework\Injector\Factory" namespace="SilverStripe\Framework\Injector" name="Factory"/>
    </parameter>
  </method>
  <method name="getObjectCreator" start="299" end="301" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description/>
      <return type="object">
        <type full="SilverStripe\Framework\Injector\Factory" namespace="SilverStripe\Framework\Injector" name="Factory"/>
      </return>
    </docblock>
  </method>
  <method name="setConfigLocator" start="307" end="309" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="Set the configuration locator"/>
      <param type="object" variable="$configLocator">
        <type full="ServiceConfigurationLocator" namespace="" name="ServiceConfigurationLocator"/>
      </param>
    </docblock>
    <parameter name="configLocator" byreference="false" type="{unknown}"/>
  </method>
  <method name="getConfigLocator" start="315" end="317" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="Retrieve the configuration locator"/>
      <return type="object">
        <type full="ServiceConfigurationLocator" namespace="" name="ServiceConfigurationLocator"/>
      </return>
    </docblock>
  </method>
  <method name="setInjectMapping" start="334" end="340" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="Add in a specific mapping that should be catered for on a type.">This allows configuration of what should occur when an object
of a particular type is injected, and what items should be injected
for those properties / methods.</description>
      <param type="object" variable="$class">The class to set a mapping for<type full="type" namespace="" name="type"/></param>
      <param type="object" variable="$property">The property to set the mapping for<type full="type" namespace="" name="type"/></param>
      <param type="object" variable="$injectType">The registered type that will be injected<type full="type" namespace="" name="type"/></param>
      <param type="string" variable="$injectVia">Whether to inject by setting a property or calling a setter</param>
    </docblock>
    <parameter name="class" byreference="false" type="{unknown}"/>
    <parameter name="property" byreference="false" type="{unknown}"/>
    <parameter name="toInject" byreference="false" type="{unknown}"/>
    <parameter name="injectVia" byreference="false" type="string" default="'property'"/>
  </method>
  <method name="addAutoProperty" start="355" end="358" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="Add an object that should be automatically set on managed objects">This allows you to specify, for example, that EVERY managed object
will be automatically inject with a log object by the following

$injector-&gt;addAutoProperty('log', new Logger());</description>
      <param type="string" variable="$property">the name of the property</param>
      <param type="object" variable="$object">the object to be set</param>
    </docblock>
    <parameter name="property" byreference="false" type="{unknown}"/>
    <parameter name="object" byreference="false" type="{unknown}"/>
  </method>
  <method name="load" start="365" end="432" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="Load services using the passed in configuration for those services"/>
      <param type="array" variable="$config"/>
    </docblock>
    <parameter name="config" byreference="false" type="array"/>
    <inline>
      <comment value="class is whatever's explicitly set," line="381"/>
      <comment value="or the specid if nothing else available." line="384"/>
      <comment value="make sure the class is set..." line="389"/>
      <comment value="see if we already have this defined. If so, check priority weighting" line="396"/>
      <comment value="okay, actually include it now we know we're going to use it" line="403"/>
      <comment value="make sure to set the id for later when instantiating" line="408"/>
      <comment value="to ensure we get cached" line="409"/>
      <comment value="We've removed this check because new functionality means that the 'class' field doesn't need to refer" line="412"/>
      <comment value="specifically to a class anymore - it could be a compound statement, ala SilverStripe's old Object::create" line="413"/>
      <comment value="functionality" line="414"/>
      <comment value="if (!class_exists($class)) {" line="416"/>
      <comment value="throw new Exception(&quot;Failed to load '$class' from $file&quot;);" line="417"/>
      <comment value="}" line="418"/>
      <comment value="store the specs for now - we lazy load on demand later on." line="420"/>
      <comment value="EXCEPT when there's already an existing instance at this id." line="423"/>
      <comment value="if so, we need to instantiate and replace immediately" line="424"/>
    </inline>
  </method>
  <method name="updateSpec" start="451" end="467" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="Update the configuration of an already defined service">Use this if you don't want to register a complete new config, just append
to an existing configuration. Helpful to avoid overwriting someone else's changes

updateSpec('RequestProcessor', 'filters', '%$MyFilter')</description>
      <param type="string" variable="$id">The name of the service to update the definition for</param>
      <param type="string" variable="$property">The name of the property to update.</param>
      <param type="mixed" variable="$value">The value to set</param>
      <param type="boolean" variable="$append">Whether to append (the default) when the property is an array</param>
    </docblock>
    <parameter name="id" byreference="false" type="{unknown}"/>
    <parameter name="property" byreference="false" type="{unknown}"/>
    <parameter name="value" byreference="false" type="{unknown}"/>
    <parameter name="append" byreference="false" type="{unknown}" default="true"/>
    <inline>
      <comment value="by ref so we're updating the actual value" line="453"/>
      <comment value="and reload the object; existing bindings don't get" line="461"/>
      <comment value="updated though! (for now...)" line="462"/>
    </inline>
  </method>
  <method name="updateSpecConstructor" start="477" end="481" abstract="false" final="false" static="false" visibility="protected">
    <docblock>
      <description compact="Update a class specification to convert constructor configuration information if needed">We do this as a separate process to avoid unneeded calls to convertServiceProperty</description>
      <param type="array" variable="$spec">The class specification to update</param>
    </docblock>
    <parameter name="spec" byreference="true" type="{unknown}"/>
  </method>
  <method name="convertServiceProperty" start="489" end="503" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="Recursively convert a value into its proper representation with service references resolved to actual objects"/>
      <param type="string" variable="$value"/>
    </docblock>
    <parameter name="value" byreference="false" type="{unknown}"/>
  </method>
  <method name="instantiate" start="535" end="572" abstract="false" final="false" static="false" visibility="protected">
    <docblock>
      <description compact="Instantiate a managed object">Given a specification of the form

array(
	'class' =&gt; 'ClassName',
	'properties' =&gt; array('property' =&gt; 'scalar', 'other' =&gt; '%$BeanRef')
	'id' =&gt; 'ServiceId',
	'type' =&gt; 'singleton|prototype'
)

will create a new object, store it in the service registry, and
set any relevant properties

Optionally, you can pass a class name directly for creation

To access this from the outside, you should call -&gt;get('Name') to ensure
the appropriate checks are made on the specific type.</description>
      <param type="array" variable="$spec">The specification of the class to instantiate</param>
      <param type="string" variable="$id">The name of the object being created. If not supplied, then the id will be inferred from the
			object being created</param>
      <param type="string" variable="$type">Whether to create as a singleton or prototype object. Allows code to be explicit as to how it
			wants the object to be returned</param>
    </docblock>
    <parameter name="spec" byreference="false" type="{unknown}"/>
    <parameter name="id" byreference="false" type="{unknown}" default="null"/>
    <parameter name="type" byreference="false" type="{unknown}" default="null"/>
    <inline>
      <comment value="create the object, using any constructor bindings" line="541"/>
      <comment value="figure out if we have a specific id set or not. In some cases, we might be instantiating objects" line="550"/>
      <comment value="that we don't manage directly; we don't want to store these in the service cache below" line="551"/>
      <comment value="now set the service in place if needbe. This is NOT done for prototype beans, as they're" line="556"/>
      <comment value="created anew each time" line="557"/>
      <comment value="this ABSOLUTELY must be set before the object is injected." line="563"/>
      <comment value="This prevents circular reference errors down the line" line="564"/>
      <comment value="now inject safely" line="568"/>
    </inline>
  </method>
  <method name="inject" start="588" end="685" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="Inject $object with available objects from the service cache"/>
      <todo value="Track all the existing objects that have had a service bound">into them, so we can update that binding at a later point if needbe (ie
if the managed service changes)</todo>
      <param type="object" variable="$object">The object to inject</param>
      <param type="string" variable="$asType">The ID this item was loaded as. This is so that the property configuration
			for a type is referenced correctly in case $object is no longer the same
			type as the loaded config specification had it as.</param>
    </docblock>
    <parameter name="object" byreference="false" type="{unknown}"/>
    <parameter name="asType" byreference="false" type="{unknown}" default="null"/>
    <inline>
      <comment value="first off, set any properties defined in the service specification for this" line="592"/>
      <comment value="object type" line="593"/>
      <comment value="now, use any cached information about what properties this object type has" line="601"/>
      <comment value="and set based on name resolution" line="602"/>
      <comment value="we use an object to prevent array copies if/when passed around" line="605"/>
      <comment value="This performs public variable based injection" line="608"/>
      <comment value="Pull the name out of the registry" line="618"/>
      <comment value="and this performs setter based injection" line="626"/>
      <comment value="Pull the name out of the registry" line="635"/>
      <comment value="we store the information about what needs to be injected for objects of this" line="643"/>
      <comment value="type here" line="644"/>
      <comment value="If the type defines some injections, set them here" line="661"/>
      <comment value="we're checking empty in case it already has a property at this name" line="664"/>
      <comment value="this doesn't catch privately set things, but they will only be set by a setter method," line="665"/>
      <comment value="which should be responsible for preventing further setting if it doesn't want it." line="666"/>
      <comment value="Call the 'injected' method if it exists" line="681"/>
    </inline>
  </method>
  <method name="setObjectProperty" start="697" end="703" abstract="false" final="false" static="false" visibility="protected">
    <docblock>
      <description compact="Helper to set a property's value"/>
      <param type="object" variable="$object">Set an object's property to a specific value</param>
      <param type="string" variable="$name">The name of the property to set</param>
      <param type="mixed" variable="$value">The value to set</param>
    </docblock>
    <parameter name="object" byreference="false" type="{unknown}"/>
    <parameter name="name" byreference="false" type="{unknown}"/>
    <parameter name="value" byreference="false" type="{unknown}"/>
  </method>
  <method name="hasService" start="717" end="730" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="Does the given service exist, and if so, what's the stored name for it?">We do a special check here for services that are using compound names. For example,
we might want to say that a property should be injected with Log.File or Log.Memory,
but have only registered a 'Log' service, we'll instead return that.

Will recursively call hasService for each depth of dotting</description>
      <return type="string">The name of the service (as it might be different from the one passed in)</return>
    </docblock>
    <parameter name="name" byreference="false" type="{unknown}"/>
    <inline>
      <comment value="common case, get it overwith first" line="718"/>
      <comment value="okay, check whether we've got a compound name - don't worry about 0 index, cause that's an" line="723"/>
      <comment value="invalid name" line="724"/>
    </inline>
  </method>
  <method name="registerService" start="743" end="752" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="Register a service object with an optional name to register it as the service for"/>
      <param type="object" variable="$service">The object to register<type full="stdClass" namespace="" name="stdClass"/></param>
      <param type="string" variable="$replace">The name of the object to replace (if different to the
				class name of the object to register)</param>
    </docblock>
    <parameter name="service" byreference="false" type="{unknown}"/>
    <parameter name="replace" byreference="false" type="{unknown}" default="null"/>
  </method>
  <method name="registerNamedService" start="759" end="761" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="Register a service with an explicit name"/>
      <deprecated value="since 3.1.1"/>
    </docblock>
    <parameter name="name" byreference="false" type="{unknown}"/>
    <parameter name="service" byreference="false" type="{unknown}"/>
  </method>
  <method name="unregisterNamedObject" start="770" end="772" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="Removes a named object from the cached list of objects managed by the inject"/>
      <param type="object" variable="$name">The name to unregister<type full="type" namespace="" name="type"/></param>
    </docblock>
    <parameter name="name" byreference="false" type="{unknown}"/>
  </method>
  <method name="unregisterAllObjects" start="777" end="779" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="Clear out all objects that are managed by the injetor."/>
    </docblock>
  </method>
  <method name="get" start="805" end="858" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="Get a named managed object">Will first check to see if the item has been registered as a configured service/bean
and return that if so.

Next, will check to see if there's any registered configuration for the given type
and will then try and load that

Failing all of that, will just return a new instance of the
specificied object.</description>
      <param type="string" variable="$name">the name of the service to retrieve. If not a registered
			service, then a class of the given name is instantiated</param>
      <param type="boolean" variable="$asSingleton">Whether to register the created object as a singleton
			if no other configuration is found</param>
      <param type="array" variable="$constructorArgs">Optional set of arguments to pass as constructor arguments
			if this object is to be created from scratch
			(ie asSingleton = false)</param>
    </docblock>
    <parameter name="name" byreference="false" type="{unknown}"/>
    <parameter name="asSingleton" byreference="false" type="{unknown}" default="true"/>
    <parameter name="constructorArgs" byreference="false" type="{unknown}" default="null"/>
    <inline>
      <comment value="reassign the name as it might actually be a compound name" line="806"/>
      <comment value="check to see what the type of bean is. If it's a prototype," line="808"/>
      <comment value="we don't want to return the singleton version of it." line="809"/>
      <comment value="if we're explicitly a prototype OR we're not wanting a singleton" line="813"/>
      <comment value="If we've got this far, we're dealing with a case of a user wanting" line="847"/>
      <comment value="to create an object based on its name. So, we need to fake its config" line="848"/>
      <comment value="if the user wants it managed as a singleton service style object" line="849"/>
      <comment value="need to load the spec in; it'll be given the singleton type by default" line="852"/>
    </inline>
  </method>
  <method name="__get" start="867" end="869" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="Magic method to return an item directly"/>
      <param type="string" variable="$name">The named object to retrieve</param>
      <return type="mixed"/>
    </docblock>
    <parameter name="name" byreference="false" type="{unknown}"/>
  </method>
  <method name="create" start="878" end="882" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="Similar to get() but always returns a new object of the given type">Additional parameters are passed through as</description>
      <param type="object" variable="$name">
        <type full="type" namespace="" name="type"/>
      </param>
    </docblock>
    <parameter name="name" byreference="false" type="{unknown}"/>
  </method>
  <method name="createWithArgs" start="893" end="895" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="Creates an object with the supplied argument array"/>
      <param type="string" variable="$name">Name of the class to create an object of</param>
      <param type="array" variable="$args">Arguments to pass to the constructor</param>
      <return type="mixed"/>
    </docblock>
    <parameter name="name" byreference="false" type="{unknown}"/>
    <parameter name="constructorArgs" byreference="false" type="{unknown}"/>
  </method>
</class>
