<?xml version="1.0" encoding="UTF-8"?>
<class xmlns="http://xml.phpdox.net/src" full="Hierarchy" namespace="" name="Hierarchy" abstract="false" final="false" start="8" end="781">
  <file path="/var/www/_modules/ecommerce_test/trunk/docs/en/phpdox/../../../framework/model" file="Hierarchy.php" realpath="/var/www/_modules/ecommerce_test/trunk/framework/model/Hierarchy.php" size="24730" time="2015-03-14T10:40:57+13:00" unixtime="1426282857" sha1="6b885888f5e1534d1645233b9616357650bdddd7" relative="framework/model/Hierarchy.php"/>
  <docblock>
    <description compact="DataObjects that use the Hierarchy extension can be be organised as a hierarchy, with children and parents.">The most obvious example of this is SiteTree.</description>
    <package value="framework"/>
    <subpackage value="model"/>
  </docblock>
  <extends full="DataExtension" namespace="" name="DataExtension"/>
  <member name="markedNodes" type="{unknown}" visibility="protected" line="10"/>
  <member name="markingFilter" type="{unknown}" visibility="protected" line="12"/>
  <member name="_cache_numChildren" type="{unknown}" visibility="protected" line="17">
    <docblock>
      <description/>
      <var type="object">
        <type full="Int" namespace="" name="Int"/>
      </var>
    </docblock>
  </member>
  <member name="node_threshold_total" type="integer" default="50" visibility="private" line="27">
    <docblock>
      <description/>
      <config/>
      <var description="The lower bounds for the amount of nodes to mark. If set, the logic will expand" type="integer">nodes until it reaches at least this number, and then stops. Root nodes will always
show regardless of this settting. Further nodes can be lazy-loaded via ajax.
This isn't a hard limit. Example: On a value of 10, with 20 root nodes, each having
30 children, the actual node count will be 50 (all root nodes plus first expanded child).</var>
    </docblock>
  </member>
  <member name="node_threshold_leaf" type="integer" default="250" visibility="private" line="39">
    <docblock>
      <description/>
      <config/>
      <var description="Limit on the maximum children a specific node can display." type="integer">Serves as a hard limit to avoid exceeding available server resources
in generating the tree, and browser resources in rendering it.
Nodes with children exceeding this value typically won't display
any children, although this is configurable through the $nodeCountCallback
parameter in <link xmlns="http://xml.phpdox.net/src" value="getChildrenAsUL()"/>. "Root" nodes will always show
all children, regardless of this setting.
</var>
    </docblock>
  </member>
  <method name="augmentSQL" start="41" end="42" abstract="false" final="false" static="false" visibility="public">
    <parameter name="query" byreference="true" type="object">
      <type full="\\SQLQuery" namespace="\" name="SQLQuery"/>
    </parameter>
  </method>
  <method name="augmentDatabase" start="44" end="45" abstract="false" final="false" static="false" visibility="public"/>
  <method name="augmentWrite" start="47" end="48" abstract="false" final="false" static="false" visibility="public">
    <parameter name="manipulation" byreference="true" type="{unknown}"/>
  </method>
  <method name="get_extra_config" start="50" end="54" abstract="false" final="false" static="true" visibility="public">
    <parameter name="class" byreference="false" type="{unknown}"/>
    <parameter name="extension" byreference="false" type="{unknown}"/>
    <parameter name="args" byreference="false" type="{unknown}"/>
  </method>
  <method name="validate" start="59" end="87" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="Validate the owner object - check for existence of infinite loops."/>
    </docblock>
    <parameter name="validationResult" byreference="false" type="object">
      <type full="\\ValidationResult" namespace="\" name="ValidationResult"/>
    </parameter>
    <inline>
      <comment value="The object is new, won't be looping." line="60"/>
      <comment value="The object has no parent, won't be looping." line="62"/>
      <comment value="The parent has not changed, skip the check for performance reasons." line="64"/>
      <comment value="Walk the hierarchy upwards until we reach the top, or until we reach the originating node again." line="67"/>
      <comment value="Hierarchy is looping." line="71"/>
    </inline>
  </method>
  <method name="getChildrenAsUL" start="106" end="183" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="Returns the children of this DataObject as an XHTML UL. This will be called recursively on each child, so if they have children they will be displayed as a UL inside a LI."/>
      <param description="Attributes to add to the UL." type="string" variable="$attributes"/>
      <param description="PHP code to evaluate to start each child - this should include '&lt;li&gt;'" type="object" variable="$titleEval">
        <type full="string|callable" namespace="" name="string|callable"/>
      </param>
      <param description="Extra arguments that will be passed on to children, for if they overload this function." type="string" variable="$extraArg"/>
      <param description="Display only marked children." type="boolean" variable="$limitToMarked"/>
      <param description="The name of the method used to get children from each object" type="string" variable="$childrenMethod"/>
      <param description="Set to true for this first call, and then to false for calls inside the recursion. You" type="boolean" variable="$rootCall">should not change this.</param>
      <param description="See {@link self::$node_threshold_total}" type="int" variable="$nodeCountThreshold"/>
      <param description="Called with the node count, which gives the callback an opportunity" type="object" variable="$nodeCountCallback">to intercept the query. Useful e.g. to avoid excessive children listings
                (Arguments: $parent, $numChildren)<type full="callable" namespace="" name="callable"/></param>
      <return type="string"/>
    </docblock>
    <parameter name="attributes" byreference="false" type="string" default="&quot;&quot;"/>
    <parameter name="titleEval" byreference="false" type="string" default="'&quot;&lt;li&gt;&quot; . $child-&gt;Title'"/>
    <parameter name="extraArg" byreference="false" type="{unknown}" default="null"/>
    <parameter name="limitToMarked" byreference="false" type="{unknown}" default="false"/>
    <parameter name="childrenMethod" byreference="false" type="string" default="&quot;AllChildrenIncludingDeleted&quot;"/>
    <parameter name="numChildrenMethod" byreference="false" type="string" default="&quot;numChildren&quot;"/>
    <parameter name="rootCall" byreference="false" type="{unknown}" default="true"/>
    <parameter name="nodeCountThreshold" byreference="false" type="{unknown}" default="null"/>
    <parameter name="nodeCountCallback" byreference="false" type="{unknown}" default="null"/>
    <inline>
      <comment value="Additionally check if node count requirements are met" line="160"/>
    </inline>
  </method>
  <method name="markPartialTree" start="196" end="214" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="Mark a segment of the tree, by calling mark().">The method performs a breadth-first traversal until the number of nodes is more than minCount.
This is used to get a limited number of tree nodes to show in the CMS initially.

This method returns the number of nodes marked.  After this method is called other methods
can check isExpanded() and isMarked() on individual nodes.</description>
      <param description="See {@link getChildrenAsUL()}" type="int" variable="$nodeCountThreshold"/>
      <return description="The actual number of nodes marked." type="int"/>
    </docblock>
    <parameter name="nodeCountThreshold" byreference="false" type="integer" default="30"/>
    <parameter name="context" byreference="false" type="{unknown}" default="null"/>
    <parameter name="childrenMethod" byreference="false" type="string" default="&quot;AllChildrenIncludingDeleted&quot;"/>
    <parameter name="numChildrenMethod" byreference="false" type="string" default="&quot;numChildren&quot;"/>
    <inline>
      <comment value="foreach can't handle an ever-growing $nodes list" line="204"/>
      <comment value="Undo marking children as opened since they're lazy loaded" line="208"/>
    </inline>
  </method>
  <method name="setMarkingFilter" start="221" end="226" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="Filter the marking to only those object with $node-&gt;$parameterName = $parameterValue"/>
      <param description="The parameter on each node to check when marking." type="string" variable="$parameterName"/>
      <param description="The value the parameter must be to be marked." type="mixed" variable="$parameterValue"/>
    </docblock>
    <parameter name="parameterName" byreference="false" type="{unknown}"/>
    <parameter name="parameterValue" byreference="false" type="{unknown}"/>
  </method>
  <method name="setMarkingFilterFunction" start="233" end="237" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="Filter the marking to only those where the function returns true.">The node in question will be passed to the function.</description>
      <param description="The function name." type="string" variable="$funcName"/>
    </docblock>
    <parameter name="funcName" byreference="false" type="{unknown}"/>
  </method>
  <method name="markingFilterMatches" start="244" end="265" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="Returns true if the marking filter matches on the given node."/>
      <param description="Node to check." type="object" variable="$node">
        <type full="DataObject" namespace="" name="DataObject"/>
      </param>
      <return type="boolean"/>
    </docblock>
    <parameter name="node" byreference="false" type="{unknown}"/>
  </method>
  <method name="markChildren" start="272" end="297" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="Mark all children of the given node that match the marking filter."/>
      <param description="Parent node." type="object" variable="$node">
        <type full="DataObject" namespace="" name="DataObject"/>
      </param>
      <return type="object">
        <type full="DataList" namespace="" name="DataList"/>
      </return>
    </docblock>
    <parameter name="node" byreference="false" type="{unknown}"/>
    <parameter name="context" byreference="false" type="{unknown}" default="null"/>
    <parameter name="childrenMethod" byreference="false" type="string" default="&quot;AllChildrenIncludingDeleted&quot;"/>
    <parameter name="numChildrenMethod" byreference="false" type="string" default="&quot;numChildren&quot;"/>
  </method>
  <method name="markingFinished" start="303" end="312" abstract="false" final="false" static="false" visibility="protected">
    <docblock>
      <description compact="Ensure marked nodes that have children are also marked expanded.">Call this after marking but before iterating over the tree.</description>
    </docblock>
    <parameter name="numChildrenMethod" byreference="false" type="string" default="&quot;numChildren&quot;"/>
    <inline>
      <comment value="Mark childless nodes as expanded." line="304"/>
    </inline>
  </method>
  <method name="markingClasses" start="320" end="335" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="Return CSS classes of 'unexpanded', 'closed', both, or neither, as well as a 'jstree-*' state depending on the marking of this DataObject."/>
      <return type="string"/>
    </docblock>
    <parameter name="numChildrenMethod" byreference="false" type="string" default="&quot;numChildren&quot;"/>
    <inline>
      <comment value="Set jstree open state, or mark it as a leaf (closed) if there are no children" line="326"/>
    </inline>
  </method>
  <method name="markById" start="342" end="352" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="Mark the children of the DataObject with the given ID."/>
      <param description="ID of parent node." type="int" variable="$id"/>
      <param description="If this is true, mark the parent node as opened." type="boolean" variable="$open"/>
    </docblock>
    <parameter name="id" byreference="false" type="{unknown}"/>
    <parameter name="open" byreference="false" type="{unknown}" default="false"/>
  </method>
  <method name="markToExpose" start="358" end="365" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="Expose the given object in the tree, by marking this page and all it ancestors."/>
      <param type="object" variable="$childObj">
        <type full="DataObject" namespace="" name="DataObject"/>
      </param>
    </docblock>
    <parameter name="childObj" byreference="false" type="{unknown}"/>
  </method>
  <method name="markedNodeIDs" start="370" end="372" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="Return the IDs of all the marked nodes"/>
    </docblock>
  </method>
  <method name="parentStack" start="378" end="387" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="Return an array of this page and its ancestors, ordered item -&gt; root."/>
      <return type="array"/>
    </docblock>
  </method>
  <member name="marked" type="array" visibility="protected" line="393">
    <docblock>
      <description compact="True if this DataObject is marked."/>
      <var type="boolean"/>
    </docblock>
  </member>
  <member name="expanded" type="array" visibility="protected" line="399">
    <docblock>
      <description compact="True if this DataObject is expanded."/>
      <var type="boolean"/>
    </docblock>
  </member>
  <member name="treeOpened" type="array" visibility="protected" line="405">
    <docblock>
      <description compact="True if this DataObject is opened."/>
      <var type="boolean"/>
    </docblock>
  </member>
  <method name="markExpanded" start="410" end="413" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="Mark this DataObject as expanded."/>
    </docblock>
  </method>
  <method name="markUnexpanded" start="418" end="421" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="Mark this DataObject as unexpanded."/>
    </docblock>
  </method>
  <method name="markOpened" start="426" end="429" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="Mark this DataObject's tree as opened."/>
    </docblock>
  </method>
  <method name="markClosed" start="434" end="438" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="Mark this DataObject's tree as closed."/>
    </docblock>
  </method>
  <method name="isMarked" start="444" end="448" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="Check if this DataObject is marked."/>
      <return type="boolean"/>
    </docblock>
  </method>
  <method name="isExpanded" start="454" end="458" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="Check if this DataObject is expanded."/>
      <return type="boolean"/>
    </docblock>
  </method>
  <method name="isTreeOpened" start="463" end="467" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="Check if this DataObject's tree is opened."/>
    </docblock>
  </method>
  <method name="getDescendantIDList" start="473" end="477" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="Get a list of this DataObject's and all it's descendants IDs."/>
      <return type="int"/>
    </docblock>
  </method>
  <method name="loadDescendantIDListInto" start="483" end="496" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="Get a list of this DataObject's and all it's descendants ID, and put it in $idList."/>
      <var description="$idList Array to put results in." type="array"/>
    </docblock>
    <parameter name="idList" byreference="true" type="{unknown}"/>
  </method>
  <method name="Children" start="502" end="510" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="Get the children for this DataObject."/>
      <return type="object">
        <type full="ArrayList" namespace="" name="ArrayList"/>
      </return>
    </docblock>
  </method>
  <method name="AllChildren" start="516" end="518" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="Return all children, including those 'not in menus'."/>
      <return type="object">
        <type full="SS_List" namespace="" name="SS_List"/>
      </return>
    </docblock>
  </method>
  <method name="AllChildrenIncludingDeleted" start="528" end="530" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="Return all children, including those that have been deleted but are still in live.">Deleted children will be marked as "DeletedFromStage"
Added children will be marked as "AddedToStage"
Modified children will be marked as "ModifiedOnStage"
Everything else has "SameOnStage" set, as an indicator that this information has been looked up.</description>
      <return type="object">
        <type full="SS_List" namespace="" name="SS_List"/>
      </return>
    </docblock>
    <parameter name="context" byreference="false" type="{unknown}" default="null"/>
  </method>
  <method name="doAllChildrenIncludingDeleted" start="538" end="565" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description/>
      <see value="AllChildrenIncludingDeleted"/>
      <param type="object" variable="$context">
        <type full="unknown_type" namespace="" name="unknown_type"/>
      </param>
      <return type="object">
        <type full="SS_List" namespace="" name="SS_List"/>
      </return>
    </docblock>
    <parameter name="context" byreference="false" type="{unknown}" default="null"/>
    <inline>
      <comment value="Add live site content that doesn't exist on the stage site, if required." line="545"/>
      <comment value="Next, go through the live children.  Only some of these will be listed" line="547"/>
    </inline>
  </method>
  <method name="AllHistoricalChildren" start="571" end="579" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="Return all the children that this page had, including pages that were deleted from both stage &amp; live."/>
    </docblock>
  </method>
  <method name="numHistoricalChildren" start="584" end="591" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="Return the number of children that this page ever had, including pages that were deleted"/>
    </docblock>
  </method>
  <method name="numChildren" start="601" end="611" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="Return the number of direct children.">By default, values are cached after the first invocation.
Can be augumented by <link xmlns="http://xml.phpdox.net/src" value="augmentNumChildrenCountQuery()"/>.
</description>
      <param type="object" variable="$cache">
        <type full="Boolean" namespace="" name="Boolean"/>
      </param>
      <return type="int"/>
    </docblock>
    <parameter name="cache" byreference="false" type="{unknown}" default="true"/>
    <inline>
      <comment value="Build the cache for this class if it doesn't exist." line="602"/>
      <comment value="Hey, this is efficient now!" line="604"/>
      <comment value="We call stageChildren(), because Children() has canView() filtering" line="605"/>
      <comment value="If theres no value in the cache, it just means that it doesn't have any children." line="609"/>
    </inline>
  </method>
  <method name="stageChildren" start="620" end="630" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="Return children from the stage site"/>
      <param description="Inlcude all of the elements, even those not shown in the menus." type="object">(only applicable when extension is applied to <link xmlns="http://xml.phpdox.net/src" value="SiteTree"/>).
<type full="showAll" namespace="" name="showAll"/></param>
      <return type="object">
        <type full="DataList" namespace="" name="DataList"/>
      </return>
    </docblock>
    <parameter name="showAll" byreference="false" type="{unknown}" default="false"/>
  </method>
  <method name="liveChildren" start="640" end="657" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="Return children from the live site, if it exists."/>
      <param description="Include all of the elements, even those not shown in the menus." type="boolean" variable="$showAll">(only applicable when extension is applied to <link xmlns="http://xml.phpdox.net/src" value="SiteTree"/>).
</param>
      <param description="Only return items that have been deleted from stage" type="boolean" variable="$onlyDeletedFromStage"/>
      <return type="object">
        <type full="SS_List" namespace="" name="SS_List"/>
      </return>
    </docblock>
    <parameter name="showAll" byreference="false" type="{unknown}" default="false"/>
    <parameter name="onlyDeletedFromStage" byreference="false" type="{unknown}" default="false"/>
  </method>
  <method name="getParent" start="663" end="670" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="Get the parent of this class."/>
      <return type="object">
        <type full="DataObject" namespace="" name="DataObject"/>
      </return>
    </docblock>
    <parameter name="filter" byreference="false" type="string" default="''"/>
  </method>
  <method name="getAncestors" start="677" end="686" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="Return all the parents of this class in a set ordered from the lowest to highest parent."/>
      <return type="object">
        <type full="SS_List" namespace="" name="SS_List"/>
      </return>
    </docblock>
  </method>
  <method name="getBreadcrumbs" start="695" end="701" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="Returns a human-readable, flattened representation of the path to the object, using its {@link Title()} attribute."/>
      <param type="object">
        <type full="String" namespace="" name="String"/>
      </param>
      <return type="object">
        <type full="String" namespace="" name="String"/>
      </return>
    </docblock>
    <parameter name="separator" byreference="false" type="string" default="' &amp;raquo; '"/>
  </method>
  <method name="naturalPrev" start="709" end="711" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="Get the next node in the tree of the type. If there is no instance of the className descended from this node, then search the parents."/>
      <todo value="Write!"/>
    </docblock>
    <parameter name="className" byreference="false" type="{unknown}"/>
    <parameter name="afterNode" byreference="false" type="{unknown}" default="null"/>
  </method>
  <method name="naturalNext" start="721" end="765" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="Get the next node in the tree of the type. If there is no instance of the className descended from this node, then search the parents."/>
      <param description="Class name of the node to find." type="string" variable="$className"/>
      <param description="ID/ClassName of the node to limit the search to" type="object" variable="$root">
        <type full="string|int" namespace="" name="string|int"/>
      </param>
      <param description="afterNode Used for recursive calls to this function" type="object">
        <type full="DataObject" namespace="" name="DataObject"/>
      </param>
      <return type="object">
        <type full="DataObject" namespace="" name="DataObject"/>
      </return>
    </docblock>
    <parameter name="className" byreference="false" type="{unknown}" default="null"/>
    <parameter name="root" byreference="false" type="integer" default="0"/>
    <parameter name="afterNode" byreference="false" type="{unknown}" default="null"/>
    <inline>
      <comment value="If this node is not the node we are searching from, then we can possibly return this" line="722"/>
      <comment value="node as a solution" line="723"/>
      <comment value="Try all the siblings of this node after the given node" line="740"/>
      <comment value="if( $siblings = DataObject::get( ClassInfo::baseDataClass($this-&gt;owner-&gt;class)," line="741"/>
      <comment xmlns="http://xml.phpdox.net/src" value="&quot;\&quot;ParentID\&quot;={$this-&gt;owner-&gt;ParentID}&quot; . ( $afterNode ) ? &quot;\&quot;Sort\&quot;" line="742"/>
      <comment xmlns="http://xml.phpdox.net/src" value="&gt; {$afterNode-&gt;Sort}&quot; : &quot;&quot; , '\&quot;Sort\&quot; ASC' ) ) $searchNodes-&gt;merge( $siblings );" line="743"/>
      <comment value="if this is not an instance of the root class or has the root id, search the parent" line="757"/>
    </inline>
  </method>
  <method name="flushCache" start="767" end="773" abstract="false" final="false" static="false" visibility="public"/>
  <method name="reset" start="775" end="779" abstract="false" final="false" static="true" visibility="public"/>
  <parent full="DataExtension" namespace="" name="DataExtension">
    <extends full="Extension" namespace="" name="Extension"/>
    <method name="get_extra_config" start="10" end="25" abstract="false" final="false" static="true" visibility="public">
      <parameter name="class" byreference="false" type="{unknown}"/>
      <parameter name="extension" byreference="false" type="{unknown}"/>
      <parameter name="args" byreference="false" type="{unknown}"/>
    </method>
    <method name="unload_extra_statics" start="27" end="29" abstract="false" final="false" static="true" visibility="public">
      <parameter name="class" byreference="false" type="{unknown}"/>
      <parameter name="extension" byreference="false" type="{unknown}"/>
    </method>
    <method name="validate" start="37" end="38" abstract="false" final="false" static="false" visibility="public">
      <docblock>
        <description compact="Hook for extension-specific validation."/>
        <param description="validation result" variable="$validationResult" type="object">
          <type full="Local" namespace="" name="Local"/>
        </param>
        <throws type="object">
          <type full="ValidationException" namespace="" name="ValidationException"/>
        </throws>
      </docblock>
      <parameter name="validationResult" byreference="false" type="object">
        <type full="\\ValidationResult" namespace="\" name="ValidationResult"/>
      </parameter>
    </method>
    <method name="augmentSQL" start="45" end="46" abstract="false" final="false" static="false" visibility="public">
      <docblock>
        <description compact="Edit the given query object to support queries for this extension"/>
        <param description="Query to augment." type="object" variable="$query">
          <type full="SQLQuery" namespace="" name="SQLQuery"/>
        </param>
      </docblock>
      <parameter name="query" byreference="true" type="object">
        <type full="\\SQLQuery" namespace="\" name="SQLQuery"/>
      </parameter>
    </method>
    <method name="augmentDatabase" start="54" end="55" abstract="false" final="false" static="false" visibility="public">
      <docblock>
        <description compact="Update the database schema as required by this extension.">When duplicating a table's structure, remember to duplicate the create options
as well. See <link xmlns="http://xml.phpdox.net/src" value="Versioned-&gt;augmentDatabase"/> for an example.
</description>
      </docblock>
    </method>
    <method name="augmentWrite" start="62" end="63" abstract="false" final="false" static="false" visibility="public">
      <docblock>
        <description compact="Augment a write-record request."/>
        <param description="Query to augment." type="object" variable="$manipulation">
          <type full="SQLQuery" namespace="" name="SQLQuery"/>
        </param>
      </docblock>
      <parameter name="manipulation" byreference="true" type="{unknown}"/>
    </method>
    <method name="onBeforeWrite" start="65" end="66" abstract="false" final="false" static="false" visibility="public"/>
    <method name="onAfterWrite" start="68" end="69" abstract="false" final="false" static="false" visibility="public"/>
    <method name="onBeforeDelete" start="71" end="72" abstract="false" final="false" static="false" visibility="public"/>
    <method name="onAfterDelete" start="74" end="75" abstract="false" final="false" static="false" visibility="public"/>
    <method name="requireDefaultRecords" start="77" end="78" abstract="false" final="false" static="false" visibility="public"/>
    <method name="populateDefaults" start="80" end="81" abstract="false" final="false" static="false" visibility="public"/>
    <method name="can" start="83" end="84" abstract="false" final="false" static="false" visibility="public">
      <parameter name="member" byreference="false" type="{unknown}"/>
    </method>
    <method name="canEdit" start="86" end="87" abstract="false" final="false" static="false" visibility="public">
      <parameter name="member" byreference="false" type="{unknown}"/>
    </method>
    <method name="canDelete" start="89" end="90" abstract="false" final="false" static="false" visibility="public">
      <parameter name="member" byreference="false" type="{unknown}"/>
    </method>
    <method name="canCreate" start="92" end="93" abstract="false" final="false" static="false" visibility="public">
      <parameter name="member" byreference="false" type="{unknown}"/>
    </method>
    <method name="extraStatics" start="107" end="109" abstract="false" final="false" static="false" visibility="public">
      <docblock>
        <description compact="Define extra database fields">Return a map where the keys are db, has_one, etc, and the values are
additional fields/relations to be defined.</description>
        <param description="this method might be called on the class directly" variable="$class" type="object">
          <type full="since" namespace="" name="since"/>
        </param>
        <param description="this can help to extract parameters to help set indexes" variable="$extension" type="object">
          <type full="since" namespace="" name="since"/>
        </param>
        <return description="Returns a map where the keys are db, has_one, etc, and" type="array">the values are additional fields/relations to be defined.</return>
      </docblock>
      <parameter name="class" byreference="false" type="{unknown}" default="null"/>
      <parameter name="extension" byreference="false" type="{unknown}" default="null"/>
    </method>
    <method name="updateCMSFields" start="124" end="125" abstract="false" final="false" static="false" visibility="public">
      <docblock>
        <description compact="This function is used to provide modifications to the form in the CMS by the extension. By default, no changes are made. {@link DataObject-&gt;getCMSFields()}.">Please consider using <link xmlns="http://xml.phpdox.net/src" value="updateFormFields()"/> to globally add
formfields to the record. The method <link xmlns="http://xml.phpdox.net/src" value="updateCMSFields()"/>should just be used to add or modify tabs, or fields which
are specific to the CMS-context.
Caution: Use <link xmlns="http://xml.phpdox.net/src" value="FieldList-&gt;addFieldToTab()"/> to add fields.
</description>
        <param description="FieldList with a contained TabSet" type="object" variable="$fields">
          <type full="FieldList" namespace="" name="FieldList"/>
        </param>
      </docblock>
      <parameter name="fields" byreference="false" type="object">
        <type full="\\FieldList" namespace="\" name="FieldList"/>
      </parameter>
    </method>
    <method name="updateFrontEndFields" start="135" end="136" abstract="false" final="false" static="false" visibility="public">
      <docblock>
        <description compact="This function is used to provide modifications to the form used for front end forms. {@link DataObject-&gt;getFrontEndFields()}">Caution: Use <link xmlns="http://xml.phpdox.net/src" value="FieldList-&gt;push()"/> to add fields.
</description>
        <param description="FieldList without TabSet nesting" type="object" variable="$fields">
          <type full="FieldList" namespace="" name="FieldList"/>
        </param>
      </docblock>
      <parameter name="fields" byreference="false" type="object">
        <type full="\\FieldList" namespace="\" name="FieldList"/>
      </parameter>
    </method>
    <method name="updateCMSActions" start="144" end="145" abstract="false" final="false" static="false" visibility="public">
      <docblock>
        <description compact="This is used to provide modifications to the form actions used in the CMS. {@link DataObject-&gt;getCMSActions()}."/>
        <param description="FieldList" type="object" variable="$actions">
          <type full="FieldList" namespace="" name="FieldList"/>
        </param>
      </docblock>
      <parameter name="actions" byreference="false" type="object">
        <type full="\\FieldList" namespace="\" name="FieldList"/>
      </parameter>
    </method>
    <method name="updateSummaryFields" start="155" end="165" abstract="false" final="false" static="false" visibility="public">
      <docblock>
        <description compact="this function is used to provide modifications to the summary fields in CMS by the extension By default, the summaryField() of its owner will merge more fields defined in the extension's $extra_fields['summary_fields']"/>
        <param description="Array of field names" type="array" variable="$fields"/>
      </docblock>
      <parameter name="fields" byreference="true" type="{unknown}"/>
      <inline>
        <comment value="if summary_fields were passed in numeric array," line="158"/>
        <comment value="convert to an associative array" line="159"/>
      </inline>
    </method>
    <method name="updateFieldLabels" start="175" end="180" abstract="false" final="false" static="false" visibility="public">
      <docblock>
        <description compact="this function is used to provide modifications to the fields labels in CMS by the extension By default, the fieldLabels() of its owner will merge more fields defined in the extension's $extra_fields['field_labels']"/>
        <param description="Array of field labels" type="array" variable="$labels"/>
      </docblock>
      <parameter name="labels" byreference="true" type="{unknown}"/>
    </method>
  </parent>
  <parent full="Extension" namespace="" name="Extension">
    <member name="owner" type="{unknown}" visibility="protected" line="26">
      <docblock>
        <description compact="The object this extension is applied to."/>
        <var type="object">
          <type full="Object" namespace="" name="Object"/>
        </var>
      </docblock>
    </member>
    <member name="ownerBaseClass" type="{unknown}" visibility="protected" line="32">
      <docblock>
        <description compact="The base class that this extension was applied to; $this-&gt;owner must be one of these"/>
        <var type="object">
          <type full="DataObject" namespace="" name="DataObject"/>
        </var>
      </docblock>
    </member>
    <member name="class" type="{unknown}" visibility="public" line="40"/>
    <constructor name="__construct" start="42" end="44" abstract="false" final="false" static="false" visibility="public"/>
    <method name="add_to_class" start="52" end="54" abstract="false" final="false" static="true" visibility="public">
      <docblock>
        <description compact="Called when this extension is added to a particular class"/>
        <static/>
        <param variable="$class"/>
      </docblock>
      <parameter name="class" byreference="false" type="{unknown}"/>
      <parameter name="extensionClass" byreference="false" type="{unknown}"/>
      <parameter name="args" byreference="false" type="{unknown}" default="null"/>
    </method>
    <method name="setOwner" start="64" end="70" abstract="false" final="false" static="false" visibility="public">
      <docblock>
        <description compact="Set the owner of this extension."/>
        <param description="The owner object," type="object" variable="$owner">
          <type full="Object" namespace="" name="Object"/>
        </param>
        <param description="The base class that the extension is applied to; this may be" type="string" variable="$ownerBaseClass">the class of owner, or it may be a parent.  For example, if Versioned was applied to SiteTree,
and then a Page object was instantiated, $owner would be a Page object, but $ownerBaseClass
would be 'SiteTree'.</param>
      </docblock>
      <parameter name="owner" byreference="false" type="{unknown}"/>
      <parameter name="ownerBaseClass" byreference="false" type="{unknown}" default="null"/>
    </method>
    <method name="clearOwner" start="72" end="76" abstract="false" final="false" static="false" visibility="public"/>
    <method name="getOwner" start="83" end="85" abstract="false" final="false" static="false" visibility="public">
      <docblock>
        <description compact="Returns the owner of this extension."/>
        <return type="object">
          <type full="Object" namespace="" name="Object"/>
        </return>
      </docblock>
    </method>
    <method name="get_classname_without_arguments" start="95" end="97" abstract="false" final="false" static="true" visibility="public">
      <docblock>
        <description compact="Helper method to strip eval'ed arguments from a string thats passed to {@link DataObject::$extensions} or {@link Object::add_extension()}."/>
        <param description="E.g. &quot;Versioned('Stage','Live')&quot;" type="string" variable="$extensionStr"/>
        <return description="Extension classname, e.g. &quot;Versioned&quot;" type="string"/>
      </docblock>
      <parameter name="extensionStr" byreference="false" type="{unknown}"/>
    </method>
  </parent>
</class>
