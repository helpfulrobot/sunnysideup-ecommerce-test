<?xml version="1.0" encoding="UTF-8"?>
<class xmlns="http://xml.phpdox.net/src" full="Debug" namespace="" name="Debug" abstract="false" final="false" start="25" end="505">
  <file path="/var/www/_modules/ecommerce_test/trunk/docs/en/phpdox/../../../framework/dev" file="Debug.php" realpath="/var/www/_modules/ecommerce_test/trunk/framework/dev/Debug.php" size="16423" time="2015-03-14T10:39:31+13:00" unixtime="1426282771" sha1="ccaf553e9ce155acc8f8662530000fa6f1fe4351" relative="framework/dev/Debug.php"/>
  <docblock>
    <description compact="Supports debugging and core error handling.">Attaches custom methods to the default error handling hooks
in PHP. Currently, two levels of error are supported:
- Notice
- Warning
- Error
Uncaught exceptions are currently passed to the debug
reporter as standard PHP errors.
Errors handled by this class are passed along to <link xmlns="http://xml.phpdox.net/src" value="SS_Log"/>.
For configuration information, see the <link xmlns="http://xml.phpdox.net/src" value="SS_Log"/>class documentation.
</description>
    <todo value="add support for user defined config: Debug::die_on_notice(true | false)"/>
    <todo value="better way of figuring out the error context to display in highlighted source"/>
    <package value="framework"/>
    <subpackage value="dev"/>
  </docblock>
  <member name="log_errors_to" type="{unknown}" default="null" visibility="private" line="35">
    <docblock>
      <description/>
      <config/>
      <var description="indicating the file where errors are logged." type="object">Filename is relative to the site root.
The named file will have a terse log sent to it, and the full log (an
encoded file containing backtraces and things) will go to a file of a similar
name, but with the suffix ".full" added.<type full="String" namespace="" name="String"/></var>
    </docblock>
  </member>
  <member name="friendly_error_header" type="string" default="'There has been an error'" visibility="private" line="41">
    <docblock>
      <description/>
      <config/>
      <var description="The header of the message shown to users on the live site when a fatal error occurs." type="string"/>
    </docblock>
  </member>
  <member name="friendly_error_detail" type="string" default="'The website server has not been able to respond to your request.'" visibility="private" line="47">
    <docblock>
      <description/>
      <config/>
      <var description="The body of the message shown to users on the live site when a fatal error occurs." type="string"/>
    </docblock>
  </member>
  <method name="show" start="53" end="72" abstract="false" final="false" static="true" visibility="public">
    <docblock>
      <description compact="Show the contents of val in a debug-friendly way.">Debug::show() is intended to be equivalent to dprintr()</description>
    </docblock>
    <parameter name="val" byreference="false" type="{unknown}"/>
    <parameter name="showHeader" byreference="false" type="{unknown}" default="true"/>
  </method>
  <method name="caller" start="79" end="87" abstract="false" final="false" static="true" visibility="public">
    <docblock>
      <description compact="Returns the caller for a specific method"/>
      <return type="array"/>
    </docblock>
  </method>
  <method name="endshow" start="94" end="102" abstract="false" final="false" static="true" visibility="public">
    <docblock>
      <description compact="Close out the show dumper"/>
      <param type="mixed" variable="$val"/>
    </docblock>
    <parameter name="val" byreference="false" type="{unknown}"/>
  </method>
  <method name="dump" start="109" end="111" abstract="false" final="false" static="true" visibility="public">
    <docblock>
      <description compact="Quick dump of a variable."/>
      <param type="mixed" variable="$val"/>
    </docblock>
    <parameter name="val" byreference="false" type="{unknown}"/>
  </method>
  <method name="text" start="119" end="152" abstract="false" final="false" static="true" visibility="public">
    <docblock>
      <description compact="??"/>
      <param type="object" variable="$val">
        <type full="unknown_type" namespace="" name="unknown_type"/>
      </param>
      <return type="object">
        <type full="unknown" namespace="" name="unknown"/>
      </return>
    </docblock>
    <parameter name="val" byreference="false" type="{unknown}"/>
  </method>
  <method name="message" start="157" end="170" abstract="false" final="false" static="true" visibility="public">
    <docblock>
      <description compact="Show a debugging message"/>
    </docblock>
    <parameter name="message" byreference="false" type="{unknown}"/>
    <parameter name="showHeader" byreference="false" type="{unknown}" default="true"/>
  </method>
  <member name="headerCount" type="integer" default="0" visibility="private" line="173"/>
  <method name="header" start="183" end="188" abstract="false" final="false" static="true" visibility="public">
    <docblock>
      <description compact="Send a debug message in an HTTP header. Only works if you are on Dev, and headers have not yet been sent."/>
      <param type="string" variable="$msg"/>
      <param description="(optional)" type="string" variable="$prefix"/>
      <return type="object">
        <type full="void" namespace="" name="void"/>
      </return>
    </docblock>
    <parameter name="msg" byreference="false" type="{unknown}"/>
    <parameter name="prefix" byreference="false" type="{unknown}" default="null"/>
  </method>
  <method name="log" start="195" end="206" abstract="false" final="false" static="true" visibility="public">
    <docblock>
      <description compact="Log to a standard text file output."/>
      <param description="to output" variable="$message" type="string"/>
    </docblock>
    <parameter name="message" byreference="false" type="{unknown}"/>
  </method>
  <method name="loadErrorHandlers" start="212" end="215" abstract="false" final="false" static="true" visibility="public">
    <docblock>
      <description compact="Load error handlers into environment.">Caution: The error levels default to E_ALL is the site is in dev-mode (set in main.php).</description>
    </docblock>
  </method>
  <method name="noticeHandler" start="217" end="238" abstract="false" final="false" static="true" visibility="public">
    <parameter name="errno" byreference="false" type="{unknown}"/>
    <parameter name="errstr" byreference="false" type="{unknown}"/>
    <parameter name="errfile" byreference="false" type="{unknown}"/>
    <parameter name="errline" byreference="false" type="{unknown}"/>
    <parameter name="errcontext" byreference="false" type="{unknown}"/>
    <inline>
      <comment value="Send out the error details to the logger for writing" line="221"/>
    </inline>
  </method>
  <method name="warningHandler" start="249" end="270" abstract="false" final="false" static="true" visibility="public">
    <docblock>
      <description compact="Handle a non-fatal warning error thrown by PHP interpreter."/>
      <param type="object" variable="$errno">
        <type full="unknown_type" namespace="" name="unknown_type"/>
      </param>
      <param type="object" variable="$errstr">
        <type full="unknown_type" namespace="" name="unknown_type"/>
      </param>
      <param type="object" variable="$errfile">
        <type full="unknown_type" namespace="" name="unknown_type"/>
      </param>
      <param type="object" variable="$errline">
        <type full="unknown_type" namespace="" name="unknown_type"/>
      </param>
      <param type="object" variable="$errcontext">
        <type full="unknown_type" namespace="" name="unknown_type"/>
      </param>
    </docblock>
    <parameter name="errno" byreference="false" type="{unknown}"/>
    <parameter name="errstr" byreference="false" type="{unknown}"/>
    <parameter name="errfile" byreference="false" type="{unknown}"/>
    <parameter name="errline" byreference="false" type="{unknown}"/>
    <parameter name="errcontext" byreference="false" type="{unknown}"/>
    <inline>
      <comment value="Send out the error details to the logger for writing" line="253"/>
    </inline>
  </method>
  <method name="fatalHandler" start="283" end="304" abstract="false" final="false" static="true" visibility="public">
    <docblock>
      <description compact="Handle a fatal error, depending on the mode of the site (ie: Dev, Test, or Live).">Runtime execution dies immediately once the error is generated.</description>
      <param type="object" variable="$errno">
        <type full="unknown_type" namespace="" name="unknown_type"/>
      </param>
      <param type="object" variable="$errstr">
        <type full="unknown_type" namespace="" name="unknown_type"/>
      </param>
      <param type="object" variable="$errfile">
        <type full="unknown_type" namespace="" name="unknown_type"/>
      </param>
      <param type="object" variable="$errline">
        <type full="unknown_type" namespace="" name="unknown_type"/>
      </param>
      <param type="object" variable="$errcontext">
        <type full="unknown_type" namespace="" name="unknown_type"/>
      </param>
    </docblock>
    <parameter name="errno" byreference="false" type="{unknown}"/>
    <parameter name="errstr" byreference="false" type="{unknown}"/>
    <parameter name="errfile" byreference="false" type="{unknown}"/>
    <parameter name="errline" byreference="false" type="{unknown}"/>
    <parameter name="errcontext" byreference="false" type="{unknown}"/>
    <inline>
      <comment value="Send out the error details to the logger for writing" line="286"/>
    </inline>
  </method>
  <method name="friendlyError" start="320" end="369" abstract="false" final="false" static="true" visibility="public">
    <docblock>
      <description compact="Render a user-facing error page, using the default HTML error template rendered by {@link ErrorPage} if it exists. Doesn't use the standard {@link SS_HTTPResponse} class the keep dependencies minimal."/>
      <uses value="ErrorPage"/>
      <param description="HTTP Status Code (Default: 500)" type="int" variable="$statusCode"/>
      <param description="User-focused error message. Should not contain code pointers" type="string" variable="$friendlyErrorMessage">or "tech-speak". Used in the HTTP Header and ajax responses.</param>
      <param description="Detailed user-focused message. Is just used if no {@link ErrorPage} is found" type="string" variable="$friendlyErrorDetail">for this specific status code.</param>
      <return description="HTML error message for non-ajax requests, plaintext for ajax-request." type="string"/>
    </docblock>
    <parameter name="statusCode" byreference="false" type="integer" default="500"/>
    <parameter name="friendlyErrorMessage" byreference="false" type="{unknown}" default="null"/>
    <parameter name="friendlyErrorDetail" byreference="false" type="{unknown}" default="null"/>
    <inline>
      <comment value="Ensure the error message complies with the HTTP 1.1 spec" line="331"/>
    </inline>
  </method>
  <method name="create_debug_view" start="376" end="381" abstract="false" final="false" static="true" visibility="public">
    <docblock>
      <description compact="Create an instance of an appropriate DebugView object."/>
      <return type="object">
        <type full="DebugView" namespace="" name="DebugView"/>
      </return>
    </docblock>
  </method>
  <method name="showError" start="393" end="433" abstract="false" final="false" static="true" visibility="public">
    <docblock>
      <description compact="Render a developer facing error page, showing the stack trace and details of the code where the error occured."/>
      <param type="object" variable="$errno">
        <type full="unknown_type" namespace="" name="unknown_type"/>
      </param>
      <param type="object" variable="$errstr">
        <type full="unknown_type" namespace="" name="unknown_type"/>
      </param>
      <param type="object" variable="$errfile">
        <type full="unknown_type" namespace="" name="unknown_type"/>
      </param>
      <param type="object" variable="$errline">
        <type full="unknown_type" namespace="" name="unknown_type"/>
      </param>
      <param type="object" variable="$errcontext">
        <type full="unknown_type" namespace="" name="unknown_type"/>
      </param>
    </docblock>
    <parameter name="errno" byreference="false" type="{unknown}"/>
    <parameter name="errstr" byreference="false" type="{unknown}"/>
    <parameter name="errfile" byreference="false" type="{unknown}"/>
    <parameter name="errline" byreference="false" type="{unknown}"/>
    <parameter name="errcontext" byreference="false" type="{unknown}"/>
    <parameter name="errtype" byreference="false" type="{unknown}"/>
    <inline>
      <comment value="if error is displayed through ajax with CliDebugView, use plaintext output" line="400"/>
      <comment value="Coupling alert: This relies on knowledge of how the director gets its URL, it could be improved." line="408"/>
      <comment value="Make the array 1-based" line="423"/>
    </inline>
  </method>
  <method name="showLines" start="442" end="458" abstract="false" final="false" static="true" visibility="public">
    <docblock>
      <description compact="Utility method to render a snippet of PHP source code, from selected file and highlighting the given line number."/>
      <param type="string" variable="$errfile"/>
      <param type="int" variable="$errline"/>
    </docblock>
    <parameter name="errfile" byreference="false" type="{unknown}"/>
    <parameter name="errline" byreference="false" type="{unknown}"/>
  </method>
  <method name="require_developer_login" start="464" end="504" abstract="false" final="false" static="true" visibility="public">
    <docblock>
      <description compact="Check if the user has permissions to run URL debug tools, else redirect them to log in."/>
    </docblock>
    <inline>
      <comment value="We have to do some raw SQL here, because this method is called in Object::defineMethods()." line="469"/>
      <comment value="This means we have to be careful about what objects we create, as we don't want Object::defineMethods()" line="470"/>
      <comment value="being called again." line="471"/>
      <comment value="This basically calls Permission::checkMember($_SESSION['loggedInAs'], 'ADMIN');" line="472"/>
      <comment value="This basically does the same as" line="494"/>
      <comment value="Security::permissionFailure(null, &quot;You need to login with developer access to make use of debugging tools.&quot;)" line="495"/>
      <comment value="We have to do this because of how early this method is called in execution." line="496"/>
    </inline>
  </method>
</class>
