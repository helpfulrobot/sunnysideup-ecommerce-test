<?xml version="1.0" encoding="UTF-8"?>
<class xmlns="http://xml.phpdox.net/src" full="DataObjectTest" namespace="" name="DataObjectTest" abstract="false" final="false" start="6" end="1289">
  <file path="/var/www/_modules/ecommerce_test/trunk/docs/en/phpdox/../../../framework/tests/model" file="DataObjectTest.php" realpath="/var/www/_modules/ecommerce_test/trunk/framework/tests/model/DataObjectTest.php" size="54394" time="2015-03-14T10:41:11+13:00" unixtime="1426282871" sha1="bcf34158ca64cf0c982144722d357b9427b34343" relative="framework/tests/model/DataObjectTest.php"/>
  <docblock>
    <description/>
    <package value="framework"/>
    <subpackage value="tests"/>
  </docblock>
  <extends full="SapphireTest" namespace="" name="SapphireTest"/>
  <member name="fixture_file" type="string" default="'DataObjectTest.yml'" visibility="protected" line="8"/>
  <member name="extraDataObjects" type="array" visibility="protected" line="10"/>
  <method name="testDb" start="23" end="54" abstract="false" final="false" static="false" visibility="public">
    <inline>
      <comment value="Assert fields are included" line="27"/>
      <comment value="Assert the base fields are excluded" line="30"/>
      <comment value="Assert that the correct field type is returned when passing a field" line="36"/>
      <comment value="Assert overloaded fields have correct data type" line="43"/>
      <comment value="assertEquals doesn't verify the order of array elements, so access keys manually to check order:" line="48"/>
      <comment value="expected: array('Name' =&gt; 'Varchar', 'Comment' =&gt; 'HTMLText')" line="49"/>
    </inline>
  </method>
  <method name="testValidObjectsForBaseFields" start="56" end="67" abstract="false" final="false" static="false" visibility="public"/>
  <method name="testDataIntegrityWhenTwoSubclassesHaveSameField" start="69" end="98" abstract="false" final="false" static="false" visibility="public">
    <inline>
      <comment value="Save data into DataObjectTest_SubTeam.SubclassDatabaseField" line="70"/>
      <comment value="Change the class" line="75"/>
      <comment value="Re-fetch from the database and confirm that the data is sourced from" line="80"/>
      <comment value="OtherSubclassWithSameField.SubclassDatabaseField" line="81"/>
      <comment value="Confirm that save the object in the other direction." line="85"/>
      <comment value="If we restore the class, the old value has been lying dormant and will be available again." line="93"/>
      <comment value="NOTE: This behaviour is volatile; we may change this in the future to clear fields that" line="94"/>
      <comment value="are no longer relevant when changing ClassName" line="95"/>
    </inline>
  </method>
  <method name="testDelete" start="105" end="130" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="Test deletion of DataObjects   - Deleting using delete() on the DataObject   - Deleting using DataObject::delete_by_id()"/>
    </docblock>
    <inline>
      <comment value="Test deleting using delete() on the DataObject" line="106"/>
      <comment value="Get the first page" line="107"/>
      <comment value="Check the page exists before deleting" line="110"/>
      <comment value="Delete the page" line="112"/>
      <comment value="Check that page does not exist after deleting" line="114"/>
      <comment value="Test deleting using DataObject::delete_by_id()" line="119"/>
      <comment value="Get the second page" line="120"/>
      <comment value="Check the page exists before deleting" line="123"/>
      <comment value="Delete the page" line="125"/>
      <comment value="Check that page does not exist after deleting" line="127"/>
    </inline>
  </method>
  <method name="testGet" start="146" end="207" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="Test methods that get DataObjects   - DataObject::get()       - All records of a DataObject       - Filtering       - Sorting       - Joins       - Limit       - Container class   - DataObject::get_by_id()   - DataObject::get_one()        - With and without caching        - With and without ordering"/>
    </docblock>
    <inline>
      <comment value="Test getting all records of a DataObject" line="147"/>
      <comment value="Test WHERE clause" line="151"/>
      <comment value="Test sorting" line="158"/>
      <comment value="Test limit" line="166"/>
      <comment value="Test get_by_id()" line="172"/>
      <comment value="Test get_one() without caching" line="177"/>
      <comment value="Test get_one() with caching" line="184"/>
      <comment value="Test get_one() with order by without caching" line="191"/>
      <comment value="Test get_one() with order by with caching" line="198"/>
      <comment value="Test get_one() with bad case on the classname" line="204"/>
    </inline>
  </method>
  <method name="testGetSubclassFields" start="209" end="218" abstract="false" final="false" static="false" visibility="public">
    <inline>
      <comment value="Test that fields / has_one relations from the parent table and the subclass tables are extracted" line="210"/>
      <comment value="Base field" line="212"/>
      <comment value="Subclass field" line="214"/>
      <comment value="Subclass has_one relation" line="216"/>
    </inline>
  </method>
  <method name="testGetRelationClass" start="220" end="232" abstract="false" final="false" static="false" visibility="public"/>
  <method name="testGetHasOneRelations" start="234" end="241" abstract="false" final="false" static="false" visibility="public">
    <inline>
      <comment value="There will be a field called (relname)ID that contains the ID of the object linked to via the" line="236"/>
      <comment xmlns="http://xml.phpdox.net/src" value="* has_one relation" line="237"/>
      <comment value="There will be a method called $obj-&gt;relname() that returns the object itself" line="239"/>
    </inline>
  </method>
  <method name="testLimitAndCount" start="243" end="255" abstract="false" final="false" static="false" visibility="public">
    <inline>
      <comment value="There's 4 records in total" line="246"/>
      <comment value="Testing &quot;##, ##&quot; syntax" line="249"/>
    </inline>
  </method>
  <method name="testWritePropertyWithoutDBField" start="262" end="269" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="Test writing of database columns which don't correlate to a DBField, e.g. all relation fields on has_one/has_many like &quot;ParentID&quot;."/>
    </docblock>
    <inline>
      <comment value="reload the page from the database" line="266"/>
    </inline>
  </method>
  <method name="testHasManyRelationships" start="276" end="309" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="Test has many relationships   - Test getComponents() gets the ComponentSet of the other side of the relation   - Test the IDs on the DataObjects are set correctly"/>
    </docblock>
    <inline>
      <comment value="Test getComponents() gets the ComponentSet of the other side of the relation" line="279"/>
      <comment value="Test the IDs on the DataObjects are set correctly" line="282"/>
      <comment value="Test that we can add and remove items that already exist in the database" line="287"/>
      <comment value="Test that removing an item from a list doesn't remove it from the same" line="302"/>
      <comment value="relation belonging to a different object" line="303"/>
    </inline>
  </method>
  <method name="testHasOneRelationship" start="311" end="328" abstract="false" final="false" static="false" visibility="public">
    <inline>
      <comment value="Add a captain to team 1" line="315"/>
    </inline>
  </method>
  <method name="testChangedFields" start="333" end="380" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description/>
      <todo value="Extend type change tests (e.g. '0'==NULL)"/>
    </docblock>
  </method>
  <method name="testIsChanged" start="382" end="419" abstract="false" final="false" static="false" visibility="public">
    <inline>
      <comment value="type change only, database stores &quot;1&quot;" line="385"/>
      <comment value="Test when there's not field provided" line="412"/>
    </inline>
  </method>
  <method name="testRandomSort" start="421" end="450" abstract="false" final="false" static="false" visibility="public">
    <inline>
      <comment value="If we perform the same regularly sorted query twice, it should return the same results" line="422"/>
      <comment value="Test when there's not field provided" line="429"/>
      <comment value="If we perform the same random query twice, it shouldn't return the same results" line="437"/>
      <comment value="These shouldn't all be the same (run it 4 times to minimise chance of an accidental collision)" line="447"/>
      <comment value="There's about a 1 in a billion chance of an accidental collision" line="448"/>
    </inline>
  </method>
  <method name="testWriteSavesToHasOneRelations" start="452" end="480" abstract="false" final="false" static="false" visibility="public">
    <inline>
      <comment value="DataObject::write() should save to a has_one relationship if you set a field called (relname)ID" line="453"/>
      <comment value="After giving it a value, you should also be able to set it back to null" line="461"/>
      <comment value="You should also be able to save a blank to it when it's first created" line="467"/>
      <comment value="Ditto for existing records without a value" line="474"/>
    </inline>
  </method>
  <method name="testCanAccessHasOneObjectsAsMethods" start="482" end="491" abstract="false" final="false" static="false" visibility="public">
    <inline>
      <comment value="If you have a has_one relation 'Captain' on $obj, and you set the $obj-&gt;CaptainID = (ID), then the" line="483"/>
      <comment xmlns="http://xml.phpdox.net/src" value="* object itself should be accessible as $obj-&gt;Captain()" line="484"/>
    </inline>
  </method>
  <method name="testFieldNamesThatMatchMethodNamesWork" start="493" end="508" abstract="false" final="false" static="false" visibility="public">
    <inline>
      <comment value="Check that a field name that corresponds to a method on DataObject will still work" line="494"/>
    </inline>
  </method>
  <method name="testFieldExistence" start="513" end="600" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description/>
      <todo value="Re-enable all test cases for field existence after behaviour has been fixed"/>
    </docblock>
    <inline>
      <comment value="hasField() singleton checks" line="520"/>
      <comment value="hasField() instance checks" line="526"/>
      <comment value="$this-&gt;assertFalse($teamInstance-&gt;hasField('SubclassDatabaseField')," line="535"/>
      <comment value="'hasField() doesnt find subclass fields in parentclass instances');" line="536"/>
      <comment value="$this-&gt;assertTrue($teamInstance-&gt;hasField('ExtendedDynamicField')," line="545"/>
      <comment value="'hasField() includes extended dynamic getters in instances');" line="546"/>
      <comment value="hasField() subclass checks" line="548"/>
      <comment value="hasDatabaseField() singleton checks" line="566"/>
      <comment value="$this-&gt;assertTrue($teamSingleton-&gt;hasDatabaseField('ID')," line="567"/>
      <comment value="'hasDatabaseField() finds built-in fields in singletons');" line="568"/>
      <comment value="hasDatabaseField() instance checks" line="572"/>
      <comment value="$this-&gt;assertTrue($teamInstance-&gt;hasDatabaseField('ID')," line="575"/>
      <comment value="'hasDatabaseField() finds built-in fields in instances');" line="576"/>
      <comment value="$this-&gt;assertFalse($teamInstance-&gt;hasDatabaseField('DynamicField')," line="583"/>
      <comment value="'hasDatabaseField() doesnt dynamic getters in instances');" line="584"/>
      <comment value="hasDatabaseField() subclass checks" line="594"/>
    </inline>
  </method>
  <method name="testFieldInheritance" start="605" end="670" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description/>
      <todo value="Re-enable all test cases for field inheritance aggregation after behaviour has been fixed"/>
    </docblock>
  </method>
  <method name="testSearchableFields" start="672" end="707" abstract="false" final="false" static="false" visibility="public"/>
  <method name="testSummaryFieldsCustomLabels" start="709" end="724" abstract="false" final="false" static="false" visibility="public"/>
  <method name="testDataObjectUpdate" start="726" end="752" abstract="false" final="false" static="false" visibility="public">
    <inline>
      <comment value="update() calls can use the dot syntax to reference has_one relations and other methods that return" line="727"/>
      <comment xmlns="http://xml.phpdox.net/src" value="* objects" line="728"/>
      <comment value="Test the simple case of updating fields on the object itself" line="739"/>
      <comment value="Setting Captain.Email and Captain.FirstName will have updated DataObjectTest_Captain.captain1 in" line="742"/>
      <comment xmlns="http://xml.phpdox.net/src" value="* the database.  Although update() doesn't usually write, it does write related records automatically." line="743"/>
      <comment value="Jim's favourite team is team 1; we need to reload the object to the the change that setting Captain." line="748"/>
      <comment xmlns="http://xml.phpdox.net/src" value="* FavouriteTeam.Title made" line="749"/>
    </inline>
  </method>
  <method name="testDataObjectUpdateNew" start="754" end="775" abstract="false" final="false" static="false" visibility="public">
    <inline>
      <comment value="update() calls can use the dot syntax to reference has_one relations and other methods that return" line="755"/>
      <comment xmlns="http://xml.phpdox.net/src" value="* objects" line="756"/>
      <comment value="Test that the captain ID has been updated" line="764"/>
      <comment value="Fetch the newly created captain" line="767"/>
      <comment value="Grab the favourite team and make sure it has the correct values" line="771"/>
    </inline>
  </method>
  <method name="testWritingInvalidDataObjectThrowsException" start="777" end="782" abstract="false" final="false" static="false" visibility="public"/>
  <method name="testWritingValidDataObjectDoesntThrowException" start="784" end="790" abstract="false" final="false" static="false" visibility="public"/>
  <method name="testSubclassCreation" start="792" end="798" abstract="false" final="false" static="false" visibility="public">
    <inline>
      <comment value="Creating a new object of a subclass should set the ClassName field correctly" line="793"/>
    </inline>
  </method>
  <method name="testForceInsert" start="800" end="819" abstract="false" final="false" static="false" visibility="public">
    <inline>
      <comment value="If you set an ID on an object and pass forceInsert = true, then the object should be correctly created" line="801"/>
      <comment value="Check that it actually saves to the database with the correct ID" line="814"/>
    </inline>
  </method>
  <method name="TestHasOwnTable" start="821" end="837" abstract="false" final="false" static="false" visibility="public">
    <inline>
      <comment value="Test DataObject::has_own_table() returns true if the object has $has_one or $db values" line="822"/>
      <comment value="Root DataObject that always have a table, even if they lack both $db and $has_one" line="827"/>
      <comment value="Subclasses without $db or $has_one don't have a table" line="830"/>
      <comment value="Return false if you don't pass it a subclass of DataObject" line="833"/>
    </inline>
  </method>
  <method name="testMerge" start="839" end="882" abstract="false" final="false" static="false" visibility="public">
    <inline>
      <comment value="test right merge of subclasses" line="840"/>
      <comment value="test overwriteWithEmpty flag on existing left values" line="856"/>
      <comment value="test overwriteWithEmpty flag on empty left values" line="866"/>
      <comment value="$SubclassDatabaseField is empty on here" line="868"/>
    </inline>
  </method>
  <method name="testPopulateDefaults" start="884" end="897" abstract="false" final="false" static="false" visibility="public"/>
  <method name="testNewClassInstance" start="899" end="915" abstract="false" final="false" static="false" visibility="public">
    <inline>
      <comment value="Don't write the record, it will reset changed fields" line="904"/>
    </inline>
  </method>
  <method name="testManyManyExtraFields" start="917" end="973" abstract="false" final="false" static="false" visibility="public">
    <inline>
      <comment value="Get all extra fields" line="921"/>
      <comment value="Ensure fields from parent classes are included" line="927"/>
      <comment value="Extra fields are immediately available on the Team class (defined in $many_many_extraFields)" line="935"/>
      <comment value="We'll have to go through the relation to get the extra fields on Player" line="941"/>
      <comment value="Iterate through a many-many relationship and confirm that extra fields are included" line="947"/>
      <comment value="The idea of Sam as a prop is essentially humourous." line="958"/>
      <comment value="Requery and uncache everything" line="961"/>
      <comment value="Check that the Position many_many_extraField is extracted." line="965"/>
      <comment value="Check that ordering a many-many relation by an aggregate column doesn't fail" line="970"/>
    </inline>
  </method>
  <method name="testManyManyUnlimitedRowCount" start="979" end="983" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="Check that the queries generated for many-many relation queries can have unlimitedRowCount called on them."/>
    </docblock>
    <inline>
      <todo value="What's going on here?" line="981"/>
    </inline>
  </method>
  <method name="testSingularName" start="988" end="1002" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="Tests that singular_name() generates sensible defaults."/>
    </docblock>
  </method>
  <method name="testPluralName" start="1007" end="1021" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="Tests that plural_name() generates sensible defaults."/>
    </docblock>
  </method>
  <method name="testHasDatabaseField" start="1023" end="1053" abstract="false" final="false" static="false" visibility="public"/>
  <method name="testFieldTypes" start="1055" end="1065" abstract="false" final="false" static="false" visibility="public"/>
  <method name="testTwoSubclassesWithTheSameFieldNameWork" start="1067" end="1083" abstract="false" final="false" static="false" visibility="public">
    <inline>
      <comment value="Create two objects of different subclasses, setting the values of fields that are" line="1068"/>
      <comment value="defined separately in each subclass" line="1069"/>
      <comment value="Write them to the database" line="1075"/>
      <comment value="Check that the values of those fields are properly read from the database" line="1079"/>
    </inline>
  </method>
  <method name="testClassNameSetForNewObjects" start="1085" end="1088" abstract="false" final="false" static="false" visibility="public"/>
  <method name="testHasValue" start="1090" end="1115" abstract="false" final="false" static="false" visibility="public"/>
  <method name="testHasMany" start="1117" end="1149" abstract="false" final="false" static="false" visibility="public"/>
  <method name="testGetRemoteJoinField" start="1151" end="1161" abstract="false" final="false" static="false" visibility="public"/>
  <method name="testBelongsTo" start="1163" end="1191" abstract="false" final="false" static="false" visibility="public"/>
  <method name="testInvalidate" start="1196" end="1205" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description/>
      <expectedexception value="LogicException"/>
    </docblock>
    <inline>
      <comment value="Prohibit invalid object manipulation" line="1202"/>
    </inline>
  </method>
  <method name="testToMap" start="1207" end="1225" abstract="false" final="false" static="false" visibility="public"/>
  <method name="testIsEmpty" start="1227" end="1233" abstract="false" final="false" static="false" visibility="public"/>
  <method name="testRelField" start="1235" end="1252" abstract="false" final="false" static="false" visibility="public">
    <inline>
      <comment value="Test traversal of a single has_one" line="1237"/>
      <comment value="Test direct field access" line="1239"/>
      <comment value="Test that we can traverse more than once, and that arbitrary methods are okay" line="1243"/>
      <comment value="Test that relField works on db field manipulations" line="1249"/>
    </inline>
  </method>
  <method name="testRelObject" start="1254" end="1269" abstract="false" final="false" static="false" visibility="public">
    <inline>
      <comment value="Test traversal of a single has_one" line="1257"/>
      <comment value="Test direct field access" line="1261"/>
      <comment value="Test that we can traverse more than once, and that arbitrary methods are okay" line="1266"/>
    </inline>
  </method>
  <method name="testLateStaticBindingStyle" start="1271" end="1280" abstract="false" final="false" static="false" visibility="public">
    <inline>
      <comment value="Confirm that DataObjectTest_Player::get() operates as excepted" line="1272"/>
      <comment value="You can't pass arguments to LSB syntax - use the DataList methods instead." line="1276"/>
    </inline>
  </method>
  <method name="testBrokenLateStaticBindingStyle" start="1282" end="1287" abstract="false" final="false" static="false" visibility="public">
    <inline>
      <comment value="If you call DataObject::get() you have to pass a first argument" line="1283"/>
    </inline>
  </method>
  <parent full="SapphireTest" namespace="" name="SapphireTest">
    <extends full="PHPUnit_Framework_TestCase" namespace="" name="PHPUnit_Framework_TestCase"/>
    <member name="fixture_file" type="{unknown}" default="null" visibility="protected" line="27">
      <docblock>
        <description compact="Path to fixture data for this test run.">If passed as an array, multiple fixture files will be loaded.
Please note that you won't be able to refer with "=&gt;" notation
between the fixtures, they act independent of each other.</description>
        <var type="object">
          <type full="string|array" namespace="" name="string|array"/>
        </var>
      </docblock>
    </member>
    <member name="fixtureFactory" type="{unknown}" visibility="protected" line="32">
      <docblock>
        <description/>
        <var type="object">
          <type full="FixtureFactory" namespace="" name="FixtureFactory"/>
        </var>
      </docblock>
    </member>
    <member name="skipTest" type="{unknown}" default="false" visibility="protected" line="37">
      <docblock>
        <description/>
        <var description="Set whether to include this test in the TestRunner or to skip this." type="object">
          <type full="bool" namespace="" name="bool"/>
        </var>
      </docblock>
    </member>
    <member name="usesDatabase" type="{unknown}" default="null" visibility="protected" line="44">
      <docblock>
        <description/>
        <var description="If set to TRUE, this will force a test database to be generated" type="object">in <link xmlns="http://xml.phpdox.net/src" value="setUp()"/>. Note that this flag is overruled by the presence of a
<link xmlns="http://xml.phpdox.net/src" value="$fixture_file"/>, which always forces a database build.
<type full="Boolean" namespace="" name="Boolean"/></var>
      </docblock>
    </member>
    <member name="originalMailer" type="{unknown}" visibility="protected" line="46"/>
    <member name="originalMemberPasswordValidator" type="{unknown}" visibility="protected" line="47"/>
    <member name="originalRequirements" type="{unknown}" visibility="protected" line="48"/>
    <member name="originalIsRunningTest" type="{unknown}" visibility="protected" line="49"/>
    <member name="originalTheme" type="{unknown}" visibility="protected" line="50"/>
    <member name="originalNestedURLsState" type="{unknown}" visibility="protected" line="51"/>
    <member name="originalMemoryLimit" type="{unknown}" visibility="protected" line="52"/>
    <member name="mailer" type="{unknown}" visibility="protected" line="54"/>
    <member name="regular_manifest" type="{unknown}" visibility="protected" line="59">
      <docblock>
        <description compact="Pointer to the manifest that isn't a test manifest"/>
      </docblock>
    </member>
    <member name="is_running_test" type="{unknown}" default="false" visibility="protected" line="64">
      <docblock>
        <description/>
        <var type="boolean"/>
      </docblock>
    </member>
    <member name="test_class_manifest" type="{unknown}" visibility="protected" line="66"/>
    <member name="requireDefaultRecordsFrom" type="array" visibility="protected" line="73">
      <docblock>
        <description compact="By default, setUp() does not require default records. Pass class names in here, and the require/augment default records function will be called on them."/>
      </docblock>
    </member>
    <member name="illegalExtensions" type="array" visibility="protected" line="83">
      <docblock>
        <description compact="A list of extensions that can't be applied during the execution of this run.  If they are applied, they will be temporarily removed and a database migration called.">The keys of the are the classes that the extensions can't be applied the extensions to, and
the values are an array of illegal extensions on that class.</description>
      </docblock>
    </member>
    <member name="requiredExtensions" type="array" visibility="protected" line="98">
      <docblock>
        <description compact="A list of extensions that must be applied during the execution of this run.  If they are not applied, they will be temporarily added and a database migration called.">The keys of the are the classes to apply the extensions to, and the values are an array
of required extensions on that class.

Example:
&lt;code&gt;
array("MyTreeDataObject" =&gt; array("Versioned", "Hierarchy"))
&lt;/code&gt;</description>
      </docblock>
    </member>
    <member name="extraDataObjects" type="array" visibility="protected" line="106">
      <docblock>
        <description compact="By default, the test database won't contain any DataObjects that have the interface TestOnly.">This variable lets you define additional TestOnly DataObjects to set up for this test.
Set it to an array of DataObject subclass names.</description>
      </docblock>
    </member>
    <member name="backupGlobals" type="{unknown}" default="FALSE" visibility="protected" line="114">
      <docblock>
        <description compact="We need to disabling backing up of globals to avoid overriding the few globals SilverStripe relies on, like $lang for the i18n subsystem."/>
        <see value="http://sebastian-bergmann.de/archives/797-Global-Variables-and-PHPUnit.html"/>
      </docblock>
    </member>
    <member name="fixtures" type="array" visibility="protected" line="164">
      <docblock>
        <description/>
        <var description="$fixtures Array of {@link YamlFixture} instances" type="array"/>
        <deprecated value="3.1 Use $fixtureFactory instad"/>
      </docblock>
    </member>
    <member name="model" type="{unknown}" visibility="protected" line="166"/>
    <member name="cache_generatedMembers" type="array" visibility="protected" line="884">
      <docblock>
        <description compact="Cache for logInWithPermission()"/>
      </docblock>
    </member>
    <method name="is_running_test" start="131" end="133" abstract="false" final="false" static="true" visibility="public">
      <docblock>
        <description compact="Determines if unit tests are currently run (via {@link TestRunner}).">This is used as a cheap replacement for fully mockable state
in certain contiditions (e.g. access checks).
Caution: When set to FALSE, certain controllers might bypass
access checks, so this is a very security sensitive setting.</description>
        <return type="boolean"/>
      </docblock>
    </method>
    <method name="set_is_running_test" start="135" end="137" abstract="false" final="false" static="true" visibility="public">
      <parameter name="bool" byreference="false" type="{unknown}"/>
    </method>
    <method name="set_test_class_manifest" start="142" end="144" abstract="false" final="false" static="true" visibility="public">
      <docblock>
        <description compact="Set the manifest to be used to look up test classes by helper functions"/>
      </docblock>
      <parameter name="manifest" byreference="false" type="{unknown}"/>
    </method>
    <method name="get_test_class_manifest" start="149" end="151" abstract="false" final="false" static="true" visibility="public">
      <docblock>
        <description compact="Return the manifest being used to look up test classes by helper functions"/>
      </docblock>
    </method>
    <method name="get_fixture_file" start="156" end="158" abstract="false" final="false" static="true" visibility="public">
      <docblock>
        <description/>
        <return type="object">
          <type full="String" namespace="" name="String"/>
        </return>
      </docblock>
    </method>
    <method name="setUp" start="168" end="277" abstract="false" final="false" static="false" visibility="public">
      <inline>
        <comment value="We cannot run the tests on this abstract class." line="169"/>
        <comment value="Mark test as being run" line="180"/>
        <comment value="i18n needs to be set to the defaults or tests fail" line="184"/>
        <comment value="Set default timezone consistently to avoid NZ-specific dependencies" line="189"/>
        <comment value="Remove password validation" line="192"/>
        <comment value="Set up email" line="211"/>
        <todo value="this could be a special test model" line="217"/>
        <comment value="Set up fixture" line="220"/>
        <comment value="echo &quot;Re-creating temp database... &quot;;" line="225"/>
        <comment value="Support fixture paths relative to the test class, rather than relative to webroot" line="246"/>
        <comment value="String checking is faster than file_exists() calls." line="247"/>
        <comment value="backwards compatibility: Load first fixture into $this-&gt;fixture" line="260"/>
        <comment value="Preserve memory settings" line="269"/>
        <comment value="turn off template debugging" line="272"/>
        <comment value="Clear requirements" line="275"/>
      </inline>
    </method>
    <method name="setUpOnce" start="287" end="330" abstract="false" final="false" static="false" visibility="public">
      <docblock>
        <description compact="Called once per test case ({@link SapphireTest} subclass).">This is different to <link xmlns="http://xml.phpdox.net/src" value="setUp()"/>, which gets called once
per method. Useful to initialize expensive operations which
don't change state for any called method inside the test,
e.g. dynamically adding an extension. See <link xmlns="http://xml.phpdox.net/src" value="tearDownOnce()"/>for tearing down the state again.
</description>
      </docblock>
      <inline>
        <comment value="Remove any illegal extensions that are present" line="294"/>
        <comment value="Add any required extensions that aren't present" line="306"/>
        <comment value="If we have made changes to the extensions present, then migrate the database schema." line="319"/>
        <comment value="clear singletons, they're caching old extension info" line="324"/>
        <comment value="which is used in DatabaseAdmin-&gt;doBuild()" line="325"/>
        <comment value="Set default timezone consistently to avoid NZ-specific dependencies" line="328"/>
      </inline>
    </method>
    <method name="tearDownOnce" start="335" end="356" abstract="false" final="false" static="false" visibility="public">
      <docblock>
        <description compact="tearDown method that's called once per test class rather once per test method."/>
      </docblock>
      <inline>
        <comment value="If we have made changes to the extensions present, then migrate the database schema." line="336"/>
        <comment value="Remove extensions added for testing" line="338"/>
        <comment value="Reapply ones removed" line="345"/>
      </inline>
    </method>
    <method name="getFixtureFactory" start="361" end="364" abstract="false" final="false" static="false" visibility="public">
      <docblock>
        <description/>
        <return type="object">
          <type full="FixtureFactory" namespace="" name="FixtureFactory"/>
        </return>
      </docblock>
    </method>
    <method name="setFixtureFactory" start="366" end="369" abstract="false" final="false" static="false" visibility="public">
      <parameter name="factory" byreference="false" type="object">
        <type full="\\FixtureFactory" namespace="\" name="FixtureFactory"/>
      </parameter>
    </method>
    <method name="idFromFixture" start="378" end="390" abstract="false" final="false" static="false" visibility="protected">
      <docblock>
        <description compact="Get the ID of an object from the fixture."/>
        <param description="data class, as specified in your fixture file.  Parent classes won't work" variable="$className" type="object">
          <type full="The" namespace="" name="The"/>
        </param>
        <param description="identifier string, as provided in your fixture file" variable="$identifier" type="object">
          <type full="The" namespace="" name="The"/>
        </param>
        <return type="int"/>
      </docblock>
      <parameter name="className" byreference="false" type="{unknown}"/>
      <parameter name="identifier" byreference="false" type="{unknown}"/>
    </method>
    <method name="allFixtureIDs" start="399" end="401" abstract="false" final="false" static="false" visibility="protected">
      <docblock>
        <description compact="Return all of the IDs in the fixture of a particular class name.">Will collate all IDs form all fixtures if multiple fixtures are provided.</description>
        <param type="string" variable="$className"/>
        <return description="map of fixture-identifier =&gt; object-id" type="object">
          <type full="A" namespace="" name="A"/>
        </return>
      </docblock>
      <parameter name="className" byreference="false" type="{unknown}"/>
    </method>
    <method name="objFromFixture" start="411" end="423" abstract="false" final="false" static="false" visibility="protected">
      <docblock>
        <description compact="Get an object from the fixture."/>
        <param description="The data class, as specified in your fixture file. Parent classes won't work" type="string" variable="$className"/>
        <param description="The identifier string, as provided in your fixture file" type="string" variable="$identifier"/>
        <return type="object">
          <type full="DataObject" namespace="" name="DataObject"/>
        </return>
      </docblock>
      <parameter name="className" byreference="false" type="{unknown}"/>
      <parameter name="identifier" byreference="false" type="{unknown}"/>
    </method>
    <method name="loadFixture" start="432" end="436" abstract="false" final="false" static="false" visibility="public">
      <docblock>
        <description compact="Load a YAML fixture file into the database.">Once loaded, you can use idFromFixture() and objFromFixture() to get items from the fixture.
Doesn't clear existing fixtures.</description>
        <param description="location of the .yml fixture file, relative to the site base dir" variable="$fixtureFile" type="object">
          <type full="The" namespace="" name="The"/>
        </param>
      </docblock>
      <parameter name="fixtureFile" byreference="false" type="{unknown}"/>
    </method>
    <method name="clearFixtures" start="442" end="445" abstract="false" final="false" static="false" visibility="public">
      <docblock>
        <description compact="Clear all fixtures which were previously loaded through {@link loadFixture()}"/>
      </docblock>
    </method>
    <method name="getCurrentAbsolutePath" start="452" end="456" abstract="false" final="false" static="false" visibility="protected">
      <docblock>
        <description compact="Useful for writing unit tests without hardcoding folder structures."/>
        <return description="Absolute path to current class." type="object">
          <type full="String" namespace="" name="String"/>
        </return>
      </docblock>
    </method>
    <method name="getCurrentRelativePath" start="461" end="466" abstract="false" final="false" static="false" visibility="protected">
      <docblock>
        <description/>
        <return description="File path relative to webroot" type="object">
          <type full="String" namespace="" name="String"/>
        </return>
      </docblock>
    </method>
    <method name="tearDown" start="468" end="504" abstract="false" final="false" static="false" visibility="public">
      <inline>
        <comment value="Preserve memory settings" line="469"/>
        <comment value="Restore email configuration" line="472"/>
        <comment value="Restore password validation" line="479"/>
        <comment value="Restore requirements" line="484"/>
        <comment value="Mark test as no longer being run - we use originalIsRunningTest to allow for nested SapphireTest calls" line="489"/>
        <comment value="Reset mocked datetime" line="493"/>
        <comment value="Stop the redirection that might have been requested in the test." line="496"/>
        <comment value="Note: Ideally a clean Controller should be created for each test." line="497"/>
        <comment value="Now all tests executed in a batch share the same controller." line="498"/>
      </inline>
    </method>
    <method name="assertContains" start="506" end="516" abstract="false" final="false" static="true" visibility="public">
      <parameter name="needle" byreference="false" type="{unknown}"/>
      <parameter name="haystack" byreference="false" type="{unknown}"/>
      <parameter name="message" byreference="false" type="string" default="''"/>
      <parameter name="ignoreCase" byreference="false" type="{unknown}" default="FALSE"/>
      <parameter name="checkForObjectIdentity" byreference="false" type="{unknown}" default="TRUE"/>
      <parameter name="checkForNonObjectIdentity" byreference="false" type="{unknown}" default="false"/>
    </method>
    <method name="assertNotContains" start="518" end="528" abstract="false" final="false" static="true" visibility="public">
      <parameter name="needle" byreference="false" type="{unknown}"/>
      <parameter name="haystack" byreference="false" type="{unknown}"/>
      <parameter name="message" byreference="false" type="string" default="''"/>
      <parameter name="ignoreCase" byreference="false" type="{unknown}" default="FALSE"/>
      <parameter name="checkForObjectIdentity" byreference="false" type="{unknown}" default="TRUE"/>
      <parameter name="checkForNonObjectIdentity" byreference="false" type="{unknown}" default="false"/>
    </method>
    <method name="clearEmails" start="533" end="535" abstract="false" final="false" static="false" visibility="public">
      <docblock>
        <description compact="Clear the log of emails sent"/>
      </docblock>
    </method>
    <method name="findEmail" start="547" end="549" abstract="false" final="false" static="false" visibility="public">
      <docblock>
        <description compact="Search for an email that was sent.">All of the parameters can either be a string, or, if they start with "/", a PREG-compatible regular expression.</description>
        <param variable="$to"/>
        <param variable="$from"/>
        <param variable="$subject"/>
        <param variable="$content"/>
        <return description="Contains keys: 'type', 'to', 'from', 'subject','content', 'plainContent', 'attachedFiles'," type="array">'customHeaders', 'htmlContent', 'inlineImages'</return>
      </docblock>
      <parameter name="to" byreference="false" type="{unknown}"/>
      <parameter name="from" byreference="false" type="{unknown}" default="null"/>
      <parameter name="subject" byreference="false" type="{unknown}" default="null"/>
      <parameter name="content" byreference="false" type="{unknown}" default="null"/>
    </method>
    <method name="assertEmailSent" start="561" end="576" abstract="false" final="false" static="false" visibility="public">
      <docblock>
        <description compact="Assert that the matching email was sent since the last call to clearEmails() All of the parameters can either be a string, or, if they start with &quot;/&quot;, a PREG-compatible regular expression."/>
        <param variable="$to"/>
        <param variable="$from"/>
        <param variable="$subject"/>
        <param variable="$content"/>
        <return description="Contains the keys: 'type', 'to', 'from', 'subject', 'content', 'plainContent', 'attachedFiles'," type="array">'customHeaders', 'htmlContent', inlineImages'</return>
      </docblock>
      <parameter name="to" byreference="false" type="{unknown}"/>
      <parameter name="from" byreference="false" type="{unknown}" default="null"/>
      <parameter name="subject" byreference="false" type="{unknown}" default="null"/>
      <parameter name="content" byreference="false" type="{unknown}" default="null"/>
    </method>
    <method name="assertDOSContains" start="599" end="622" abstract="false" final="false" static="false" visibility="public">
      <docblock>
        <description compact="Assert that the given {@link SS_List} includes DataObjects matching the given key-value pairs.  Each match must correspond to 1 distinct record."/>
        <param description="patterns to match.  Each pattern is a map of key-value pairs.  You can" variable="$matches" type="object">either pass a single pattern or an array of patterns.<type full="The" namespace="" name="The"/></param>
        <param description="{@link SS_List} to test." variable="$dataObjectSet" type="object">Examples
--------
Check that $members includes an entry with Email = sam@example.com:
     $this-&gt;assertDOSContains(array('Email' =&gt; '...@example.com'), $members);

Check that $members includes entries with Email = sam@example.com and with
Email = ingo@example.com:
     $this-&gt;assertDOSContains(array(
        array('Email' =&gt; '...@example.com'),
        array('Email' =&gt; 'i...@example.com'),
     ), $members);<type full="The" namespace="" name="The"/></param>
      </docblock>
      <parameter name="matches" byreference="false" type="{unknown}"/>
      <parameter name="dataObjectSet" byreference="false" type="{unknown}"/>
      <inline>
        <comment value="Remove it from $extracted so that we don't get duplicate mapping." line="607"/>
        <comment value="We couldn't find a match - assertion failed" line="614"/>
      </inline>
    </method>
    <method name="assertDOSEquals" start="641" end="674" abstract="false" final="false" static="false" visibility="public">
      <docblock>
        <description compact="Assert that the given {@link SS_List} includes only DataObjects matching the given key-value pairs.  Each match must correspond to 1 distinct record."/>
        <param description="patterns to match.  Each pattern is a map of key-value pairs.  You can" variable="$matches" type="object">either pass a single pattern or an array of patterns.<type full="The" namespace="" name="The"/></param>
        <param description="{@link SS_List} to test." variable="$dataObjectSet" type="object">Example
--------
Check that *only* the entries Sam Minnee and Ingo Schommer exist in $members.  Order doesn't
matter:
    $this-&gt;assertDOSEquals(array(
       array('FirstName' =&gt;'Sam', 'Surname' =&gt; 'Minnee'),
       array('FirstName' =&gt; 'Ingo', 'Surname' =&gt; 'Schommer'),
     ), $members);<type full="The" namespace="" name="The"/></param>
      </docblock>
      <parameter name="matches" byreference="false" type="{unknown}"/>
      <parameter name="dataObjectSet" byreference="false" type="{unknown}"/>
      <inline>
        <comment value="Remove it from $extracted so that we don't get duplicate mapping." line="651"/>
        <comment value="We couldn't find a match - assertion failed" line="658"/>
        <comment value="If we have leftovers than the DOS has extra data that shouldn't be there" line="667"/>
      </inline>
    </method>
    <method name="assertDOSAllMatch" start="688" end="699" abstract="false" final="false" static="false" visibility="public">
      <docblock>
        <description compact="Assert that the every record in the given {@link SS_List} matches the given key-value pairs."/>
        <param description="pattern to match.  The pattern is a map of key-value pairs." variable="$match" type="object">
          <type full="The" namespace="" name="The"/>
        </param>
        <param description="{@link SS_List} to test." variable="$dataObjectSet" type="object">Example
--------
Check that every entry in $members has a Status of 'Active':
    $this-&gt;assertDOSAllMatch(array('Status' =&gt; 'Active'), $members);<type full="The" namespace="" name="The"/></param>
      </docblock>
      <parameter name="match" byreference="false" type="{unknown}"/>
      <parameter name="dataObjectSet" byreference="false" type="{unknown}"/>
    </method>
    <method name="using_temp_db" start="723" end="728" abstract="false" final="false" static="true" visibility="public">
      <docblock>
        <description compact="Returns true if we are currently using a temporary database"/>
      </docblock>
    </method>
    <method name="kill_temp_db" start="730" end="747" abstract="false" final="false" static="true" visibility="public">
      <inline>
        <comment value="Delete our temporary database" line="731"/>
        <comment value="Some DataExtensions keep a static cache of information that needs to" line="736"/>
        <comment value="be reset whenever the database is killed" line="737"/>
        <comment value="echo &quot;Deleted temp database &quot; . $dbConn-&gt;currentDatabase() . &quot;\n&quot;;" line="743"/>
      </inline>
    </method>
    <method name="empty_temp_db" start="752" end="765" abstract="false" final="false" static="true" visibility="public">
      <docblock>
        <description compact="Remove all content from the temporary database."/>
      </docblock>
      <inline>
        <comment value="Some DataExtensions keep a static cache of information that needs to" line="757"/>
        <comment value="be reset whenever the database is cleaned out" line="758"/>
      </inline>
    </method>
    <method name="create_temp_db" start="767" end="792" abstract="false" final="false" static="true" visibility="public">
      <inline>
        <comment value="Disable PHPUnit error handling" line="768"/>
        <comment value="Create a temporary database, and force the connection to use UTC for time" line="771"/>
        <comment value="Reinstate PHPUnit error handling" line="788"/>
      </inline>
    </method>
    <method name="delete_all_temp_dbs" start="794" end="807" abstract="false" final="false" static="true" visibility="public"/>
    <method name="resetDBSchema" start="813" end="848" abstract="false" final="false" static="false" visibility="public">
      <docblock>
        <description compact="Reset the testing database's schema."/>
        <param description="true, the extraDataObjects tables will also be included" variable="$includeExtraDataObjects" type="object">
          <type full="If" namespace="" name="If"/>
        </param>
      </docblock>
      <parameter name="includeExtraDataObjects" byreference="false" type="{unknown}" default="false"/>
      <inline>
        <comment value="clear singletons, they're caching old extension info which is used in DatabaseAdmin-&gt;doBuild()" line="817"/>
        <comment value="Check if class exists before trying to instantiate - this sidesteps any manifest weirdness" line="828"/>
        <comment value="If we have additional dataobjects which need schema, do so here:" line="835"/>
      </inline>
    </method>
    <method name="logInWithPermission" start="854" end="879" abstract="false" final="false" static="false" visibility="public">
      <docblock>
        <description compact="Create a member and group with the given permission code, and log in with it.">Returns the member ID.</description>
      </docblock>
      <parameter name="permCode" byreference="false" type="string" default="&quot;ADMIN&quot;"/>
    </method>
  </parent>
  <parent full="PHPUnit_Framework_TestCase" namespace="" name="PHPUnit_Framework_TestCase"/>
</class>
