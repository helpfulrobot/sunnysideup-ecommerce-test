<?xml version="1.0" encoding="UTF-8"?>
<class xmlns="http://xml.phpdox.net/src" full="Spyc" namespace="" name="Spyc" abstract="false" final="false" start="57" end="1000">
  <file path="/var/www/_modules/ecommerce_test/trunk/docs/en/phpdox/../../../framework/thirdparty/spyc" file="spyc.php" realpath="/var/www/_modules/ecommerce_test/trunk/framework/thirdparty/spyc/spyc.php" size="30077" time="2015-03-14T10:41:59+13:00" unixtime="1426282919" sha1="404d4b64058da137fdbdfe6248da29486fb32d0a" relative="framework/thirdparty/spyc/spyc.php"/>
  <docblock>
    <description compact="The Simple PHP YAML Class.">This class can be used to read a YAML file and convert its contents
into a PHP array.  It currently supports a very limited subsection of
the YAML spec.

Usage:
&lt;code&gt;
  $Spyc  = new Spyc;
  $array = $Spyc-&gt;load($file);
&lt;/code&gt;
or:
&lt;code&gt;
  $array = Spyc::YAMLLoad($file);
&lt;/code&gt;
or:
&lt;code&gt;
  $array = spyc_load_file($file);
&lt;/code&gt;</description>
    <package value="Spyc"/>
  </docblock>
  <member name="setting_dump_force_quotes" type="{unknown}" default="false" visibility="public" line="67">
    <docblock>
      <description compact="Setting this to true will force YAMLDump to enclose any string value in quotes.  False by default."/>
      <var type="object">
        <type full="bool" namespace="" name="bool"/>
      </var>
    </docblock>
  </member>
  <member name="setting_use_syck_is_possible" type="{unknown}" default="false" visibility="public" line="74">
    <docblock>
      <description compact="Setting this to true will forse YAMLLoad to use syck_load function when possible. False by default."/>
      <var type="object">
        <type full="bool" namespace="" name="bool"/>
      </var>
    </docblock>
  </member>
  <member name="_dumpIndent" type="{unknown}" visibility="private" line="82"/>
  <member name="_dumpWordWrap" type="{unknown}" visibility="private" line="83"/>
  <member name="_containsGroupAnchor" type="{unknown}" default="false" visibility="private" line="84"/>
  <member name="_containsGroupAlias" type="{unknown}" default="false" visibility="private" line="85"/>
  <member name="path" type="{unknown}" visibility="private" line="86"/>
  <member name="result" type="{unknown}" visibility="private" line="87"/>
  <member name="LiteralPlaceHolder" type="string" default="'___YAML_Literal_Block___'" visibility="private" line="88"/>
  <member name="SavedGroups" type="array" visibility="private" line="89"/>
  <member name="indent" type="{unknown}" visibility="private" line="90"/>
  <member name="delayedPath" type="array" visibility="private" line="95">
    <docblock>
      <description compact="Path modifier that should be applied after adding current element."/>
      <var type="array"/>
    </docblock>
  </member>
  <member name="_nodeId" type="{unknown}" visibility="public" line="101"/>
  <method name="load" start="108" end="110" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="Load a valid YAML string to Spyc."/>
      <param type="string" variable="$input"/>
      <return type="array"/>
    </docblock>
    <parameter name="input" byreference="false" type="{unknown}"/>
  </method>
  <method name="loadFile" start="117" end="119" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="Load a valid YAML file to Spyc."/>
      <param type="string" variable="$file"/>
      <return type="array"/>
    </docblock>
    <parameter name="file" byreference="false" type="{unknown}"/>
  </method>
  <method name="YAMLLoad" start="136" end="139" abstract="false" final="false" static="true" visibility="public">
    <docblock>
      <description compact="Load YAML into a PHP array statically">The load method, when supplied with a YAML stream (string or file),
will do its best to convert YAML in a file into a PHP array.  Pretty
simple.
 Usage:
 &lt;code&gt;
  $array = Spyc::YAMLLoad('lucky.yaml');
  print_r($array);
 &lt;/code&gt;</description>
      <access value="public"/>
      <return type="array"/>
      <param description="Path of YAML file or string containing YAML" type="string" variable="$input"/>
    </docblock>
    <parameter name="input" byreference="false" type="{unknown}"/>
  </method>
  <method name="YAMLLoadString" start="160" end="163" abstract="false" final="false" static="true" visibility="public">
    <docblock>
      <description compact="Load a string of YAML into a PHP array statically">The load method, when supplied with a YAML string, will do its best
to convert YAML in a string into a PHP array.  Pretty simple.

Note: use this function if you don't want files from the file system
loaded and processed as YAML.  This is of interest to people concerned
about security whose input is from a string.

 Usage:
 &lt;code&gt;
  $array = Spyc::YAMLLoadString("---\n0: hello world\n");
  print_r($array);
 &lt;/code&gt;</description>
      <access value="public"/>
      <return type="array"/>
      <param description="String containing YAML" type="string" variable="$input"/>
    </docblock>
    <parameter name="input" byreference="false" type="{unknown}"/>
  </method>
  <method name="YAMLDump" start="185" end="188" abstract="false" final="false" static="true" visibility="public">
    <docblock>
      <description compact="Dump YAML from PHP array statically">The dump method, when supplied with an array, will do its best
to convert the array into friendly YAML.  Pretty simple.  Feel free to
save the returned string as nothing.yaml and pass it around.

Oh, and you can decide how big the indent is and what the wordwrap
for folding is.  Pretty cool -- just pass in 'false' for either if
you want to use the default.

Indent's default is 2 spaces, wordwrap's default is 40 characters.  And
you can turn off wordwrap by passing in 0.</description>
      <access value="public"/>
      <return type="string"/>
      <param description="PHP array" type="array" variable="$array"/>
      <param description="Pass in false to use the default, which is 2" type="int" variable="$indent"/>
      <param description="Pass in 0 for no wordwrap, false for default (40)" type="int" variable="$wordwrap"/>
    </docblock>
    <parameter name="array" byreference="false" type="{unknown}"/>
    <parameter name="indent" byreference="false" type="{unknown}" default="false"/>
    <parameter name="wordwrap" byreference="false" type="{unknown}" default="false"/>
  </method>
  <method name="dump" start="211" end="243" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="Dump PHP array to YAML">The dump method, when supplied with an array, will do its best
to convert the array into friendly YAML.  Pretty simple.  Feel free to
save the returned string as tasteful.yaml and pass it around.

Oh, and you can decide how big the indent is and what the wordwrap
for folding is.  Pretty cool -- just pass in 'false' for either if
you want to use the default.

Indent's default is 2 spaces, wordwrap's default is 40 characters.  And
you can turn off wordwrap by passing in 0.</description>
      <access value="public"/>
      <return type="string"/>
      <param description="PHP array" type="array" variable="$array"/>
      <param description="Pass in false to use the default, which is 2" type="int" variable="$indent"/>
      <param description="Pass in 0 for no wordwrap, false for default (40)" type="int" variable="$wordwrap"/>
    </docblock>
    <parameter name="array" byreference="false" type="{unknown}"/>
    <parameter name="indent" byreference="false" type="{unknown}" default="false"/>
    <parameter name="wordwrap" byreference="false" type="{unknown}" default="false"/>
    <inline>
      <comment value="Dumps to some very clean YAML.  We'll have to add some more features" line="212"/>
      <comment value="and options soon.  And better support for folding." line="213"/>
      <comment value="New features and options." line="215"/>
      <comment value="New YAML document" line="228"/>
      <comment value="Start at the base of the array and move through it." line="231"/>
    </inline>
  </method>
  <method name="_yamlize" start="253" end="269" abstract="false" final="false" static="false" visibility="private">
    <docblock>
      <description compact="Attempts to convert a key / value array item to YAML"/>
      <access value="private"/>
      <return type="string"/>
      <param description="name of the key" variable="$key" type="object">
        <type full="The" namespace="" name="The"/>
      </param>
      <param description="value of the item" variable="$value" type="object">
        <type full="The" namespace="" name="The"/>
      </param>
      <param description="indent of the current node" variable="$indent" type="object">
        <type full="The" namespace="" name="The"/>
      </param>
    </docblock>
    <parameter name="key" byreference="false" type="{unknown}"/>
    <parameter name="value" byreference="false" type="{unknown}"/>
    <parameter name="indent" byreference="false" type="{unknown}"/>
    <parameter name="previous_key" byreference="false" type="integer" default="1"/>
    <parameter name="first_key" byreference="false" type="integer" default="0"/>
    <inline>
      <comment value="It has children.  What to do?" line="257"/>
      <comment value="Make it the right kind of item" line="258"/>
      <comment value="Add the indent" line="260"/>
      <comment value="Yamlize the array" line="262"/>
    </inline>
  </method>
  <method name="_yamlizeArray" start="278" end="291" abstract="false" final="false" static="false" visibility="private">
    <docblock>
      <description compact="Attempts to convert an array to YAML"/>
      <access value="private"/>
      <return type="string"/>
      <param description="array you want to convert" variable="$array" type="object">
        <type full="The" namespace="" name="The"/>
      </param>
      <param description="indent of the current level" variable="$indent" type="object">
        <type full="The" namespace="" name="The"/>
      </param>
    </docblock>
    <parameter name="array" byreference="false" type="{unknown}"/>
    <parameter name="indent" byreference="false" type="{unknown}"/>
  </method>
  <method name="_dumpNode" start="301" end="328" abstract="false" final="false" static="false" visibility="private">
    <docblock>
      <description compact="Returns YAML from a key and a value"/>
      <access value="private"/>
      <return type="string"/>
      <param description="name of the key" variable="$key" type="object">
        <type full="The" namespace="" name="The"/>
      </param>
      <param description="value of the item" variable="$value" type="object">
        <type full="The" namespace="" name="The"/>
      </param>
      <param description="indent of the current node" variable="$indent" type="object">
        <type full="The" namespace="" name="The"/>
      </param>
    </docblock>
    <parameter name="key" byreference="false" type="{unknown}"/>
    <parameter name="value" byreference="false" type="{unknown}"/>
    <parameter name="indent" byreference="false" type="{unknown}"/>
    <parameter name="previous_key" byreference="false" type="integer" default="1"/>
    <parameter name="first_key" byreference="false" type="integer" default="0"/>
    <inline>
      <comment value="do some folding here, for blocks" line="302"/>
      <comment value="It's a sequence" line="319"/>
    </inline>
  </method>
  <method name="_doLiteralBlock" start="337" end="352" abstract="false" final="false" static="false" visibility="private">
    <docblock>
      <description compact="Creates a literal block for dumping"/>
      <access value="private"/>
      <return type="string"/>
      <param variable="$value"/>
      <param description="The value of the indent" variable="$indent" type="int"/>
    </docblock>
    <parameter name="value" byreference="false" type="{unknown}"/>
    <parameter name="indent" byreference="false" type="{unknown}"/>
  </method>
  <method name="_doFolding" start="360" end="375" abstract="false" final="false" static="false" visibility="private">
    <docblock>
      <description compact="Folds a string of text, if necessary"/>
      <access value="private"/>
      <return type="string"/>
      <param description="string you wish to fold" variable="$value" type="object">
        <type full="The" namespace="" name="The"/>
      </param>
    </docblock>
    <parameter name="value" byreference="false" type="{unknown}"/>
    <parameter name="indent" byreference="false" type="{unknown}"/>
    <inline>
      <comment value="Don't do anything if wordwrap is set to 0" line="361"/>
    </inline>
  </method>
  <method name="__load" start="379" end="382" abstract="false" final="false" static="false" visibility="private">
    <parameter name="input" byreference="false" type="{unknown}"/>
  </method>
  <method name="__loadString" start="384" end="387" abstract="false" final="false" static="false" visibility="private">
    <parameter name="input" byreference="false" type="{unknown}"/>
  </method>
  <method name="loadWithSource" start="389" end="448" abstract="false" final="false" static="false" visibility="private">
    <parameter name="Source" byreference="false" type="{unknown}"/>
  </method>
  <method name="loadFromSource" start="450" end="455" abstract="false" final="false" static="false" visibility="private">
    <parameter name="input" byreference="false" type="{unknown}"/>
  </method>
  <method name="loadFromString" start="457" end="463" abstract="false" final="false" static="false" visibility="private">
    <parameter name="input" byreference="false" type="{unknown}"/>
  </method>
  <method name="_parseLine" start="471" end="499" abstract="false" final="false" static="false" visibility="private">
    <docblock>
      <description compact="Parses YAML code and returns an array for a node"/>
      <access value="private"/>
      <return type="array"/>
      <param description="A line from the YAML file" type="string" variable="$line"/>
    </docblock>
    <parameter name="line" byreference="false" type="{unknown}"/>
  </method>
  <method name="_toType" start="507" end="596" abstract="false" final="false" static="false" visibility="private">
    <docblock>
      <description compact="Finds the type of the passed value, returns the value as the new type."/>
      <access value="private"/>
      <param type="string" variable="$value"/>
      <return type="mixed"/>
    </docblock>
    <parameter name="value" byreference="false" type="{unknown}"/>
    <inline>
      <comment value="Take out strings sequences and mappings" line="527"/>
      <comment value="Propagate value array" line="531"/>
      <comment value="Inline Mapping" line="551"/>
      <comment value="Take out strings sequences and mappings" line="552"/>
      <comment value="Propagate value array" line="554"/>
    </inline>
  </method>
  <method name="_inlineEscape" start="603" end="702" abstract="false" final="false" static="false" visibility="private">
    <docblock>
      <description compact="Used in inlines to check for more inlines or quoted strings"/>
      <access value="private"/>
      <return type="array"/>
    </docblock>
    <parameter name="inline" byreference="false" type="{unknown}"/>
    <inline>
      <comment value="There's gotta be a cleaner way to do this..." line="604"/>
      <comment value="While pure sequences seem to be nesting just fine," line="605"/>
      <comment value="pure mappings and mappings with sequences inside can't go very" line="606"/>
      <comment value="deep.  This needs to be fixed." line="607"/>
      <comment value="Check for strings" line="613"/>
      <comment value="Check for sequences" line="624"/>
      <comment value="Check for mappings" line="630"/>
      <comment value="Re-add the sequences" line="645"/>
      <comment value="Re-add the mappings" line="657"/>
      <comment value="Re-add the strings" line="670"/>
    </inline>
  </method>
  <method name="literalBlockContinues" start="704" end="708" abstract="false" final="false" static="false" visibility="private">
    <parameter name="line" byreference="false" type="{unknown}"/>
    <parameter name="lineIndent" byreference="false" type="{unknown}"/>
  </method>
  <method name="referenceContentsByAlias" start="710" end="720" abstract="false" final="false" static="false" visibility="private">
    <parameter name="alias" byreference="false" type="{unknown}"/>
  </method>
  <method name="addArrayInline" start="722" end="731" abstract="false" final="false" static="false" visibility="private">
    <parameter name="array" byreference="false" type="{unknown}"/>
    <parameter name="indent" byreference="false" type="{unknown}"/>
  </method>
  <method name="addArray" start="733" end="800" abstract="false" final="false" static="false" visibility="private">
    <parameter name="incoming_data" byreference="false" type="{unknown}"/>
    <parameter name="incoming_indent" byreference="false" type="{unknown}"/>
    <inline>
      <comment value="Shortcut for root-level values." line="741"/>
      <comment value="Unfolding inner array tree." line="754"/>
      <comment value="Adding string or numeric key to the innermost level or $this-&gt;arr." line="766"/>
    </inline>
  </method>
  <method name="startsLiteralBlock" start="802" end="809" abstract="false" final="false" static="true" visibility="private">
    <parameter name="line" byreference="false" type="{unknown}"/>
    <inline>
      <comment value="HTML tags should not be counted as literal blocks." line="806"/>
    </inline>
  </method>
  <method name="greedilyNeedNextLine" start="811" end="818" abstract="false" final="false" static="true" visibility="private">
    <parameter name="line" byreference="false" type="{unknown}"/>
  </method>
  <method name="addLiteralLine" start="820" end="834" abstract="false" final="false" static="false" visibility="private">
    <parameter name="literalBlock" byreference="false" type="{unknown}"/>
    <parameter name="line" byreference="false" type="{unknown}"/>
    <parameter name="literalBlockStyle" byreference="false" type="{unknown}"/>
  </method>
  <method name="revertLiteralPlaceHolder" start="836" end="844" abstract="false" final="false" static="false" visibility="public">
    <parameter name="lineArray" byreference="false" type="{unknown}"/>
    <parameter name="literalBlock" byreference="false" type="{unknown}"/>
  </method>
  <method name="stripIndent" start="846" end="849" abstract="false" final="false" static="true" visibility="private">
    <parameter name="line" byreference="false" type="{unknown}"/>
    <parameter name="indent" byreference="false" type="integer" default="1"/>
  </method>
  <method name="getParentPathByIndent" start="851" end="859" abstract="false" final="false" static="false" visibility="private">
    <parameter name="indent" byreference="false" type="{unknown}"/>
  </method>
  <method name="clearBiggerPathValues" start="862" end="873" abstract="false" final="false" static="false" visibility="private">
    <parameter name="indent" byreference="false" type="{unknown}"/>
  </method>
  <method name="isComment" start="876" end="881" abstract="false" final="false" static="true" visibility="private">
    <parameter name="line" byreference="false" type="{unknown}"/>
  </method>
  <method name="isEmpty" start="883" end="885" abstract="false" final="false" static="true" visibility="private">
    <parameter name="line" byreference="false" type="{unknown}"/>
  </method>
  <method name="isArrayElement" start="888" end="895" abstract="false" final="false" static="false" visibility="private">
    <parameter name="line" byreference="false" type="{unknown}"/>
  </method>
  <method name="isHashElement" start="897" end="899" abstract="false" final="false" static="false" visibility="private">
    <parameter name="line" byreference="false" type="{unknown}"/>
  </method>
  <method name="isLiteral" start="901" end="905" abstract="false" final="false" static="false" visibility="private">
    <parameter name="line" byreference="false" type="{unknown}"/>
  </method>
  <method name="startsMappedSequence" start="908" end="910" abstract="false" final="false" static="false" visibility="private">
    <parameter name="line" byreference="false" type="{unknown}"/>
  </method>
  <method name="returnMappedSequence" start="912" end="918" abstract="false" final="false" static="false" visibility="private">
    <parameter name="line" byreference="false" type="{unknown}"/>
  </method>
  <method name="returnMappedValue" start="920" end="925" abstract="false" final="false" static="false" visibility="private">
    <parameter name="line" byreference="false" type="{unknown}"/>
  </method>
  <method name="startsMappedValue" start="927" end="929" abstract="false" final="false" static="false" visibility="private">
    <parameter name="line" byreference="false" type="{unknown}"/>
  </method>
  <method name="isPlainArray" start="931" end="933" abstract="false" final="false" static="false" visibility="private">
    <parameter name="line" byreference="false" type="{unknown}"/>
  </method>
  <method name="returnPlainArray" start="935" end="937" abstract="false" final="false" static="false" visibility="private">
    <parameter name="line" byreference="false" type="{unknown}"/>
  </method>
  <method name="returnKeyValuePair" start="939" end="965" abstract="false" final="false" static="false" visibility="private">
    <parameter name="line" byreference="false" type="{unknown}"/>
    <inline>
      <comment value="It's a key/value pair most likely" line="942"/>
      <comment value="If the key is in double quotes pull it out" line="943"/>
      <comment value="Set the type of the value.  Int, string, etc" line="954"/>
    </inline>
  </method>
  <method name="returnArrayElement" start="968" end="975" abstract="false" final="false" static="false" visibility="private">
    <parameter name="line" byreference="false" type="{unknown}"/>
    <inline>
      <comment value="Weird %)" line="969"/>
    </inline>
  </method>
  <method name="nodeContainsGroup" start="978" end="988" abstract="false" final="false" static="false" visibility="private">
    <parameter name="line" byreference="false" type="{unknown}"/>
    <inline>
      <comment value="Please die fast ;-)" line="980"/>
    </inline>
  </method>
  <method name="addGroup" start="990" end="994" abstract="false" final="false" static="false" visibility="private">
    <parameter name="line" byreference="false" type="{unknown}"/>
    <parameter name="group" byreference="false" type="{unknown}"/>
  </method>
  <method name="stripGroup" start="996" end="999" abstract="false" final="false" static="false" visibility="private">
    <parameter name="line" byreference="false" type="{unknown}"/>
    <parameter name="group" byreference="false" type="{unknown}"/>
  </method>
</class>
