<?xml version="1.0" encoding="UTF-8"?>
<class xmlns="http://xml.phpdox.net/src" full="Zend_Cache_Backend" namespace="" name="Zend_Cache_Backend" abstract="false" final="false" start="30" end="268">
  <file path="/var/www/_modules/ecommerce_test/trunk/docs/en/phpdox/../../../framework/thirdparty/Zend/Cache" file="Backend.php" realpath="/var/www/_modules/ecommerce_test/trunk/framework/thirdparty/Zend/Cache/Backend.php" size="7895" time="2015-03-14T10:41:13+13:00" unixtime="1426282873" sha1="f0194787ccf21bf94b5213df7fa875115b060178" relative="framework/thirdparty/Zend/Cache/Backend.php"/>
  <docblock>
    <description/>
    <package value="Zend_Cache"/>
    <subpackage value="Zend_Cache_Backend"/>
    <copyright value="Copyright (c) 2005-2011 Zend Technologies USA Inc. (http://www.zend.com)"/>
    <license name="http://framework.zend.com/license/new-bsd     New BSD License"/>
  </docblock>
  <member name="_directives" type="array" visibility="protected" line="44">
    <docblock>
      <description compact="Frontend or Core directives">=====&gt; (int) lifetime :
- Cache lifetime (in seconds)
- If null, the cache is valid forever

=====&gt; (int) logging :
- if set to true, a logging is activated throw Zend_Log</description>
      <var description="directives" type="array"/>
    </docblock>
  </member>
  <member name="_options" type="array" visibility="protected" line="55">
    <docblock>
      <description compact="Available options"/>
      <var description="available options" type="array"/>
    </docblock>
  </member>
  <constructor name="__construct" start="64" end="69" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="Constructor"/>
      <param description="Associative array of options" type="array" variable="$options"/>
      <throws type="object">
        <type full="Zend_Cache_Exception" namespace="" name="Zend_Cache_Exception"/>
      </throws>
      <return type="object">
        <type full="void" namespace="" name="void"/>
      </return>
    </docblock>
    <parameter name="options" byreference="false" type="array"/>
  </constructor>
  <method name="setDirectives" start="78" end="93" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="Set the frontend directives"/>
      <param description="Assoc of directives" type="array" variable="$directives"/>
      <throws type="object">
        <type full="Zend_Cache_Exception" namespace="" name="Zend_Cache_Exception"/>
      </throws>
      <return type="object">
        <type full="void" namespace="" name="void"/>
      </return>
    </docblock>
    <parameter name="directives" byreference="false" type="{unknown}"/>
  </method>
  <method name="setOption" start="103" end="112" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="Set an option"/>
      <param type="string" variable="$name"/>
      <param type="mixed" variable="$value"/>
      <throws type="object">
        <type full="Zend_Cache_Exception" namespace="" name="Zend_Cache_Exception"/>
      </throws>
      <return type="object">
        <type full="void" namespace="" name="void"/>
      </return>
    </docblock>
    <parameter name="name" byreference="false" type="{unknown}"/>
    <parameter name="value" byreference="false" type="{unknown}"/>
  </method>
  <method name="getLifetime" start="123" end="129" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="Get the life time">if $specificLifetime is not false, the given specific life time is used
else, the global lifetime is used</description>
      <param type="int" variable="$specificLifetime"/>
      <return description="Cache life time" type="int"/>
    </docblock>
    <parameter name="specificLifetime" byreference="false" type="{unknown}"/>
  </method>
  <method name="isAutomaticCleaningAvailable" start="139" end="142" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="Return true if the automatic cleaning is available for the backend">DEPRECATED : use getCapabilities() instead</description>
      <deprecated/>
      <return type="boolean"/>
    </docblock>
  </method>
  <method name="getTmpDir" start="152" end="198" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="Determine system TMP directory and detect if we have read access">inspired from Zend_File_Transfer_Adapter_Abstract</description>
      <return type="string"/>
      <throws description="if unable to determine directory" type="object">
        <type full="Zend_Cache_Exception" namespace="" name="Zend_Cache_Exception"/>
      </throws>
    </docblock>
    <inline>
      <comment value="Attemp to detect by creating a temporary file" line="182"/>
    </inline>
  </method>
  <method name="_isGoodTmpDir" start="206" end="214" abstract="false" final="false" static="false" visibility="protected">
    <docblock>
      <description compact="Verify if the given temporary directory is readable and writable"/>
      <param description="temporary directory" type="string" variable="$dir"/>
      <return description="true if the directory is ok" type="boolean"/>
    </docblock>
    <parameter name="dir" byreference="false" type="{unknown}"/>
  </method>
  <method name="_loggerSanity" start="224" end="244" abstract="false" final="false" static="false" visibility="protected">
    <docblock>
      <description compact="Make sure if we enable logging that the Zend_Log class is available.">Create a default log object if none is set.</description>
      <throws type="object">
        <type full="Zend_Cache_Exception" namespace="" name="Zend_Cache_Exception"/>
      </throws>
      <return type="object">
        <type full="void" namespace="" name="void"/>
      </return>
    </docblock>
    <inline>
      <comment value="Create a default logger to the standard output stream" line="237"/>
    </inline>
  </method>
  <method name="_log" start="253" end="267" abstract="false" final="false" static="false" visibility="protected">
    <docblock>
      <description compact="Log a message at the WARN (4) priority."/>
      <param type="string" variable="$message"/>
      <throws type="object">
        <type full="Zend_Cache_Exception" namespace="" name="Zend_Cache_Exception"/>
      </throws>
      <return type="object">
        <type full="void" namespace="" name="void"/>
      </return>
    </docblock>
    <parameter name="message" byreference="false" type="{unknown}"/>
    <parameter name="priority" byreference="false" type="integer" default="4"/>
  </method>
  <extender full="Zend_Cache_Backend_WinCache" namespace="" name="Zend_Cache_Backend_WinCache"/>
  <extender full="Zend_Cache_Backend_Xcache" namespace="" name="Zend_Cache_Backend_Xcache"/>
  <extender full="Zend_Cache_Backend_Libmemcached" namespace="" name="Zend_Cache_Backend_Libmemcached"/>
  <extender full="Zend_Cache_Backend_BlackHole" namespace="" name="Zend_Cache_Backend_BlackHole"/>
  <extender full="Zend_Cache_Backend_File" namespace="" name="Zend_Cache_Backend_File"/>
  <extender full="Zend_Cache_Backend_TwoLevels" namespace="" name="Zend_Cache_Backend_TwoLevels"/>
  <extender full="Zend_Cache_Backend_ZendServer" namespace="" name="Zend_Cache_Backend_ZendServer"/>
  <extender full="Zend_Cache_Backend_Static" namespace="" name="Zend_Cache_Backend_Static"/>
  <extender full="Zend_Cache_Backend_Memcached" namespace="" name="Zend_Cache_Backend_Memcached"/>
  <extender full="Zend_Cache_Backend_ZendServer_Disk" namespace="" name="Zend_Cache_Backend_ZendServer_Disk"/>
  <extender full="Zend_Cache_Backend_ZendServer_ShMem" namespace="" name="Zend_Cache_Backend_ZendServer_ShMem"/>
  <extender full="Zend_Cache_Backend_Apc" namespace="" name="Zend_Cache_Backend_Apc"/>
  <extender full="Zend_Cache_Backend_Test" namespace="" name="Zend_Cache_Backend_Test"/>
  <extender full="Zend_Cache_Backend_ZendPlatform" namespace="" name="Zend_Cache_Backend_ZendPlatform"/>
  <extender full="Zend_Cache_Backend_Sqlite" namespace="" name="Zend_Cache_Backend_Sqlite"/>
</class>
