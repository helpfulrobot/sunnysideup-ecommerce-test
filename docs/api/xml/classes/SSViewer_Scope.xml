<?xml version="1.0" encoding="UTF-8"?>
<class xmlns="http://xml.phpdox.net/src" full="SSViewer_Scope" namespace="" name="SSViewer_Scope" abstract="false" final="false" start="25" end="184">
  <file path="/var/www/_modules/ecommerce_test/trunk/docs/en/phpdox/../../../framework/view" file="SSViewer.php" realpath="/var/www/_modules/ecommerce_test/trunk/framework/view/SSViewer.php" size="39375" time="2015-03-14T10:42:30+13:00" unixtime="1426282950" sha1="ef64a4a35a6f49d03bf1437c3b95405f06b93b27" relative="framework/view/SSViewer.php"/>
  <docblock>
    <description compact="This tracks the current scope for an SSViewer instance. It has three goals:   - Handle entering &amp; leaving sub-scopes in loops and withs   - Track Up and Top   - (As a side effect) Inject data that needs to be available globally (used to live in ViewableData)">In order to handle up, rather than tracking it using a tree, which would involve constructing new objects
for each step, we use indexes into the itemStack (which already has to exist).

Each item has three indexes associated with it

  - Pop. Which item should become the scope once the current scope is popped out of
  - Up. Which item is up from this item
  - Current. Which item is the first time this object has appeared in the stack

We also keep the index of the current starting point for lookups. A lookup is a sequence of obj calls -
when in a loop or with tag the end result becomes the new scope, but for injections, we throw away the lookup
and revert back to the original scope once we've got the value we're after</description>
    <package value="framework"/>
    <subpackage value="view"/>
  </docblock>
  <member name="itemStack" type="array" visibility="private" line="29"/>
  <member name="item" type="{unknown}" visibility="protected" line="32"/>
  <member name="itemIterator" type="{unknown}" visibility="protected" line="35"/>
  <member name="itemIteratorTotal" type="{unknown}" visibility="protected" line="38"/>
  <member name="popIndex" type="{unknown}" visibility="private" line="41"/>
  <member name="upIndex" type="{unknown}" default="null" visibility="private" line="44"/>
  <member name="currentIndex" type="{unknown}" default="null" visibility="private" line="47"/>
  <member name="localIndex" type="{unknown}" visibility="private" line="49"/>
  <constructor name="__construct" start="51" end="62" abstract="false" final="false" static="false" visibility="public">
    <parameter name="item" byreference="false" type="{unknown}"/>
    <parameter name="inheritedScope" byreference="false" type="{unknown}" default="null"/>
  </constructor>
  <method name="getItem" start="64" end="66" abstract="false" final="false" static="false" visibility="public"/>
  <method name="locally" start="69" end="78" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="Called at the start of every lookup chain by SSTemplateParser to indicate a new lookup from local scope"/>
    </docblock>
    <inline>
      <comment value="Remember any  un-completed (resetLocalScope hasn't been called) lookup chain. Even if there isn't an" line="73"/>
      <comment value="un-completed chain we need to store an empty item, as resetLocalScope doesn't know the difference later" line="74"/>
    </inline>
  </method>
  <method name="resetLocalScope" start="80" end="87" abstract="false" final="false" static="false" visibility="public"/>
  <method name="getObj" start="89" end="92" abstract="false" final="false" static="false" visibility="public">
    <parameter name="name" byreference="false" type="{unknown}"/>
    <parameter name="arguments" byreference="false" type="{unknown}" default="null"/>
    <parameter name="forceReturnedObject" byreference="false" type="{unknown}" default="true"/>
    <parameter name="cache" byreference="false" type="{unknown}" default="false"/>
    <parameter name="cacheName" byreference="false" type="{unknown}" default="null"/>
  </method>
  <method name="obj" start="94" end="121" abstract="false" final="false" static="false" visibility="public">
    <parameter name="name" byreference="false" type="{unknown}"/>
    <parameter name="arguments" byreference="false" type="{unknown}" default="null"/>
    <parameter name="forceReturnedObject" byreference="false" type="{unknown}" default="true"/>
    <parameter name="cache" byreference="false" type="{unknown}" default="false"/>
    <parameter name="cacheName" byreference="false" type="{unknown}" default="null"/>
  </method>
  <method name="self" start="128" end="133" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="Gets the current object and resets the scope."/>
      <return type="object"/>
    </docblock>
  </method>
  <method name="pushScope" start="135" end="146" abstract="false" final="false" static="false" visibility="public">
    <inline>
      <comment value="We normally keep any previous itemIterator around, so local $Up calls reference the right element. But" line="141"/>
      <comment value="once we enter a new global scope, we need to make sure we use a new one" line="142"/>
    </inline>
  </method>
  <method name="popScope" start="148" end="153" abstract="false" final="false" static="false" visibility="public"/>
  <method name="next" start="155" end="175" abstract="false" final="false" static="false" visibility="public">
    <inline>
      <comment value="count the total number of items" line="163"/>
    </inline>
  </method>
  <method name="__call" start="177" end="183" abstract="false" final="false" static="false" visibility="public">
    <parameter name="name" byreference="false" type="{unknown}"/>
    <parameter name="arguments" byreference="false" type="{unknown}"/>
  </method>
  <extender full="SSViewer_DataPresenter" namespace="" name="SSViewer_DataPresenter"/>
</class>
