<?xml version="1.0" encoding="UTF-8"?>
<class xmlns="http://xml.phpdox.net/src" full="SSViewer_DataPresenter" namespace="" name="SSViewer_DataPresenter" abstract="false" final="false" start="360" end="538">
  <file path="/var/www/_modules/ecommerce_test/trunk/docs/en/phpdox/../../../framework/view" file="SSViewer.php" realpath="/var/www/_modules/ecommerce_test/trunk/framework/view/SSViewer.php" size="39375" time="2015-03-14T10:42:30+13:00" unixtime="1426282950" sha1="ef64a4a35a6f49d03bf1437c3b95405f06b93b27" relative="framework/view/SSViewer.php"/>
  <docblock>
    <description compact="This extends SSViewer_Scope to mix in data on top of what the item provides. This can be &quot;global&quot; data that is scope-independant (like BaseURL), or type-specific data that is layered on top cross-cut like (like $FirstLast etc).">It's separate from SSViewer_Scope to keep that fairly complex code as clean as possible.</description>
    <package value="framework"/>
    <subpackage value="view"/>
  </docblock>
  <extends full="SSViewer_Scope" namespace="" name="SSViewer_Scope"/>
  <member name="globalProperties" type="{unknown}" default="null" visibility="private" line="362"/>
  <member name="iteratorProperties" type="{unknown}" default="null" visibility="private" line="363"/>
  <member name="overlay" type="{unknown}" visibility="protected" line="369">
    <docblock>
      <description compact="Overlay variables. Take precedence over anything from the current scope"/>
      <var type="object">
        <type full="array|null" namespace="" name="array|null"/>
      </var>
    </docblock>
  </member>
  <member name="underlay" type="{unknown}" visibility="protected" line="375">
    <docblock>
      <description compact="Underlay variables. Concede precedence to overlay variables or anything from the current scope"/>
      <var type="object">
        <type full="array|null" namespace="" name="array|null"/>
      </var>
    </docblock>
  </member>
  <constructor name="__construct" start="377" end="399" abstract="false" final="false" static="false" visibility="public">
    <parameter name="item" byreference="false" type="{unknown}"/>
    <parameter name="overlay" byreference="false" type="{unknown}" default="null"/>
    <parameter name="underlay" byreference="false" type="{unknown}" default="null"/>
    <parameter name="inheritedScope" byreference="false" type="{unknown}" default="null"/>
    <inline>
      <comment value="Build up global property providers array only once per request" line="380"/>
      <comment value="Get all the exposed variables from all classes that implement the TemplateGlobalProvider interface" line="383"/>
      <comment value="Build up iterator property providers array only once per request" line="388"/>
      <comment value="Get all the exposed variables from all classes that implement the TemplateIteratorProvider interface" line="391"/>
      <comment value="//call non-statically" line="392"/>
    </inline>
  </constructor>
  <method name="createCallableArray" start="401" end="430" abstract="false" final="false" static="false" visibility="protected">
    <parameter name="extraArray" byreference="true" type="{unknown}"/>
    <parameter name="interfaceToQuery" byreference="false" type="{unknown}"/>
    <parameter name="variableMethod" byreference="false" type="{unknown}"/>
    <parameter name="createObject" byreference="false" type="{unknown}" default="false"/>
    <inline>
      <comment value="Create a new instance of the object for method calls" line="405"/>
      <comment value="Get the exposed variables" line="408"/>
      <comment value="If just a value (and not a key =&gt; value pair), use it for both key and value" line="415"/>
      <comment value="Add in a reference to the implementing class (might be a string class name or an instance)" line="418"/>
      <comment value="And a callable array" line="421"/>
      <comment value="Save with both uppercase &amp; lowercase first letter, so either works" line="424"/>
    </inline>
  </method>
  <method name="getInjectedValue" start="432" end="499" abstract="false" final="false" static="false" visibility="public">
    <parameter name="property" byreference="false" type="{unknown}"/>
    <parameter name="params" byreference="false" type="{unknown}"/>
    <parameter name="cast" byreference="false" type="{unknown}" default="true"/>
    <inline>
      <comment value="Find the source of the value" line="435"/>
      <comment value="Check for a presenter-specific override" line="438"/>
      <comment value="Look up the value - either from a callable, or from a directly provided value" line="471"/>
      <comment value="If we want to provide a casted object, look up what type object to use" line="477"/>
      <comment value="If the handler returns an object, then we don't need to cast." line="479"/>
    </inline>
  </method>
  <method name="getObj" start="501" end="505" abstract="false" final="false" static="false" visibility="public">
    <parameter name="name" byreference="false" type="{unknown}"/>
    <parameter name="arguments" byreference="false" type="{unknown}" default="null"/>
    <parameter name="forceReturnedObject" byreference="false" type="{unknown}" default="true"/>
    <parameter name="cache" byreference="false" type="{unknown}" default="false"/>
    <parameter name="cacheName" byreference="false" type="{unknown}" default="null"/>
  </method>
  <method name="__call" start="507" end="537" abstract="false" final="false" static="false" visibility="public">
    <parameter name="name" byreference="false" type="{unknown}"/>
    <parameter name="arguments" byreference="false" type="{unknown}"/>
    <inline>
      <comment value="extract the method name and parameters" line="508"/>
      <comment value="the name of the public function being called" line="509"/>
      <comment value="the public function parameters in an array" line="511"/>
    </inline>
  </method>
  <parent full="SSViewer_Scope" namespace="" name="SSViewer_Scope">
    <member name="item" type="{unknown}" visibility="protected" line="32"/>
    <member name="itemIterator" type="{unknown}" visibility="protected" line="35"/>
    <member name="itemIteratorTotal" type="{unknown}" visibility="protected" line="38"/>
    <constructor name="__construct" start="51" end="62" abstract="false" final="false" static="false" visibility="public">
      <parameter name="item" byreference="false" type="{unknown}"/>
      <parameter name="inheritedScope" byreference="false" type="{unknown}" default="null"/>
    </constructor>
    <method name="getItem" start="64" end="66" abstract="false" final="false" static="false" visibility="public"/>
    <method name="locally" start="69" end="78" abstract="false" final="false" static="false" visibility="public">
      <docblock>
        <description compact="Called at the start of every lookup chain by SSTemplateParser to indicate a new lookup from local scope"/>
      </docblock>
      <inline>
        <comment value="Remember any  un-completed (resetLocalScope hasn't been called) lookup chain. Even if there isn't an" line="73"/>
        <comment value="un-completed chain we need to store an empty item, as resetLocalScope doesn't know the difference later" line="74"/>
      </inline>
    </method>
    <method name="resetLocalScope" start="80" end="87" abstract="false" final="false" static="false" visibility="public"/>
    <method name="getObj" start="89" end="92" abstract="false" final="false" static="false" visibility="public">
      <parameter name="name" byreference="false" type="{unknown}"/>
      <parameter name="arguments" byreference="false" type="{unknown}" default="null"/>
      <parameter name="forceReturnedObject" byreference="false" type="{unknown}" default="true"/>
      <parameter name="cache" byreference="false" type="{unknown}" default="false"/>
      <parameter name="cacheName" byreference="false" type="{unknown}" default="null"/>
    </method>
    <method name="obj" start="94" end="121" abstract="false" final="false" static="false" visibility="public">
      <parameter name="name" byreference="false" type="{unknown}"/>
      <parameter name="arguments" byreference="false" type="{unknown}" default="null"/>
      <parameter name="forceReturnedObject" byreference="false" type="{unknown}" default="true"/>
      <parameter name="cache" byreference="false" type="{unknown}" default="false"/>
      <parameter name="cacheName" byreference="false" type="{unknown}" default="null"/>
    </method>
    <method name="self" start="128" end="133" abstract="false" final="false" static="false" visibility="public">
      <docblock>
        <description compact="Gets the current object and resets the scope."/>
        <return type="object"/>
      </docblock>
    </method>
    <method name="pushScope" start="135" end="146" abstract="false" final="false" static="false" visibility="public">
      <inline>
        <comment value="We normally keep any previous itemIterator around, so local $Up calls reference the right element. But" line="141"/>
        <comment value="once we enter a new global scope, we need to make sure we use a new one" line="142"/>
      </inline>
    </method>
    <method name="popScope" start="148" end="153" abstract="false" final="false" static="false" visibility="public"/>
    <method name="next" start="155" end="175" abstract="false" final="false" static="false" visibility="public">
      <inline>
        <comment value="count the total number of items" line="163"/>
      </inline>
    </method>
    <method name="__call" start="177" end="183" abstract="false" final="false" static="false" visibility="public">
      <parameter name="name" byreference="false" type="{unknown}"/>
      <parameter name="arguments" byreference="false" type="{unknown}"/>
    </method>
  </parent>
</class>
