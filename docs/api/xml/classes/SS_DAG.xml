<?xml version="1.0" encoding="UTF-8"?>
<class xmlns="http://xml.phpdox.net/src" full="SS_DAG" namespace="" name="SS_DAG" abstract="false" final="false" start="10" end="92">
  <file path="/var/www/_modules/ecommerce_test/trunk/docs/en/phpdox/../../../framework/core" file="DAG.php" realpath="/var/www/_modules/ecommerce_test/trunk/framework/core/DAG.php" size="3974" time="2015-03-14T10:39:29+13:00" unixtime="1426282769" sha1="04305aa31e2246afd193615f957f43d7bafb8e6f" relative="framework/core/DAG.php"/>
  <docblock>
    <description compact="A Directed Acyclic Graph - used for doing topological sorts on dependencies, such as the before/after conditions in config yaml fragments"/>
    <package value="framework"/>
    <subpackage value="manifest"/>
  </docblock>
  <implements full="IteratorAggregate" namespace="" name="IteratorAggregate"/>
  <member name="data" type="{unknown}" visibility="protected" line="15">
    <docblock>
      <description compact="The nodes/vertices in the graph. Should be a numeric sequence of items (no string keys, no gaps)."/>
      <var type="object">
        <type full="array|null" namespace="" name="array|null"/>
      </var>
    </docblock>
  </member>
  <member name="dag" type="{unknown}" visibility="protected" line="21">
    <docblock>
      <description compact="The edges in the graph, in $to_idx =&gt; [$from_idx1, $from_idx2, ...] format"/>
      <var type="array"/>
    </docblock>
  </member>
  <constructor name="__construct" start="23" end="28" abstract="false" final="false" static="false" visibility="public">
    <parameter name="data" byreference="false" type="{unknown}" default="null"/>
  </constructor>
  <method name="additem" start="34" end="37" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="Add another node/vertex"/>
      <param description="- The item to add to the graph" variable="$item" type="object">
        <type full="anything" namespace="" name="anything"/>
      </param>
    </docblock>
    <parameter name="item" byreference="false" type="{unknown}"/>
  </method>
  <method name="addedge" start="48" end="57" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="Add an edge from one vertex to another.">When passing actual nodes (as opposed to indexes), uses array_search with strict = true to find</description>
      <param description="The index in $data of the node/vertex, or the node/vertex itself, that the edge" variable="$from" type="object">goes from<type full="integer|any" namespace="" name="integer|any"/></param>
      <param description="- The index in $data of the node/vertex, or the node/vertex itself, that the edge goes to" variable="$to" type="object">
        <type full="integer|any" namespace="" name="integer|any"/>
      </param>
    </docblock>
    <parameter name="from" byreference="false" type="{unknown}"/>
    <parameter name="to" byreference="false" type="{unknown}"/>
  </method>
  <method name="sort" start="64" end="87" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="Sort graph so that each node (a) comes before any nodes (b) where an edge exists from a to b"/>
      <return description="- The nodes" type="array"/>
      <throws description="- If the graph is cyclic (and so can't be sorted)" type="object">
        <type full="Exception" namespace="" name="Exception"/>
      </throws>
    </docblock>
  </method>
  <method name="getIterator" start="89" end="91" abstract="false" final="false" static="false" visibility="public"/>
  <interface full="IteratorAggregate" namespace="" name="IteratorAggregate">
    <extends full="Traversable" namespace="" name="Traversable"/>
    <method name="getIterator" abstract="false" static="false" visibility="public" final="false">
    <docblock>
      <description compact="Retrieve an external iterator"/>
      <return type="Traversable"/>
    </docblock>
  </method>
  </interface>
</class>
