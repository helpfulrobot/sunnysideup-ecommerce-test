<?xml version="1.0" encoding="UTF-8"?>
<class xmlns="http://xml.phpdox.net/src" full="PickUpOrDeliveryModifier_Form" namespace="" name="PickUpOrDeliveryModifier_Form" abstract="false" final="false" start="600" end="622">
  <file path="/var/www/_modules/ecommerce_test/trunk/docs/en/phpdox/../../../ecommerce_delivery/code/modifiers" file="PickUpOrDeliveryModifier.php" realpath="/var/www/_modules/ecommerce_test/trunk/ecommerce_delivery/code/modifiers/PickUpOrDeliveryModifier.php" size="20541" time="2015-03-14T10:43:33+13:00" unixtime="1426283013" sha1="c734275c56b973b16a89fbcc16c00c46cca80711" relative="ecommerce_delivery/code/modifiers/PickUpOrDeliveryModifier.php"/>
  <extends full="OrderModifierForm" namespace="" name="OrderModifierForm"/>
  <method name="processOrderModifier" start="602" end="620" abstract="false" final="false" static="false" visibility="public">
    <parameter name="data" byreference="false" type="{unknown}"/>
    <parameter name="form" byreference="false" type="{unknown}" default="null"/>
  </method>
  <parent full="OrderModifierForm" namespace="" name="OrderModifierForm">
    <extends full="Form" namespace="" name="Form"/>
    <member name="order" type="{unknown}" visibility="protected" line="18">
      <docblock>
        <description/>
        <var type="object">
          <type full="Order" namespace="" name="Order"/>
        </var>
      </docblock>
    </member>
    <constructor name="__construct" start="32" end="64" abstract="false" final="false" static="false" visibility="public">
      <docblock>
        <description compact="OTE: we semi-enforce using the OrderModifier_Controller here to deal with the submission of the OrderModifierForm You can use your own modifiers or an extension of OrderModifier_Controller by setting the first parameter (optionalController) to your own controller.">param $optionalController Controller
param $name String
param $fields FieldList
param $actions FieldList
param $validator SS_Validator</description>
      </docblock>
      <parameter name="optionalController" byreference="false" type="object" default="null">
        <type full="\\Controller" namespace="\" name="Controller"/>
      </parameter>
      <parameter name="name" byreference="false" type="{unknown}"/>
      <parameter name="fields" byreference="false" type="object">
        <type full="\\FieldList" namespace="\" name="FieldList"/>
      </parameter>
      <parameter name="actions" byreference="false" type="object">
        <type full="\\FieldList" namespace="\" name="FieldList"/>
      </parameter>
      <parameter name="optionalValidator" byreference="false" type="object" default="null">
        <type full="\\Validator" namespace="\" name="Validator"/>
      </parameter>
      <inline>
        <comment value="extension point" line="49"/>
        <comment value="add JS for the modifier - added in modifier" line="58"/>
      </inline>
    </constructor>
    <method name="myLcFirst" start="66" end="76" abstract="false" final="false" static="false" visibility="protected">
      <parameter name="str" byreference="false" type="{unknown}"/>
    </method>
    <method name="redirect" start="83" end="85" abstract="false" final="false" static="false" visibility="public">
      <docblock>
        <description/>
        <param type="object" variable="$status">
          <type full="String" namespace="" name="String"/>
        </param>
        <param type="object" variable="$message">
          <type full="String" namespace="" name="String"/>
        </param>
      </docblock>
      <parameter name="status" byreference="false" type="string" default="&quot;success&quot;"/>
      <parameter name="message" byreference="false" type="string" default="&quot;&quot;"/>
    </method>
    <method name="submit" start="94" end="97" abstract="false" final="false" static="false" visibility="public">
      <docblock>
        <description/>
        <param type="object" variable="$data">
          <type full="Array" namespace="" name="Array"/>
        </param>
        <param type="object" variable="$form">
          <type full="Form" namespace="" name="Form"/>
        </param>
        <param type="object" variable="$status">
          <type full="String" namespace="" name="String"/>
        </param>
        <param type="object" variable="$message">
          <type full="String" namespace="" name="String"/>
        </param>
        <return description="Response (JSON / Redirect Back)" type="object">
          <type full="ShoppingCart" namespace="" name="ShoppingCart"/>
        </return>
      </docblock>
      <parameter name="data" byreference="false" type="array"/>
      <parameter name="form" byreference="false" type="object">
        <type full="\\Form" namespace="\" name="Form"/>
      </parameter>
      <parameter name="message" byreference="false" type="string" default="&quot;order updated&quot;"/>
      <parameter name="status" byreference="false" type="string" default="&quot;good&quot;"/>
      <inline>
        <comment value="to do - add other checks here..." line="95"/>
      </inline>
    </method>
    <method name="saveDataToSession" start="103" end="106" abstract="false" final="false" static="false" visibility="public">
      <docblock>
        <description compact="saves the form into session"/>
        <param description="- data from form." type="object" variable="$data">
          <type full="Array" namespace="" name="Array"/>
        </param>
      </docblock>
    </method>
  </parent>
  <parent full="Form" namespace="" name="Form">
    <extends full="RequestHandler" namespace="" name="RequestHandler"/>
    <constant name="ENC_TYPE_URLENCODED" value="'application/x-www-form-urlencoded'"/>
    <constant name="ENC_TYPE_MULTIPART" value="'multipart/form-data'"/>
    <constant name="MERGE_DEFAULT" value="0"/>
    <constant name="MERGE_CLEAR_MISSING" value="1"/>
    <constant name="MERGE_IGNORE_FALSEISH" value="2"/>
    <member name="IncludeFormTag" type="{unknown}" default="true" visibility="public" line="55">
      <docblock>
        <description/>
        <var description="$includeFormTag Accessed by Form.ss; modified by {@link formHtmlContent()}." type="boolean">A performance enhancement over the generate-the-form-tag-and-then-remove-it code that was there previously</var>
      </docblock>
    </member>
    <member name="fields" type="{unknown}" visibility="protected" line="57"/>
    <member name="actions" type="{unknown}" visibility="protected" line="59"/>
    <member name="controller" type="{unknown}" visibility="protected" line="64">
      <docblock>
        <description/>
        <var type="object">
          <type full="Controller" namespace="" name="Controller"/>
        </var>
      </docblock>
    </member>
    <member name="name" type="{unknown}" visibility="protected" line="66"/>
    <member name="validator" type="{unknown}" visibility="protected" line="68"/>
    <member name="formMethod" type="string" default="&quot;post&quot;" visibility="protected" line="70"/>
    <member name="strictFormMethodCheck" type="{unknown}" default="false" visibility="protected" line="75">
      <docblock>
        <description/>
        <var type="boolean"/>
      </docblock>
    </member>
    <member name="current_action" type="{unknown}" visibility="protected" line="77"/>
    <member name="record" type="{unknown}" visibility="protected" line="82">
      <docblock>
        <description/>
        <var description="$record Populated by {@link loadDataFrom()}." type="object">
          <type full="Dataobject" namespace="" name="Dataobject"/>
        </var>
      </docblock>
    </member>
    <member name="hasDefaultAction" type="{unknown}" default="true" visibility="protected" line="88">
      <docblock>
        <description compact="Keeps track of whether this form has a default action or not.">Set to false by $this-&gt;disableDefaultAction();</description>
      </docblock>
    </member>
    <member name="target" type="{unknown}" visibility="protected" line="97">
      <docblock>
        <description compact="Target attribute of form-tag.">Useful to open a new window upon
form submission.</description>
        <var type="string"/>
      </docblock>
    </member>
    <member name="legend" type="{unknown}" visibility="protected" line="106">
      <docblock>
        <description compact="Legend value, to be inserted into the &lt;legend&gt; element before the &lt;fieldset&gt; in Form.ss template."/>
        <var type="string"/>
      </docblock>
    </member>
    <member name="template" type="{unknown}" visibility="protected" line="116">
      <docblock>
        <description compact="The SS template to render this form HTML into.">Default is "Form", but this can be changed to
another template for customisation.</description>
        <see value="Form-&gt;setTemplate()"/>
        <var type="string"/>
      </docblock>
    </member>
    <member name="buttonClickedFunc" type="{unknown}" visibility="protected" line="118"/>
    <member name="message" type="{unknown}" visibility="protected" line="120"/>
    <member name="messageType" type="{unknown}" visibility="protected" line="122"/>
    <member name="redirectToFormOnValidationError" type="{unknown}" default="false" visibility="protected" line="130">
      <docblock>
        <description compact="Should we redirect the user back down to the the form on validation errors rather then just the page"/>
        <var type="object">
          <type full="bool" namespace="" name="bool"/>
        </var>
      </docblock>
    </member>
    <member name="security" type="{unknown}" default="true" visibility="protected" line="132"/>
    <member name="securityToken" type="{unknown}" default="null" visibility="protected" line="137">
      <docblock>
        <description/>
        <var type="object">
          <type full="SecurityToken" namespace="" name="SecurityToken"/>
        </var>
      </docblock>
    </member>
    <member name="extraClasses" type="array" visibility="protected" line="142">
      <docblock>
        <description/>
        <var description="$extraClasses List of additional CSS classes for the form tag." type="array"/>
      </docblock>
    </member>
    <member name="encType" type="{unknown}" visibility="protected" line="147">
      <docblock>
        <description/>
        <var type="string"/>
      </docblock>
    </member>
    <member name="attributes" type="array" visibility="protected" line="153">
      <docblock>
        <description/>
        <var description="Any custom form attributes set through {@link setAttributes()}." type="array">Some attributes are calculated on the fly, so please use <link xmlns="http://xml.phpdox.net/src" value="getAttributes()"/> to access them.
</var>
      </docblock>
    </member>
    <constructor name="__construct" start="171" end="212" abstract="false" final="false" static="false" visibility="public">
      <docblock>
        <description compact="Create a new form, with the given fields an action buttons."/>
        <param description="The parent controller, necessary to create the appropriate form action tag." type="object" variable="$controller">
          <type full="Controller" namespace="" name="Controller"/>
        </param>
        <param description="The method on the controller that will return this form object." type="object" variable="$name">
          <type full="String" namespace="" name="String"/>
        </param>
        <param description="All of the fields in the form - a {@link FieldList} of {@link FormField} objects." type="object" variable="$fields">
          <type full="FieldList" namespace="" name="FieldList"/>
        </param>
        <param description="All of the action buttons in the form - a {@link FieldLis} of" type="object" variable="$actions">{@link FormAction} objects<type full="FieldList" namespace="" name="FieldList"/></param>
        <param description="Override the default validator instance (Default: {@link RequiredFields})" type="object" variable="$validator">
          <type full="Validator" namespace="" name="Validator"/>
        </param>
      </docblock>
      <parameter name="controller" byreference="false" type="{unknown}"/>
      <parameter name="name" byreference="false" type="{unknown}"/>
      <parameter name="fields" byreference="false" type="object">
        <type full="\\FieldList" namespace="\" name="FieldList"/>
      </parameter>
      <parameter name="actions" byreference="false" type="object">
        <type full="\\FieldList" namespace="\" name="FieldList"/>
      </parameter>
      <parameter name="validator" byreference="false" type="{unknown}" default="null"/>
      <inline>
        <comment value="Form validation" line="194"/>
        <comment value="Form error controls" line="198"/>
        <comment value="Check if CSRF protection is enabled, either on the parent controller or from the default setting. Note that" line="201"/>
        <comment value="method_exists() is used as some controllers (e.g. GroupTest) do not always extend from Object." line="202"/>
      </inline>
    </constructor>
    <method name="setupFormErrors" start="225" end="249" abstract="false" final="false" static="false" visibility="public">
      <docblock>
        <description compact="Set up current form errors in session to the current form if appropriate."/>
      </docblock>
      <inline>
        <comment value="load data in from previous submission upon error" line="240"/>
      </inline>
    </method>
    <method name="httpSubmission" start="257" end="387" abstract="false" final="false" static="false" visibility="public">
      <docblock>
        <description compact="Handle a form submission.  GET and POST requests behave identically.">Populates the form with <link xmlns="http://xml.phpdox.net/src" value="loadDataFrom()"/>, calls <link xmlns="http://xml.phpdox.net/src" value="validate()"/>,
and only triggers the requested form action/method
if the form is valid.
</description>
      </docblock>
      <parameter name="request" byreference="false" type="{unknown}"/>
      <inline>
        <comment value="Strict method check" line="258"/>
        <comment value="Throws an error if the method is bad..." line="261"/>
        <comment value="...and only uses the vairables corresponding to that method type" line="268"/>
        <comment value="Populate the form" line="274"/>
        <comment value="Protection against CSRF attacks" line="277"/>
        <comment value="Determine the action button clicked" line="300"/>
        <comment value="Break off querystring arguments included in the action" line="304"/>
        <comment value="Cleanup action_, _x and _y from image fields" line="312"/>
        <comment value="If the action wasnt' set, choose the default on the form." line="318"/>
        <comment value="Permission checks (first on controller, then falling back to form)" line="328"/>
        <todo value=": Once we switch to a stricter policy regarding allowed_actions (meaning actions must be set" line="352"/>
        <comment value="explicitly in allowed_actions in order to run)" line="353"/>
        <comment value="Uncomment the following for checking security against running actions on form fields" line="354"/>
        <comment value="else {" line="355"/>
        <comment xmlns="http://xml.phpdox.net/src" value="Try to find a field that has the action, and allows it" line="356"/>
        <comment xmlns="http://xml.phpdox.net/src" value="$fieldsHaveMethod = false;" line="357"/>
        <comment xmlns="http://xml.phpdox.net/src" value="foreach ($this-&gt;Fields() as $field){" line="358"/>
        <comment xmlns="http://xml.phpdox.net/src" value="if ($field-&gt;hasMethod($funcName) &amp;&amp; $field-&gt;checkAccessAction($funcName)) {" line="359"/>
        <comment xmlns="http://xml.phpdox.net/src" value="$fieldsHaveMethod = true;" line="360"/>
        <comment xmlns="http://xml.phpdox.net/src" value="}" line="361"/>
        <comment xmlns="http://xml.phpdox.net/src" value="}" line="362"/>
        <comment xmlns="http://xml.phpdox.net/src" value="if (!$fieldsHaveMethod) {" line="363"/>
        <comment xmlns="http://xml.phpdox.net/src" value="return $this-&gt;httpError(" line="364"/>
        <comment xmlns="http://xml.phpdox.net/src" value="403," line="365"/>
        <comment xmlns="http://xml.phpdox.net/src" value="sprintf('Action &quot;%s&quot; not allowed on any fields of form (Name: &quot;%s&quot;)', $funcName, $this-&gt;Name())" line="366"/>
        <comment xmlns="http://xml.phpdox.net/src" value=");" line="367"/>
        <comment xmlns="http://xml.phpdox.net/src" value="}" line="368"/>
        <comment xmlns="http://xml.phpdox.net/src" value="}" line="369"/>
        <comment value="Validate the form" line="371"/>
        <comment value="First, try a handler method on the controller (has been checked for allowed_actions above already)" line="376"/>
      </inline>
    </method>
    <method name="checkAccessAction" start="389" end="400" abstract="false" final="false" static="false" visibility="public">
      <parameter name="action" byreference="false" type="{unknown}"/>
    </method>
    <method name="getValidationErrorResponse" start="411" end="441" abstract="false" final="false" static="false" visibility="protected">
      <docblock>
        <description compact="Returns the appropriate response up the controller chain if {@link validate()} fails (which is checked prior to executing any form actions).">By default, returns different views for ajax/non-ajax request, and
handles 'appliction/json' requests with a JSON object containing the error messages.
Behaviour can be influenced by setting <link xmlns="http://xml.phpdox.net/src" value="$redirectToFormOnValidationError"/>.
</description>
        <return type="object">
          <type full="SS_HTTPResponse|string" namespace="" name="SS_HTTPResponse|string"/>
        </return>
      </docblock>
      <inline>
        <comment value="Special case for legacy Validator.js implementation" line="414"/>
        <comment value="(assumes eval'ed javascript collected through FormResponse)" line="415"/>
        <comment value="Send validation errors back as JSON with a flag at the start" line="418"/>
      </inline>
    </method>
    <method name="checkFieldsForAction" start="448" end="458" abstract="false" final="false" static="false" visibility="protected">
      <docblock>
        <description compact="Fields can have action to, let's check if anyone of the responds to $funcname them"/>
        <return type="object">
          <type full="FormField" namespace="" name="FormField"/>
        </return>
      </docblock>
      <parameter name="fields" byreference="false" type="{unknown}"/>
      <parameter name="funcName" byreference="false" type="{unknown}"/>
    </method>
    <method name="handleField" start="471" end="480" abstract="false" final="false" static="false" visibility="public">
      <docblock>
        <description compact="Handle a field request.">Uses <link xmlns="http://xml.phpdox.net/src" value="Form-&gt;dataFieldByName()"/> to find a matching field,
and falls back to <link xmlns="http://xml.phpdox.net/src" value="FieldList-&gt;fieldByName()"/> to look
for tabs instead. This means that if you have a tab and a
formfield with the same name, this method gives priority
to the formfield.
</description>
        <param type="object" variable="$request">
          <type full="SS_HTTPRequest" namespace="" name="SS_HTTPRequest"/>
        </param>
        <return type="object">
          <type full="FormField" namespace="" name="FormField"/>
        </return>
      </docblock>
      <parameter name="request" byreference="false" type="{unknown}"/>
    </method>
    <method name="makeReadonly" start="485" end="487" abstract="false" final="false" static="false" visibility="public">
      <docblock>
        <description compact="Convert this form into a readonly form"/>
      </docblock>
    </method>
    <method name="setRedirectToFormOnValidationError" start="496" end="499" abstract="false" final="false" static="false" visibility="public">
      <docblock>
        <description compact="Set whether the user should be redirected back down to the form on the page upon validation errors in the form or if they just need to redirect back to the page"/>
        <param description="Redirect to the form" type="object">
          <type full="bool" namespace="" name="bool"/>
        </param>
      </docblock>
      <parameter name="bool" byreference="false" type="{unknown}"/>
    </method>
    <method name="getRedirectToFormOnValidationError" start="507" end="509" abstract="false" final="false" static="false" visibility="public">
      <docblock>
        <description compact="Get whether the user should be redirected back down to the form on the page upon validation errors"/>
        <return type="object">
          <type full="bool" namespace="" name="bool"/>
        </return>
      </docblock>
    </method>
    <method name="addErrorMessage" start="515" end="521" abstract="false" final="false" static="false" visibility="public">
      <docblock>
        <description compact="Add a plain text error message to a field on this form.  It will be saved into the session and used the next time this form is displayed."/>
      </docblock>
      <parameter name="fieldName" byreference="false" type="{unknown}"/>
      <parameter name="message" byreference="false" type="{unknown}"/>
      <parameter name="messageType" byreference="false" type="{unknown}"/>
      <parameter name="escapeHtml" byreference="false" type="{unknown}" default="true"/>
    </method>
    <method name="transform" start="523" end="540" abstract="false" final="false" static="false" visibility="public">
      <parameter name="trans" byreference="false" type="object">
        <type full="\\FormTransformation" namespace="\" name="FormTransformation"/>
      </parameter>
      <inline>
        <comment value="We have to remove validation, if the fields are not editable ;-)" line="537"/>
      </inline>
    </method>
    <method name="getValidator" start="546" end="548" abstract="false" final="false" static="false" visibility="public">
      <docblock>
        <description compact="Get the {@link Validator} attached to this form."/>
        <return type="object">
          <type full="Validator" namespace="" name="Validator"/>
        </return>
      </docblock>
    </method>
    <method name="setValidator" start="553" end="559" abstract="false" final="false" static="false" visibility="public">
      <docblock>
        <description compact="Set the {@link Validator} on this form."/>
      </docblock>
      <parameter name="validator" byreference="false" type="object">
        <type full="\\Validator" namespace="\" name="Validator"/>
      </parameter>
    </method>
    <method name="unsetValidator" start="564" end="567" abstract="false" final="false" static="false" visibility="public">
      <docblock>
        <description compact="Remove the {@link Validator} from this from."/>
      </docblock>
    </method>
    <method name="transformTo" start="572" end="582" abstract="false" final="false" static="false" visibility="public">
      <docblock>
        <description compact="Convert this form to another format."/>
      </docblock>
      <parameter name="format" byreference="false" type="object">
        <type full="\\FormTransformation" namespace="\" name="FormTransformation"/>
      </parameter>
      <inline>
        <comment value="We have to remove validation, if the fields are not editable ;-)" line="579"/>
      </inline>
    </method>
    <method name="getExtraFields" start="590" end="606" abstract="false" final="false" static="false" visibility="public">
      <docblock>
        <description compact="Generate extra special fields - namely the security token field (if required)."/>
        <return type="object">
          <type full="FieldList" namespace="" name="FieldList"/>
        </return>
      </docblock>
      <inline>
        <comment value="add the &quot;real&quot; HTTP method if necessary (for PUT, DELETE and HEAD)" line="598"/>
      </inline>
    </method>
    <method name="Fields" start="613" end="619" abstract="false" final="false" static="false" visibility="public">
      <docblock>
        <description compact="Return the form's fields - used by the templates"/>
        <return description="The form fields" type="object">
          <type full="FieldList" namespace="" name="FieldList"/>
        </return>
      </docblock>
    </method>
    <method name="HiddenFields" start="628" end="630" abstract="false" final="false" static="false" visibility="public">
      <docblock>
        <description compact="Return all &lt;input type=&quot;hidden&quot;&gt; fields in a form - including fields nested in {@link CompositeFields}.">Useful when doing custom field layouts.</description>
        <return type="object">
          <type full="FieldList" namespace="" name="FieldList"/>
        </return>
      </docblock>
    </method>
    <method name="VisibleFields" start="636" end="638" abstract="false" final="false" static="false" visibility="public">
      <docblock>
        <description compact="Return all fields except for the hidden fields.">Useful when making your own simplified form layouts.</description>
      </docblock>
    </method>
    <method name="setFields" start="645" end="648" abstract="false" final="false" static="false" visibility="public">
      <docblock>
        <description compact="Setter for the form fields."/>
        <param type="object" variable="$fields">
          <type full="FieldList" namespace="" name="FieldList"/>
        </param>
      </docblock>
      <parameter name="fields" byreference="false" type="{unknown}"/>
    </method>
    <method name="Actions" start="655" end="657" abstract="false" final="false" static="false" visibility="public">
      <docblock>
        <description compact="Return the form's action buttons - used by the templates"/>
        <return description="The action list" type="object">
          <type full="FieldList" namespace="" name="FieldList"/>
        </return>
      </docblock>
    </method>
    <method name="setActions" start="664" end="667" abstract="false" final="false" static="false" visibility="public">
      <docblock>
        <description compact="Setter for the form actions."/>
        <param type="object" variable="$actions">
          <type full="FieldList" namespace="" name="FieldList"/>
        </param>
      </docblock>
      <parameter name="actions" byreference="false" type="{unknown}"/>
    </method>
    <method name="unsetAllActions" start="672" end="675" abstract="false" final="false" static="false" visibility="public">
      <docblock>
        <description compact="Unset all form actions"/>
      </docblock>
    </method>
    <method name="setAttribute" start="681" end="684" abstract="false" final="false" static="false" visibility="public">
      <docblock>
        <description/>
        <param type="object">
          <type full="String" namespace="" name="String"/>
        </param>
        <param type="object">
          <type full="String" namespace="" name="String"/>
        </param>
      </docblock>
      <parameter name="name" byreference="false" type="{unknown}"/>
      <parameter name="value" byreference="false" type="{unknown}"/>
    </method>
    <method name="getAttribute" start="689" end="691" abstract="false" final="false" static="false" visibility="public">
      <docblock>
        <description/>
        <return type="object">
          <type full="String" namespace="" name="String"/>
        </return>
      </docblock>
      <parameter name="name" byreference="false" type="{unknown}"/>
    </method>
    <method name="getAttributes" start="693" end="710" abstract="false" final="false" static="false" visibility="public"/>
    <method name="getAttributesHTML" start="719" end="752" abstract="false" final="false" static="false" visibility="public">
      <docblock>
        <description compact="Return the attributes of the form tag - used by the templates."/>
        <param description="Custom attributes to process. Falls back to {@link getAttributes()}." type="object">If at least one argument is passed as a string, all arguments act as excludes by name.<type full="Array" namespace="" name="Array"/></param>
        <return description="HTML attributes, ready for insertion into an HTML tag" type="object">
          <type full="String" namespace="" name="String"/>
        </return>
      </docblock>
      <parameter name="attrs" byreference="false" type="{unknown}" default="null"/>
      <inline>
        <comment value="Figure out if we can cache this form" line="724"/>
        <comment value="- forms with validation shouldn't be cached, cos their error messages won't be shown" line="725"/>
        <comment value="- forms with security tokens shouldn't be cached because security tokens expire" line="726"/>
        <comment value="If we need to disable cache, do it" line="734"/>
        <comment value="Remove empty" line="739"/>
        <comment value="Remove excluded" line="742"/>
        <comment value="Create markkup" line="745"/>
      </inline>
    </method>
    <method name="FormAttributes" start="754" end="756" abstract="false" final="false" static="false" visibility="public"/>
    <method name="setTarget" start="764" end="767" abstract="false" final="false" static="false" visibility="public">
      <docblock>
        <description compact="Set the target of this form to any value - useful for opening the form contents in a new window or refreshing another frame"/>
        <param description="The value of the target" type="object">
          <type full="target" namespace="" name="target"/>
        </param>
      </docblock>
      <parameter name="target" byreference="false" type="{unknown}"/>
    </method>
    <method name="setLegend" start="773" end="776" abstract="false" final="false" static="false" visibility="public">
      <docblock>
        <description compact="Set the legend value to be inserted into the &lt;legend&gt; element in the Form.ss template."/>
      </docblock>
      <parameter name="legend" byreference="false" type="{unknown}"/>
    </method>
    <method name="setTemplate" start="784" end="787" abstract="false" final="false" static="false" visibility="public">
      <docblock>
        <description compact="Set the SS template that this form should use to render with. The default is &quot;Form&quot;."/>
        <param description="The name of the template (without the .ss extension)" type="string" variable="$template"/>
      </docblock>
      <parameter name="template" byreference="false" type="{unknown}"/>
    </method>
    <method name="getTemplate" start="796" end="799" abstract="false" final="false" static="false" visibility="public">
      <docblock>
        <description compact="Return the template to render this form with.">If the template isn't set, then default to the
form class name e.g "Form".</description>
        <return type="string"/>
      </docblock>
    </method>
    <method name="getEncType" start="808" end="820" abstract="false" final="false" static="false" visibility="public">
      <docblock>
        <description compact="Returns the encoding type for the form.">By default this will be URL encoded, unless there is a file field present
in which case multipart is used. You can also set the enc type using
{@link setEncType}.</description>
      </docblock>
    </method>
    <method name="setEncType" start="828" end="831" abstract="false" final="false" static="false" visibility="public">
      <docblock>
        <description compact="Sets the form encoding type. The most common encoding types are defined in {@link ENC_TYPE_URLENCODED} and {@link ENC_TYPE_MULTIPART}."/>
        <param type="string" variable="$enctype"/>
      </docblock>
      <parameter name="encType" byreference="false" type="{unknown}"/>
    </method>
    <method name="FormHttpMethod" start="845" end="847" abstract="false" final="false" static="false" visibility="public">
      <docblock>
        <description compact="Returns the real HTTP method for the form: GET, POST, PUT, DELETE or HEAD.">As most browsers only support GET and POST in
form submissions, all other HTTP methods are
added as a hidden field "_method" that
gets evaluated in <link xmlns="http://xml.phpdox.net/src" value="Director::direct()"/>.
See <link xmlns="http://xml.phpdox.net/src" value="FormMethod()"/> to get a HTTP method
for safe insertion into a &lt;form&gt; tag.
</description>
        <return description="HTTP method" type="string"/>
      </docblock>
    </method>
    <method name="FormMethod" start="855" end="861" abstract="false" final="false" static="false" visibility="public">
      <docblock>
        <description compact="Returns the form method to be used in the &lt;form&gt; tag.">See <link xmlns="http://xml.phpdox.net/src" value="FormHttpMethod()"/> to get the "real" method.
</description>
        <return description="Form tag compatbile HTTP method: 'get' or 'post'" type="string"/>
      </docblock>
    </method>
    <method name="setFormMethod" start="869" end="873" abstract="false" final="false" static="false" visibility="public">
      <docblock>
        <description compact="Set the form method: GET, POST, PUT, DELETE."/>
        <param variable="$method" type="string"/>
        <param description="non-null, pass value to {@link setStrictFormMethodCheck()}." variable="$strict" type="object">
          <type full="If" namespace="" name="If"/>
        </param>
      </docblock>
      <parameter name="method" byreference="false" type="{unknown}"/>
      <parameter name="strict" byreference="false" type="{unknown}" default="null"/>
    </method>
    <method name="setStrictFormMethodCheck" start="887" end="890" abstract="false" final="false" static="false" visibility="public">
      <docblock>
        <description compact="If set to true, enforce the matching of the form method.">This will mean two things:
 - GET vars will be ignored by a POST form, and vice versa
 - A submission where the HTTP method used doesn't match the form will return a 400 error.

If set to false (the default), then the form method is only used to construct the default
form.</description>
        <param variable="$bool" type="boolean"/>
      </docblock>
      <parameter name="bool" byreference="false" type="{unknown}"/>
    </method>
    <method name="getStrictFormMethodCheck" start="895" end="897" abstract="false" final="false" static="false" visibility="public">
      <docblock>
        <description/>
        <return type="boolean"/>
      </docblock>
    </method>
    <method name="FormAction" start="905" end="913" abstract="false" final="false" static="false" visibility="public">
      <docblock>
        <description compact="Return the form's action attribute.">This is build by adding an executeForm get variable to the parent controller's Link() value</description>
        <return type="string"/>
      </docblock>
    </method>
    <method name="setFormAction" start="924" end="927" abstract="false" final="false" static="false" visibility="public">
      <docblock>
        <description compact="Set the form action attribute to a custom URL.">Note: For "normal" forms, you shouldn't need to use this method.  It is recommended only for situations where
you have two relatively distinct parts of the system trying to communicate via a form post.</description>
      </docblock>
      <parameter name="path" byreference="false" type="{unknown}"/>
    </method>
    <method name="FormName" start="937" end="940" abstract="false" final="false" static="false" visibility="public">
      <docblock>
        <description compact="Returns the name of the form"/>
      </docblock>
    </method>
    <method name="setHTMLID" start="945" end="948" abstract="false" final="false" static="false" visibility="public">
      <docblock>
        <description compact="Set the HTML ID attribute of the form"/>
      </docblock>
      <parameter name="id" byreference="false" type="{unknown}"/>
    </method>
    <method name="Controller" start="954" end="956" abstract="false" final="false" static="false" visibility="public">
      <docblock>
        <description compact="Returns this form's controller.">This is used in the templates.</description>
      </docblock>
    </method>
    <method name="getController" start="962" end="964" abstract="false" final="false" static="false" visibility="public">
      <docblock>
        <description compact="Get the controller."/>
        <return type="object">
          <type full="Controller" namespace="" name="Controller"/>
        </return>
      </docblock>
    </method>
    <method name="setController" start="971" end="974" abstract="false" final="false" static="false" visibility="public">
      <docblock>
        <description compact="Set the controller."/>
        <param type="object" variable="$controller">
          <type full="Controller" namespace="" name="Controller"/>
        </param>
        <return type="object">
          <type full="Form" namespace="" name="Form"/>
        </return>
      </docblock>
      <parameter name="controller" byreference="false" type="{unknown}"/>
    </method>
    <method name="getName" start="980" end="982" abstract="false" final="false" static="false" visibility="public">
      <docblock>
        <description compact="Get the name of the form."/>
        <return type="string"/>
      </docblock>
    </method>
    <method name="setName" start="989" end="992" abstract="false" final="false" static="false" visibility="public">
      <docblock>
        <description compact="Set the name of the form."/>
        <param type="string" variable="$name"/>
        <return type="object">
          <type full="Form" namespace="" name="Form"/>
        </return>
      </docblock>
      <parameter name="name" byreference="false" type="{unknown}"/>
    </method>
    <method name="FieldMap" start="999" end="1001" abstract="false" final="false" static="false" visibility="public">
      <docblock>
        <description compact="Returns an object where there is a method with the same name as each data field on the form.">That method will return the field itself.
It means that you can execute $firstNameField = $form-&gt;FieldMap()-&gt;FirstName(), which can be handy</description>
      </docblock>
    </method>
    <method name="Message" start="1010" end="1013" abstract="false" final="false" static="false" visibility="public">
      <docblock>
        <description compact="The next functions store and modify the forms message attributes. messages are stored in session under $_SESSION[formname][message];"/>
        <return type="string"/>
      </docblock>
    </method>
    <method name="MessageType" start="1018" end="1021" abstract="false" final="false" static="false" visibility="public">
      <docblock>
        <description/>
        <return type="string"/>
      </docblock>
    </method>
    <method name="getMessageFromSession" start="1026" end="1035" abstract="false" final="false" static="false" visibility="protected">
      <docblock>
        <description/>
        <return type="string"/>
      </docblock>
    </method>
    <method name="setMessage" start="1046" end="1050" abstract="false" final="false" static="false" visibility="public">
      <docblock>
        <description compact="Set a status message for the form."/>
        <param description="the text of the message" type="object">
          <type full="message" namespace="" name="message"/>
        </param>
        <param description="Should be set to good, bad, or warning." type="object">
          <type full="type" namespace="" name="type"/>
        </param>
        <param description="Automatically sanitize the message. Set to FALSE if the message contains HTML." type="boolean" variable="$escapeHtml">In that case, you might want to use <link xmlns="http://xml.phpdox.net/src" value="Convert::raw2xml()"/> to escape any
                           user supplied data in the message.
</param>
      </docblock>
      <parameter name="message" byreference="false" type="{unknown}"/>
      <parameter name="type" byreference="false" type="{unknown}"/>
      <parameter name="escapeHtml" byreference="false" type="{unknown}" default="true"/>
    </method>
    <method name="sessionMessage" start="1061" end="1067" abstract="false" final="false" static="false" visibility="public">
      <docblock>
        <description compact="Set a message to the session, for display next time this form is shown."/>
        <param description="the text of the message" type="object">
          <type full="message" namespace="" name="message"/>
        </param>
        <param description="Should be set to good, bad, or warning." type="object">
          <type full="type" namespace="" name="type"/>
        </param>
        <param description="Automatically sanitize the message. Set to FALSE if the message contains HTML." type="boolean" variable="$escapeHtml">In that case, you might want to use <link xmlns="http://xml.phpdox.net/src" value="Convert::raw2xml()"/> to escape any
                           user supplied data in the message.
</param>
      </docblock>
      <parameter name="message" byreference="false" type="{unknown}"/>
      <parameter name="type" byreference="false" type="{unknown}"/>
      <parameter name="escapeHtml" byreference="false" type="{unknown}" default="true"/>
    </method>
    <method name="messageForForm" start="1069" end="1075" abstract="false" final="false" static="true" visibility="public">
      <parameter name="formName" byreference="false" type="{unknown}"/>
      <parameter name="message" byreference="false" type="{unknown}"/>
      <parameter name="type" byreference="false" type="{unknown}"/>
      <parameter name="escapeHtml" byreference="false" type="{unknown}" default="true"/>
    </method>
    <method name="clearMessage" start="1077" end="1082" abstract="false" final="false" static="false" visibility="public"/>
    <method name="resetValidation" start="1083" end="1086" abstract="false" final="false" static="false" visibility="public"/>
    <method name="getRecord" start="1094" end="1096" abstract="false" final="false" static="false" visibility="public">
      <docblock>
        <description compact="Returns the DataObject that has given this form its data through {@link loadDataFrom()}."/>
        <return type="object">
          <type full="DataObject" namespace="" name="DataObject"/>
        </return>
      </docblock>
    </method>
    <method name="getLegend" start="1104" end="1106" abstract="false" final="false" static="false" visibility="public">
      <docblock>
        <description compact="Get the legend value to be inserted into the &lt;legend&gt; element in Form.ss"/>
        <return type="string"/>
      </docblock>
    </method>
    <method name="validate" start="1118" end="1131" abstract="false" final="false" static="false" visibility="public">
      <docblock>
        <description compact="Processing that occurs before a form is executed.">This includes form validation, if it fails, we redirect back
to the form with appropriate error messages.
Triggered through <link xmlns="http://xml.phpdox.net/src" value="httpSubmission()"/>.
Note that CSRF protection takes place in <link xmlns="http://xml.phpdox.net/src" value="httpSubmission()"/>,
if it fails the form data will never reach this method.
</description>
        <return type="boolean"/>
      </docblock>
      <inline>
        <comment value="Load errors into session and post back" line="1123"/>
      </inline>
    </method>
    <method name="loadDataFrom" start="1178" end="1254" abstract="false" final="false" static="false" visibility="public">
      <docblock>
        <description compact="Load data from the given DataObject or array.">It will call $object-&gt;MyField to get the value of MyField.
If you passed an array, it will call $object[MyField].
Doesn't save into dataless FormFields (<link xmlns="http://xml.phpdox.net/src" value="DatalessField"/>),
as determined by <link xmlns="http://xml.phpdox.net/src" value="FieldList-&gt;dataFields()"/>.
By default, if a field isn't set (as determined by isset()),
its value will not be saved to the field, retaining
potential existing values.
Passed data should not be escaped, and is saved to the FormField instances unescaped.
Escaping happens automatically on saving the data through <link xmlns="http://xml.phpdox.net/src" value="saveInto()"/>.
</description>
        <uses value="FieldList-&gt;dataFields()"/>
        <uses value="FormField-&gt;setValue()"/>
        <param type="object" variable="$data">
          <type full="array|DataObject" namespace="" name="array|DataObject"/>
        </param>
        <param type="int" variable="$mergeStrategy">For every field, <link xmlns="http://xml.phpdox.net/src" value="$data"/> is interogated whether it contains a relevant property/key, and
 what that property/key's value is.
 By default, if <link xmlns="http://xml.phpdox.net/src" value="$data"/> does contain a property/key, the fields value is always replaced by <link xmlns="http://xml.phpdox.net/src" value="$data"/>'s
 value, even if that value is null/false/etc. Fields which don't match any property/key in <link xmlns="http://xml.phpdox.net/src" value="$data"/> are
 "left alone", meaning they retain any previous value.
 You can pass a bitmask here to change this behaviour.
 Passing CLEAR_MISSING means that any fields that don't match any property/key in
 <link xmlns="http://xml.phpdox.net/src" value="$data"/> are cleared.
 Passing IGNORE_FALSEISH means that any false-ish value in <link xmlns="http://xml.phpdox.net/src" value="$data"/> won't replace
 a field's value.
 For backwards compatibility reasons, this parameter can also be set to === true, which is the same as passing
 CLEAR_MISSING
</param>
        <param description="optional list of fields to process.  This can be useful when you have a" variable="$fieldList" type="object">form that has some fields that save to one object, and some that save to another.<type full="An" namespace="" name="An"/></param>
        <return type="object">
          <type full="Form" namespace="" name="Form"/>
        </return>
      </docblock>
      <parameter name="data" byreference="false" type="{unknown}"/>
      <parameter name="mergeStrategy" byreference="false" type="integer" default="0"/>
      <parameter name="fieldList" byreference="false" type="{unknown}" default="null"/>
      <inline>
        <comment value="Handle the backwards compatible case of passing &quot;true&quot; as the second argument" line="1184"/>
        <comment value="if an object is passed, save it for historical reference through {@link getRecord()}" line="1192"/>
        <comment value="dont include fields without data" line="1195"/>
        <comment value="Skip fields that have been exlcuded" line="1200"/>
        <comment value="First check looks for (fieldname)_unchanged, an indicator that we shouldn't overwrite the field value" line="1203"/>
        <comment value="Does this property exist on $data?" line="1206"/>
        <comment value="The value from $data for this field" line="1208"/>
        <comment value="save to the field if either a value is given, or loading of blank/undefined values is forced" line="1241"/>
        <comment value="pass original data as well so composite fields can act on the additional information" line="1244"/>
      </inline>
    </method>
    <method name="saveInto" start="1264" end="1283" abstract="false" final="false" static="false" visibility="public">
      <docblock>
        <description compact="Save the contents of this form into the given data object.">It will make use of setCastedField() to do this.</description>
        <param description="object to save data into" variable="$dataObject" type="object">
          <type full="The" namespace="" name="The"/>
        </param>
        <param description="optional list of fields to process.  This can be useful when you have a" variable="$fieldList" type="object">form that has some fields that save to one object, and some that save to another.<type full="An" namespace="" name="An"/></param>
      </docblock>
      <parameter name="dataObject" byreference="false" type="object">
        <type full="\\DataObjectInterface" namespace="\" name="DataObjectInterface"/>
      </parameter>
      <parameter name="fieldList" byreference="false" type="{unknown}" default="null"/>
      <inline>
        <comment value="Skip fields that have been excluded" line="1268"/>
      </inline>
    </method>
    <method name="getData" start="1295" end="1307" abstract="false" final="false" static="false" visibility="public">
      <docblock>
        <description compact="Get the submitted data from this form through {@link FieldList-&gt;dataFields()}, which filters out any form-specific data like form-actions.">Calls <link xmlns="http://xml.phpdox.net/src" value="FormField-&gt;dataValue()"/> on each field,
which returns a value suitable for insertion into a DataObject
property.
</description>
        <return type="array"/>
      </docblock>
    </method>
    <method name="callfieldmethod" start="1316" end="1338" abstract="false" final="false" static="false" visibility="public">
      <docblock>
        <description compact="Call the given method on the given field.">This is used by Ajax-savvy form fields.  By putting '&amp;action=callfieldmethod' to the end
of the form action, they can access server-side data.</description>
        <param description="The name of the field.  Can be overridden by $_REQUEST[fieldName]" type="object">
          <type full="fieldName" namespace="" name="fieldName"/>
        </param>
        <param description="The name of the field.  Can be overridden by $_REQUEST[methodName]" type="object">
          <type full="methodName" namespace="" name="methodName"/>
        </param>
      </docblock>
      <parameter name="data" byreference="false" type="{unknown}"/>
      <inline>
        <comment value="special treatment needed for TableField-class and TreeDropdownField" line="1321"/>
      </inline>
    </method>
    <method name="forTemplate" start="1346" end="1356" abstract="false" final="false" static="false" visibility="public">
      <docblock>
        <description compact="Return a rendered version of this form.">This is returned when you access a form as $FormObject rather
than &lt;% with FormObject %&gt;</description>
      </docblock>
      <inline>
        <comment value="Now that we're rendered, clear message" line="1352"/>
      </inline>
    </method>
    <method name="forAjaxTemplate" start="1362" end="1369" abstract="false" final="false" static="false" visibility="public">
      <docblock>
        <description compact="Return a rendered version of this form, suitable for ajax post-back.">It triggers slightly different behaviour, such as disabling the rewriting of # links</description>
      </docblock>
    </method>
    <method name="formHtmlContent" start="1376" end="1388" abstract="false" final="false" static="false" visibility="public">
      <docblock>
        <description compact="Returns an HTML rendition of this form, without the &lt;form&gt; tag itself.">Attaches 3 extra hidden files, _form_action, _form_name, _form_method, and _form_enctype.  These are
the attributes of the form.  These fields can be used to send the form to Ajax.</description>
      </docblock>
    </method>
    <method name="renderWithoutActionButton" start="1394" end="1401" abstract="false" final="false" static="false" visibility="public">
      <docblock>
        <description compact="Render this form using the given template, and return the result as a string You can pass either an SSViewer or a template name"/>
      </docblock>
      <parameter name="template" byreference="false" type="{unknown}"/>
    </method>
    <method name="setButtonClicked" start="1408" end="1411" abstract="false" final="false" static="false" visibility="public">
      <docblock>
        <description compact="Sets the button that was clicked.  This should only be called by the Controller."/>
        <param description="The name of the action method that will be called." type="object">
          <type full="funcName" namespace="" name="funcName"/>
        </param>
      </docblock>
      <parameter name="funcName" byreference="false" type="{unknown}"/>
    </method>
    <method name="buttonClicked" start="1413" end="1419" abstract="false" final="false" static="false" visibility="public"/>
    <method name="defaultAction" start="1424" end="1427" abstract="false" final="false" static="false" visibility="public">
      <docblock>
        <description compact="Return the default button that should be clicked when another one isn't available"/>
      </docblock>
    </method>
    <method name="disableDefaultAction" start="1434" end="1437" abstract="false" final="false" static="false" visibility="public">
      <docblock>
        <description compact="Disable the default button.">Ordinarily, when a form is processed and no action_XXX button is available, then the first button in the
actions list will be pressed.  However, if this is "delete", for example, this isn't such a good idea.</description>
      </docblock>
    </method>
    <method name="disableSecurityToken" start="1446" end="1449" abstract="false" final="false" static="false" visibility="public">
      <docblock>
        <description compact="Disable the requirement of a security token on this form instance. This security protects against CSRF attacks, but you should disable this if you don't want to tie a form to a session - eg a search form.">Check for token state with <link xmlns="http://xml.phpdox.net/src" value="getSecurityToken()"/> and <link xmlns="http://xml.phpdox.net/src" value="SecurityToken-&gt;isEnabled()"/>.
</description>
      </docblock>
    </method>
    <method name="enableSecurityToken" start="1456" end="1459" abstract="false" final="false" static="false" visibility="public">
      <docblock>
        <description compact="Enable {@link SecurityToken} protection for this form instance.">Check for token state with <link xmlns="http://xml.phpdox.net/src" value="getSecurityToken()"/> and <link xmlns="http://xml.phpdox.net/src" value="SecurityToken-&gt;isEnabled()"/>.
</description>
      </docblock>
    </method>
    <method name="getSecurityToken" start="1468" end="1470" abstract="false" final="false" static="false" visibility="public">
      <docblock>
        <description compact="Returns the security token for this form (if any exists).">Doesn't check for <link xmlns="http://xml.phpdox.net/src" value="securityTokenEnabled()"/>.
Use <link xmlns="http://xml.phpdox.net/src" value="SecurityToken::inst()"/> to get a global token.
</description>
        <return type="object">
          <type full="SecurityToken|null" namespace="" name="SecurityToken|null"/>
        </return>
      </docblock>
    </method>
    <method name="single_field_required" start="1479" end="1481" abstract="false" final="false" static="true" visibility="public">
      <docblock>
        <description compact="Returns the name of a field, if that's the only field that the current controller is interested in.">It checks for a call to the callfieldmethod action.
This is useful for optimising your forms</description>
        <return type="string"/>
      </docblock>
    </method>
    <method name="current_action" start="1487" end="1489" abstract="false" final="false" static="true" visibility="public">
      <docblock>
        <description compact="Return the current form action being called, if available.">This is useful for optimising your forms</description>
      </docblock>
    </method>
    <method name="set_current_action" start="1494" end="1496" abstract="false" final="false" static="true" visibility="public">
      <docblock>
        <description compact="Set the current form action.  Should only be called by Controller."/>
      </docblock>
      <parameter name="action" byreference="false" type="{unknown}"/>
    </method>
    <method name="extraClass" start="1503" end="1505" abstract="false" final="false" static="false" visibility="public">
      <docblock>
        <description compact="Compiles all CSS-classes."/>
        <return type="string"/>
      </docblock>
    </method>
    <method name="addExtraClass" start="1514" end="1522" abstract="false" final="false" static="false" visibility="public">
      <docblock>
        <description compact="Add a CSS-class to the form-container. If needed, multiple classes can be added by delimiting a string with spaces."/>
        <param description="A string containing a classname or several class" type="string" variable="$class">names delimited by a single space.</param>
      </docblock>
      <parameter name="class" byreference="false" type="{unknown}"/>
      <inline>
        <comment value="split at white space" line="1515"/>
        <comment value="add classes one by one" line="1518"/>
      </inline>
    </method>
    <method name="removeExtraClass" start="1530" end="1538" abstract="false" final="false" static="false" visibility="public">
      <docblock>
        <description compact="Remove a CSS-class from the form-container. Multiple class names can be passed through as a space delimited string"/>
        <param type="string" variable="$class"/>
      </docblock>
      <parameter name="class" byreference="false" type="{unknown}"/>
      <inline>
        <comment value="split at white space" line="1531"/>
        <comment value="unset one by one" line="1534"/>
      </inline>
    </method>
    <method name="debug" start="1540" end="1551" abstract="false" final="false" static="false" visibility="public"/>
    <method name="testSubmission" start="1563" end="1570" abstract="false" final="false" static="false" visibility="public">
      <docblock>
        <description compact="Test a submission of this form."/>
        <return description="the response object that the handling controller produces.  You can interrogate this in" type="object">your unit test.<type full="SS_HTTPResponse" namespace="" name="SS_HTTPResponse"/></return>
      </docblock>
      <parameter name="action" byreference="false" type="{unknown}"/>
      <parameter name="data" byreference="false" type="{unknown}"/>
    </method>
    <method name="testAjaxSubmission" start="1577" end="1580" abstract="false" final="false" static="false" visibility="public">
      <docblock>
        <description compact="Test an ajax submission of this form."/>
        <return description="the response object that the handling controller produces.  You can interrogate this in" type="object">your unit test.<type full="SS_HTTPResponse" namespace="" name="SS_HTTPResponse"/></return>
      </docblock>
      <parameter name="action" byreference="false" type="{unknown}"/>
      <parameter name="data" byreference="false" type="{unknown}"/>
    </method>
  </parent>
  <parent full="RequestHandler" namespace="" name="RequestHandler">
    <extends full="ViewableData" namespace="" name="ViewableData"/>
    <member name="request" type="{unknown}" default="null" visibility="protected" line="42">
      <docblock>
        <description/>
        <var description="$request The request object that the controller was called with." type="object">Set in <link xmlns="http://xml.phpdox.net/src" value="handleRequest()"/>. Useful to generate the {}
<type full="SS_HTTPRequest" namespace="" name="SS_HTTPRequest"/></var>
      </docblock>
    </member>
    <member name="model" type="{unknown}" default="null" visibility="protected" line="47">
      <docblock>
        <description compact="The DataModel for this request"/>
      </docblock>
    </member>
    <member name="brokenOnConstruct" type="{unknown}" default="true" visibility="protected" line="56">
      <docblock>
        <description compact="This variable records whether RequestHandler::__construct() was called or not. Useful for checking if subclasses have called parent::__construct()"/>
        <var type="boolean"/>
      </docblock>
    </member>
    <constructor name="__construct" start="110" end="120" abstract="false" final="false" static="false" visibility="public">
      <inline>
        <comment value="Check necessary to avoid class conflicts before manifest is rebuilt" line="113"/>
        <comment value="This will prevent bugs if setDataModel() isn't called." line="116"/>
      </inline>
    </constructor>
    <method name="setDataModel" start="125" end="127" abstract="false" final="false" static="false" visibility="public">
      <docblock>
        <description compact="Set the DataModel for this request."/>
      </docblock>
      <parameter name="model" byreference="false" type="{unknown}"/>
    </method>
    <method name="handleRequest" start="150" end="239" abstract="false" final="false" static="false" visibility="public">
      <docblock>
        <description compact="Handles URL requests.">- ViewableData::handleRequest() iterates through each rule in <link xmlns="http://xml.phpdox.net/src" value="self::$url_handlers"/>.
 - If the rule matches, the named method will be called.
 - If there is still more URL to be processed, then handleRequest()
   is called on the object that that method returns.
Once all of the URL has been processed, the final result is returned.
However, if the final result is an array, this
array is interpreted as being additional template data to customise the
2nd to last result with, rather than an object
in its own right.  This is most frequently used when a Controller's
action will return an array of data with which to
customise the controller.
</description>
        <param description="{@link SS_HTTPRequest} object that is reponsible for distributing URL parsing" variable="$request" type="object">
          <type full="The" namespace="" name="The"/>
        </param>
        <uses value="SS_HTTPRequest"/>
        <uses value="SS_HTTPRequest-&gt;match()"/>
        <return type="object">
          <type full="SS_HTTPResponse|RequestHandler|string|array" namespace="" name="SS_HTTPResponse|RequestHandler|string|array"/>
        </return>
      </docblock>
      <parameter name="request" byreference="false" type="object">
        <type full="\\SS_HTTPRequest" namespace="\" name="SS_HTTPRequest"/>
      </parameter>
      <parameter name="model" byreference="false" type="object">
        <type full="\\DataModel" namespace="\" name="DataModel"/>
      </parameter>
      <inline>
        <comment value="$handlerClass is used to step up the class hierarchy to implement url_handlers inheritance" line="151"/>
        <comment value="If nothing matches, return this object" line="163"/>
        <comment value="Start to find what action to call. Start by using what findAction returned" line="166"/>
        <comment value="We used to put &quot;handleAction&quot; as the action on controllers, but (a) this could only be called when" line="169"/>
        <comment value="you had $Action in your rule, and (b) RequestHandler didn't have one. $Action is better" line="170"/>
        <todo value="Fix LeftAndMain usage" line="172"/>
        <comment value="Deprecation::notice('3.2.0', 'Calling handleAction directly is deprecated - use $Action instead');" line="173"/>
        <comment value="Actions can reference URL parameters, eg, '$Action/$ID/$OtherID' =&gt; '$Action'," line="177"/>
        <comment value="If we return a RequestHandler, call handleRequest() on that, even if there is no more URL to" line="214"/>
        <comment value="parse. It might have its own handler. However, we only do this if we haven't just parsed an" line="215"/>
        <comment value="empty rule ourselves, to prevent infinite loops. Also prevent further handling of controller" line="216"/>
        <comment value="actions which return themselves to avoid infinite loops." line="217"/>
        <comment value="Array results can be used to handle" line="224"/>
      </inline>
    </method>
    <method name="findAction" start="241" end="267" abstract="false" final="false" static="false" visibility="protected">
      <parameter name="request" byreference="false" type="{unknown}"/>
      <inline>
        <comment value="We stop after RequestHandler; in other words, at ViewableData" line="244"/>
      </inline>
    </method>
    <method name="handleAction" start="278" end="294" abstract="false" final="false" static="false" visibility="protected">
      <docblock>
        <description compact="Given a request, and an action name, call that action name on this RequestHandler">Must not raise SS_HTTPResponse_Exceptions - instead it should return</description>
        <param variable="$request"/>
        <param variable="$action"/>
        <return type="object">
          <type full="SS_HTTPResponse" namespace="" name="SS_HTTPResponse"/>
        </return>
      </docblock>
      <parameter name="request" byreference="false" type="{unknown}"/>
      <parameter name="action" byreference="false" type="{unknown}"/>
    </method>
    <method name="allowedActions" start="308" end="340" abstract="false" final="false" static="false" visibility="public">
      <docblock>
        <description compact="Get a array of allowed actions defined on this controller, any parent classes or extensions.">Caution: Since 3.1, allowed_actions definitions only apply
to methods on the controller they're defined on,
so it is recommended to use the $class argument
when invoking this method.</description>
        <param type="object" variable="$limitToClass">
          <type full="String" namespace="" name="String"/>
        </param>
        <return type="object">
          <type full="array|null" namespace="" name="array|null"/>
        </return>
      </docblock>
      <parameter name="limitToClass" byreference="false" type="{unknown}" default="null"/>
      <inline>
        <comment value="convert all keys and values to lowercase to" line="328"/>
        <comment value="allow for easier comparison, unless it is a permission code" line="329"/>
      </inline>
    </method>
    <method name="hasAction" start="350" end="383" abstract="false" final="false" static="false" visibility="public">
      <docblock>
        <description compact="Checks if this request handler has a specific action, even if the current user cannot access it.">Includes class ancestry and extensions in the checks.</description>
        <param type="string" variable="$action"/>
        <return type="object">
          <type full="bool" namespace="" name="bool"/>
        </return>
      </docblock>
      <parameter name="action" byreference="false" type="{unknown}"/>
      <inline>
        <comment value="Don't allow access to any non-public methods (inspect instance plus all extensions)" line="353"/>
        <comment value="Check if the action is defined in the allowed actions of any ancestry class" line="365"/>
        <comment value="as either a key or value. Note that if the action is numeric, then keys are not" line="366"/>
        <comment value="searched for actions to prevent actual array keys being recognised as actions." line="367"/>
      </inline>
    </method>
    <method name="definingClassForAction" start="388" end="399" abstract="false" final="false" static="false" visibility="protected">
      <docblock>
        <description compact="Return the class that defines the given action, so that we know where to check allowed_actions."/>
      </docblock>
      <parameter name="actionOrigCasing" byreference="false" type="{unknown}"/>
    </method>
    <method name="checkAccessAction" start="405" end="454" abstract="false" final="false" static="false" visibility="public">
      <docblock>
        <description compact="Check that the given action is allowed to be called from a URL.">It will interrogate <link xmlns="http://xml.phpdox.net/src" value="self::$allowed_actions"/> to determine this.
</description>
      </docblock>
      <parameter name="action" byreference="false" type="{unknown}"/>
      <inline>
        <comment value="Get actions for this specific class (without inheritance)" line="412"/>
        <comment value="check if specific action is set" line="416"/>
        <comment value="TRUE should always allow access" line="421"/>
        <comment value="If we don't have a match in allowed_actions," line="447"/>
        <comment value="whitelist the 'index' action as well as undefined actions based on configuration." line="448"/>
      </inline>
    </method>
    <method name="httpError" start="464" end="473" abstract="false" final="false" static="false" visibility="public">
      <docblock>
        <description compact="Throws a HTTP error response encased in a {@link SS_HTTPResponse_Exception}, which is later caught in {@link RequestHandler::handleAction()} and returned to the user."/>
        <param type="int" variable="$errorCode"/>
        <param description="Plaintext error message" type="string" variable="$errorMessage"/>
        <uses value="SS_HTTPResponse_Exception"/>
      </docblock>
      <parameter name="errorCode" byreference="false" type="{unknown}"/>
      <parameter name="errorMessage" byreference="false" type="{unknown}" default="null"/>
      <inline>
        <comment value="Call a handler method such as onBeforeHTTPError404" line="465"/>
        <comment value="Call a handler method such as onBeforeHTTPError, passing 404 as the first arg" line="468"/>
        <comment value="Throw a new exception" line="471"/>
      </inline>
    </method>
    <method name="getRequest" start="483" end="485" abstract="false" final="false" static="false" visibility="public">
      <docblock>
        <description compact="Returns the SS_HTTPRequest object that this controller is using.">Returns a placeholder <link xmlns="http://xml.phpdox.net/src" value="NullHTTPRequest"/> object unless
<link xmlns="http://xml.phpdox.net/src" value="handleAction()"/> or <link xmlns="http://xml.phpdox.net/src" value="handleRequest()"/> have been called,
which adds a reference to an actual <link xmlns="http://xml.phpdox.net/src" value="SS_HTTPRequest"/> object.
</description>
        <return type="object">
          <type full="SS_HTTPRequest|NullHTTPRequest" namespace="" name="SS_HTTPRequest|NullHTTPRequest"/>
        </return>
      </docblock>
    </method>
    <method name="setRequest" start="493" end="495" abstract="false" final="false" static="false" visibility="public">
      <docblock>
        <description compact="Typically the request is set through {@link handleAction()} or {@link handleRequest()}, but in some based we want to set it manually."/>
        <param type="object">
          <type full="SS_HTTPRequest" namespace="" name="SS_HTTPRequest"/>
        </param>
      </docblock>
      <parameter name="request" byreference="false" type="{unknown}"/>
    </method>
  </parent>
  <parent full="ViewableData" namespace="" name="ViewableData">
    <extends full="Object" namespace="" name="Object"/>
    <member name="failover" type="{unknown}" visibility="protected" line="51">
      <docblock>
        <description compact="A failover object to attempt to get data from if it is not present on this object."/>
        <var type="object">
          <type full="ViewableData" namespace="" name="ViewableData"/>
        </var>
      </docblock>
    </member>
    <member name="customisedObject" type="{unknown}" visibility="protected" line="56">
      <docblock>
        <description/>
        <var type="object">
          <type full="ViewableData" namespace="" name="ViewableData"/>
        </var>
      </docblock>
    </member>
    <method name="castingObjectCreator" start="72" end="74" abstract="false" final="false" static="true" visibility="public">
      <docblock>
        <description compact="Converts a field spec into an object creator. For example: &quot;Int&quot; becomes &quot;new Int($fieldName);&quot; and &quot;Varchar(50)&quot; becomes &quot;new Varchar($fieldName, 50);&quot;."/>
        <param description="The field spec" type="string" variable="$fieldSchema"/>
        <return type="string"/>
      </docblock>
      <parameter name="fieldSchema" byreference="false" type="{unknown}"/>
    </method>
    <method name="castingObjectCreatorPair" start="83" end="85" abstract="false" final="false" static="true" visibility="public">
      <docblock>
        <description compact="Convert a field schema (e.g. &quot;Varchar(50)&quot;) into a casting object creator array that contains both a className and castingHelper constructor code. See {@link castingObjectCreator} for more information about the constructor."/>
        <param type="string" variable="$fieldSchema"/>
        <return type="array"/>
      </docblock>
      <parameter name="fieldSchema" byreference="false" type="{unknown}"/>
    </method>
    <method name="__isset" start="95" end="97" abstract="false" final="false" static="false" visibility="public">
      <docblock>
        <description compact="Check if a field exists on this object or its failover."/>
        <param type="string" variable="$property"/>
        <return type="object">
          <type full="bool" namespace="" name="bool"/>
        </return>
      </docblock>
      <parameter name="property" byreference="false" type="{unknown}"/>
    </method>
    <method name="__get" start="106" end="114" abstract="false" final="false" static="false" visibility="public">
      <docblock>
        <description compact="Get the value of a property/field on this object. This will check if a method called get{$property} exists, then check if a field is available using {@link ViewableData::getField()}, then fall back on a failover object."/>
        <param type="string" variable="$property"/>
        <return type="mixed"/>
      </docblock>
      <parameter name="property" byreference="false" type="{unknown}"/>
    </method>
    <method name="__set" start="123" end="129" abstract="false" final="false" static="false" visibility="public">
      <docblock>
        <description compact="Set a property/field on this object. This will check for the existence of a method called set{$property}, then use the {@link ViewableData::setField()} method."/>
        <param type="string" variable="$property"/>
        <param type="mixed" variable="$value"/>
      </docblock>
      <parameter name="property" byreference="false" type="{unknown}"/>
      <parameter name="value" byreference="false" type="{unknown}"/>
    </method>
    <method name="hasField" start="137" end="139" abstract="false" final="false" static="false" visibility="public">
      <docblock>
        <description compact="Check if a field exists on this object. This should be overloaded in child classes."/>
        <param type="string" variable="$field"/>
        <return type="object">
          <type full="bool" namespace="" name="bool"/>
        </return>
      </docblock>
      <parameter name="field" byreference="false" type="{unknown}"/>
    </method>
    <method name="getField" start="147" end="149" abstract="false" final="false" static="false" visibility="public">
      <docblock>
        <description compact="Get the value of a field on this object. This should be overloaded in child classes."/>
        <param type="string" variable="$field"/>
        <return type="mixed"/>
      </docblock>
      <parameter name="field" byreference="false" type="{unknown}"/>
    </method>
    <method name="setField" start="157" end="159" abstract="false" final="false" static="false" visibility="public">
      <docblock>
        <description compact="Set a field on this object. This should be overloaded in child classes."/>
        <param type="string" variable="$field"/>
        <param type="mixed" variable="$value"/>
      </docblock>
      <parameter name="field" byreference="false" type="{unknown}"/>
      <parameter name="value" byreference="false" type="{unknown}"/>
    </method>
    <method name="defineMethods" start="167" end="186" abstract="false" final="false" static="false" visibility="public">
      <docblock>
        <description compact="Add methods from the {@link ViewableData::$failover} object, as well as wrapping any methods prefixed with an underscore into a {@link ViewableData::cachedCall()}."/>
      </docblock>
    </method>
    <method name="customise" start="197" end="209" abstract="false" final="false" static="false" visibility="public">
      <docblock>
        <description compact="Merge some arbitrary data in with this object. This method returns a {@link ViewableData_Customised} instance with references to both this and the new custom data.">Note that any fields you specify will take precedence over the fields on this object.</description>
        <param type="object" variable="$data">
          <type full="array|ViewableData" namespace="" name="array|ViewableData"/>
        </param>
        <return type="object">
          <type full="ViewableData_Customised" namespace="" name="ViewableData_Customised"/>
        </return>
      </docblock>
      <parameter name="data" byreference="false" type="{unknown}"/>
    </method>
    <method name="setCustomisedObj" start="214" end="216" abstract="false" final="false" static="false" visibility="public">
      <docblock>
        <description/>
        <param type="object" variable="$object">
          <type full="ViewableData" namespace="" name="ViewableData"/>
        </param>
      </docblock>
      <parameter name="object" byreference="false" type="object">
        <type full="\\ViewableData" namespace="\" name="ViewableData"/>
      </parameter>
    </method>
    <method name="castingHelperPair" start="231" end="234" abstract="false" final="false" static="false" visibility="public">
      <docblock>
        <description compact="Get the class a field on this object would be casted to, as well as the casting helper for casting a field to an object (see {@link ViewableData::castingHelper()} for information on casting helpers).">The returned array contains two keys:
 - className: the class the field would be casted to (e.g. "Varchar")
 - castingHelper: the casting helper for casting the field (e.g. "return new Varchar($fieldName)")</description>
        <param type="string" variable="$field"/>
        <return type="array"/>
      </docblock>
      <parameter name="field" byreference="false" type="{unknown}"/>
    </method>
    <method name="castingHelper" start="243" end="252" abstract="false" final="false" static="false" visibility="public">
      <docblock>
        <description compact="Return the &quot;casting helper&quot; (a piece of PHP code that when evaluated creates a casted value object) for a field on this object."/>
        <param type="string" variable="$field"/>
        <return type="string"/>
      </docblock>
      <parameter name="field" byreference="false" type="{unknown}"/>
    </method>
    <method name="castingClass" start="260" end="267" abstract="false" final="false" static="false" visibility="public">
      <docblock>
        <description compact="Get the class name a field on this object will be casted to"/>
        <param type="string" variable="$field"/>
        <return type="string"/>
      </docblock>
      <parameter name="field" byreference="false" type="{unknown}"/>
    </method>
    <method name="escapeTypeForField" start="275" end="279" abstract="false" final="false" static="false" visibility="public">
      <docblock>
        <description compact="Return the string-format type for the given field."/>
        <param type="string" variable="$field"/>
        <return description="'xml'|'raw'" type="string"/>
      </docblock>
      <parameter name="field" byreference="false" type="{unknown}"/>
    </method>
    <method name="buildCastingCache" start="286" end="308" abstract="false" final="false" static="false" visibility="public">
      <docblock>
        <description compact="Save the casting cache for this object (including data from any failovers) into a variable"/>
        <param type="object" variable="$cache">
          <type full="reference" namespace="" name="reference"/>
        </param>
      </docblock>
      <parameter name="cache" byreference="true" type="{unknown}"/>
    </method>
    <method name="renderWith" start="323" end="340" abstract="false" final="false" static="false" visibility="public">
      <docblock>
        <description compact="Render this object into the template, and get the result as a string. You can pass one of the following as the $template parameter:  - a template name (e.g. Page)  - an array of possible template names - the first valid one will be used  - an SSViewer instance"/>
        <param description="the template to render into" type="object" variable="$template">
          <type full="string|array|SSViewer" namespace="" name="string|array|SSViewer"/>
        </param>
        <param description="fields to customise() the object with before rendering" type="array" variable="$customFields"/>
        <return type="object">
          <type full="HTMLText" namespace="" name="HTMLText"/>
        </return>
      </docblock>
      <parameter name="template" byreference="false" type="{unknown}"/>
      <parameter name="customFields" byreference="false" type="{unknown}" default="null"/>
    </method>
    <method name="obj" start="352" end="390" abstract="false" final="false" static="false" visibility="public">
      <docblock>
        <description compact="Get the value of a field on this object, automatically inserting the value into any available casting objects that have been specified."/>
        <param type="string" variable="$fieldName"/>
        <param type="array" variable="$arguments"/>
        <param description="if TRUE, the value will ALWAYS be casted to an object before being returned," type="object" variable="$forceReturnedObject">even if there is no explicit casting information<type full="bool" namespace="" name="bool"/></param>
        <param description="a custom cache name" type="string" variable="$cacheName"/>
      </docblock>
      <parameter name="fieldName" byreference="false" type="{unknown}"/>
      <parameter name="arguments" byreference="false" type="{unknown}" default="null"/>
      <parameter name="forceReturnedObject" byreference="false" type="{unknown}" default="true"/>
      <parameter name="cache" byreference="false" type="{unknown}" default="false"/>
      <parameter name="cacheName" byreference="false" type="{unknown}" default="null"/>
      <inline>
        <comment value="HACK: Don't call the deprecated FormField::Name() method" line="356"/>
      </inline>
    </method>
    <method name="cachedCall" start="400" end="402" abstract="false" final="false" static="false" visibility="public">
      <docblock>
        <description compact="A simple wrapper around {@link ViewableData::obj()} that automatically caches the result so it can be used again without re-running the method."/>
        <param type="string" variable="$field"/>
        <param type="array" variable="$arguments"/>
        <param description="an optional custom cache identifier" type="string" variable="$identifier"/>
      </docblock>
      <parameter name="field" byreference="false" type="{unknown}"/>
      <parameter name="arguments" byreference="false" type="{unknown}" default="null"/>
      <parameter name="identifier" byreference="false" type="{unknown}" default="null"/>
    </method>
    <method name="hasValue" start="413" end="422" abstract="false" final="false" static="false" visibility="public">
      <docblock>
        <description compact="Checks if a given method/field has a valid value. If the result is an object, this will return the result of the exists method, otherwise will check if the result is not just an empty paragraph tag."/>
        <param type="string" variable="$field"/>
        <param type="array" variable="$arguments"/>
        <param type="object" variable="$cache">
          <type full="bool" namespace="" name="bool"/>
        </param>
        <return type="object">
          <type full="bool" namespace="" name="bool"/>
        </return>
      </docblock>
      <parameter name="field" byreference="false" type="{unknown}"/>
      <parameter name="arguments" byreference="false" type="{unknown}" default="null"/>
      <parameter name="cache" byreference="false" type="{unknown}" default="true"/>
    </method>
    <method name="XML_val" start="435" end="438" abstract="false" final="false" static="false" visibility="public">
      <docblock>
        <description compact="Get the string value of a field on this object that has been suitable escaped to be inserted directly into a template."/>
      </docblock>
      <parameter name="field" byreference="false" type="{unknown}"/>
      <parameter name="arguments" byreference="false" type="{unknown}" default="null"/>
      <parameter name="cache" byreference="false" type="{unknown}" default="false"/>
    </method>
    <method name="RAW_val" start="443" end="445" abstract="false" final="false" static="false" visibility="public">
      <docblock>
        <description compact="Return the value of the field without any escaping being applied."/>
      </docblock>
      <parameter name="field" byreference="false" type="{unknown}"/>
      <parameter name="arguments" byreference="false" type="{unknown}" default="null"/>
      <parameter name="cache" byreference="false" type="{unknown}" default="true"/>
    </method>
    <method name="SQL_val" start="450" end="452" abstract="false" final="false" static="false" visibility="public">
      <docblock>
        <description compact="Return the value of a field in an SQL-safe format."/>
      </docblock>
      <parameter name="field" byreference="false" type="{unknown}"/>
      <parameter name="arguments" byreference="false" type="{unknown}" default="null"/>
      <parameter name="cache" byreference="false" type="{unknown}" default="true"/>
    </method>
    <method name="JS_val" start="457" end="459" abstract="false" final="false" static="false" visibility="public">
      <docblock>
        <description compact="Return the value of a field in a JavaScript-save format."/>
      </docblock>
      <parameter name="field" byreference="false" type="{unknown}"/>
      <parameter name="arguments" byreference="false" type="{unknown}" default="null"/>
      <parameter name="cache" byreference="false" type="{unknown}" default="true"/>
    </method>
    <method name="ATT_val" start="464" end="466" abstract="false" final="false" static="false" visibility="public">
      <docblock>
        <description compact="Return the value of a field escaped suitable to be inserted into an XML node attribute."/>
      </docblock>
      <parameter name="field" byreference="false" type="{unknown}"/>
      <parameter name="arguments" byreference="false" type="{unknown}" default="null"/>
      <parameter name="cache" byreference="false" type="{unknown}" default="true"/>
    </method>
    <method name="getXMLValues" start="476" end="484" abstract="false" final="false" static="false" visibility="public">
      <docblock>
        <description compact="Get an array of XML-escaped values by field name"/>
        <param description="an array of field names" type="array" variable="$elements"/>
        <return type="array"/>
      </docblock>
      <parameter name="fields" byreference="false" type="{unknown}"/>
    </method>
    <method name="getIterator" start="496" end="498" abstract="false" final="false" static="false" visibility="public">
      <docblock>
        <description compact="Return a single-item iterator so you can iterate over the fields of a single record.">This is useful so you can use a single record inside a &lt;% control %&gt; block in a template - and then use
to access individual fields on this object.</description>
        <return type="object">
          <type full="ArrayIterator" namespace="" name="ArrayIterator"/>
        </return>
      </docblock>
    </method>
    <method name="Me" start="508" end="510" abstract="false" final="false" static="false" visibility="public">
      <docblock>
        <description compact="When rendering some objects it is necessary to iterate over the object being rendered, to do this, you need access to itself."/>
        <return type="object">
          <type full="ViewableData" namespace="" name="ViewableData"/>
        </return>
      </docblock>
    </method>
    <method name="ThemeDir" start="524" end="533" abstract="false" final="false" static="false" visibility="public">
      <docblock>
        <description compact="Return the directory if the current active theme (relative to the site root).">This method is useful for things such as accessing theme images from your template without hardcoding the theme
page - e.g. &lt;img src="$ThemeDir/images/something.gif"&gt;.

This method should only be used when a theme is currently active. However, it will fall over to the current
project directory.</description>
        <param description="the subtheme path to get" type="string" variable="$subtheme"/>
        <return type="string"/>
      </docblock>
      <parameter name="subtheme" byreference="false" type="{unknown}" default="false"/>
    </method>
    <method name="CSSClasses" start="545" end="561" abstract="false" final="false" static="false" visibility="public">
      <docblock>
        <description compact="Get part of the current classes ancestry to be used as a CSS class.">This method returns an escaped string of CSS classes representing the current classes ancestry until it hits a
stop point - e.g. "Page DataObject ViewableData".</description>
        <param description="the class to stop at (default: ViewableData)" type="string" variable="$stopAtClass"/>
        <return type="string"/>
        <uses value="ClassInfo"/>
      </docblock>
      <parameter name="stopAtClass" byreference="false" type="string" default="'ViewableData'"/>
      <inline>
        <comment value="optionally add template identifier" line="555"/>
      </inline>
    </method>
    <method name="Debug" start="568" end="570" abstract="false" final="false" static="false" visibility="public">
      <docblock>
        <description compact="Return debug information about this object that can be rendered into a template"/>
        <return type="object">
          <type full="ViewableData_Debugger" namespace="" name="ViewableData_Debugger"/>
        </return>
      </docblock>
    </method>
  </parent>
  <parent full="Object" namespace="" name="Object">
    <member name="class" type="{unknown}" visibility="public" line="54">
      <docblock>
        <description/>
        <var description="the class name" type="string"/>
      </docblock>
    </member>
    <member name="extension_instances" type="array" visibility="protected" line="67">
      <docblock>
        <description/>
        <var description="all current extension instances." type="array"/>
      </docblock>
    </member>
    <member name="beforeExtendCallbacks" type="array" visibility="protected" line="75">
      <docblock>
        <description compact="List of callbacks to call prior to extensions having extend called on them, each grouped by methodName."/>
        <var type="object">
          <type full="array[callable]" namespace="" name="array[callable]"/>
        </var>
      </docblock>
    </member>
    <member name="afterExtendCallbacks" type="array" visibility="protected" line="98">
      <docblock>
        <description compact="List of callbacks to call after extensions having extend called on them, each grouped by methodName."/>
        <var type="object">
          <type full="array[callable]" namespace="" name="array[callable]"/>
        </var>
      </docblock>
    </member>
    <method name="config" start="60" end="62" abstract="false" final="false" static="true" visibility="public">
      <docblock>
        <description compact="Get a configuration accessor for this class. Short hand for Config::inst()-&gt;get($this-&gt;class, .....)."/>
        <return type="object">
          <type full="Config_ForClass|null" namespace="" name="Config_ForClass|null"/>
        </return>
      </docblock>
    </method>
    <method name="beforeExtending" start="85" end="90" abstract="false" final="false" static="false" visibility="protected">
      <docblock>
        <description compact="Allows user code to hook into Object::extend prior to control being delegated to extensions. Each callback will be reset once called."/>
        <param description="The name of the method to hook into" type="string" variable="$method"/>
        <param description="The callback to execute" type="object" variable="$callback">
          <type full="callable" namespace="" name="callable"/>
        </param>
      </docblock>
      <parameter name="method" byreference="false" type="{unknown}"/>
      <parameter name="callback" byreference="false" type="{unknown}"/>
    </method>
    <method name="afterExtending" start="108" end="113" abstract="false" final="false" static="false" visibility="protected">
      <docblock>
        <description compact="Allows user code to hook into Object::extend after control being delegated to extensions. Each callback will be reset once called."/>
        <param description="The name of the method to hook into" type="string" variable="$method"/>
        <param description="The callback to execute" type="object" variable="$callback">
          <type full="callable" namespace="" name="callable"/>
        </param>
      </docblock>
      <parameter name="method" byreference="false" type="{unknown}"/>
      <parameter name="callback" byreference="false" type="{unknown}"/>
    </method>
    <method name="create" start="132" end="143" abstract="false" final="false" static="true" visibility="public">
      <docblock>
        <description compact="An implementation of the factory method, allows you to create an instance of a class">This method first for strong class overloads (singletons &amp; DB interaction), then custom class overloads. If an
overload is found, an instance of this is returned rather than the original class. To overload a class, use
{@link Object::useCustomClass()}

This can be called in one of two ways - either calling via the class directly,
or calling on Object and passing the class name as the first parameter. The following
are equivalent:
   $list = DataList::create('SiteTree');
  $list = SiteTree::get();</description>
        <param description="the class name" type="string" variable="$class"/>
        <param description="... arguments to pass to the constructor" type="mixed" variable="$arguments"/>
        <return type="object">
          <type full="static" namespace="" name="static"/>
        </return>
      </docblock>
      <inline>
        <comment value="Class to create should be the calling class if not Object," line="135"/>
        <comment value="otherwise the first parameter" line="136"/>
      </inline>
    </method>
    <method name="create_from_string" start="169" end="188" abstract="false" final="false" static="true" visibility="public">
      <docblock>
        <description compact="Create an object from a string representation.  It treats it as a PHP constructor without the 'new' keyword.  It also manages to construct the object without the use of eval().">Construction itself is done with Object::create(), so that Object::useCustomClass() calls
are respected.

`Object::create_from_string("Versioned('Stage','Live')")` will return the result of
`Versioned::create('Stage', 'Live);`

It is designed for simple, clonable objects.  The first time this method is called for a given
string it is cached, and clones of that object are returned.

If you pass the $firstArg argument, this will be prepended to the constructor arguments. It's
impossible to pass null as the firstArg argument.

`Object::create_from_string("Varchar(50)", "MyField")` will return the result of
`Vachar::create('MyField', '50');`

Arguments are always strings, although this is a quirk of the current implementation rather
than something that can be relied upon.</description>
      </docblock>
      <parameter name="classSpec" byreference="false" type="{unknown}"/>
      <parameter name="firstArg" byreference="false" type="{unknown}" default="null"/>
      <inline>
        <comment value="an $extension value can contain parameters as a string," line="171"/>
        <comment value="e.g. &quot;Versioned('Stage','Live')&quot;" line="172"/>
      </inline>
    </method>
    <method name="parse_class_spec" start="194" end="274" abstract="false" final="false" static="true" visibility="public">
      <docblock>
        <description compact="Parses a class-spec, such as &quot;Versioned('Stage','Live')&quot;, as passed to create_from_string().">Returns a 2-elemnent array, with classname and arguments</description>
      </docblock>
      <parameter name="classSpec" byreference="false" type="{unknown}"/>
      <inline>
        <comment value="Keep track of the current bucket that we're putting data into" line="200"/>
        <comment value="Get the class naem" line="207"/>
      </inline>
    </method>
    <method name="strong_create" start="284" end="293" abstract="false" final="false" static="true" visibility="public">
      <docblock>
        <description compact="Similar to {@link Object::create()}, except that classes are only overloaded if you set the $strong parameter to TRUE when using {@link Object::useCustomClass()}"/>
        <param description="the class name" type="string" variable="$class"/>
        <param description="... arguments to pass to the constructor" type="mixed" variable="$arguments"/>
        <return type="object">
          <type full="static" namespace="" name="static"/>
        </return>
      </docblock>
    </method>
    <method name="useCustomClass" start="304" end="310" abstract="false" final="false" static="true" visibility="public">
      <docblock>
        <description compact="This class allows you to overload classes with other classes when they are constructed using the factory method {@link Object::create()}"/>
        <param description="the class to replace" type="string" variable="$oldClass"/>
        <param description="the class to replace it with" type="string" variable="$newClass"/>
        <param description="allows you to enforce a certain class replacement under all circumstances. This is used in" type="object" variable="$strong">singletons and DB interaction classes<type full="bool" namespace="" name="bool"/></param>
      </docblock>
      <parameter name="oldClass" byreference="false" type="{unknown}"/>
      <parameter name="newClass" byreference="false" type="{unknown}"/>
      <parameter name="strong" byreference="false" type="{unknown}" default="false"/>
    </method>
    <method name="getCustomClass" start="318" end="326" abstract="false" final="false" static="true" visibility="public">
      <docblock>
        <description compact="If a class has been overloaded, get the class name it has been overloaded with - otherwise return the class name"/>
        <param description="the class to check" type="string" variable="$class"/>
        <return description="the class that would be created if you called {@link Object::create()} with the class" type="string"/>
      </docblock>
      <parameter name="class" byreference="false" type="{unknown}"/>
    </method>
    <method name="static_lookup" start="339" end="374" abstract="false" final="false" static="true" visibility="public">
      <docblock>
        <description compact="Get the value of a static property of a class, even in that property is declared protected (but not private), without any inheritance, merging or parent lookup if it doesn't exist on the given class."/>
        <static/>
        <param description="The class to get the static from" variable="$class" type="object">
          <type full="-" namespace="" name="-"/>
        </param>
        <param description="The property to get from the class" variable="$name" type="object">
          <type full="-" namespace="" name="-"/>
        </param>
        <param description="- The value to return if property doesn't exist on class" type="object" variable="$default">
          <type full="null" namespace="" name="null"/>
        </param>
        <return description="- The value of the static property $name on class $class, or $default if that property is not" type="object">defined<type full="any" namespace="" name="any"/></return>
      </docblock>
      <parameter name="class" byreference="false" type="{unknown}"/>
      <parameter name="name" byreference="false" type="{unknown}"/>
      <parameter name="default" byreference="false" type="{unknown}" default="null"/>
    </method>
    <method name="get_static" start="391" end="394" abstract="false" final="false" static="true" visibility="public">
      <docblock>
        <description compact="Get a static variable, taking into account SS's inbuild static caches and pseudo-statics">This method first checks for any extra values added by <link xmlns="http://xml.phpdox.net/src" value="Object::add_static_var()"/>, and attemps to traverse
up the extra static var chain until it reaches the top, or it reaches a replacement static.
If any extra values are discovered, they are then merged with the default PHP static values, or in some cases
completely replace the default PHP static when you set $replace = true, and do not define extra data on any
child classes
</description>
        <param type="string" variable="$class"/>
        <param description="the property name" type="string" variable="$name"/>
        <param description="if set to TRUE, force a regeneration of the static cache" type="object" variable="$uncached">
          <type full="bool" namespace="" name="bool"/>
        </param>
        <return type="mixed"/>
      </docblock>
      <parameter name="class" byreference="false" type="{unknown}"/>
      <parameter name="name" byreference="false" type="{unknown}"/>
      <parameter name="uncached" byreference="false" type="{unknown}" default="false"/>
    </method>
    <method name="set_static" start="403" end="406" abstract="false" final="false" static="true" visibility="public">
      <docblock>
        <description compact="Set a static variable"/>
        <param type="string" variable="$class"/>
        <param description="the property name to set" type="string" variable="$name"/>
        <param type="mixed" variable="$value"/>
      </docblock>
      <parameter name="class" byreference="false" type="{unknown}"/>
      <parameter name="name" byreference="false" type="{unknown}"/>
      <parameter name="value" byreference="false" type="{unknown}"/>
    </method>
    <method name="uninherited_static" start="415" end="418" abstract="false" final="false" static="true" visibility="public">
      <docblock>
        <description compact="Get an uninherited static variable - a variable that is explicity set in this class, and not in the parent class."/>
        <param type="string" variable="$class"/>
        <param type="string" variable="$name"/>
        <return type="mixed"/>
      </docblock>
      <parameter name="class" byreference="false" type="{unknown}"/>
      <parameter name="name" byreference="false" type="{unknown}"/>
      <parameter name="uncached" byreference="false" type="{unknown}" default="false"/>
    </method>
    <method name="combined_static" start="430" end="435" abstract="false" final="false" static="true" visibility="public">
      <docblock>
        <description compact="Traverse down a class ancestry and attempt to merge all the uninherited static values for a particular static into a single variable"/>
        <param type="string" variable="$class"/>
        <param description="the static name" type="string" variable="$name"/>
        <param description="an optional parent class name to begin merging statics down from, rather than traversing" type="string" variable="$ceiling">the entire hierarchy</param>
        <return type="mixed"/>
      </docblock>
      <parameter name="class" byreference="false" type="{unknown}"/>
      <parameter name="name" byreference="false" type="{unknown}"/>
      <parameter name="ceiling" byreference="false" type="{unknown}" default="false"/>
    </method>
    <method name="addStaticVars" start="444" end="447" abstract="false" final="false" static="true" visibility="public">
      <docblock>
        <description compact="Merge in a set of additional static variables"/>
        <param type="string" variable="$class"/>
        <param description="in a [property name] =&gt; [value] format" type="array" variable="$properties"/>
        <param description="replace existing static vars" type="object" variable="$replace">
          <type full="bool" namespace="" name="bool"/>
        </param>
      </docblock>
      <parameter name="class" byreference="false" type="{unknown}"/>
      <parameter name="properties" byreference="false" type="{unknown}"/>
      <parameter name="replace" byreference="false" type="{unknown}" default="false"/>
    </method>
    <method name="add_static_var" start="465" end="470" abstract="false" final="false" static="true" visibility="public">
      <docblock>
        <description compact="Add a static variable without replacing it completely if possible, but merging in with both existing PHP statics and existing psuedo-statics. Uses PHP's array_merge_recursive() with if the $replace argument is FALSE.">Documentation from http://php.net/array_merge_recursive:
If the input arrays have the same string keys, then the values for these keys are merged together
into an array, and this is done recursively, so that if one of the values is an array itself,
the function will merge it with a corresponding entry in another array too.
If, however, the arrays have the same numeric key, the later value will not overwrite the original value,
but will be appended.</description>
        <param type="string" variable="$class"/>
        <param description="the static name" type="string" variable="$name"/>
        <param type="mixed" variable="$value"/>
        <param description="completely replace existing static values" type="object" variable="$replace">
          <type full="bool" namespace="" name="bool"/>
        </param>
      </docblock>
      <parameter name="class" byreference="false" type="{unknown}"/>
      <parameter name="name" byreference="false" type="{unknown}"/>
      <parameter name="value" byreference="false" type="{unknown}"/>
      <parameter name="replace" byreference="false" type="{unknown}" default="false"/>
    </method>
    <method name="has_extension" start="481" end="503" abstract="false" final="false" static="true" visibility="public">
      <docblock>
        <description compact="Return TRUE if a class has a specified extension.">This supports backwards-compatible format (static Object::has_extension($requiredExtension))
and new format ($object-&gt;has_extension($class, $requiredExtension))</description>
        <param description="if 1 argument supplied, the class name of the extension to" type="string" variable="$classOrExtension">check for; if 2 supplied, the class name to test</param>
        <param description="used only if 2 arguments supplied" type="string" variable="$requiredExtension"/>
        <param description="if the extension has to match the required extension and not be a subclass" type="boolean" variable="$strict"/>
      </docblock>
      <parameter name="classOrExtension" byreference="false" type="{unknown}"/>
      <parameter name="requiredExtension" byreference="false" type="{unknown}" default="null"/>
      <parameter name="strict" byreference="false" type="{unknown}" default="false"/>
      <inline>
        <comment value="BC support" line="482"/>
      </inline>
    </method>
    <method name="add_extension" start="523" end="565" abstract="false" final="false" static="true" visibility="public">
      <docblock>
        <description compact="Add an extension to a specific class.">The preferred method for adding extensions is through YAML config,
since it avoids autoloading the class, and is easier to override in
more specific configurations.
As an alternative, extensions can be added to a specific class
directly in the <link xmlns="http://xml.phpdox.net/src" value="Object::$extensions"/> array.
See <link xmlns="http://xml.phpdox.net/src" value="SiteTree::$extensions"/> for examples.
Keep in mind that the extension will only be applied to new
instances, not existing ones (including all instances created through <link xmlns="http://xml.phpdox.net/src" value="singleton()"/>).
</description>
        <see value="http://doc.silverstripe.org/framework/en/trunk/reference/dataextension"/>
        <param description="Class that should be extended - has to be a subclass of {@link Object}" type="string" variable="$class"/>
        <param description="Subclass of {@link Extension} with optional parameters" type="string" variable="$extension">as a string, e.g. "Versioned" or "Translatable('Param')"</param>
      </docblock>
      <parameter name="classOrExtension" byreference="false" type="{unknown}"/>
      <parameter name="extension" byreference="false" type="{unknown}" default="null"/>
      <inline>
        <comment value="unset some caches" line="545"/>
        <comment value="load statics now for DataObject classes" line="559"/>
      </inline>
    </method>
    <method name="remove_extension" start="584" end="614" abstract="false" final="false" static="true" visibility="public">
      <docblock>
        <description compact="Remove an extension from a class.">Keep in mind that this won't revert any datamodel additions
of the extension at runtime, unless its used before the
schema building kicks in (in your _config.php).
Doesn't remove the extension from any <link xmlns="http://xml.phpdox.net/src" value="Object"/>instances which are already created, but will have an
effect on new extensions.
Clears any previously created singletons through <link xmlns="http://xml.phpdox.net/src" value="singleton()"/>to avoid side-effects from stale extension information.
</description>
        <todo value="Add support for removing extensions with parameters"/>
        <param description="Classname of an {@link Extension} subclass, without parameters" type="string" variable="$extension"/>
      </docblock>
      <parameter name="extension" byreference="false" type="{unknown}"/>
      <inline>
        <comment value="remove any instances of the extension with parameters" line="589"/>
        <comment value="extensions with parameters will be stored in config as" line="594"/>
        <comment value="ExtensionName(&quot;Param&quot;)." line="595"/>
        <comment value="unset singletons to avoid side-effects" line="604"/>
        <comment value="unset some caches" line="607"/>
      </inline>
    </method>
    <method name="get_extensions" start="623" end="635" abstract="false" final="false" static="true" visibility="public">
      <docblock>
        <description/>
        <param type="string" variable="$class"/>
        <param description="Include the argument string in the return array," type="object" variable="$includeArgumentString">FALSE would return array("Versioned"), TRUE returns array("Versioned('Stage','Live')").<type full="bool" namespace="" name="bool"/></param>
        <return description="Numeric array of either {@link DataExtension} classnames," type="array">or eval'ed classname strings with constructor arguments.</return>
      </docblock>
      <parameter name="class" byreference="false" type="{unknown}"/>
      <parameter name="includeArgumentString" byreference="false" type="{unknown}" default="false"/>
    </method>
    <method name="get_extra_config_sources" start="641" end="678" abstract="false" final="false" static="true" visibility="public">
      <parameter name="class" byreference="false" type="{unknown}" default="null"/>
      <inline>
        <comment value="If this class is unextendable, NOP" line="644"/>
        <comment value="Get a list of extensions" line="650"/>
        <comment value="Build a list of all sources;" line="654"/>
      </inline>
    </method>
    <constructor name="__construct" start="680" end="699" abstract="false" final="false" static="false" visibility="public"/>
    <method name="__call" start="711" end="765" abstract="false" final="false" static="false" visibility="public">
      <docblock>
        <description compact="Attemps to locate and call a method dynamically added to a class at runtime if a default cannot be located">You can add extra methods to a class using <link xmlns="http://xml.phpdox.net/src" value="Extensions"/>, <link xmlns="http://xml.phpdox.net/src" value="Object::createMethod()"/> or
<link xmlns="http://xml.phpdox.net/src" value="Object::addWrapperMethod()"/></description>
        <param type="string" variable="$method"/>
        <param type="array" variable="$arguments"/>
        <return type="mixed"/>
      </docblock>
      <parameter name="method" byreference="false" type="{unknown}"/>
      <parameter name="arguments" byreference="false" type="{unknown}"/>
      <inline>
        <comment value="If the method cache was cleared by an an Object::add_extension() / Object::remove_extension()" line="712"/>
        <comment value="call, then we should rebuild it." line="713"/>
      </inline>
    </method>
    <method name="hasMethod" start="778" end="780" abstract="false" final="false" static="false" visibility="public">
      <docblock>
        <description compact="Return TRUE if a method exists on this object">This should be used rather than PHP's inbuild method_exists() as it takes into account methods added via
extensions</description>
        <param type="string" variable="$method"/>
        <return type="object">
          <type full="bool" namespace="" name="bool"/>
        </return>
      </docblock>
      <parameter name="method" byreference="false" type="{unknown}"/>
    </method>
    <method name="allMethodNames" start="788" end="798" abstract="false" final="false" static="false" visibility="public">
      <docblock>
        <description compact="Return the names of all the methods available on this object"/>
        <param description="include methods added dynamically at runtime" type="object" variable="$custom">
          <type full="bool" namespace="" name="bool"/>
        </param>
        <return type="array"/>
      </docblock>
      <parameter name="custom" byreference="false" type="{unknown}" default="false"/>
    </method>
    <method name="defineMethods" start="807" end="821" abstract="false" final="false" static="false" visibility="protected">
      <docblock>
        <description compact="Adds any methods from {@link Extension} instances attached to this object.">All these methods can then be called directly on the instance (transparently
mapped through <link xmlns="http://xml.phpdox.net/src" value="__call()"/>), or called explicitly through <link xmlns="http://xml.phpdox.net/src" value="extend()"/>.
</description>
        <uses value="addMethodsFrom()"/>
      </docblock>
    </method>
    <method name="addMethodsFrom" start="829" end="864" abstract="false" final="false" static="false" visibility="protected">
      <docblock>
        <description compact="Add all the methods from an object property (which is an {@link Extension}) to this object."/>
        <param description="the property name" type="string" variable="$property"/>
        <param description="an index to use if the property is an array" type="object" variable="$index">
          <type full="string|int" namespace="" name="string|int"/>
        </param>
      </docblock>
      <parameter name="property" byreference="false" type="{unknown}"/>
      <parameter name="index" byreference="false" type="{unknown}" default="null"/>
    </method>
    <method name="addWrapperMethod" start="873" end="878" abstract="false" final="false" static="false" visibility="protected">
      <docblock>
        <description compact="Add a wrapper method - a method which points to another method with a different name. For example, Thumbnail(x) can be wrapped to generateThumbnail(x)"/>
        <param description="the method name to wrap" type="string" variable="$method"/>
        <param description="the method name to wrap to" type="string" variable="$wrap"/>
      </docblock>
      <parameter name="method" byreference="false" type="{unknown}"/>
      <parameter name="wrap" byreference="false" type="{unknown}"/>
    </method>
    <method name="createMethod" start="888" end="892" abstract="false" final="false" static="false" visibility="protected">
      <docblock>
        <description compact="Add an extra method using raw PHP code passed as a string"/>
        <param description="the method name" type="string" variable="$method"/>
        <param description="the PHP code - arguments will be in an array called $args, while you can access this object" type="string" variable="$code">by using $obj. Note that you cannot call protected methods, as the method is actually an external
       function</param>
      </docblock>
      <parameter name="method" byreference="false" type="{unknown}"/>
      <parameter name="code" byreference="false" type="{unknown}"/>
    </method>
    <method name="stat" start="899" end="901" abstract="false" final="false" static="false" visibility="public">
      <docblock>
        <description/>
        <see value="Object::get_static()"/>
      </docblock>
      <parameter name="name" byreference="false" type="{unknown}"/>
      <parameter name="uncached" byreference="false" type="{unknown}" default="false"/>
    </method>
    <method name="set_stat" start="906" end="908" abstract="false" final="false" static="false" visibility="public">
      <docblock>
        <description/>
        <see value="Object::set_static()"/>
      </docblock>
      <parameter name="name" byreference="false" type="{unknown}"/>
      <parameter name="value" byreference="false" type="{unknown}"/>
    </method>
    <method name="uninherited" start="913" end="915" abstract="false" final="false" static="false" visibility="public">
      <docblock>
        <description/>
        <see value="Object::uninherited_static()"/>
      </docblock>
      <parameter name="name" byreference="false" type="{unknown}"/>
    </method>
    <method name="exists" start="927" end="929" abstract="false" final="false" static="false" visibility="public">
      <docblock>
        <description compact="Return true if this object &quot;exists&quot; i.e. has a sensible value">This method should be overriden in subclasses to provide more context about the classes state. For example, a
{@link DataObject} class could return false when it is deleted from the database</description>
        <return type="object">
          <type full="bool" namespace="" name="bool"/>
        </return>
      </docblock>
    </method>
    <method name="parentClass" start="934" end="936" abstract="false" final="false" static="false" visibility="public">
      <docblock>
        <description/>
        <return description="this classes parent class" type="string"/>
      </docblock>
    </method>
    <method name="is_a" start="944" end="946" abstract="false" final="false" static="false" visibility="public">
      <docblock>
        <description compact="Check if this class is an instance of a specific class, or has that class as one of its parents"/>
        <param type="string" variable="$class"/>
        <return type="object">
          <type full="bool" namespace="" name="bool"/>
        </return>
      </docblock>
      <parameter name="class" byreference="false" type="{unknown}"/>
    </method>
    <method name="__toString" start="951" end="953" abstract="false" final="false" static="false" visibility="public">
      <docblock>
        <description/>
        <return description="the class name" type="string"/>
      </docblock>
    </method>
    <method name="invokeWithExtensions" start="966" end="971" abstract="false" final="false" static="false" visibility="public">
      <docblock>
        <description compact="Calls a method if available on both this object and all applied {@link Extensions}, and then attempts to merge all results into an array"/>
        <param description="the method name to call" type="string" variable="$method"/>
        <param description="a single argument to pass" type="mixed" variable="$argument"/>
        <return type="mixed"/>
        <todo value="integrate inheritance rules"/>
      </docblock>
      <parameter name="method" byreference="false" type="{unknown}"/>
      <parameter name="argument" byreference="false" type="{unknown}" default="null"/>
    </method>
    <method name="extend" start="988" end="1017" abstract="false" final="false" static="false" visibility="public">
      <docblock>
        <description compact="Run the given function on all of this object's extensions. Note that this method originally returned void, so if you wanted to return results, you're hosed">Currently returns an array, with an index resulting every time the function is called. Only adds returns if
they're not NULL, to avoid bogus results from methods just defined on the parent extension. This is important for
permission-checks through extend, as they use min() to determine if any of the returns is FALSE. As min() doesn't
do type checking, an included NULL return would fail the permission checks.
The extension methods are defined during <link xmlns="http://xml.phpdox.net/src" value="__construct()"/> in <link xmlns="http://xml.phpdox.net/src" value="defineMethods()"/>.
</description>
        <param description="the name of the method to call on each extension" type="string" variable="$method"/>
        <param description="... up to 7 arguments to be passed to the method" type="mixed" variable="$a1"/>
        <return type="array"/>
      </docblock>
      <parameter name="method" byreference="false" type="{unknown}"/>
      <parameter name="a1" byreference="true" type="{unknown}" default="null"/>
      <parameter name="a2" byreference="true" type="{unknown}" default="null"/>
      <parameter name="a3" byreference="true" type="{unknown}" default="null"/>
      <parameter name="a4" byreference="true" type="{unknown}" default="null"/>
      <parameter name="a5" byreference="true" type="{unknown}" default="null"/>
      <parameter name="a6" byreference="true" type="{unknown}" default="null"/>
      <parameter name="a7" byreference="true" type="{unknown}" default="null"/>
    </method>
    <method name="getExtensionInstance" start="1027" end="1029" abstract="false" final="false" static="false" visibility="public">
      <docblock>
        <description compact="Get an extension instance attached to this object by name."/>
        <uses value="hasExtension()"/>
        <param type="string" variable="$extension"/>
        <return type="object">
          <type full="Extension" namespace="" name="Extension"/>
        </return>
      </docblock>
      <parameter name="extension" byreference="false" type="{unknown}"/>
    </method>
    <method name="hasExtension" start="1045" end="1047" abstract="false" final="false" static="false" visibility="public">
      <docblock>
        <description compact="Returns TRUE if this object instance has a specific extension applied in {@link $extension_instances}. Extension instances are initialized at constructor time, meaning if you use {@link add_extension()} afterwards, the added extension will just be added to new instances of the extended class. Use the static method {@link has_extension()} to check if a class (not an instance) has a specific extension.">Caution: Don't use singleton(&lt;class&gt;)-&gt;hasExtension() as it will
give you inconsistent results based on when the singleton was first
accessed.</description>
        <param description="Classname of an {@link Extension} subclass without parameters" type="string" variable="$extension"/>
        <return type="object">
          <type full="bool" namespace="" name="bool"/>
        </return>
      </docblock>
      <parameter name="extension" byreference="false" type="{unknown}"/>
    </method>
    <method name="getExtensionInstances" start="1056" end="1058" abstract="false" final="false" static="false" visibility="public">
      <docblock>
        <description compact="Get all extension instances for this specific object instance.">See <link xmlns="http://xml.phpdox.net/src" value="get_extensions()"/> to get all applied extension classes
for this class (not the instance).
</description>
        <return description="Map of {@link DataExtension} instances, keyed by classname." type="array"/>
      </docblock>
    </method>
    <method name="cacheToFile" start="1072" end="1092" abstract="false" final="false" static="false" visibility="public">
      <docblock>
        <description compact="Cache the results of an instance method in this object to a file, or if it is already cache return the cached results"/>
        <param description="the method name to cache" type="string" variable="$method"/>
        <param description="the cache lifetime in seconds" type="int" variable="$lifetime"/>
        <param description="custom cache ID to use" type="string" variable="$ID"/>
        <param description="an optional array of arguments" type="array" variable="$arguments"/>
        <return description="the cached data" type="mixed"/>
      </docblock>
      <parameter name="method" byreference="false" type="{unknown}"/>
      <parameter name="lifetime" byreference="false" type="integer" default="3600"/>
      <parameter name="ID" byreference="false" type="{unknown}" default="false"/>
      <parameter name="arguments" byreference="false" type="array"/>
    </method>
    <method name="clearCache" start="1097" end="1105" abstract="false" final="false" static="false" visibility="public">
      <docblock>
        <description compact="Clears the cache for the given cacheToFile call"/>
      </docblock>
      <parameter name="method" byreference="false" type="{unknown}"/>
      <parameter name="ID" byreference="false" type="{unknown}" default="false"/>
      <parameter name="arguments" byreference="false" type="array"/>
    </method>
    <method name="loadCache" start="1114" end="1122" abstract="false" final="false" static="false" visibility="protected">
      <docblock>
        <description compact="Loads a cache from the filesystem if a valid on is present and within the specified lifetime"/>
        <param description="the cache name" type="string" variable="$cache"/>
        <param description="the lifetime (in seconds) of the cache before it is invalid" type="int" variable="$lifetime"/>
        <return type="mixed"/>
      </docblock>
      <parameter name="cache" byreference="false" type="{unknown}"/>
      <parameter name="lifetime" byreference="false" type="integer" default="3600"/>
    </method>
    <method name="saveCache" start="1130" end="1132" abstract="false" final="false" static="false" visibility="protected">
      <docblock>
        <description compact="Save a piece of cached data to the file system"/>
        <param description="the cache name" type="string" variable="$cache"/>
        <param description="data to save (must be serializable)" type="mixed" variable="$data"/>
      </docblock>
      <parameter name="cache" byreference="false" type="{unknown}"/>
      <parameter name="data" byreference="false" type="{unknown}"/>
    </method>
    <method name="sanitiseCachename" start="1140" end="1142" abstract="false" final="false" static="false" visibility="protected">
      <docblock>
        <description compact="Strip a file name of special characters so it is suitable for use as a cache file name"/>
        <param type="string" variable="$name"/>
        <return description="the name with all special cahracters replaced with underscores" type="string"/>
      </docblock>
      <parameter name="name" byreference="false" type="{unknown}"/>
    </method>
  </parent>
  <interface full="IteratorAggregate" namespace="" name="IteratorAggregate">
    <extends full="Traversable" namespace="" name="Traversable"/>
    <method name="getIterator" abstract="false" static="false" visibility="public" final="false">
    <docblock>
      <description compact="Retrieve an external iterator"/>
      <return type="Traversable"/>
    </docblock>
  </method>
  </interface>
</class>
