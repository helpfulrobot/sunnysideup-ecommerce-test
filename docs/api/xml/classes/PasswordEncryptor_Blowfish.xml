<?xml version="1.0" encoding="UTF-8"?>
<class xmlns="http://xml.phpdox.net/src" full="PasswordEncryptor_Blowfish" namespace="" name="PasswordEncryptor_Blowfish" abstract="false" final="false" start="102" end="260">
  <file path="/var/www/_modules/ecommerce_test/trunk/docs/en/phpdox/../../../framework/security" file="PasswordEncryptor.php" realpath="/var/www/_modules/ecommerce_test/trunk/framework/security/PasswordEncryptor.php" size="11345" time="2015-03-14T10:41:01+13:00" unixtime="1426282861" sha1="b2d7c47704610374ff33157372e929f9b6c87aaa" relative="framework/security/PasswordEncryptor.php"/>
  <docblock>
    <description compact="Blowfish encryption - this is the default from SilverStripe 3.">PHP 5.3+ will provide a php implementation if there is no system
version available.</description>
    <package value="framework"/>
    <subpackage value="security"/>
  </docblock>
  <extends full="PasswordEncryptor" namespace="" name="PasswordEncryptor"/>
  <member name="cost" type="integer" default="10" visibility="protected" line="112">
    <docblock>
      <description compact="Cost of encryption.">Higher costs will increase security, but also increase server load.
If you are using basic auth, you may need to decrease this as encryption
will be run on every request.
The two digit cost parameter is the base-2 logarithm of the iteration
count for the underlying Blowfish-based hashing algorithmeter and must
be in range 04-31, values outside this range will cause crypt() to fail.</description>
    </docblock>
  </member>
  <method name="set_cost" start="123" end="125" abstract="false" final="false" static="true" visibility="public">
    <docblock>
      <description compact="Sets the cost of the blowfish algorithm.">See <link xmlns="http://xml.phpdox.net/src" value="PasswordEncryptor_Blowfish::$cost"/>Cost is set as an integer but
Ensure that set values are from 4-31
</description>
      <param description="range 4-31" type="int" variable="$cost"/>
      <return type="object">
        <type full="null" namespace="" name="null"/>
      </return>
    </docblock>
    <parameter name="cost" byreference="false" type="{unknown}"/>
  </method>
  <method name="get_cost" start="133" end="135" abstract="false" final="false" static="true" visibility="public">
    <docblock>
      <description compact="Gets the cost that is set for the blowfish algorithm"/>
      <param type="int" variable="$cost"/>
      <return type="object">
        <type full="null" namespace="" name="null"/>
      </return>
    </docblock>
  </method>
  <method name="encrypt" start="137" end="156" abstract="false" final="false" static="false" visibility="public">
    <parameter name="password" byreference="false" type="{unknown}"/>
    <parameter name="salt" byreference="false" type="{unknown}" default="null"/>
    <parameter name="member" byreference="false" type="{unknown}" default="null"/>
    <inline>
      <comment value="See: http://nz.php.net/security/crypt_blowfish.php" line="138"/>
      <comment value="There are three version of the algorithm - y, a and x, in order" line="139"/>
      <comment value="of decreasing security. Attempt to use the strongest version." line="140"/>
      <comment value="We *never* want to generate blank passwords. If something" line="149"/>
      <comment value="goes wrong, throw an exception." line="150"/>
    </inline>
  </method>
  <method name="encryptX" start="158" end="178" abstract="false" final="false" static="false" visibility="public">
    <parameter name="password" byreference="false" type="{unknown}"/>
    <parameter name="salt" byreference="false" type="{unknown}"/>
    <inline>
      <comment value="Check if system a is actually x, and if available, use that." line="166"/>
    </inline>
  </method>
  <method name="encryptY" start="180" end="200" abstract="false" final="false" static="false" visibility="public">
    <parameter name="password" byreference="false" type="{unknown}"/>
    <parameter name="salt" byreference="false" type="{unknown}"/>
    <inline>
      <comment value="Check if system a is actually y, and if available, use that." line="188"/>
    </inline>
  </method>
  <method name="encryptA" start="202" end="213" abstract="false" final="false" static="false" visibility="public">
    <parameter name="password" byreference="false" type="{unknown}"/>
    <parameter name="salt" byreference="false" type="{unknown}"/>
  </method>
  <method name="checkAEncryptionLevel" start="221" end="239" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="The algorithm returned by using '$2a$' is not consistent - it might be either the correct (y), incorrect (x) or mostly-correct (a) version, depending on the version of PHP and the operating system, so we need to test it."/>
    </docblock>
    <inline>
      <comment value="Test hashes taken from" line="222"/>
      <comment value="http://cvsweb.openwall.com/cgi/cvsweb.cgi/~checkout~/Owl/packages/glibc" line="223"/>
      <comment value="/crypt_blowfish/wrapper.c?rev=1.9.2.1;content-type=text%2Fplain" line="224"/>
    </inline>
  </method>
  <method name="salt" start="244" end="247" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="self::$cost param is forced to be two digits with leading zeroes for ints 4-9"/>
    </docblock>
    <parameter name="password" byreference="false" type="{unknown}"/>
    <parameter name="member" byreference="false" type="{unknown}" default="null"/>
  </method>
  <method name="check" start="249" end="259" abstract="false" final="false" static="false" visibility="public">
    <parameter name="hash" byreference="false" type="{unknown}"/>
    <parameter name="password" byreference="false" type="{unknown}"/>
    <parameter name="salt" byreference="false" type="{unknown}" default="null"/>
    <parameter name="member" byreference="false" type="{unknown}" default="null"/>
  </method>
  <parent full="PasswordEncryptor" namespace="" name="PasswordEncryptor">
    <method name="get_encryptors" start="25" end="27" abstract="false" final="false" static="true" visibility="public">
      <docblock>
        <description/>
        <return description="Map of encryptor code to the used class." type="object">
          <type full="Array" namespace="" name="Array"/>
        </return>
      </docblock>
    </method>
    <method name="create_for_algorithm" start="34" end="56" abstract="false" final="false" static="true" visibility="public">
      <docblock>
        <description/>
        <param type="object" variable="$algorithm">
          <type full="String" namespace="" name="String"/>
        </param>
        <return type="object">
          <type full="PasswordEncryptor" namespace="" name="PasswordEncryptor"/>
        </return>
        <throws type="object">
          <type full="PasswordEncryptor_NotFoundException" namespace="" name="PasswordEncryptor_NotFoundException"/>
        </throws>
      </docblock>
      <parameter name="algorithm" byreference="false" type="{unknown}"/>
    </method>
    <method name="encrypt" start="67" end="67" abstract="true" final="false" static="false" visibility="public">
      <docblock>
        <description compact="Return a string value stored in the {@link Member-&gt;Password} property.">The password should be hashed with <link xmlns="http://xml.phpdox.net/src" value="salt()"/> if applicable.
</description>
        <param description="Cleartext password to be hashed" type="object" variable="$password">
          <type full="String" namespace="" name="String"/>
        </param>
        <param description="(Optional)" type="object" variable="$salt">
          <type full="String" namespace="" name="String"/>
        </param>
        <param description="(Optional)" type="object" variable="$member">
          <type full="Member" namespace="" name="Member"/>
        </param>
        <return description="Maximum of 512 characters." type="object">
          <type full="String" namespace="" name="String"/>
        </return>
      </docblock>
      <parameter name="password" byreference="false" type="{unknown}"/>
      <parameter name="salt" byreference="false" type="{unknown}" default="null"/>
      <parameter name="member" byreference="false" type="{unknown}" default="null"/>
    </method>
    <method name="salt" start="78" end="81" abstract="false" final="false" static="false" visibility="public">
      <docblock>
        <description compact="Return a string value stored in the {@link Member-&gt;Salt} property."/>
        <uses value="RandomGenerator"/>
        <param description="Cleartext password" type="object" variable="$password">
          <type full="String" namespace="" name="String"/>
        </param>
        <param description="(Optional)" type="object" variable="$member">
          <type full="Member" namespace="" name="Member"/>
        </param>
        <return description="Maximum of 50 characters" type="object">
          <type full="String" namespace="" name="String"/>
        </return>
      </docblock>
      <parameter name="password" byreference="false" type="{unknown}"/>
      <parameter name="member" byreference="false" type="{unknown}" default="null"/>
    </method>
    <method name="check" start="89" end="91" abstract="false" final="false" static="false" visibility="public">
      <docblock>
        <description compact="This usually just returns a strict string comparison, but is necessary for retain compatibility with password hashed with flawed algorithms - see {@link PasswordEncryptor_LegacyPHPHash} and {@link PasswordEncryptor_Blowfish}"/>
      </docblock>
      <parameter name="hash" byreference="false" type="{unknown}"/>
      <parameter name="password" byreference="false" type="{unknown}"/>
      <parameter name="salt" byreference="false" type="{unknown}" default="null"/>
      <parameter name="member" byreference="false" type="{unknown}" default="null"/>
    </method>
  </parent>
</class>
