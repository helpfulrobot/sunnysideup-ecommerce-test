<?xml version="1.0" encoding="UTF-8"?>
<class xmlns="http://xml.phpdox.net/src" full="Requirements_Backend" namespace="" name="Requirements_Backend" abstract="false" final="false" start="346" end="1246">
  <file path="/var/www/_modules/ecommerce_test/trunk/docs/en/phpdox/../../../framework/view" file="Requirements.php" realpath="/var/www/_modules/ecommerce_test/trunk/framework/view/Requirements.php" size="38873" time="2015-03-14T10:42:30+13:00" unixtime="1426282950" sha1="5f0079f040f6540f2d2dbf4526eef8a26489419a" relative="framework/view/Requirements.php"/>
  <docblock>
    <description/>
    <package value="framework"/>
    <subpackage value="view"/>
  </docblock>
  <member name="suffix_requirements" type="{unknown}" default="true" visibility="protected" line="355">
    <docblock>
      <description compact="Do we want requirements to suffix onto the requirement link tags for caching or is it disabled. Getter / Setter available through {@link Requirements::set_suffix_requirements()}"/>
      <var type="object">
        <type full="bool" namespace="" name="bool"/>
      </var>
    </docblock>
  </member>
  <member name="combined_files_enabled" type="{unknown}" default="true" visibility="protected" line="362">
    <docblock>
      <description compact="Enable combining of css/javascript files."/>
      <var type="boolean"/>
    </docblock>
  </member>
  <member name="javascript" type="array" visibility="protected" line="369">
    <docblock>
      <description compact="Paths to all required .js files relative to the webroot."/>
      <var description="$javascript" type="array"/>
    </docblock>
  </member>
  <member name="css" type="array" visibility="protected" line="376">
    <docblock>
      <description compact="Paths to all required .css files relative to the webroot."/>
      <var description="$css" type="array"/>
    </docblock>
  </member>
  <member name="customScript" type="array" visibility="protected" line="384">
    <docblock>
      <description compact="All custom javascript code that is inserted directly at the bottom of the HTML &lt;head&gt; tag."/>
      <var description="$customScript" type="array"/>
    </docblock>
  </member>
  <member name="customCSS" type="array" visibility="protected" line="392">
    <docblock>
      <description compact="All custom CSS rules which are inserted directly at the bottom of the HTML &lt;head&gt; tag."/>
      <var description="$customCSS" type="array"/>
    </docblock>
  </member>
  <member name="customHeadTags" type="array" visibility="protected" line="399">
    <docblock>
      <description compact="All custom HTML markup which is added before the closing &lt;head&gt; tag, e.g. additional metatags.">This is preferred to entering tags directly into</description>
    </docblock>
  </member>
  <member name="disabled" type="array" visibility="protected" line="407">
    <docblock>
      <description compact="Remembers the filepaths of all cleared Requirements through {@link clear()}."/>
      <var description="$disabled" type="array"/>
    </docblock>
  </member>
  <member name="blocked" type="array" visibility="protected" line="419">
    <docblock>
      <description compact="The filepaths (relative to webroot) or uniquenessIDs of any included requirements which should be blocked when executing {@link inlcudeInHTML()}.">This is useful to e.g. prevent core classes to modifying
Requirements without subclassing the entire functionality.
Use <link xmlns="http://xml.phpdox.net/src" value="unblock()"/> or <link xmlns="http://xml.phpdox.net/src" value="unblock_all()"/> to revert changes.
</description>
      <var description="$blocked" type="array"/>
    </docblock>
  </member>
  <member name="combine_files" type="array" visibility="public" line="426">
    <docblock>
      <description compact="See {@link combine_files()}."/>
      <var description="$combine_files" type="array"/>
    </docblock>
  </member>
  <member name="combine_js_with_jsmin" type="{unknown}" default="true" visibility="public" line="434">
    <docblock>
      <description compact="Using the JSMin library to minify any javascript file passed to {@link combine_files()}."/>
      <var type="boolean"/>
    </docblock>
  </member>
  <member name="write_header_comment" type="{unknown}" default="true" visibility="public" line="442">
    <docblock>
      <description compact="Setting for whether or not a file header should be written when combining files."/>
      <var type="boolean"/>
    </docblock>
  </member>
  <member name="combinedFilesFolder" type="{unknown}" default="null" visibility="protected" line="448">
    <docblock>
      <description/>
      <var description="By default, combined files are stored in assets/_combinedfiles." type="string">Set this by calling Requirements::set_combined_files_folder()</var>
    </docblock>
  </member>
  <member name="write_js_to_body" type="{unknown}" default="true" visibility="public" line="463">
    <docblock>
      <description compact="Put all javascript includes at the bottom of the template before the closing &lt;body&gt; tag instead of the &lt;head&gt; tag.">This means script downloads won't block other HTTP-requests,
which can be a performance improvement.
Caution: Doesn't work when modifying the DOM from those external
scripts without listening to window.onload/document.ready
(e.g. toplevel document.write() calls).</description>
      <see value="http://developer.yahoo.com/performance/rules.html#js_bottom"/>
      <var type="boolean"/>
    </docblock>
  </member>
  <member name="force_js_to_bottom" type="{unknown}" default="false" visibility="protected" line="471">
    <docblock>
      <description compact="Force the javascripts to the bottom of the page, even if there's a &lt;script&gt; tag in the body already"/>
      <var type="boolean"/>
    </docblock>
  </member>
  <method name="set_combined_files_enabled" start="473" end="475" abstract="false" final="false" static="false" visibility="public">
    <parameter name="enable" byreference="false" type="{unknown}"/>
  </method>
  <method name="get_combined_files_enabled" start="477" end="479" abstract="false" final="false" static="false" visibility="public"/>
  <method name="setCombinedFilesFolder" start="484" end="486" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description/>
      <param type="object" variable="$folder">
        <type full="String" namespace="" name="String"/>
      </param>
    </docblock>
    <parameter name="folder" byreference="false" type="{unknown}"/>
  </method>
  <method name="getCombinedFilesFolder" start="491" end="493" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description/>
      <return description="Folder relative to the webroot" type="object">
        <type full="String" namespace="" name="String"/>
      </return>
    </docblock>
  </method>
  <method name="set_suffix_requirements" start="501" end="503" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="Set whether we want to suffix requirements with the time / location on to the requirements"/>
      <param type="object">
        <type full="bool" namespace="" name="bool"/>
      </param>
    </docblock>
    <parameter name="var" byreference="false" type="{unknown}"/>
  </method>
  <method name="get_suffix_requirements" start="510" end="512" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="Return whether we want to suffix requirements"/>
      <return type="object">
        <type full="bool" namespace="" name="bool"/>
      </return>
    </docblock>
  </method>
  <method name="set_write_js_to_body" start="520" end="522" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="Set whether you want the files written to the head or the body. It writes to the body by default which can break some scripts"/>
      <param type="boolean"/>
    </docblock>
    <parameter name="var" byreference="false" type="{unknown}"/>
  </method>
  <method name="set_force_js_to_bottom" start="528" end="530" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="Forces the javascript to the end of the body, just before the closing body-tag."/>
      <param type="boolean"/>
    </docblock>
    <parameter name="var" byreference="false" type="{unknown}"/>
  </method>
  <method name="javascript" start="536" end="538" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="Register the given javascript file as required.">Filenames should be relative to the base, eg, 'framework/javascript/loader.js'</description>
    </docblock>
    <parameter name="file" byreference="false" type="{unknown}"/>
  </method>
  <method name="get_javascript" start="545" end="547" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="Returns an array of all included javascript"/>
      <return type="array"/>
    </docblock>
  </method>
  <method name="customScript" start="555" end="560" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="Add the javascript code to the header of the page"/>
      <todo value="Make Requirements automatically put this into a separate file :-)"/>
      <param description="The script content" type="object">
        <type full="script" namespace="" name="script"/>
      </param>
      <param description="Use this to ensure that pieces of code only get added once." type="object">
        <type full="uniquenessID" namespace="" name="uniquenessID"/>
      </param>
    </docblock>
    <parameter name="script" byreference="false" type="{unknown}"/>
    <parameter name="uniquenessID" byreference="false" type="{unknown}" default="null"/>
  </method>
  <method name="customCSS" start="568" end="571" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="Include custom CSS styling to the header of the page."/>
      <param description="CSS selectors as a string (without &lt;style&gt; tag enclosing selectors)." type="string" variable="$script"/>
      <param description="Group CSS by a unique ID as to avoid duplicate custom CSS in header" type="int" variable="$uniquenessID"/>
    </docblock>
    <parameter name="script" byreference="false" type="{unknown}"/>
    <parameter name="uniquenessID" byreference="false" type="{unknown}" default="null"/>
  </method>
  <method name="insertHeadTags" start="579" end="582" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="Add the following custom code to the &lt;head&gt; section of the page."/>
      <param type="string" variable="$html"/>
      <param type="string" variable="$uniquenessID"/>
    </docblock>
    <parameter name="html" byreference="false" type="{unknown}"/>
    <parameter name="uniquenessID" byreference="false" type="{unknown}" default="null"/>
  </method>
  <method name="javascriptTemplate" start="589" end="601" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="Load the given javascript template with the page."/>
      <param description="The template file to load." type="object">
        <type full="file" namespace="" name="file"/>
      </param>
      <param description="The array of variables to load.  These variables are loaded via string search &amp; replace." type="object">
        <type full="vars" namespace="" name="vars"/>
      </param>
    </docblock>
    <parameter name="file" byreference="false" type="{unknown}"/>
    <parameter name="vars" byreference="false" type="{unknown}"/>
    <parameter name="uniquenessID" byreference="false" type="{unknown}" default="null"/>
  </method>
  <method name="css" start="610" end="614" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="Register the given stylesheet file as required."/>
      <param description="Filenames should be relative to the base, eg, 'framework/javascript/tree/tree.css'" variable="$file" type="object">
        <type full="String" namespace="" name="String"/>
      </param>
      <param description="Comma-separated list of media-types (e.g. &quot;screen,projector&quot;)" variable="$media" type="object">
        <type full="String" namespace="" name="String"/>
      </param>
      <see value="http://www.w3.org/TR/REC-CSS2/media.html"/>
    </docblock>
    <parameter name="file" byreference="false" type="{unknown}"/>
    <parameter name="media" byreference="false" type="{unknown}" default="null"/>
  </method>
  <method name="get_css" start="616" end="618" abstract="false" final="false" static="false" visibility="public"/>
  <method name="block" start="629" end="631" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="Needed to actively prevent the inclusion of a file, e.g. when using your own jQuery version.">Blocking should only be used as an exception, because
it is hard to trace back. You can just block items with an
ID, so make sure you add an unique identifier to customCSS() and customScript().</description>
      <param type="string" variable="$fileOrID"/>
    </docblock>
    <parameter name="fileOrID" byreference="false" type="{unknown}"/>
  </method>
  <method name="clear" start="639" end="660" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="Clear either a single or all requirements.">Caution: Clearing single rules works only with customCSS and customScript if you specified a <uniquenessid xmlns="http://xml.phpdox.net/src"/>.
</description>
      <param variable="$file" type="object">
        <type full="String" namespace="" name="String"/>
      </param>
    </docblock>
    <parameter name="fileOrID" byreference="false" type="{unknown}" default="null"/>
  </method>
  <method name="unblock" start="667" end="669" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="Removes an item from the blocking-list.">CAUTION: Does not "re-add" any previously blocked elements.</description>
      <param type="string" variable="$fileOrID"/>
    </docblock>
    <parameter name="fileOrID" byreference="false" type="{unknown}"/>
  </method>
  <method name="unblock_all" start="673" end="675" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="Removes all items from the blocking-list."/>
    </docblock>
  </method>
  <method name="restore" start="680" end="686" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="Restore requirements cleared by call to Requirements::clear"/>
    </docblock>
  </method>
  <method name="includeInHTML" start="700" end="791" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="Update the given HTML content with the appropriate include tags for the registered requirements. Needs to receive a valid HTML/XHTML template in the $content parameter, including a &lt;head&gt; tag. The requirements will insert before the closing &lt;head&gt; tag automatically."/>
      <todo value="Calculate $prefix properly"/>
      <param description="Absolute path for the *.ss template file" type="string" variable="$templateFilePath"/>
      <param description="HTML content that has already been parsed from the $templateFilePath" type="string" variable="$content">through <link xmlns="http://xml.phpdox.net/src" value="SSViewer"/>.
</param>
      <return description="HTML content thats augumented with the requirements before the closing &lt;head&gt; tag." type="string"/>
    </docblock>
    <parameter name="templateFile" byreference="false" type="{unknown}"/>
    <parameter name="content" byreference="false" type="{unknown}"/>
    <inline>
      <comment value="Combine files - updates $this-&gt;javascript and $this-&gt;css" line="708"/>
      <comment value="add all inline javascript *after* including external files which" line="718"/>
      <comment value="they might rely on" line="719"/>
      <comment value="Remove all newlines from code to preserve layout" line="746"/>
      <comment value="We put script tags into the body, for performance." line="749"/>
      <comment value="We forcefully put it at the bottom instead of before" line="750"/>
      <comment value="the first script-tag occurence" line="751"/>
      <comment value="Put CSS at the bottom of the head" line="754"/>
    </inline>
  </method>
  <method name="include_in_response" start="796" end="819" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="Attach requirements inclusion to X-Include-JS and X-Include-CSS headers on the HTTP response"/>
    </docblock>
    <parameter name="response" byreference="false" type="object">
      <type full="\\SS_HTTPResponse" namespace="\" name="SS_HTTPResponse"/>
    </parameter>
  </method>
  <method name="add_i18n_javascript" start="829" end="863" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="Add i18n files from the given javascript directory.  SilverStripe expects that the given directory will contain a number of java script files named by language: en_US.js, de_DE.js, etc."/>
      <param description="The javascript lang directory, relative to the site root, e.g., 'framework/javascript/lang'" type="object">
        <type full="String" namespace="" name="String"/>
      </param>
      <param description="Return all relative file paths rather than including them in requirements" type="object">
        <type full="Boolean" namespace="" name="Boolean"/>
      </param>
      <param description="Only include language files, not the base libraries" type="object">
        <type full="Boolean" namespace="" name="Boolean"/>
      </param>
    </docblock>
    <parameter name="langDir" byreference="false" type="{unknown}"/>
    <parameter name="return" byreference="false" type="{unknown}" default="false"/>
    <parameter name="langOnly" byreference="false" type="{unknown}" default="false"/>
    <inline>
      <comment value="Include i18n.js even if no languages are found.  The fact that" line="833"/>
      <comment value="add_i18n_javascript() was called indicates that the methods in" line="834"/>
      <comment value="here are needed." line="835"/>
    </inline>
  </method>
  <method name="path_for_file" start="871" end="896" abstract="false" final="false" static="false" visibility="protected">
    <docblock>
      <description compact="Finds the path for specified file."/>
      <param type="string" variable="$fileOrUrl"/>
      <return type="object">
        <type full="string|boolean" namespace="" name="string|boolean"/>
      </return>
    </docblock>
    <parameter name="fileOrUrl" byreference="false" type="{unknown}"/>
  </method>
  <method name="combine_files" start="955" end="1005" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="Concatenate several css or javascript files into a single dynamically generated file (stored in {@link Director::baseFolder()}). This increases performance by fewer HTTP requests.">The combined file is regenerated
based on every file modification time. Optionally a rebuild can be triggered
by appending ?flush=1 to the URL.
If all files to be combined are javascript, we use the external JSMin library
to minify the javascript. This can be controlled by <link xmlns="http://xml.phpdox.net/src" value="$combine_js_with_jsmin"/>.
All combined files will have a comment on the start of each concatenated file
denoting their original position. For easier debugging, we recommend to only
minify javascript if not in development mode (<link xmlns="http://xml.phpdox.net/src" value="Director::isDev()"/>).
CAUTION: You're responsible for ensuring that the load order for combined files
is retained - otherwise combining javascript files can lead to functional errors
in the javascript logic, and combining css can lead to wrong styling inheritance.
Depending on the javascript logic, you also have to ensure that files are not included
in more than one combine_files() call.
Best practice is to include every javascript file in exactly *one* combine_files()
directive to avoid the issues mentioned above - this is enforced by this function.
CAUTION: Combining CSS Files discards any "media" information.
Example for combined JavaScript:
&lt;code&gt;
Requirements::combine_files(
 'foobar.js',
 array(
		'mysite/javascript/foo.js',
		'mysite/javascript/bar.js',
	)
);
&lt;/code&gt;
Example for combined CSS:
&lt;code&gt;
Requirements::combine_files(
 'foobar.css',
	array(
		'mysite/javascript/foo.css',
		'mysite/javascript/bar.css',
	)
);
&lt;/code&gt;
</description>
      <see value="http://code.google.com/p/jsmin-php/"/>
      <todo value="Should we enforce unique inclusion of files, or leave it to the developer? Can auto-detection cause">breaks?</todo>
      <param description="Filename of the combined file (will be stored in {@link Director::baseFolder()}" type="string" variable="$combinedFileName">by default)</param>
      <param description="Array of filenames relative to the webroot" type="array" variable="$files"/>
      <param description="Comma-separated list of media-types (e.g. &quot;screen,projector&quot;)." type="string" variable="$media"/>
    </docblock>
    <parameter name="combinedFileName" byreference="false" type="{unknown}"/>
    <parameter name="files" byreference="false" type="{unknown}"/>
    <parameter name="media" byreference="false" type="{unknown}" default="null"/>
    <inline>
      <comment value="duplicate check" line="956"/>
      <comment value="Either associative array path=&gt;path type=&gt;type or numeric 0=&gt;path 1=&gt;type" line="967"/>
      <comment value="Otherwise, assume path is the first item" line="968"/>
    </inline>
  </method>
  <method name="get_combine_files" start="1011" end="1013" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="Returns all combined files."/>
      <return type="array"/>
    </docblock>
  </method>
  <method name="delete_combined_files" start="1020" end="1030" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="Deletes all dynamically generated combined files from the filesystem."/>
      <param description="If left blank, all combined files are deleted." type="string" variable="$combinedFileName"/>
    </docblock>
    <parameter name="combinedFileName" byreference="false" type="{unknown}" default="null"/>
  </method>
  <method name="delete_all_combined_files" start="1036" end="1044" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="Deletes all generated combined files in the configured combined files directory, but doesn't delete the directory itself."/>
    </docblock>
  </method>
  <method name="clear_combined_files" start="1046" end="1048" abstract="false" final="false" static="false" visibility="public"/>
  <method name="process_combined_files" start="1054" end="1188" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="See {@link combine_files()}"/>
    </docblock>
    <inline>
      <comment value="The class_exists call prevents us from loading SapphireTest.php (slow) just to know that" line="1055"/>
      <comment value="SapphireTest isn't running :-)" line="1056"/>
      <comment value="Make a map of files that could be potentially combined" line="1064"/>
      <comment value="Work out the relative URL for the combined files from the base folder" line="1077"/>
      <comment value="Figure out which ones apply to this pageview" line="1080"/>
      <comment value="Inherit the parameters from the last file in the combine set." line="1095"/>
      <comment value="Process the combined files" line="1103"/>
      <comment value="Make the folder if necessary" line="1110"/>
      <comment value="If the file isn't writeable, don't even bother trying to make the combined file and return (falls back" line="1115"/>
      <comment value="to uncombined).  Complex test because is_writable fails if the file doesn't exist yet." line="1116"/>
      <comment value="Determine if we need to build the combined include" line="1125"/>
      <comment value="file exists, check modification date of every contained file" line="1127"/>
      <comment value="write a header comment for each file for easier identification and debugging" line="1154"/>
      <comment value="also the semicolon between each file is required for jQuery to be combinable properly" line="1155"/>
      <comment value="Failed to minify, use unminified. This warning is raised at the end to allow code execution" line="1171"/>
      <comment value="to complete in case this warning is caught inside a try-catch block." line="1172"/>
      <comment value="Unsuccessful write - just include the regular JS files, rather than the combined one" line="1176"/>
      <todo value="Alters the original information, which means you can't call this" line="1184"/>
      <comment value="method repeatedly - it will behave different on the second call!" line="1185"/>
    </inline>
  </method>
  <method name="minifyFile" start="1190" end="1201" abstract="false" final="false" static="false" visibility="protected">
    <parameter name="filename" byreference="false" type="{unknown}"/>
    <parameter name="content" byreference="false" type="{unknown}"/>
    <inline>
      <comment value="if we have a javascript file and jsmin is enabled, minify the content" line="1191"/>
    </inline>
  </method>
  <method name="get_custom_scripts" start="1203" end="1213" abstract="false" final="false" static="false" visibility="public"/>
  <method name="themedCSS" start="1218" end="1235" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description/>
      <see value="Requirements::themedCSS()"/>
    </docblock>
    <parameter name="name" byreference="false" type="{unknown}"/>
    <parameter name="module" byreference="false" type="{unknown}" default="null"/>
    <parameter name="media" byreference="false" type="{unknown}" default="null"/>
  </method>
  <method name="debug" start="1237" end="1244" abstract="false" final="false" static="false" visibility="public"/>
</class>
