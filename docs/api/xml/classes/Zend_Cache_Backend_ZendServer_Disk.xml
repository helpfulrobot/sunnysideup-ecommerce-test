<?xml version="1.0" encoding="UTF-8"?>
<class xmlns="http://xml.phpdox.net/src" full="Zend_Cache_Backend_ZendServer_Disk" namespace="" name="Zend_Cache_Backend_ZendServer_Disk" abstract="false" final="false" start="37" end="100">
  <file path="/var/www/_modules/ecommerce_test/trunk/docs/en/phpdox/../../../framework/thirdparty/Zend/Cache/Backend/ZendServer" file="Disk.php" realpath="/var/www/_modules/ecommerce_test/trunk/framework/thirdparty/Zend/Cache/Backend/ZendServer/Disk.php" size="2956" time="2015-03-14T10:41:13+13:00" unixtime="1426282873" sha1="22eb210aebb02822605b48d7a454e60f081d95e1" relative="framework/thirdparty/Zend/Cache/Backend/ZendServer/Disk.php"/>
  <docblock>
    <description/>
    <package value="Zend_Cache"/>
    <subpackage value="Zend_Cache_Backend"/>
    <copyright value="Copyright (c) 2005-2011 Zend Technologies USA Inc. (http://www.zend.com)"/>
    <license name="http://framework.zend.com/license/new-bsd     New BSD License"/>
  </docblock>
  <extends full="Zend_Cache_Backend_ZendServer" namespace="" name="Zend_Cache_Backend_ZendServer"/>
  <implements full="Zend_Cache_Backend_Interface" namespace="" name="Zend_Cache_Backend_Interface"/>
  <constructor name="__construct" start="45" end="51" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="Constructor"/>
      <param description="associative array of options" type="array" variable="$options"/>
      <throws type="object">
        <type full="Zend_Cache_Exception" namespace="" name="Zend_Cache_Exception"/>
      </throws>
    </docblock>
    <parameter name="options" byreference="false" type="array"/>
  </constructor>
  <method name="_store" start="61" end="70" abstract="false" final="false" static="false" visibility="protected">
    <docblock>
      <description compact="Store data"/>
      <param description="Object to store" type="mixed" variable="$data"/>
      <param description="Cache id" type="string" variable="$id"/>
      <param description="Time to live in seconds" type="int" variable="$timeToLive"/>
      <return description="true if no problem" type="boolean"/>
    </docblock>
    <parameter name="data" byreference="false" type="{unknown}"/>
    <parameter name="id" byreference="false" type="{unknown}"/>
    <parameter name="timeToLive" byreference="false" type="{unknown}"/>
  </method>
  <method name="_fetch" start="77" end="80" abstract="false" final="false" static="false" visibility="protected">
    <docblock>
      <description compact="Fetch data"/>
      <param description="Cache id" type="string" variable="$id"/>
    </docblock>
    <parameter name="id" byreference="false" type="{unknown}"/>
  </method>
  <method name="_unset" start="88" end="91" abstract="false" final="false" static="false" visibility="protected">
    <docblock>
      <description compact="Unset data"/>
      <param description="Cache id" type="string" variable="$id"/>
      <return description="true if no problem" type="boolean"/>
    </docblock>
    <parameter name="id" byreference="false" type="{unknown}"/>
  </method>
  <method name="_clear" start="96" end="99" abstract="false" final="false" static="false" visibility="protected">
    <docblock>
      <description compact="Clear cache"/>
    </docblock>
  </method>
  <parent full="Zend_Cache_Backend_ZendServer" namespace="" name="Zend_Cache_Backend_ZendServer">
    <extends full="Zend_Cache_Backend" namespace="" name="Zend_Cache_Backend"/>
    <member name="_options" type="array" visibility="protected" line="47">
      <docblock>
        <description compact="Available options">=====&gt; (string) namespace :
Namespace to be used for chaching operations</description>
        <var description="available options" type="array"/>
      </docblock>
    </member>
    <method name="_store" start="59" end="59" abstract="true" final="false" static="false" visibility="protected">
      <docblock>
        <description compact="Store data"/>
        <param description="Object to store" type="mixed" variable="$data"/>
        <param description="Cache id" type="string" variable="$id"/>
        <param description="Time to live in seconds" type="int" variable="$timeToLive"/>
        <throws type="object">
          <type full="Zend_Cache_Exception" namespace="" name="Zend_Cache_Exception"/>
        </throws>
      </docblock>
      <parameter name="data" byreference="false" type="{unknown}"/>
      <parameter name="id" byreference="false" type="{unknown}"/>
      <parameter name="timeToLive" byreference="false" type="{unknown}"/>
    </method>
    <method name="_fetch" start="67" end="67" abstract="true" final="false" static="false" visibility="protected">
      <docblock>
        <description compact="Fetch data"/>
        <param description="Cache id" type="string" variable="$id"/>
        <throws type="object">
          <type full="Zend_Cache_Exception" namespace="" name="Zend_Cache_Exception"/>
        </throws>
      </docblock>
      <parameter name="id" byreference="false" type="{unknown}"/>
    </method>
    <method name="_unset" start="74" end="74" abstract="true" final="false" static="false" visibility="protected">
      <docblock>
        <description compact="Unset data"/>
        <param description="Cache id" type="string" variable="$id"/>
      </docblock>
      <parameter name="id" byreference="false" type="{unknown}"/>
    </method>
    <method name="_clear" start="79" end="79" abstract="true" final="false" static="false" visibility="protected">
      <docblock>
        <description compact="Clear cache"/>
      </docblock>
    </method>
    <method name="load" start="88" end="95" abstract="false" final="false" static="false" visibility="public">
      <docblock>
        <description compact="Test if a cache is available for the given id and (if yes) return it (false else)"/>
        <param description="cache id" type="string" variable="$id"/>
        <param description="if set to true, the cache validity won't be tested" type="boolean" variable="$doNotTestCacheValidity"/>
        <return description="cached datas (or false)" type="string"/>
      </docblock>
      <parameter name="id" byreference="false" type="{unknown}"/>
      <parameter name="doNotTestCacheValidity" byreference="false" type="{unknown}" default="false"/>
    </method>
    <method name="test" start="104" end="114" abstract="false" final="false" static="false" visibility="public">
      <docblock>
        <description compact="Test if a cache is available or not (for the given id)"/>
        <param description="cache id" type="string" variable="$id"/>
        <return description="false (a cache is not available) or &quot;last modified&quot; timestamp (int) of the available cache record" type="mixed"/>
        <throws type="object">
          <type full="Zend_Cache_Exception" namespace="" name="Zend_Cache_Exception"/>
        </throws>
      </docblock>
      <parameter name="id" byreference="false" type="{unknown}"/>
    </method>
    <method name="save" start="141" end="155" abstract="false" final="false" static="false" visibility="public">
      <docblock>
        <description compact="Save some string datas into a cache record">Note : $data is always "string" (serialization is done by the
core not by the backend)</description>
        <param description="datas to cache" type="string" variable="$data"/>
        <param description="cache id" type="string" variable="$id"/>
        <param description="array of strings, the cache record will be tagged by each string entry" type="array" variable="$tags"/>
        <param description="if != false, set a specific lifetime for this cache record (null =&gt; infinite lifetime)" type="int" variable="$specificLifetime"/>
        <return description="true if no problem" type="boolean"/>
      </docblock>
      <parameter name="data" byreference="false" type="{unknown}"/>
      <parameter name="id" byreference="false" type="{unknown}"/>
      <parameter name="tags" byreference="false" type="array"/>
      <parameter name="specificLifetime" byreference="false" type="{unknown}" default="false"/>
    </method>
    <method name="remove" start="163" end="169" abstract="false" final="false" static="false" visibility="public">
      <docblock>
        <description compact="Remove a cache record"/>
        <param description="cache id" type="string" variable="$id"/>
        <return description="true if no problem" type="boolean"/>
      </docblock>
      <parameter name="id" byreference="false" type="{unknown}"/>
    </method>
    <method name="clean" start="186" end="206" abstract="false" final="false" static="false" visibility="public">
      <docblock>
        <description compact="Clean some cache records">Available modes are :
'all' (default)  =&gt; remove all cache entries ($tags is not used)
'old'            =&gt; unsupported
'matchingTag'    =&gt; unsupported
'notMatchingTag' =&gt; unsupported
'matchingAnyTag' =&gt; unsupported</description>
        <param description="clean mode" type="string" variable="$mode"/>
        <param description="array of tags" type="array" variable="$tags"/>
        <throws type="object">
          <type full="Zend_Cache_Exception" namespace="" name="Zend_Cache_Exception"/>
        </throws>
        <return description="true if no problem" type="boolean"/>
      </docblock>
      <parameter name="mode" byreference="false" type="{unknown}" default="Zend_Cache::CLEANING_MODE_ALL"/>
      <parameter name="tags" byreference="false" type="array"/>
    </method>
  </parent>
  <parent full="Zend_Cache_Backend" namespace="" name="Zend_Cache_Backend">
    <member name="_directives" type="array" visibility="protected" line="44">
      <docblock>
        <description compact="Frontend or Core directives">=====&gt; (int) lifetime :
- Cache lifetime (in seconds)
- If null, the cache is valid forever

=====&gt; (int) logging :
- if set to true, a logging is activated throw Zend_Log</description>
        <var description="directives" type="array"/>
      </docblock>
    </member>
    <member name="_options" type="array" visibility="protected" line="55">
      <docblock>
        <description compact="Available options"/>
        <var description="available options" type="array"/>
      </docblock>
    </member>
    <constructor name="__construct" start="64" end="69" abstract="false" final="false" static="false" visibility="public">
      <docblock>
        <description compact="Constructor"/>
        <param description="Associative array of options" type="array" variable="$options"/>
        <throws type="object">
          <type full="Zend_Cache_Exception" namespace="" name="Zend_Cache_Exception"/>
        </throws>
        <return type="object">
          <type full="void" namespace="" name="void"/>
        </return>
      </docblock>
      <parameter name="options" byreference="false" type="array"/>
    </constructor>
    <method name="setDirectives" start="78" end="93" abstract="false" final="false" static="false" visibility="public">
      <docblock>
        <description compact="Set the frontend directives"/>
        <param description="Assoc of directives" type="array" variable="$directives"/>
        <throws type="object">
          <type full="Zend_Cache_Exception" namespace="" name="Zend_Cache_Exception"/>
        </throws>
        <return type="object">
          <type full="void" namespace="" name="void"/>
        </return>
      </docblock>
      <parameter name="directives" byreference="false" type="{unknown}"/>
    </method>
    <method name="setOption" start="103" end="112" abstract="false" final="false" static="false" visibility="public">
      <docblock>
        <description compact="Set an option"/>
        <param type="string" variable="$name"/>
        <param type="mixed" variable="$value"/>
        <throws type="object">
          <type full="Zend_Cache_Exception" namespace="" name="Zend_Cache_Exception"/>
        </throws>
        <return type="object">
          <type full="void" namespace="" name="void"/>
        </return>
      </docblock>
      <parameter name="name" byreference="false" type="{unknown}"/>
      <parameter name="value" byreference="false" type="{unknown}"/>
    </method>
    <method name="getLifetime" start="123" end="129" abstract="false" final="false" static="false" visibility="public">
      <docblock>
        <description compact="Get the life time">if $specificLifetime is not false, the given specific life time is used
else, the global lifetime is used</description>
        <param type="int" variable="$specificLifetime"/>
        <return description="Cache life time" type="int"/>
      </docblock>
      <parameter name="specificLifetime" byreference="false" type="{unknown}"/>
    </method>
    <method name="isAutomaticCleaningAvailable" start="139" end="142" abstract="false" final="false" static="false" visibility="public">
      <docblock>
        <description compact="Return true if the automatic cleaning is available for the backend">DEPRECATED : use getCapabilities() instead</description>
        <deprecated/>
        <return type="boolean"/>
      </docblock>
    </method>
    <method name="getTmpDir" start="152" end="198" abstract="false" final="false" static="false" visibility="public">
      <docblock>
        <description compact="Determine system TMP directory and detect if we have read access">inspired from Zend_File_Transfer_Adapter_Abstract</description>
        <return type="string"/>
        <throws description="if unable to determine directory" type="object">
          <type full="Zend_Cache_Exception" namespace="" name="Zend_Cache_Exception"/>
        </throws>
      </docblock>
      <inline>
        <comment value="Attemp to detect by creating a temporary file" line="182"/>
      </inline>
    </method>
    <method name="_isGoodTmpDir" start="206" end="214" abstract="false" final="false" static="false" visibility="protected">
      <docblock>
        <description compact="Verify if the given temporary directory is readable and writable"/>
        <param description="temporary directory" type="string" variable="$dir"/>
        <return description="true if the directory is ok" type="boolean"/>
      </docblock>
      <parameter name="dir" byreference="false" type="{unknown}"/>
    </method>
    <method name="_loggerSanity" start="224" end="244" abstract="false" final="false" static="false" visibility="protected">
      <docblock>
        <description compact="Make sure if we enable logging that the Zend_Log class is available.">Create a default log object if none is set.</description>
        <throws type="object">
          <type full="Zend_Cache_Exception" namespace="" name="Zend_Cache_Exception"/>
        </throws>
        <return type="object">
          <type full="void" namespace="" name="void"/>
        </return>
      </docblock>
      <inline>
        <comment value="Create a default logger to the standard output stream" line="237"/>
      </inline>
    </method>
    <method name="_log" start="253" end="267" abstract="false" final="false" static="false" visibility="protected">
      <docblock>
        <description compact="Log a message at the WARN (4) priority."/>
        <param type="string" variable="$message"/>
        <throws type="object">
          <type full="Zend_Cache_Exception" namespace="" name="Zend_Cache_Exception"/>
        </throws>
        <return type="object">
          <type full="void" namespace="" name="void"/>
        </return>
      </docblock>
      <parameter name="message" byreference="false" type="{unknown}"/>
      <parameter name="priority" byreference="false" type="integer" default="4"/>
    </method>
  </parent>
  <interface full="Zend_Cache_Backend_Interface" namespace="" name="Zend_Cache_Backend_Interface">
    <method name="setDirectives" start="37" end="37" abstract="false" final="false" static="false" visibility="public">
      <docblock>
        <description compact="Set the frontend directives"/>
        <param description="assoc of directives" type="array" variable="$directives"/>
      </docblock>
      <parameter name="directives" byreference="false" type="{unknown}"/>
    </method>
    <method name="load" start="48" end="48" abstract="false" final="false" static="false" visibility="public">
      <docblock>
        <description compact="Test if a cache is available for the given id and (if yes) return it (false else)">Note : return value is always "string" (unserialization is done by the core not by the backend)</description>
        <param description="Cache id" type="string" variable="$id"/>
        <param description="If set to true, the cache validity won't be tested" type="boolean" variable="$doNotTestCacheValidity"/>
        <return description="cached datas" type="object">
          <type full="string|false" namespace="" name="string|false"/>
        </return>
      </docblock>
      <parameter name="id" byreference="false" type="{unknown}"/>
      <parameter name="doNotTestCacheValidity" byreference="false" type="{unknown}" default="false"/>
    </method>
    <method name="test" start="56" end="56" abstract="false" final="false" static="false" visibility="public">
      <docblock>
        <description compact="Test if a cache is available or not (for the given id)"/>
        <param description="cache id" type="string" variable="$id"/>
        <return description="(a cache is not available) or &quot;last modified&quot; timestamp (int) of the available cache record" type="object">
          <type full="mixed|false" namespace="" name="mixed|false"/>
        </return>
      </docblock>
      <parameter name="id" byreference="false" type="{unknown}"/>
    </method>
    <method name="save" start="70" end="70" abstract="false" final="false" static="false" visibility="public">
      <docblock>
        <description compact="Save some string datas into a cache record">Note : $data is always "string" (serialization is done by the
core not by the backend)</description>
        <param description="Datas to cache" type="string" variable="$data"/>
        <param description="Cache id" type="string" variable="$id"/>
        <param description="Array of strings, the cache record will be tagged by each string entry" type="array" variable="$tags"/>
        <param description="If != false, set a specific lifetime for this cache record (null =&gt; infinite lifetime)" type="int" variable="$specificLifetime"/>
        <return description="true if no problem" type="boolean"/>
      </docblock>
      <parameter name="data" byreference="false" type="{unknown}"/>
      <parameter name="id" byreference="false" type="{unknown}"/>
      <parameter name="tags" byreference="false" type="array"/>
      <parameter name="specificLifetime" byreference="false" type="{unknown}" default="false"/>
    </method>
    <method name="remove" start="78" end="78" abstract="false" final="false" static="false" visibility="public">
      <docblock>
        <description compact="Remove a cache record"/>
        <param description="Cache id" type="string" variable="$id"/>
        <return description="True if no problem" type="boolean"/>
      </docblock>
      <parameter name="id" byreference="false" type="{unknown}"/>
    </method>
    <method name="clean" start="97" end="97" abstract="false" final="false" static="false" visibility="public">
      <docblock>
        <description compact="Clean some cache records">Available modes are :
Zend_Cache::CLEANING_MODE_ALL (default)    =&gt; remove all cache entries ($tags is not used)
Zend_Cache::CLEANING_MODE_OLD              =&gt; remove too old cache entries ($tags is not used)
Zend_Cache::CLEANING_MODE_MATCHING_TAG     =&gt; remove cache entries matching all given tags
                                              ($tags can be an array of strings or a single string)
Zend_Cache::CLEANING_MODE_NOT_MATCHING_TAG =&gt; remove cache entries not {matching one of the given tags}
                                              ($tags can be an array of strings or a single string)
Zend_Cache::CLEANING_MODE_MATCHING_ANY_TAG =&gt; remove cache entries matching any given tags
                                              ($tags can be an array of strings or a single string)</description>
        <param description="Clean mode" type="string" variable="$mode"/>
        <param description="Array of tags" type="array" variable="$tags"/>
        <return description="true if no problem" type="boolean"/>
      </docblock>
      <parameter name="mode" byreference="false" type="{unknown}" default="Zend_Cache::CLEANING_MODE_ALL"/>
      <parameter name="tags" byreference="false" type="array"/>
    </method>
  </interface>
</class>
