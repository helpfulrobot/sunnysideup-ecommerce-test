<?xml version="1.0" encoding="UTF-8"?>
<class xmlns="http://xml.phpdox.net/src" full="i18n" namespace="" name="i18n" abstract="false" final="false" start="64" end="2656">
  <file path="/var/www/_modules/ecommerce_test/trunk/docs/en/phpdox/../../../framework/i18n" file="i18n.php" realpath="/var/www/_modules/ecommerce_test/trunk/framework/i18n/i18n.php" size="73974" time="2015-03-14T10:40:46+13:00" unixtime="1426282846" sha1="8799216934c56eb2ced6c224c92f33a5a46cd7fd" relative="framework/i18n/i18n.php"/>
  <docblock>
    <description compact="Base-class for storage and retrieval of translated entities.">Please see the 'translatable' module for managing translations of database-content.

&lt;b&gt;Usage&lt;/b&gt;

PHP:
&lt;code&gt;
_t('MyNamespace.MYENTITY', 'My default natural language value');
_t('MyNamespace.MYENTITY', 'My default natural language value', 'My explanatory context');
sprintf(_t('MyNamespace.MYENTITY', 'Counting %s things'), 42);
&lt;/code&gt;

Templates:
&lt;code&gt;
&lt;% _t('MyNamespace.MYENTITY', 'My default natural language value') %&gt;
&lt;% sprintf(_t('MyNamespace.MYENTITY','Counting %s things'),$ThingsCount) %&gt;
&lt;/code&gt;

Javascript (see framework/javascript/i18n.js):
&lt;code&gt;
ss.i18n._t('MyEntity.MyNamespace','My default natural language value');
&lt;/code&gt;

File-based i18n-translations always have a "locale" (e.g. 'en_US').
Common language names (e.g. 'en') are mainly used in the 'translatable' module
database-entities.

&lt;b&gt;Text Collection&lt;/b&gt;

Features a "textcollector-mode" that parses all files with a certain extension
(currently *.php and *.ss) for new translatable strings. Textcollector will write
updated string-tables to their respective folders inside the module, and automatically
namespace entities to the classes/templates they are found in (e.g. $lang['en_US']['AssetAdmin']['UPLOADFILES']).

Caution: Does not apply any character-set conversion, it is assumed that all content
is stored and represented in UTF-8 (Unicode). Please make sure your files are created with the correct
character-set, and your HTML-templates render UTF-8.

Caution: The language file has to be stored in the same module path as the "filename namespaces"
on the entities. So an entity stored in $lang['en_US']['AssetAdmin']['DETAILSTAB'] has to
in the language file cms/lang/en_US.php, as the referenced file (AssetAdmin.php) is stored
in the "cms" module.

&lt;b&gt;Locales&lt;/b&gt;

For the i18n class, a "locale" consists of a language code plus a region code separated by an underscore,
for example "de_AT" for German language ("de") in the region Austria ("AT").
See http://www.w3.org/International/articles/language-tags/ for a detailed description.</description>
    <see value="http://doc.silverstripe.org/i18n"/>
    <see value="http://www.w3.org/TR/i18n-html-tech-lang"/>
    <author value="Bernat Foj Capell &lt;bernat@silverstripe.com&gt;"/>
    <package value="framework"/>
    <subpackage value="misc"/>
  </docblock>
  <extends full="Object" namespace="" name="Object"/>
  <implements full="TemplateGlobalProvider" namespace="" name="TemplateGlobalProvider"/>
  <implements full="Flushable" namespace="" name="Flushable"/>
  <member name="current_locale" type="string" default="''" visibility="protected" line="69">
    <docblock>
      <description compact="This static variable is used to store the current defined locale."/>
    </docblock>
  </member>
  <member name="default_locale" type="string" default="'en_US'" visibility="private" line="75">
    <docblock>
      <description/>
      <config/>
      <var type="string"/>
    </docblock>
  </member>
  <member name="js_i18n" type="{unknown}" default="true" visibility="private" line="81">
    <docblock>
      <description/>
      <config/>
      <var type="boolean"/>
    </docblock>
  </member>
  <member name="date_format" type="{unknown}" visibility="private" line="87">
    <docblock>
      <description/>
      <config/>
      <var type="string"/>
    </docblock>
  </member>
  <member name="time_format" type="{unknown}" visibility="private" line="93">
    <docblock>
      <description/>
      <config/>
      <var type="string"/>
    </docblock>
  </member>
  <member name="translators" type="{unknown}" visibility="protected" line="98">
    <docblock>
      <description/>
      <var description="Array of priority keys to instances of Zend_Translate, mapped by name." type="array"/>
    </docblock>
  </member>
  <method name="flush" start="103" end="116" abstract="false" final="false" static="true" visibility="public">
    <docblock>
      <description compact="Triggered early in the request when someone requests a flush."/>
    </docblock>
  </method>
  <method name="get_cache" start="122" end="124" abstract="false" final="false" static="true" visibility="public">
    <docblock>
      <description compact="Return an instance of the cache used for i18n data."/>
      <return type="object">
        <type full="Zend_Cache" namespace="" name="Zend_Cache"/>
      </return>
    </docblock>
  </method>
  <method name="set_js_i18n" start="143" end="146" abstract="false" final="false" static="true" visibility="public">
    <docblock>
      <description compact="Use javascript i18n through the ss.i18n class (enabled by default).">If set to TRUE, includes javascript requirements for the base library
(framework/javascript/i18n.js) and all necessary lang files (e.g. framework/lang/de_DE.js)
plus fallbacks to the default locale (e.g. framework/lang/en_US.js).
If set to FALSE, only includes a stub implementation
which is necessary. Mainly disabled to save bandwidth
in a frontend context when website is in single language.
Caution: This flag gets overwritten in <link xmlns="http://xml.phpdox.net/src" value="LeftAndMain::init()"/> to enforce javascript
i18n for the CMS interfaces.
</description>
      <see value="Requirements::process_i18n_javascript()"/>
      <deprecated value="3.2 Use the &quot;i18n.js_i18n&quot; config setting instead"/>
      <param type="object" variable="$bool">
        <type full="bool" namespace="" name="bool"/>
      </param>
    </docblock>
    <parameter name="bool" byreference="false" type="{unknown}"/>
  </method>
  <method name="get_js_i18n" start="152" end="155" abstract="false" final="false" static="true" visibility="public">
    <docblock>
      <description/>
      <deprecated value="3.2 Use the &quot;i18n.js_i18n&quot; config setting instead"/>
      <return type="object">
        <type full="bool" namespace="" name="bool"/>
      </return>
    </docblock>
  </method>
  <method name="set_date_format" start="161" end="164" abstract="false" final="false" static="true" visibility="public">
    <docblock>
      <description/>
      <deprecated value="3.2 Use the &quot;i18n.date_format&quot; config setting instead"/>
      <param description="ISO date format" type="string"/>
    </docblock>
    <parameter name="format" byreference="false" type="{unknown}"/>
  </method>
  <method name="get_date_format" start="169" end="173" abstract="false" final="false" static="true" visibility="public">
    <docblock>
      <description/>
      <return description="ISO date format" type="string"/>
    </docblock>
  </method>
  <method name="set_time_format" start="179" end="182" abstract="false" final="false" static="true" visibility="public">
    <docblock>
      <description/>
      <deprecated value="3.2 Use the &quot;i18n.time_format&quot; config setting instead"/>
      <param description="ISO time format" type="string"/>
    </docblock>
    <parameter name="format" byreference="false" type="{unknown}"/>
  </method>
  <method name="get_time_format" start="187" end="191" abstract="false" final="false" static="true" visibility="public">
    <docblock>
      <description/>
      <return description="ISO time format" type="string"/>
    </docblock>
  </method>
  <member name="all_locales" type="array" visibility="private" line="199">
    <docblock>
      <description compact="An exhaustive list of possible locales (code =&gt; language and country)"/>
      <config/>
      <var type="array"/>
    </docblock>
  </member>
  <member name="common_languages" type="array" visibility="private" line="686">
    <docblock>
      <description/>
      <config/>
      <var description="$common_languages A list of commonly used languages, in the form" type="array">langcode =&gt; array( EnglishName, NativeName)</var>
    </docblock>
  </member>
  <member name="common_locales" type="array" visibility="private" line="1036">
    <docblock>
      <description/>
      <config/>
      <var description="$common_locales" type="array">Sorted alphabtically by the common language name,
not the locale key.</var>
    </docblock>
  </member>
  <member name="tinymce_lang" type="array" visibility="private" line="1376">
    <docblock>
      <description/>
      <config/>
      <var type="array"/>
    </docblock>
  </member>
  <member name="likely_subtags" type="array" visibility="private" line="1548">
    <docblock>
      <description/>
      <config/>
      <var description="$likely_subtags Provides you &quot;likely locales&quot;" type="array">for a given "short" language code. This is a guess,
as we can't disambiguate from e.g. "en" to "en_US" - it
could also mean "en_UK".</var>
      <see value="http://www.unicode.org/cldr/data/charts/supplemental/likely_subtags.html"/>
    </docblock>
  </member>
  <method name="_t" start="2027" end="2128" abstract="false" final="false" static="true" visibility="public">
    <docblock>
      <description compact="This is the main translator function. Returns the string defined by $class and $entity according to the currently set locale."/>
      <param description="Entity that identifies the string. It must be in the form &quot;Namespace.Entity&quot; where" type="string" variable="$entity">Namespace will be usually the class name where this string is used and Entity identifies
                      the string inside the namespace.</param>
      <param description="The original string itself. In a usual call this is a mandatory parameter, but if you are" type="string" variable="$string">reusing a string which has already been "declared" (using another call to this function,
                      with the same class and entity), you can omit it.</param>
      <param description="(optional) If the string can be difficult to translate by any reason, you can help" type="string" variable="$context">translators with some more info using this param</param>
      <param description="injectionArray (optional) array of key value pairs that are used to replace corresponding" type="string">expressions in {curly brackets} in the $string. The injection array can also be
                             used as the their argument to the _t() function</param>
      <return description="The translated string, according to the currently set locale {@link i18n::set_locale()}" type="string"/>
    </docblock>
    <parameter name="entity" byreference="false" type="{unknown}"/>
    <parameter name="string" byreference="false" type="string" default="&quot;&quot;"/>
    <parameter name="context" byreference="false" type="string" default="&quot;&quot;"/>
    <parameter name="injection" byreference="false" type="string" default="&quot;&quot;"/>
    <inline>
      <comment value="fetch the injection array out of the parameters (if it is present)" line="2036"/>
      <comment value="_t($entity, $string = &quot;&quot;, $context (optional), $injectionArray (optional))" line="2039"/>
      <comment value="we have reached the injectionArray" line="2042"/>
      <comment value="get current locale (either default or user preference)" line="2047"/>
      <comment value="Only call getter if static isn't already defined (for performance reasons)" line="2051"/>
      <comment value="Fall back to default string argument" line="2055"/>
      <comment value="at this point, we need to ensure the language and locale are loaded" line="2061"/>
      <comment value="as include_by_locale() doesn't load a fallback." line="2062"/>
      <todo value="Remove reliance on global state, by refactoring into an i18nTranslatorManager" line="2064"/>
      <comment value="which is instanciated by core with a $clean instance variable." line="2065"/>
      <comment value="Return translation only if we found a match thats not the entity itself (Zend fallback)" line="2077"/>
      <comment value="inject the variables from injectionArray (if present)" line="2085"/>
      <comment value="Legacy mode: If no injection placeholders are found," line="2089"/>
      <comment value="replace sprintf placeholders in fixed order." line="2090"/>
      <comment value="Fail silently in case the translation is outdated" line="2091"/>
    </inline>
  </method>
  <method name="get_translators" start="2134" end="2154" abstract="false" final="false" static="true" visibility="public">
    <docblock>
      <description/>
      <return description="Array of priority keys to instances of Zend_Translate, mapped by name." type="array"/>
    </docblock>
  </method>
  <method name="get_translator" start="2160" end="2165" abstract="false" final="false" static="true" visibility="public">
    <docblock>
      <description/>
      <param type="object">
        <type full="String" namespace="" name="String"/>
      </param>
      <return type="object">
        <type full="Zend_Translate" namespace="" name="Zend_Translate"/>
      </return>
    </docblock>
    <parameter name="name" byreference="false" type="{unknown}"/>
  </method>
  <method name="register_translator" start="2172" end="2187" abstract="false" final="false" static="true" visibility="public">
    <docblock>
      <description/>
      <param description="Needs to implement {@link i18nTranslateAdapterInterface}" type="object">
        <type full="Zend_Translate" namespace="" name="Zend_Translate"/>
      </param>
      <param description="If left blank will override the default translator." type="object">
        <type full="String" namespace="" name="String"/>
      </param>
      <param type="object">
        <type full="Int" namespace="" name="Int"/>
      </param>
    </docblock>
    <parameter name="translator" byreference="false" type="{unknown}"/>
    <parameter name="name" byreference="false" type="{unknown}"/>
    <parameter name="priority" byreference="false" type="integer" default="10"/>
    <inline>
      <comment value="Ensure it's not there. If it is, we're replacing it. It may exist in a different priority." line="2175"/>
      <comment value="Add our new translator" line="2178"/>
      <comment value="Resort array, ensuring highest priority comes first" line="2182"/>
    </inline>
  </method>
  <method name="unregister_translator" start="2192" end="2196" abstract="false" final="false" static="true" visibility="public">
    <docblock>
      <description/>
      <param type="object">
        <type full="String" namespace="" name="String"/>
      </param>
    </docblock>
    <parameter name="name" byreference="false" type="{unknown}"/>
  </method>
  <method name="get_common_languages" start="2204" end="2210" abstract="false" final="false" static="true" visibility="public">
    <docblock>
      <description compact="Get a list of commonly used languages"/>
      <param description="Use native names for languages instead of English ones" type="boolean" variable="$native"/>
      <return description="of languages in the form 'code' =&gt; 'name'" type="object">
        <type full="list" namespace="" name="list"/>
      </return>
    </docblock>
    <parameter name="native" byreference="false" type="{unknown}" default="false"/>
  </method>
  <method name="get_common_locales" start="2218" end="2224" abstract="false" final="false" static="true" visibility="public">
    <docblock>
      <description compact="Get a list of commonly used locales"/>
      <param description="Use native names for locale instead of English ones" type="boolean" variable="$native"/>
      <return description="of languages in the form 'code' =&gt; 'name'" type="object">
        <type full="list" namespace="" name="list"/>
      </return>
    </docblock>
    <parameter name="native" byreference="false" type="{unknown}" default="false"/>
  </method>
  <method name="get_locale_list" start="2231" end="2234" abstract="false" final="false" static="true" visibility="public">
    <docblock>
      <description compact="Get a list of locales (code =&gt; language and country)"/>
      <return description="of languages in the form 'code' =&gt; 'name'" type="object">
        <type full="list" namespace="" name="list"/>
      </return>
    </docblock>
  </method>
  <method name="get_closest_translation" start="2242" end="2252" abstract="false" final="false" static="true" visibility="public">
    <docblock>
      <description compact="Matches a given locale with the closest translation available in the system"/>
      <param description="locale code" type="string" variable="$locale"/>
      <return description="Locale of closest available translation, if available" type="string"/>
    </docblock>
    <parameter name="locale" byreference="false" type="{unknown}"/>
    <inline>
      <comment value="Check if exact match" line="2244"/>
      <comment value="Fallback to best locale for common language" line="2248"/>
    </inline>
  </method>
  <method name="get_existing_translations" start="2261" end="2292" abstract="false" final="false" static="true" visibility="public">
    <docblock>
      <description compact="Searches the root-directory for module-directories (identified by having a _config.php on their first directory-level).">Finds locales by filename convention ("&lt;locale&gt;.&lt;extension&gt;", e.g. "de_AT.yml").</description>
      <return type="array"/>
    </docblock>
    <inline>
      <todo value="Inspect themes" line="2264"/>
      <comment value="Normalize locale to include likely region tag, avoid repetition in locale labels" line="2276"/>
      <todo value="Replace with CLDR list of actually available languages/regions" line="2277"/>
      <comment value="Only allow explicitly registered locales, otherwise we'll get into trouble" line="2278"/>
      <comment value="if the locale doesn't exist in Zend's CLDR data" line="2279"/>
      <comment value="sort by title (not locale)" line="2288"/>
    </inline>
  </method>
  <method name="get_language_name" start="2303" end="2310" abstract="false" final="false" static="true" visibility="public">
    <docblock>
      <description compact="Get a name from a language code (two characters, e.g. &quot;en&quot;)."/>
      <see value="get_locale_name()"/>
      <param description="Language code" type="mixed" variable="$code"/>
      <param description="If true, the native name will be returned" type="boolean" variable="$native"/>
      <return description="of the language" type="object">
        <type full="Name" namespace="" name="Name"/>
      </return>
    </docblock>
    <parameter name="code" byreference="false" type="{unknown}"/>
    <parameter name="native" byreference="false" type="{unknown}" default="false"/>
  </method>
  <method name="get_locale_name" start="2320" end="2323" abstract="false" final="false" static="true" visibility="public">
    <docblock>
      <description compact="Get a name from a locale code (xx_YY)."/>
      <see value="get_language_name()"/>
      <param description="locale code" type="mixed" variable="$code"/>
      <return description="of the locale" type="object">
        <type full="Name" namespace="" name="Name"/>
      </return>
    </docblock>
    <parameter name="code" byreference="false" type="{unknown}"/>
  </method>
  <method name="get_language_code" start="2331" end="2334" abstract="false" final="false" static="true" visibility="public">
    <docblock>
      <description compact="Get a code from an English language name"/>
      <param description="Name of the language" type="mixed" variable="$name"/>
      <return description="code (if the name is not found, it'll return the passed name)" type="object">
        <type full="Language" namespace="" name="Language"/>
      </return>
    </docblock>
    <parameter name="name" byreference="false" type="{unknown}"/>
  </method>
  <method name="get_tinymce_lang" start="2341" end="2348" abstract="false" final="false" static="true" visibility="public">
    <docblock>
      <description compact="Get the current tinyMCE language"/>
      <return type="object">
        <type full="Language" namespace="" name="Language"/>
      </return>
    </docblock>
  </method>
  <method name="get_translatable_modules" start="2357" end="2374" abstract="false" final="false" static="true" visibility="public">
    <docblock>
      <description compact="Searches the root-directory for module-directories (identified by having a _config.php on their first directory-level and a language-file with the default locale in the /lang-subdirectory)."/>
      <return type="array"/>
    </docblock>
  </method>
  <method name="get_lang_from_locale" start="2383" end="2385" abstract="false" final="false" static="true" visibility="public">
    <docblock>
      <description compact="Returns the &quot;short&quot; language name from a locale, e.g. &quot;en_US&quot; would return &quot;en&quot;."/>
      <param description="E.g. &quot;en_US&quot;" type="string" variable="$locale"/>
      <return description="Short language code, e.g. &quot;en&quot;" type="string"/>
    </docblock>
    <parameter name="locale" byreference="false" type="{unknown}"/>
  </method>
  <method name="get_locale_from_lang" start="2398" end="2407" abstract="false" final="false" static="true" visibility="public">
    <docblock>
      <description compact="Provides you &quot;likely locales&quot; for a given &quot;short&quot; language code. This is a guess, as we can't disambiguate from e.g. &quot;en&quot; to &quot;en_US&quot; - it could also mean &quot;en_UK&quot;. Based on the Unicode CLDR project."/>
      <see value="http://www.unicode.org/cldr/data/charts/supplemental/likely_subtags.html"/>
      <param description="Short language code, e.g. &quot;en&quot;" type="string" variable="$lang"/>
      <return description="Long locale, e.g. &quot;en_US&quot;" type="string"/>
    </docblock>
    <parameter name="lang" byreference="false" type="{unknown}"/>
  </method>
  <method name="convert_rfc1766" start="2419" end="2421" abstract="false" final="false" static="true" visibility="public">
    <docblock>
      <description compact="Gets a RFC 1766 compatible language code, e.g. &quot;en-US&quot;."/>
      <see value="http://www.ietf.org/rfc/rfc1766.txt"/>
      <see value="http://tools.ietf.org/html/rfc2616#section-3.10"/>
      <param type="string" variable="$locale"/>
      <return type="string"/>
    </docblock>
    <parameter name="locale" byreference="false" type="{unknown}"/>
  </method>
  <method name="get_owner_module" start="2429" end="2442" abstract="false" final="false" static="true" visibility="public">
    <docblock>
      <description compact="Given a PHP class name, finds the module where it's located."/>
      <param type="string" variable="$name"/>
      <return type="string"/>
    </docblock>
    <parameter name="name" byreference="false" type="{unknown}"/>
  </method>
  <method name="validate_locale" start="2458" end="2462" abstract="false" final="false" static="true" visibility="public">
    <docblock>
      <description compact="Validates a &quot;long&quot; locale format (e.g. &quot;en_US&quot;) by checking it against {@link $all_locales}.">To add a locale to <link xmlns="http://xml.phpdox.net/src" value="$all_locales"/>, use the following example
in your mysite/_config.php:
&lt;code&gt;
i18n::$allowed_locales['xx_XX'] = '&lt;Language name&gt;';
&lt;/code&gt;
Note: Does not check for <link xmlns="http://xml.phpdox.net/src" value="$allowed_locales"/>.
</description>
      <return type="boolean"/>
    </docblock>
    <parameter name="locale" byreference="false" type="{unknown}"/>
    <inline>
      <comment value="Convert en-US to en_US" line="2459"/>
    </inline>
  </method>
  <method name="set_locale" start="2475" end="2477" abstract="false" final="false" static="true" visibility="public">
    <docblock>
      <description compact="Set the current locale, used as the default for any localized classes, such as {@link FormField} or {@link DBField} instances. Locales can also be persisted in {@link Member-&gt;Locale}, for example in the {@link CMSMain} interface the Member locale overrules the global locale value set here."/>
      <param description="Locale to be set. See" type="string" variable="$locale">http://unicode.org/cldr/data/diff/supplemental/languages_and_territories.html for a list
                      of possible locales.</param>
    </docblock>
    <parameter name="locale" byreference="false" type="{unknown}"/>
  </method>
  <method name="get_locale" start="2485" end="2487" abstract="false" final="false" static="true" visibility="public">
    <docblock>
      <description compact="Get the current locale.">Used by <link xmlns="http://xml.phpdox.net/src" value="Member::populateDefaults()"/></description>
      <return description="Current locale in the system" type="string"/>
    </docblock>
  </method>
  <method name="default_locale" start="2501" end="2503" abstract="false" final="false" static="true" visibility="public">
    <docblock>
      <description compact="This is the &quot;fallback locale&quot;, in case resources with the &quot;current locale&quot; (set through {@link set_locale()}) can't be found.">If you just want to globally read/write a different locale (e.g. in a CMS interface),
please use <link xmlns="http://xml.phpdox.net/src" value="get_locale()"/> and <link xmlns="http://xml.phpdox.net/src" value="set_locale()"/> instead.
For example, <link xmlns="http://xml.phpdox.net/src" value="Requirements::add_i18n_javascript()"/> and <link xmlns="http://xml.phpdox.net/src" value="i18n::include_by_class()"/>use this "fallback locale" value to include fallback language files.
</description>
      <return type="object">
        <type full="String" namespace="" name="String"/>
      </return>
    </docblock>
  </method>
  <method name="set_default_locale" start="2511" end="2513" abstract="false" final="false" static="true" visibility="public">
    <docblock>
      <description compact="See {@link default_locale()} for usage."/>
      <param type="object" variable="$locale">
        <type full="String" namespace="" name="String"/>
      </param>
    </docblock>
    <parameter name="locale" byreference="false" type="{unknown}"/>
  </method>
  <method name="get_script_direction" start="2522" end="2532" abstract="false" final="false" static="true" visibility="public">
    <docblock>
      <description compact="Returns the script direction in format compatible with the HTML &quot;dir&quot; attribute."/>
      <see value="http://www.w3.org/International/tutorials/bidi-xhtml/"/>
      <param description="Optional locale incl. region (underscored)" type="object" variable="$locale">
        <type full="String" namespace="" name="String"/>
      </param>
      <return description="&quot;rtl&quot; or &quot;ltr&quot;" type="object">
        <type full="String" namespace="" name="String"/>
      </return>
    </docblock>
    <parameter name="locale" byreference="false" type="{unknown}" default="null"/>
  </method>
  <method name="include_by_locale" start="2540" end="2621" abstract="false" final="false" static="true" visibility="public">
    <docblock>
      <description compact="Includes all available language files for a certain defined locale."/>
      <param description="All resources from any module in locale $locale will be loaded" type="string" variable="$locale"/>
      <param description="Clean old caches?" type="object" variable="$clean">
        <type full="Boolean" namespace="" name="Boolean"/>
      </param>
    </docblock>
    <parameter name="locale" byreference="false" type="{unknown}"/>
    <parameter name="clean" byreference="false" type="{unknown}" default="false"/>
    <inline>
      <comment value="Get list of module =&gt; path pairs, and then just the names" line="2545"/>
      <comment value="Remove the &quot;project&quot; module from the list - we'll add it back specially later if needed" line="2549"/>
      <comment value="Get the order from the config syste," line="2553"/>
      <comment value="Find all modules that don't have their order specified by the config system" line="2556"/>
      <comment value="If the placeholder &quot;other_modules&quot; exists in the order array, replace it by the unspecified modules" line="2559"/>
      <comment value="Put the project module back in at the begining if it wasn't specified by the config system" line="2564"/>
      <comment value="Loop in reverse order, meaning the translator with the highest priority goes first" line="2573"/>
      <comment value="Load translations from modules" line="2579"/>
      <comment value="Load translations from themes" line="2590"/>
      <todo value="Replace with theme listing once implemented in TemplateManifest" line="2591"/>
      <comment value="Add empty translations to ensure the locales are &quot;registered&quot; with isAvailable()," line="2609"/>
      <comment value="and the next invocation of include_by_locale() doesn't cause a new reparse." line="2610"/>
    </inline>
  </method>
  <method name="include_by_class" start="2630" end="2646" abstract="false" final="false" static="true" visibility="public">
    <docblock>
      <description compact="Given a class name (a &quot;locale namespace&quot;), will search for its module and, if available, will load the resources for the currently defined locale.">If not available, the original English resource will be loaded instead (to avoid blanks)</description>
      <param description="Resources for this class will be included, according to the set locale." type="string" variable="$class"/>
    </docblock>
    <parameter name="class" byreference="false" type="{unknown}"/>
  </method>
  <method name="get_template_global_variables" start="2648" end="2654" abstract="false" final="false" static="true" visibility="public"/>
  <parent full="Object" namespace="" name="Object">
    <member name="class" type="{unknown}" visibility="public" line="54">
      <docblock>
        <description/>
        <var description="the class name" type="string"/>
      </docblock>
    </member>
    <member name="extension_instances" type="array" visibility="protected" line="67">
      <docblock>
        <description/>
        <var description="all current extension instances." type="array"/>
      </docblock>
    </member>
    <member name="beforeExtendCallbacks" type="array" visibility="protected" line="75">
      <docblock>
        <description compact="List of callbacks to call prior to extensions having extend called on them, each grouped by methodName."/>
        <var type="object">
          <type full="array[callable]" namespace="" name="array[callable]"/>
        </var>
      </docblock>
    </member>
    <member name="afterExtendCallbacks" type="array" visibility="protected" line="98">
      <docblock>
        <description compact="List of callbacks to call after extensions having extend called on them, each grouped by methodName."/>
        <var type="object">
          <type full="array[callable]" namespace="" name="array[callable]"/>
        </var>
      </docblock>
    </member>
    <method name="config" start="60" end="62" abstract="false" final="false" static="true" visibility="public">
      <docblock>
        <description compact="Get a configuration accessor for this class. Short hand for Config::inst()-&gt;get($this-&gt;class, .....)."/>
        <return type="object">
          <type full="Config_ForClass|null" namespace="" name="Config_ForClass|null"/>
        </return>
      </docblock>
    </method>
    <method name="beforeExtending" start="85" end="90" abstract="false" final="false" static="false" visibility="protected">
      <docblock>
        <description compact="Allows user code to hook into Object::extend prior to control being delegated to extensions. Each callback will be reset once called."/>
        <param description="The name of the method to hook into" type="string" variable="$method"/>
        <param description="The callback to execute" type="object" variable="$callback">
          <type full="callable" namespace="" name="callable"/>
        </param>
      </docblock>
      <parameter name="method" byreference="false" type="{unknown}"/>
      <parameter name="callback" byreference="false" type="{unknown}"/>
    </method>
    <method name="afterExtending" start="108" end="113" abstract="false" final="false" static="false" visibility="protected">
      <docblock>
        <description compact="Allows user code to hook into Object::extend after control being delegated to extensions. Each callback will be reset once called."/>
        <param description="The name of the method to hook into" type="string" variable="$method"/>
        <param description="The callback to execute" type="object" variable="$callback">
          <type full="callable" namespace="" name="callable"/>
        </param>
      </docblock>
      <parameter name="method" byreference="false" type="{unknown}"/>
      <parameter name="callback" byreference="false" type="{unknown}"/>
    </method>
    <method name="create" start="132" end="143" abstract="false" final="false" static="true" visibility="public">
      <docblock>
        <description compact="An implementation of the factory method, allows you to create an instance of a class">This method first for strong class overloads (singletons &amp; DB interaction), then custom class overloads. If an
overload is found, an instance of this is returned rather than the original class. To overload a class, use
{@link Object::useCustomClass()}

This can be called in one of two ways - either calling via the class directly,
or calling on Object and passing the class name as the first parameter. The following
are equivalent:
   $list = DataList::create('SiteTree');
  $list = SiteTree::get();</description>
        <param description="the class name" type="string" variable="$class"/>
        <param description="... arguments to pass to the constructor" type="mixed" variable="$arguments"/>
        <return type="object">
          <type full="static" namespace="" name="static"/>
        </return>
      </docblock>
      <inline>
        <comment value="Class to create should be the calling class if not Object," line="135"/>
        <comment value="otherwise the first parameter" line="136"/>
      </inline>
    </method>
    <method name="create_from_string" start="169" end="188" abstract="false" final="false" static="true" visibility="public">
      <docblock>
        <description compact="Create an object from a string representation.  It treats it as a PHP constructor without the 'new' keyword.  It also manages to construct the object without the use of eval().">Construction itself is done with Object::create(), so that Object::useCustomClass() calls
are respected.

`Object::create_from_string("Versioned('Stage','Live')")` will return the result of
`Versioned::create('Stage', 'Live);`

It is designed for simple, clonable objects.  The first time this method is called for a given
string it is cached, and clones of that object are returned.

If you pass the $firstArg argument, this will be prepended to the constructor arguments. It's
impossible to pass null as the firstArg argument.

`Object::create_from_string("Varchar(50)", "MyField")` will return the result of
`Vachar::create('MyField', '50');`

Arguments are always strings, although this is a quirk of the current implementation rather
than something that can be relied upon.</description>
      </docblock>
      <parameter name="classSpec" byreference="false" type="{unknown}"/>
      <parameter name="firstArg" byreference="false" type="{unknown}" default="null"/>
      <inline>
        <comment value="an $extension value can contain parameters as a string," line="171"/>
        <comment value="e.g. &quot;Versioned('Stage','Live')&quot;" line="172"/>
      </inline>
    </method>
    <method name="parse_class_spec" start="194" end="274" abstract="false" final="false" static="true" visibility="public">
      <docblock>
        <description compact="Parses a class-spec, such as &quot;Versioned('Stage','Live')&quot;, as passed to create_from_string().">Returns a 2-elemnent array, with classname and arguments</description>
      </docblock>
      <parameter name="classSpec" byreference="false" type="{unknown}"/>
      <inline>
        <comment value="Keep track of the current bucket that we're putting data into" line="200"/>
        <comment value="Get the class naem" line="207"/>
      </inline>
    </method>
    <method name="strong_create" start="284" end="293" abstract="false" final="false" static="true" visibility="public">
      <docblock>
        <description compact="Similar to {@link Object::create()}, except that classes are only overloaded if you set the $strong parameter to TRUE when using {@link Object::useCustomClass()}"/>
        <param description="the class name" type="string" variable="$class"/>
        <param description="... arguments to pass to the constructor" type="mixed" variable="$arguments"/>
        <return type="object">
          <type full="static" namespace="" name="static"/>
        </return>
      </docblock>
    </method>
    <method name="useCustomClass" start="304" end="310" abstract="false" final="false" static="true" visibility="public">
      <docblock>
        <description compact="This class allows you to overload classes with other classes when they are constructed using the factory method {@link Object::create()}"/>
        <param description="the class to replace" type="string" variable="$oldClass"/>
        <param description="the class to replace it with" type="string" variable="$newClass"/>
        <param description="allows you to enforce a certain class replacement under all circumstances. This is used in" type="object" variable="$strong">singletons and DB interaction classes<type full="bool" namespace="" name="bool"/></param>
      </docblock>
      <parameter name="oldClass" byreference="false" type="{unknown}"/>
      <parameter name="newClass" byreference="false" type="{unknown}"/>
      <parameter name="strong" byreference="false" type="{unknown}" default="false"/>
    </method>
    <method name="getCustomClass" start="318" end="326" abstract="false" final="false" static="true" visibility="public">
      <docblock>
        <description compact="If a class has been overloaded, get the class name it has been overloaded with - otherwise return the class name"/>
        <param description="the class to check" type="string" variable="$class"/>
        <return description="the class that would be created if you called {@link Object::create()} with the class" type="string"/>
      </docblock>
      <parameter name="class" byreference="false" type="{unknown}"/>
    </method>
    <method name="static_lookup" start="339" end="374" abstract="false" final="false" static="true" visibility="public">
      <docblock>
        <description compact="Get the value of a static property of a class, even in that property is declared protected (but not private), without any inheritance, merging or parent lookup if it doesn't exist on the given class."/>
        <static/>
        <param description="The class to get the static from" variable="$class" type="object">
          <type full="-" namespace="" name="-"/>
        </param>
        <param description="The property to get from the class" variable="$name" type="object">
          <type full="-" namespace="" name="-"/>
        </param>
        <param description="- The value to return if property doesn't exist on class" type="object" variable="$default">
          <type full="null" namespace="" name="null"/>
        </param>
        <return description="- The value of the static property $name on class $class, or $default if that property is not" type="object">defined<type full="any" namespace="" name="any"/></return>
      </docblock>
      <parameter name="class" byreference="false" type="{unknown}"/>
      <parameter name="name" byreference="false" type="{unknown}"/>
      <parameter name="default" byreference="false" type="{unknown}" default="null"/>
    </method>
    <method name="get_static" start="391" end="394" abstract="false" final="false" static="true" visibility="public">
      <docblock>
        <description compact="Get a static variable, taking into account SS's inbuild static caches and pseudo-statics">This method first checks for any extra values added by <link xmlns="http://xml.phpdox.net/src" value="Object::add_static_var()"/>, and attemps to traverse
up the extra static var chain until it reaches the top, or it reaches a replacement static.
If any extra values are discovered, they are then merged with the default PHP static values, or in some cases
completely replace the default PHP static when you set $replace = true, and do not define extra data on any
child classes
</description>
        <param type="string" variable="$class"/>
        <param description="the property name" type="string" variable="$name"/>
        <param description="if set to TRUE, force a regeneration of the static cache" type="object" variable="$uncached">
          <type full="bool" namespace="" name="bool"/>
        </param>
        <return type="mixed"/>
      </docblock>
      <parameter name="class" byreference="false" type="{unknown}"/>
      <parameter name="name" byreference="false" type="{unknown}"/>
      <parameter name="uncached" byreference="false" type="{unknown}" default="false"/>
    </method>
    <method name="set_static" start="403" end="406" abstract="false" final="false" static="true" visibility="public">
      <docblock>
        <description compact="Set a static variable"/>
        <param type="string" variable="$class"/>
        <param description="the property name to set" type="string" variable="$name"/>
        <param type="mixed" variable="$value"/>
      </docblock>
      <parameter name="class" byreference="false" type="{unknown}"/>
      <parameter name="name" byreference="false" type="{unknown}"/>
      <parameter name="value" byreference="false" type="{unknown}"/>
    </method>
    <method name="uninherited_static" start="415" end="418" abstract="false" final="false" static="true" visibility="public">
      <docblock>
        <description compact="Get an uninherited static variable - a variable that is explicity set in this class, and not in the parent class."/>
        <param type="string" variable="$class"/>
        <param type="string" variable="$name"/>
        <return type="mixed"/>
      </docblock>
      <parameter name="class" byreference="false" type="{unknown}"/>
      <parameter name="name" byreference="false" type="{unknown}"/>
      <parameter name="uncached" byreference="false" type="{unknown}" default="false"/>
    </method>
    <method name="combined_static" start="430" end="435" abstract="false" final="false" static="true" visibility="public">
      <docblock>
        <description compact="Traverse down a class ancestry and attempt to merge all the uninherited static values for a particular static into a single variable"/>
        <param type="string" variable="$class"/>
        <param description="the static name" type="string" variable="$name"/>
        <param description="an optional parent class name to begin merging statics down from, rather than traversing" type="string" variable="$ceiling">the entire hierarchy</param>
        <return type="mixed"/>
      </docblock>
      <parameter name="class" byreference="false" type="{unknown}"/>
      <parameter name="name" byreference="false" type="{unknown}"/>
      <parameter name="ceiling" byreference="false" type="{unknown}" default="false"/>
    </method>
    <method name="addStaticVars" start="444" end="447" abstract="false" final="false" static="true" visibility="public">
      <docblock>
        <description compact="Merge in a set of additional static variables"/>
        <param type="string" variable="$class"/>
        <param description="in a [property name] =&gt; [value] format" type="array" variable="$properties"/>
        <param description="replace existing static vars" type="object" variable="$replace">
          <type full="bool" namespace="" name="bool"/>
        </param>
      </docblock>
      <parameter name="class" byreference="false" type="{unknown}"/>
      <parameter name="properties" byreference="false" type="{unknown}"/>
      <parameter name="replace" byreference="false" type="{unknown}" default="false"/>
    </method>
    <method name="add_static_var" start="465" end="470" abstract="false" final="false" static="true" visibility="public">
      <docblock>
        <description compact="Add a static variable without replacing it completely if possible, but merging in with both existing PHP statics and existing psuedo-statics. Uses PHP's array_merge_recursive() with if the $replace argument is FALSE.">Documentation from http://php.net/array_merge_recursive:
If the input arrays have the same string keys, then the values for these keys are merged together
into an array, and this is done recursively, so that if one of the values is an array itself,
the function will merge it with a corresponding entry in another array too.
If, however, the arrays have the same numeric key, the later value will not overwrite the original value,
but will be appended.</description>
        <param type="string" variable="$class"/>
        <param description="the static name" type="string" variable="$name"/>
        <param type="mixed" variable="$value"/>
        <param description="completely replace existing static values" type="object" variable="$replace">
          <type full="bool" namespace="" name="bool"/>
        </param>
      </docblock>
      <parameter name="class" byreference="false" type="{unknown}"/>
      <parameter name="name" byreference="false" type="{unknown}"/>
      <parameter name="value" byreference="false" type="{unknown}"/>
      <parameter name="replace" byreference="false" type="{unknown}" default="false"/>
    </method>
    <method name="has_extension" start="481" end="503" abstract="false" final="false" static="true" visibility="public">
      <docblock>
        <description compact="Return TRUE if a class has a specified extension.">This supports backwards-compatible format (static Object::has_extension($requiredExtension))
and new format ($object-&gt;has_extension($class, $requiredExtension))</description>
        <param description="if 1 argument supplied, the class name of the extension to" type="string" variable="$classOrExtension">check for; if 2 supplied, the class name to test</param>
        <param description="used only if 2 arguments supplied" type="string" variable="$requiredExtension"/>
        <param description="if the extension has to match the required extension and not be a subclass" type="boolean" variable="$strict"/>
      </docblock>
      <parameter name="classOrExtension" byreference="false" type="{unknown}"/>
      <parameter name="requiredExtension" byreference="false" type="{unknown}" default="null"/>
      <parameter name="strict" byreference="false" type="{unknown}" default="false"/>
      <inline>
        <comment value="BC support" line="482"/>
      </inline>
    </method>
    <method name="add_extension" start="523" end="565" abstract="false" final="false" static="true" visibility="public">
      <docblock>
        <description compact="Add an extension to a specific class.">The preferred method for adding extensions is through YAML config,
since it avoids autoloading the class, and is easier to override in
more specific configurations.
As an alternative, extensions can be added to a specific class
directly in the <link xmlns="http://xml.phpdox.net/src" value="Object::$extensions"/> array.
See <link xmlns="http://xml.phpdox.net/src" value="SiteTree::$extensions"/> for examples.
Keep in mind that the extension will only be applied to new
instances, not existing ones (including all instances created through <link xmlns="http://xml.phpdox.net/src" value="singleton()"/>).
</description>
        <see value="http://doc.silverstripe.org/framework/en/trunk/reference/dataextension"/>
        <param description="Class that should be extended - has to be a subclass of {@link Object}" type="string" variable="$class"/>
        <param description="Subclass of {@link Extension} with optional parameters" type="string" variable="$extension">as a string, e.g. "Versioned" or "Translatable('Param')"</param>
      </docblock>
      <parameter name="classOrExtension" byreference="false" type="{unknown}"/>
      <parameter name="extension" byreference="false" type="{unknown}" default="null"/>
      <inline>
        <comment value="unset some caches" line="545"/>
        <comment value="load statics now for DataObject classes" line="559"/>
      </inline>
    </method>
    <method name="remove_extension" start="584" end="614" abstract="false" final="false" static="true" visibility="public">
      <docblock>
        <description compact="Remove an extension from a class.">Keep in mind that this won't revert any datamodel additions
of the extension at runtime, unless its used before the
schema building kicks in (in your _config.php).
Doesn't remove the extension from any <link xmlns="http://xml.phpdox.net/src" value="Object"/>instances which are already created, but will have an
effect on new extensions.
Clears any previously created singletons through <link xmlns="http://xml.phpdox.net/src" value="singleton()"/>to avoid side-effects from stale extension information.
</description>
        <todo value="Add support for removing extensions with parameters"/>
        <param description="Classname of an {@link Extension} subclass, without parameters" type="string" variable="$extension"/>
      </docblock>
      <parameter name="extension" byreference="false" type="{unknown}"/>
      <inline>
        <comment value="remove any instances of the extension with parameters" line="589"/>
        <comment value="extensions with parameters will be stored in config as" line="594"/>
        <comment value="ExtensionName(&quot;Param&quot;)." line="595"/>
        <comment value="unset singletons to avoid side-effects" line="604"/>
        <comment value="unset some caches" line="607"/>
      </inline>
    </method>
    <method name="get_extensions" start="623" end="635" abstract="false" final="false" static="true" visibility="public">
      <docblock>
        <description/>
        <param type="string" variable="$class"/>
        <param description="Include the argument string in the return array," type="object" variable="$includeArgumentString">FALSE would return array("Versioned"), TRUE returns array("Versioned('Stage','Live')").<type full="bool" namespace="" name="bool"/></param>
        <return description="Numeric array of either {@link DataExtension} classnames," type="array">or eval'ed classname strings with constructor arguments.</return>
      </docblock>
      <parameter name="class" byreference="false" type="{unknown}"/>
      <parameter name="includeArgumentString" byreference="false" type="{unknown}" default="false"/>
    </method>
    <method name="get_extra_config_sources" start="641" end="678" abstract="false" final="false" static="true" visibility="public">
      <parameter name="class" byreference="false" type="{unknown}" default="null"/>
      <inline>
        <comment value="If this class is unextendable, NOP" line="644"/>
        <comment value="Get a list of extensions" line="650"/>
        <comment value="Build a list of all sources;" line="654"/>
      </inline>
    </method>
    <constructor name="__construct" start="680" end="699" abstract="false" final="false" static="false" visibility="public"/>
    <method name="__call" start="711" end="765" abstract="false" final="false" static="false" visibility="public">
      <docblock>
        <description compact="Attemps to locate and call a method dynamically added to a class at runtime if a default cannot be located">You can add extra methods to a class using <link xmlns="http://xml.phpdox.net/src" value="Extensions"/>, <link xmlns="http://xml.phpdox.net/src" value="Object::createMethod()"/> or
<link xmlns="http://xml.phpdox.net/src" value="Object::addWrapperMethod()"/></description>
        <param type="string" variable="$method"/>
        <param type="array" variable="$arguments"/>
        <return type="mixed"/>
      </docblock>
      <parameter name="method" byreference="false" type="{unknown}"/>
      <parameter name="arguments" byreference="false" type="{unknown}"/>
      <inline>
        <comment value="If the method cache was cleared by an an Object::add_extension() / Object::remove_extension()" line="712"/>
        <comment value="call, then we should rebuild it." line="713"/>
      </inline>
    </method>
    <method name="hasMethod" start="778" end="780" abstract="false" final="false" static="false" visibility="public">
      <docblock>
        <description compact="Return TRUE if a method exists on this object">This should be used rather than PHP's inbuild method_exists() as it takes into account methods added via
extensions</description>
        <param type="string" variable="$method"/>
        <return type="object">
          <type full="bool" namespace="" name="bool"/>
        </return>
      </docblock>
      <parameter name="method" byreference="false" type="{unknown}"/>
    </method>
    <method name="allMethodNames" start="788" end="798" abstract="false" final="false" static="false" visibility="public">
      <docblock>
        <description compact="Return the names of all the methods available on this object"/>
        <param description="include methods added dynamically at runtime" type="object" variable="$custom">
          <type full="bool" namespace="" name="bool"/>
        </param>
        <return type="array"/>
      </docblock>
      <parameter name="custom" byreference="false" type="{unknown}" default="false"/>
    </method>
    <method name="defineMethods" start="807" end="821" abstract="false" final="false" static="false" visibility="protected">
      <docblock>
        <description compact="Adds any methods from {@link Extension} instances attached to this object.">All these methods can then be called directly on the instance (transparently
mapped through <link xmlns="http://xml.phpdox.net/src" value="__call()"/>), or called explicitly through <link xmlns="http://xml.phpdox.net/src" value="extend()"/>.
</description>
        <uses value="addMethodsFrom()"/>
      </docblock>
    </method>
    <method name="addMethodsFrom" start="829" end="864" abstract="false" final="false" static="false" visibility="protected">
      <docblock>
        <description compact="Add all the methods from an object property (which is an {@link Extension}) to this object."/>
        <param description="the property name" type="string" variable="$property"/>
        <param description="an index to use if the property is an array" type="object" variable="$index">
          <type full="string|int" namespace="" name="string|int"/>
        </param>
      </docblock>
      <parameter name="property" byreference="false" type="{unknown}"/>
      <parameter name="index" byreference="false" type="{unknown}" default="null"/>
    </method>
    <method name="addWrapperMethod" start="873" end="878" abstract="false" final="false" static="false" visibility="protected">
      <docblock>
        <description compact="Add a wrapper method - a method which points to another method with a different name. For example, Thumbnail(x) can be wrapped to generateThumbnail(x)"/>
        <param description="the method name to wrap" type="string" variable="$method"/>
        <param description="the method name to wrap to" type="string" variable="$wrap"/>
      </docblock>
      <parameter name="method" byreference="false" type="{unknown}"/>
      <parameter name="wrap" byreference="false" type="{unknown}"/>
    </method>
    <method name="createMethod" start="888" end="892" abstract="false" final="false" static="false" visibility="protected">
      <docblock>
        <description compact="Add an extra method using raw PHP code passed as a string"/>
        <param description="the method name" type="string" variable="$method"/>
        <param description="the PHP code - arguments will be in an array called $args, while you can access this object" type="string" variable="$code">by using $obj. Note that you cannot call protected methods, as the method is actually an external
       function</param>
      </docblock>
      <parameter name="method" byreference="false" type="{unknown}"/>
      <parameter name="code" byreference="false" type="{unknown}"/>
    </method>
    <method name="stat" start="899" end="901" abstract="false" final="false" static="false" visibility="public">
      <docblock>
        <description/>
        <see value="Object::get_static()"/>
      </docblock>
      <parameter name="name" byreference="false" type="{unknown}"/>
      <parameter name="uncached" byreference="false" type="{unknown}" default="false"/>
    </method>
    <method name="set_stat" start="906" end="908" abstract="false" final="false" static="false" visibility="public">
      <docblock>
        <description/>
        <see value="Object::set_static()"/>
      </docblock>
      <parameter name="name" byreference="false" type="{unknown}"/>
      <parameter name="value" byreference="false" type="{unknown}"/>
    </method>
    <method name="uninherited" start="913" end="915" abstract="false" final="false" static="false" visibility="public">
      <docblock>
        <description/>
        <see value="Object::uninherited_static()"/>
      </docblock>
      <parameter name="name" byreference="false" type="{unknown}"/>
    </method>
    <method name="exists" start="927" end="929" abstract="false" final="false" static="false" visibility="public">
      <docblock>
        <description compact="Return true if this object &quot;exists&quot; i.e. has a sensible value">This method should be overriden in subclasses to provide more context about the classes state. For example, a
{@link DataObject} class could return false when it is deleted from the database</description>
        <return type="object">
          <type full="bool" namespace="" name="bool"/>
        </return>
      </docblock>
    </method>
    <method name="parentClass" start="934" end="936" abstract="false" final="false" static="false" visibility="public">
      <docblock>
        <description/>
        <return description="this classes parent class" type="string"/>
      </docblock>
    </method>
    <method name="is_a" start="944" end="946" abstract="false" final="false" static="false" visibility="public">
      <docblock>
        <description compact="Check if this class is an instance of a specific class, or has that class as one of its parents"/>
        <param type="string" variable="$class"/>
        <return type="object">
          <type full="bool" namespace="" name="bool"/>
        </return>
      </docblock>
      <parameter name="class" byreference="false" type="{unknown}"/>
    </method>
    <method name="__toString" start="951" end="953" abstract="false" final="false" static="false" visibility="public">
      <docblock>
        <description/>
        <return description="the class name" type="string"/>
      </docblock>
    </method>
    <method name="invokeWithExtensions" start="966" end="971" abstract="false" final="false" static="false" visibility="public">
      <docblock>
        <description compact="Calls a method if available on both this object and all applied {@link Extensions}, and then attempts to merge all results into an array"/>
        <param description="the method name to call" type="string" variable="$method"/>
        <param description="a single argument to pass" type="mixed" variable="$argument"/>
        <return type="mixed"/>
        <todo value="integrate inheritance rules"/>
      </docblock>
      <parameter name="method" byreference="false" type="{unknown}"/>
      <parameter name="argument" byreference="false" type="{unknown}" default="null"/>
    </method>
    <method name="extend" start="988" end="1017" abstract="false" final="false" static="false" visibility="public">
      <docblock>
        <description compact="Run the given function on all of this object's extensions. Note that this method originally returned void, so if you wanted to return results, you're hosed">Currently returns an array, with an index resulting every time the function is called. Only adds returns if
they're not NULL, to avoid bogus results from methods just defined on the parent extension. This is important for
permission-checks through extend, as they use min() to determine if any of the returns is FALSE. As min() doesn't
do type checking, an included NULL return would fail the permission checks.
The extension methods are defined during <link xmlns="http://xml.phpdox.net/src" value="__construct()"/> in <link xmlns="http://xml.phpdox.net/src" value="defineMethods()"/>.
</description>
        <param description="the name of the method to call on each extension" type="string" variable="$method"/>
        <param description="... up to 7 arguments to be passed to the method" type="mixed" variable="$a1"/>
        <return type="array"/>
      </docblock>
      <parameter name="method" byreference="false" type="{unknown}"/>
      <parameter name="a1" byreference="true" type="{unknown}" default="null"/>
      <parameter name="a2" byreference="true" type="{unknown}" default="null"/>
      <parameter name="a3" byreference="true" type="{unknown}" default="null"/>
      <parameter name="a4" byreference="true" type="{unknown}" default="null"/>
      <parameter name="a5" byreference="true" type="{unknown}" default="null"/>
      <parameter name="a6" byreference="true" type="{unknown}" default="null"/>
      <parameter name="a7" byreference="true" type="{unknown}" default="null"/>
    </method>
    <method name="getExtensionInstance" start="1027" end="1029" abstract="false" final="false" static="false" visibility="public">
      <docblock>
        <description compact="Get an extension instance attached to this object by name."/>
        <uses value="hasExtension()"/>
        <param type="string" variable="$extension"/>
        <return type="object">
          <type full="Extension" namespace="" name="Extension"/>
        </return>
      </docblock>
      <parameter name="extension" byreference="false" type="{unknown}"/>
    </method>
    <method name="hasExtension" start="1045" end="1047" abstract="false" final="false" static="false" visibility="public">
      <docblock>
        <description compact="Returns TRUE if this object instance has a specific extension applied in {@link $extension_instances}. Extension instances are initialized at constructor time, meaning if you use {@link add_extension()} afterwards, the added extension will just be added to new instances of the extended class. Use the static method {@link has_extension()} to check if a class (not an instance) has a specific extension.">Caution: Don't use singleton(&lt;class&gt;)-&gt;hasExtension() as it will
give you inconsistent results based on when the singleton was first
accessed.</description>
        <param description="Classname of an {@link Extension} subclass without parameters" type="string" variable="$extension"/>
        <return type="object">
          <type full="bool" namespace="" name="bool"/>
        </return>
      </docblock>
      <parameter name="extension" byreference="false" type="{unknown}"/>
    </method>
    <method name="getExtensionInstances" start="1056" end="1058" abstract="false" final="false" static="false" visibility="public">
      <docblock>
        <description compact="Get all extension instances for this specific object instance.">See <link xmlns="http://xml.phpdox.net/src" value="get_extensions()"/> to get all applied extension classes
for this class (not the instance).
</description>
        <return description="Map of {@link DataExtension} instances, keyed by classname." type="array"/>
      </docblock>
    </method>
    <method name="cacheToFile" start="1072" end="1092" abstract="false" final="false" static="false" visibility="public">
      <docblock>
        <description compact="Cache the results of an instance method in this object to a file, or if it is already cache return the cached results"/>
        <param description="the method name to cache" type="string" variable="$method"/>
        <param description="the cache lifetime in seconds" type="int" variable="$lifetime"/>
        <param description="custom cache ID to use" type="string" variable="$ID"/>
        <param description="an optional array of arguments" type="array" variable="$arguments"/>
        <return description="the cached data" type="mixed"/>
      </docblock>
      <parameter name="method" byreference="false" type="{unknown}"/>
      <parameter name="lifetime" byreference="false" type="integer" default="3600"/>
      <parameter name="ID" byreference="false" type="{unknown}" default="false"/>
      <parameter name="arguments" byreference="false" type="array"/>
    </method>
    <method name="clearCache" start="1097" end="1105" abstract="false" final="false" static="false" visibility="public">
      <docblock>
        <description compact="Clears the cache for the given cacheToFile call"/>
      </docblock>
      <parameter name="method" byreference="false" type="{unknown}"/>
      <parameter name="ID" byreference="false" type="{unknown}" default="false"/>
      <parameter name="arguments" byreference="false" type="array"/>
    </method>
    <method name="loadCache" start="1114" end="1122" abstract="false" final="false" static="false" visibility="protected">
      <docblock>
        <description compact="Loads a cache from the filesystem if a valid on is present and within the specified lifetime"/>
        <param description="the cache name" type="string" variable="$cache"/>
        <param description="the lifetime (in seconds) of the cache before it is invalid" type="int" variable="$lifetime"/>
        <return type="mixed"/>
      </docblock>
      <parameter name="cache" byreference="false" type="{unknown}"/>
      <parameter name="lifetime" byreference="false" type="integer" default="3600"/>
    </method>
    <method name="saveCache" start="1130" end="1132" abstract="false" final="false" static="false" visibility="protected">
      <docblock>
        <description compact="Save a piece of cached data to the file system"/>
        <param description="the cache name" type="string" variable="$cache"/>
        <param description="data to save (must be serializable)" type="mixed" variable="$data"/>
      </docblock>
      <parameter name="cache" byreference="false" type="{unknown}"/>
      <parameter name="data" byreference="false" type="{unknown}"/>
    </method>
    <method name="sanitiseCachename" start="1140" end="1142" abstract="false" final="false" static="false" visibility="protected">
      <docblock>
        <description compact="Strip a file name of special characters so it is suitable for use as a cache file name"/>
        <param type="string" variable="$name"/>
        <return description="the name with all special cahracters replaced with underscores" type="string"/>
      </docblock>
      <parameter name="name" byreference="false" type="{unknown}"/>
    </method>
  </parent>
  <interface full="TemplateGlobalProvider" namespace="" name="TemplateGlobalProvider">
    <method name="get_template_global_variables" start="33" end="33" abstract="false" final="false" static="true" visibility="public">
      <docblock>
        <description compact="Called by SSViewer to get a list of global variables to expose to the template, the static method to call on this class to get the value for those variables, and the class to use for casting the returned value for use in a template">If the method to call is not included for a particular template variable, a method named the same as the
template variable will be called

If the casting class is not specified for a particular template variable, ViewableData::$default_cast is used

The first letter of the template variable is case-insensitive. However the method name is always case sensitive.</description>
        <abstract/>
        <return description="Returns an array of items. Each key =&gt; value pair is one of three forms:" type="array">- template name (no key)
 - template name =&gt; method name
 - template name =&gt; array(), where the array can contain these key =&gt; value pairs
    - "method" =&gt; method name
    - "casting" =&gt; casting class to use (i.e., Varchar, HTMLText, etc)</return>
      </docblock>
    </method>
  </interface>
  <interface full="Flushable" namespace="" name="Flushable">
    <method name="flush" start="18" end="18" abstract="false" final="false" static="true" visibility="public">
      <docblock>
        <description compact="This function is triggered early in the request if the &quot;flush&quot; query parameter has been set. Each class that implements Flushable implements this function which looks after it's own specific flushing functionality."/>
        <see value="FlushRequestFilter"/>
      </docblock>
    </method>
  </interface>
</class>
