<?xml version="1.0" encoding="UTF-8"?>
<class xmlns="http://xml.phpdox.net/src" full="Rule" namespace="" name="Rule" abstract="false" final="false" start="463" end="759">
  <file path="/var/www/_modules/ecommerce_test/trunk/docs/en/phpdox/../../../framework/thirdparty/php-peg" file="Compiler.php" realpath="/var/www/_modules/ecommerce_test/trunk/framework/thirdparty/php-peg/Compiler.php" size="23171" time="2015-03-14T10:41:57+13:00" unixtime="1426282917" sha1="260402e4dfe5e7208559894377bc477612b2a4d0" relative="framework/thirdparty/php-peg/Compiler.php"/>
  <docblock>
    <description compact="Rule parsing and code generation">A rule is the basic unit of a PEG. This parses one rule, and generates a function that will match on a string</description>
    <author value="Hamish Friedlander"/>
  </docblock>
  <extends full="PHPWriter" namespace="" name="PHPWriter"/>
  <member name="rule_rx" type="string" default="'@&#10;&#9;(?&lt;name&gt; \w+)                         # The name of the rule&#10;&#9;( \s+ extends \s+ (?&lt;extends&gt;\w+) )?  # The extends word&#10;&#9;( \s* \( (?&lt;arguments&gt;.*) \) )?       # Any variable setters&#10;&#9;(&#10;&#9;&#9;\s*(?&lt;matchmark&gt;:) |               # Marks the matching rule start&#10;&#9;&#9;\s*(?&lt;replacemark&gt;;) |             # Marks the replacing rule start&#10;&#9;&#9;\s*$&#10;&#9;)&#10;&#9;(?&lt;rule&gt;[\s\S]*)&#10;&#9;@x'" visibility="public" line="465"/>
  <member name="argument_rx" type="string" default="'@&#10;&#9;( [^=]+ )    # Name&#10;&#9;=            # Seperator&#10;&#9;( [^=,]+ )   # Variable&#10;&#9;(,|$)&#10;&#9;@x'" visibility="public" line="477"/>
  <member name="replacement_rx" type="string" default="'@&#10;&#9;( ([^=]|=[^&gt;])+ )    # What to replace&#10;&#9;=&gt;                   # The replacement mark&#10;&#9;( [^,]+ )            # What to replace it with&#10;&#9;(,|$)&#10;&#9;@x'" visibility="public" line="484"/>
  <member name="function_rx" type="string" default="'@^\s+function\s+([^\s(]+)\s*(.*)@'" visibility="public" line="491"/>
  <member name="parser" type="{unknown}" visibility="protected" line="493"/>
  <member name="lines" type="{unknown}" visibility="protected" line="494"/>
  <member name="name" type="{unknown}" visibility="public" line="496"/>
  <member name="extends" type="{unknown}" visibility="public" line="497"/>
  <member name="mode" type="{unknown}" visibility="public" line="498"/>
  <member name="rule" type="{unknown}" visibility="public" line="499"/>
  <constructor name="__construct" start="501" end="574" abstract="false" final="false" static="false" visibility="public">
    <parameter name="parser" byreference="false" type="{unknown}"/>
    <parameter name="lines" byreference="false" type="{unknown}"/>
    <inline>
      <comment value="Find the first line (if any) that's an attached function definition. Can skip first line (unless this block is malformed)" line="505"/>
      <comment value="Then split into the two parts" line="510"/>
      <comment value="Parse out the spec" line="514"/>
      <comment value="Parse out the functions" line="560"/>
      <comment value="Handle function definitions" line="567"/>
    </inline>
  </constructor>
  <method name="parse_rule" start="577" end="590" abstract="false" final="false" static="false" visibility="public">
    <inline>
      <comment value="If this is a regex end-token, just mark it and return" line="580"/>
    </inline>
  </method>
  <member name="rx_rx" type="string" default="'{^/(&#10;&#9;&#9;((\\\\\\\\)*\\\\/) # Escaped \/, making sure to catch all the \\ first, so that we dont think \\/ is an escaped /&#10;&#9;&#9;|&#10;&#9;&#9;[^/]               # Anything except /&#10;&#9;)*/}xu'" visibility="public" line="592"/>
  <method name="tokenize" start="598" end="709" abstract="false" final="false" static="false" visibility="public">
    <parameter name="str" byreference="false" type="{unknown}"/>
    <parameter name="tokens" byreference="true" type="{unknown}"/>
    <parameter name="o" byreference="false" type="integer" default="0"/>
    <inline>
      <comment value="Absorb white-space" line="605"/>
    </inline>
  </method>
  <method name="compile" start="714" end="758" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="Generate the PHP code for a function to match against a string for this rule"/>
    </docblock>
    <parameter name="indent" byreference="false" type="{unknown}"/>
    <inline>
      <comment value="Build the typestack" line="717"/>
      <comment value="Build an array of additional arguments to add to result node (if any)" line="726"/>
      <comment value="print_r( $match ) ; return '' ;" line="756"/>
    </inline>
  </method>
  <parent full="PHPWriter" namespace="" name="PHPWriter">
    <member name="varid" type="integer" default="0" visibility="public" line="37"/>
    <method name="varid" start="39" end="41" abstract="false" final="false" static="false" visibility="public"/>
    <method name="function_name" start="43" end="49" abstract="false" final="false" static="false" visibility="public">
      <parameter name="str" byreference="false" type="{unknown}"/>
    </method>
    <method name="save" start="51" end="57" abstract="false" final="false" static="false" visibility="public">
      <parameter name="id" byreference="false" type="{unknown}"/>
    </method>
    <method name="restore" start="59" end="72" abstract="false" final="false" static="false" visibility="public">
      <parameter name="id" byreference="false" type="{unknown}"/>
      <parameter name="remove" byreference="false" type="{unknown}" default="FALSE"/>
    </method>
    <method name="match_fail_conditional" start="74" end="84" abstract="false" final="false" static="false" visibility="public">
      <parameter name="on" byreference="false" type="{unknown}"/>
      <parameter name="match" byreference="false" type="{unknown}" default="NULL"/>
      <parameter name="fail" byreference="false" type="{unknown}" default="NULL"/>
    </method>
    <method name="match_fail_block" start="86" end="105" abstract="false" final="false" static="false" visibility="public">
      <parameter name="code" byreference="false" type="{unknown}"/>
    </method>
  </parent>
</class>
