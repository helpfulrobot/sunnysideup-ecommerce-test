<?xml version="1.0" encoding="UTF-8"?>
<class xmlns="http://xml.phpdox.net/src" full="Product_ProductImageUploadField" namespace="" name="Product_ProductImageUploadField" abstract="false" final="false" start="25" end="166">
  <file path="/var/www/_modules/ecommerce_test/trunk/docs/en/phpdox/../../../ecommerce/code/forms/fields" file="Product_ProductImageUploadField.php" realpath="/var/www/_modules/ecommerce_test/trunk/ecommerce/code/forms/fields/Product_ProductImageUploadField.php" size="4701" time="2015-03-14T10:43:16+13:00" unixtime="1426282996" sha1="cca14dd23008931f73aa0bc6e7037cadbdaa8a19" relative="ecommerce/code/forms/fields/Product_ProductImageUploadField.php"/>
  <docblock>
    <description compact="This is a preset upload field for product images.">In the config you can set the default folder name for a certain image Field
using


MyClass:
  folder_name_for_images: "MyFolderName"


It is recommended that you also set the calling class manually as we expect this
to be faster

e.g.


    $fields-&gt;addFieldToTab('Root.Images', $uploadField = new Product_ProductImageUploadField('Image', _t('Product.IMAGE', 'Product Image')));
    $uploadField-&gt;setCallingClass("Product");</description>
  </docblock>
  <extends full="UploadField" namespace="" name="UploadField"/>
  <member name="callingClass" type="string" default="&quot;&quot;" visibility="protected" line="32">
    <docblock>
      <description/>
      <var type="object">
        <type full="String" namespace="" name="String"/>
      </var>
    </docblock>
  </member>
  <member name="ufConfig" type="array" visibility="protected" line="39">
    <docblock>
      <description/>
      <var description="Config for this field used in both, php and javascript" type="array">(will be merged into the config of the javascript file upload plugin).
See framework/_config/uploadfield.yml for configuration defaults and documentation.</var>
    </docblock>
  </member>
  <method name="setCallingClass" start="110" end="112" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="Must be a real class name."/>
      <param type="object" variable="$name">
        <type full="String" namespace="" name="String"/>
      </param>
    </docblock>
    <parameter name="name" byreference="false" type="{unknown}"/>
  </method>
  <constructor name="__construct" start="123" end="133" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="Construct a new UploadField instance"/>
      <param description="The internal field name, passed to forms." type="string" variable="$name"/>
      <param description="The field label." type="string" variable="$title"/>
      <param description="If no items are defined, the field will try to auto-detect an existing relation on" type="object" variable="$items">@link $record}, with the same name as the field name.<type full="SS_List" namespace="" name="SS_List"/></param>
      <param description="Reference to the container form" type="object" variable="$form">
        <type full="Form" namespace="" name="Form"/>
      </param>
    </docblock>
    <parameter name="name" byreference="false" type="{unknown}"/>
    <parameter name="title" byreference="false" type="{unknown}" default="null"/>
    <parameter name="items" byreference="false" type="object" default="null">
      <type full="\\SS_List" namespace="\" name="SS_List"/>
    </parameter>
  </constructor>
  <method name="getCallingClass" start="139" end="155" abstract="false" final="false" static="false" visibility="protected">
    <docblock>
      <description/>
      <return type="object">
        <type full="String" namespace="" name="String"/>
      </return>
    </docblock>
    <inline>
      <comment value="get the trace" line="143"/>
      <comment value="Get the class that is asking for who awoke it" line="145"/>
      <comment value="+1 to i cos we have to account for calling this function" line="147"/>
      <comment value="is it set?" line="149"/>
      <comment value="is it a different class" line="150"/>
    </inline>
  </method>
  <method name="getRelationAutosetClass" start="161" end="163" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description/>
      <return type="object">
        <type full="String" namespace="" name="String"/>
      </return>
    </docblock>
    <parameter name="default" byreference="false" type="string" default="'File'"/>
  </method>
  <parent full="UploadField" namespace="" name="UploadField">
    <extends full="FileField" namespace="" name="FileField"/>
    <member name="templateFileButtons" type="string" default="'UploadField_FileButtons'" visibility="protected" line="55">
      <docblock>
        <description compact="Template to use for the file button widget"/>
        <var type="string"/>
      </docblock>
    </member>
    <member name="templateFileEdit" type="string" default="'UploadField_FileEdit'" visibility="protected" line="62">
      <docblock>
        <description compact="Template to use for the edit form"/>
        <var type="string"/>
      </docblock>
    </member>
    <member name="record" type="{unknown}" visibility="protected" line="69">
      <docblock>
        <description compact="Parent data record. Will be infered from parent form or controller if blank."/>
        <var type="object">
          <type full="DataObject" namespace="" name="DataObject"/>
        </var>
      </docblock>
    </member>
    <member name="items" type="{unknown}" visibility="protected" line="76">
      <docblock>
        <description compact="Items loaded into this field. May be a RelationList, or any other SS_List"/>
        <var type="object">
          <type full="SS_List" namespace="" name="SS_List"/>
        </var>
      </docblock>
    </member>
    <member name="ufConfig" type="array" visibility="protected" line="85">
      <docblock>
        <description compact="Config for this field used in the front-end javascript (will be merged into the config of the javascript file upload plugin).">See framework/_config/uploadfield.yml for configuration defaults and documentation.</description>
        <var type="array"/>
      </docblock>
    </member>
    <member name="fileEditFields" type="{unknown}" default="null" visibility="protected" line="172">
      <docblock>
        <description compact="FieldList $fields or string $name (of a method on File to provide a fields) for the EditForm"/>
        <example value="'getCMSFields'"/>
        <var type="object">
          <type full="FieldList|string" namespace="" name="FieldList|string"/>
        </var>
      </docblock>
    </member>
    <member name="fileEditActions" type="{unknown}" default="null" visibility="protected" line="180">
      <docblock>
        <description compact="FieldList $actions or string $name (of a method on File to provide a actions) for the EditForm"/>
        <example value="'getCMSActions'"/>
        <var type="object">
          <type full="FieldList|string" namespace="" name="FieldList|string"/>
        </var>
      </docblock>
    </member>
    <member name="fileEditValidator" type="{unknown}" default="null" visibility="protected" line="188">
      <docblock>
        <description compact="Validator (eg RequiredFields) or string $name (of a method on File to provide a Validator) for the EditForm"/>
        <example value="'getCMSValidator'"/>
        <var type="object">
          <type full="RequiredFields|string" namespace="" name="RequiredFields|string"/>
        </var>
      </docblock>
    </member>
    <constructor name="__construct" start="199" end="220" abstract="false" final="false" static="false" visibility="public">
      <docblock>
        <description compact="Construct a new UploadField instance"/>
        <param description="The internal field name, passed to forms." type="string" variable="$name"/>
        <param description="The field label." type="string" variable="$title"/>
        <param description="If no items are defined, the field will try to auto-detect an existing relation on" type="object" variable="$items">@link $record}, with the same name as the field name.<type full="SS_List" namespace="" name="SS_List"/></param>
        <param description="Reference to the container form" type="object" variable="$form">
          <type full="Form" namespace="" name="Form"/>
        </param>
      </docblock>
      <parameter name="name" byreference="false" type="{unknown}"/>
      <parameter name="title" byreference="false" type="{unknown}" default="null"/>
      <parameter name="items" byreference="false" type="object" default="null">
        <type full="\\SS_List" namespace="\" name="SS_List"/>
      </parameter>
      <inline>
        <todo value="thats the first thing that came to my head, feel free to change it" line="201"/>
        <comment value="class, used by js" line="202"/>
        <comment value="class, used by css for uploadfield only" line="203"/>
        <comment value="filter out '' since this would be a regex problem on JS end" line="211"/>
        <comment value="get the lower max size" line="216"/>
      </inline>
    </constructor>
    <method name="setTemplateFileButtons" start="227" end="230" abstract="false" final="false" static="false" visibility="public">
      <docblock>
        <description compact="Set name of template used for Buttons on each file (replace, edit, remove, delete) (without path or extension)"/>
        <param type="string"/>
      </docblock>
      <parameter name="template" byreference="false" type="{unknown}"/>
    </method>
    <method name="getTemplateFileButtons" start="235" end="237" abstract="false" final="false" static="false" visibility="public">
      <docblock>
        <description/>
        <return type="string"/>
      </docblock>
    </method>
    <method name="setTemplateFileEdit" start="244" end="247" abstract="false" final="false" static="false" visibility="public">
      <docblock>
        <description compact="Set name of template used for the edit (inline &amp; popup) of a file file (without path or extension)"/>
        <param type="string"/>
      </docblock>
      <parameter name="template" byreference="false" type="{unknown}"/>
    </method>
    <method name="getTemplateFileEdit" start="252" end="254" abstract="false" final="false" static="false" visibility="public">
      <docblock>
        <description/>
        <return type="string"/>
      </docblock>
    </method>
    <method name="canPreviewFolder" start="261" end="265" abstract="false" final="false" static="false" visibility="public">
      <docblock>
        <description compact="Determine if the target folder for new uploads in is visible the field UI."/>
        <return type="boolean"/>
      </docblock>
    </method>
    <method name="setCanPreviewFolder" start="275" end="277" abstract="false" final="false" static="false" visibility="public">
      <docblock>
        <description compact="Determine if the target folder for new uploads in is visible the field UI.">Disable to keep the internal filesystem structure hidden from users.</description>
        <param description="Either a boolean flag, or a" type="object" variable="$canPreviewFolder">required permission code<type full="boolean|string" namespace="" name="boolean|string"/></param>
        <return description="Self reference" type="object">
          <type full="UploadField" namespace="" name="UploadField"/>
        </return>
      </docblock>
      <parameter name="canPreviewFolder" byreference="false" type="{unknown}"/>
    </method>
    <method name="getOverwriteWarning" start="287" end="289" abstract="false" final="false" static="false" visibility="public">
      <docblock>
        <description compact="Determine if the field should show a warning when overwriting a file.">This requires Upload-&gt;replaceFile config to be set to true, otherwise
files will be renamed instead of overwritten (although the warning will
still be displayed)</description>
        <return type="boolean"/>
      </docblock>
    </method>
    <method name="setOverwriteWarning" start="300" end="302" abstract="false" final="false" static="false" visibility="public">
      <docblock>
        <description compact="Determine if the field should show a warning when overwriting a file.">This requires Upload-&gt;replaceFile config to be set to true, otherwise
files will be renamed instead of overwritten (although the warning will
still be displayed)</description>
        <param type="boolean" variable="$overwriteWarning"/>
        <return description="Self reference" type="object">
          <type full="UploadField" namespace="" name="UploadField"/>
        </return>
      </docblock>
      <parameter name="overwriteWarning" byreference="false" type="{unknown}"/>
    </method>
    <method name="setRecord" start="308" end="311" abstract="false" final="false" static="false" visibility="public">
      <docblock>
        <description compact="Force a record to be used as &quot;Parent&quot; for uploaded Files (eg a Page with a has_one to File)"/>
        <param type="object" variable="$record">
          <type full="DataObject" namespace="" name="DataObject"/>
        </param>
      </docblock>
      <parameter name="record" byreference="false" type="{unknown}"/>
    </method>
    <method name="getRecord" start="318" end="331" abstract="false" final="false" static="false" visibility="public">
      <docblock>
        <description compact="Get the record to use as &quot;Parent&quot; for uploaded Files (eg a Page with a has_one to File) If none is set, it will use Form-&gt;getRecord() or Form-&gt;Controller()-&gt;data()"/>
        <return type="object">
          <type full="DataObject" namespace="" name="DataObject"/>
        </return>
      </docblock>
    </method>
    <method name="setValue" start="352" end="417" abstract="false" final="false" static="false" visibility="public">
      <docblock>
        <description compact="Loads the related record values into this field. UploadField can be uploaded in one of three ways:">- By passing in a list of file IDs in the $value parameter (an array with a single
   key 'Files', with the value being the actual array of IDs).
 - By passing in an explicit list of File objects in the $record parameter, and
   leaving $value blank.
 - By passing in a dataobject in the $record parameter, from which file objects
   will be extracting using the field name as the relation field.

Each of these methods will update both the items (list of File objects) and the
field value (list of file ID values).</description>
        <param description="Array of submitted form data, if submitting from a form" type="array" variable="$value"/>
        <param description="Full source record, either as a DataObject," type="object" variable="$record">SS_List of items, or an array of submitted form data<type full="array|DataObject|SS_List" namespace="" name="array|DataObject|SS_List"/></param>
        <return description="Self reference" type="object">
          <type full="UploadField" namespace="" name="UploadField"/>
        </return>
      </docblock>
      <parameter name="value" byreference="false" type="{unknown}"/>
      <parameter name="record" byreference="false" type="{unknown}" default="null"/>
      <inline>
        <comment value="If we're not passed a value directly, we can attempt to infer the field" line="354"/>
        <comment value="value from the second parameter by inspecting its relations" line="355"/>
        <comment value="Determine format of presented data" line="358"/>
        <comment value="If a record is given as a second parameter, but no submitted values," line="360"/>
        <comment value="then we should inspect this instead for the form values" line="361"/>
        <comment value="If given a dataobject use reflection to extract details" line="364"/>
        <comment value="If has_one, add sole item to default list" line="368"/>
        <comment value="If javascript is disabled, direct file upload (non-html5 style) can" line="384"/>
        <comment value="trigger a single or multiple file submission. Note that this may be" line="385"/>
        <comment value="included in addition to re-submitted File IDs as above, so these" line="386"/>
        <comment value="should be added to the list instead of operated on independently." line="387"/>
        <comment value="Filter items by what's allowed to be viewed" line="399"/>
        <comment value="Filter and cache updated item list" line="409"/>
        <comment value="Same format as posted form values for this field. Also ensures that" line="411"/>
        <comment value="$this-&gt;setValue($this-&gt;getValue()); is non-destructive" line="412"/>
        <comment value="Set value using parent" line="415"/>
      </inline>
    </method>
    <method name="setItems" start="427" end="429" abstract="false" final="false" static="false" visibility="public">
      <docblock>
        <description compact="Sets the items assigned to this field as an SS_List of File objects.">Calling setItems will also update the value of this field, as well as
updating the internal list of File items.</description>
        <param type="object" variable="$items">
          <type full="SS_List" namespace="" name="SS_List"/>
        </param>
        <return description="self reference" type="object">
          <type full="UploadField" namespace="" name="UploadField"/>
        </return>
      </docblock>
      <parameter name="items" byreference="false" type="object">
        <type full="\\SS_List" namespace="\" name="SS_List"/>
      </parameter>
    </method>
    <method name="getItems" start="436" end="438" abstract="false" final="false" static="false" visibility="public">
      <docblock>
        <description compact="Retrieves the current list of files"/>
        <return type="object">
          <type full="SS_List" namespace="" name="SS_List"/>
        </return>
      </docblock>
    </method>
    <method name="getCustomisedItems" start="446" end="452" abstract="false" final="false" static="false" visibility="public">
      <docblock>
        <description compact="Retrieves a customised list of all File records to ensure they are properly viewable when rendered in the field template."/>
        <return type="object">
          <type full="SS_List[ViewableData_Customised]" namespace="" name="SS_List[ViewableData_Customised]"/>
        </return>
      </docblock>
    </method>
    <method name="getItemIDs" start="459" end="462" abstract="false" final="false" static="false" visibility="public">
      <docblock>
        <description compact="Retrieves the list of selected file IDs"/>
        <return type="array"/>
      </docblock>
    </method>
    <method name="Value" start="464" end="467" abstract="false" final="false" static="false" visibility="public">
      <inline>
        <comment value="Re-override FileField Value to use data value" line="465"/>
      </inline>
    </method>
    <method name="saveInto" start="469" end="487" abstract="false" final="false" static="false" visibility="public">
      <parameter name="record" byreference="false" type="object">
        <type full="\\DataObjectInterface" namespace="\" name="DataObjectInterface"/>
      </parameter>
      <inline>
        <comment value="Check required relation details are available" line="470"/>
        <comment value="Get details to save" line="474"/>
        <comment value="Check type of relation" line="477"/>
        <comment value="has_many or many_many" line="480"/>
      </inline>
    </method>
    <method name="customiseFile" start="496" end="507" abstract="false" final="false" static="false" visibility="protected">
      <docblock>
        <description compact="Customises a file with additional details suitable for rendering in the UploadField.ss template"/>
        <param type="object" variable="$file">
          <type full="File" namespace="" name="File"/>
        </param>
        <return type="object">
          <type full="ViewableData_Customised" namespace="" name="ViewableData_Customised"/>
        </return>
      </docblock>
      <parameter name="file" byreference="false" type="object">
        <type full="\\File" namespace="\" name="File"/>
      </parameter>
      <inline>
        <comment value="we do this in a second customise to have the access to the previous customisations" line="503"/>
      </inline>
    </method>
    <method name="setConfig" start="518" end="521" abstract="false" final="false" static="false" visibility="public">
      <docblock>
        <description compact="Assign a front-end config variable for the upload field"/>
        <see value="https://github.com/blueimp/jQuery-File-Upload/wiki/Options for the list of front end options available"/>
        <param type="string" variable="$key"/>
        <param type="mixed" variable="$val"/>
        <return description="self reference" type="object">
          <type full="UploadField" namespace="" name="UploadField"/>
        </return>
      </docblock>
      <parameter name="key" byreference="false" type="{unknown}"/>
      <parameter name="val" byreference="false" type="{unknown}"/>
    </method>
    <method name="getConfig" start="531" end="534" abstract="false" final="false" static="false" visibility="public">
      <docblock>
        <description compact="Gets a front-end config variable for the upload field"/>
        <see value="https://github.com/blueimp/jQuery-File-Upload/wiki/Options for the list of front end options available"/>
        <param type="string" variable="$key"/>
        <return type="mixed"/>
      </docblock>
      <parameter name="key" byreference="false" type="{unknown}"/>
    </method>
    <method name="getAutoUpload" start="541" end="543" abstract="false" final="false" static="false" visibility="public">
      <docblock>
        <description compact="Determine if the field should automatically upload the file."/>
        <return type="boolean"/>
      </docblock>
    </method>
    <method name="setAutoUpload" start="551" end="553" abstract="false" final="false" static="false" visibility="public">
      <docblock>
        <description compact="Determine if the field should automatically upload the file"/>
        <param type="boolean" variable="$autoUpload"/>
        <return description="Self reference" type="object">
          <type full="UploadField" namespace="" name="UploadField"/>
        </return>
      </docblock>
      <parameter name="autoUpload" byreference="false" type="{unknown}"/>
    </method>
    <method name="getAllowedMaxFileNumber" start="562" end="578" abstract="false" final="false" static="false" visibility="public">
      <docblock>
        <description compact="Determine maximum number of files allowed to be attached Defaults to 1 for has_one and null (unlimited) for many_many and has_many relations."/>
        <return description="Maximum limit, or null for no limit" type="object">
          <type full="integer|null" namespace="" name="integer|null"/>
        </return>
      </docblock>
      <inline>
        <comment value="if there is a has_one relation with that name on the record and" line="565"/>
        <comment value="allowedMaxFileNumber has not been set, it's wanted to be 1" line="566"/>
      </inline>
    </method>
    <method name="setAllowedExtensions" start="591" end="594" abstract="false" final="false" static="false" visibility="public">
      <docblock>
        <description compact="Limit allowed file extensions. Empty by default, allowing all extensions.">To allow files without an extension, use an empty string.
See <link xmlns="http://xml.phpdox.net/src" value="File::$allowed_extensions"/> to get a good standard set of
extensions that are typically not harmful in a webserver context.
See <link xmlns="http://xml.phpdox.net/src" value="setAllowedMaxFileSize()"/> to limit file size by extension.
</description>
        <param description="List of extensions" type="array" variable="$rules"/>
        <return description="Self reference" type="object">
          <type full="UploadField" namespace="" name="UploadField"/>
        </return>
      </docblock>
      <parameter name="rules" byreference="false" type="{unknown}"/>
    </method>
    <method name="setAllowedFileCategories" start="606" end="625" abstract="false" final="false" static="false" visibility="public">
      <docblock>
        <description compact="Limit allowed file extensions by specifying categories of file types.">These may be 'image', 'audio', 'mov', 'zip', 'flash', or 'doc'
See <link xmlns="http://xml.phpdox.net/src" value="File::$allowed_extensions"/> for details of allowed extensions
for each of these categories
</description>
        <param description="Category name" type="string" variable="$category"/>
        <param description="... $categories Additional category names" type="string"/>
        <return description="Self reference" type="object">
          <type full="UploadField" namespace="" name="UploadField"/>
        </return>
      </docblock>
      <parameter name="category" byreference="false" type="{unknown}"/>
      <inline>
        <comment value="Parse arguments" line="610"/>
        <comment value="Merge all categories into list of extensions" line="616"/>
      </inline>
    </method>
    <method name="getAllowedExtensions" start="633" end="635" abstract="false" final="false" static="false" visibility="public">
      <docblock>
        <description compact="Returns list of extensions allowed by this field, or an empty array if there is no restriction"/>
        <return type="array"/>
      </docblock>
    </method>
    <method name="setAllowedMaxFileNumber" start="643" end="645" abstract="false" final="false" static="false" visibility="public">
      <docblock>
        <description compact="Determine maximum number of files allowed to be attached."/>
        <param description="Maximum limit. 0 or null will be treated as unlimited" type="object" variable="$allowedMaxFileNumber">
          <type full="integer|null" namespace="" name="integer|null"/>
        </param>
        <return description="Self reference" type="object">
          <type full="UploadField" namespace="" name="UploadField"/>
        </return>
      </docblock>
      <parameter name="allowedMaxFileNumber" byreference="false" type="{unknown}"/>
    </method>
    <method name="canUpload" start="652" end="656" abstract="false" final="false" static="false" visibility="public">
      <docblock>
        <description compact="Determine if the user has permission to upload."/>
        <return type="boolean"/>
      </docblock>
    </method>
    <method name="setCanUpload" start="666" end="668" abstract="false" final="false" static="false" visibility="public">
      <docblock>
        <description compact="Specify whether the user can upload files.">String values will be treated as required permission codes</description>
        <param description="Either a boolean flag, or a required" type="object" variable="$canUpload">permission code<type full="boolean|string" namespace="" name="boolean|string"/></param>
        <return description="Self reference" type="object">
          <type full="UploadField" namespace="" name="UploadField"/>
        </return>
      </docblock>
      <parameter name="canUpload" byreference="false" type="{unknown}"/>
    </method>
    <method name="canAttachExisting" start="676" end="680" abstract="false" final="false" static="false" visibility="public">
      <docblock>
        <description compact="Determine if the user has permission to attach existing files By default returns true if the user has the CMS_ACCESS_AssetAdmin permission"/>
        <return type="boolean"/>
      </docblock>
    </method>
    <method name="isActive" start="687" end="689" abstract="false" final="false" static="false" visibility="public">
      <docblock>
        <description compact="Returns true if the field is neither readonly nor disabled"/>
        <return type="boolean"/>
      </docblock>
    </method>
    <method name="setCanAttachExisting" start="699" end="701" abstract="false" final="false" static="false" visibility="public">
      <docblock>
        <description compact="Specify whether the user can attach existing files String values will be treated as required permission codes"/>
        <param description="Either a boolean flag, or a" type="object" variable="$canAttachExisting">required permission code<type full="boolean|string" namespace="" name="boolean|string"/></param>
        <return description="Self reference" type="object">
          <type full="UploadField" namespace="" name="UploadField"/>
        </return>
      </docblock>
      <parameter name="canAttachExisting" byreference="false" type="{unknown}"/>
    </method>
    <method name="getPreviewMaxWidth" start="708" end="710" abstract="false" final="false" static="false" visibility="public">
      <docblock>
        <description compact="Gets thumbnail width. Defaults to 80"/>
        <return type="integer"/>
      </docblock>
    </method>
    <method name="setPreviewMaxWidth" start="718" end="720" abstract="false" final="false" static="false" visibility="public">
      <docblock>
        <description/>
        <see value="UploadField::getPreviewMaxWidth()"/>
        <param type="integer" variable="$previewMaxWidth"/>
        <return description="Self reference" type="object">
          <type full="UploadField" namespace="" name="UploadField"/>
        </return>
      </docblock>
      <parameter name="previewMaxWidth" byreference="false" type="{unknown}"/>
    </method>
    <method name="getPreviewMaxHeight" start="727" end="729" abstract="false" final="false" static="false" visibility="public">
      <docblock>
        <description compact="Gets thumbnail height. Defaults to 60"/>
        <return type="integer"/>
      </docblock>
    </method>
    <method name="setPreviewMaxHeight" start="737" end="739" abstract="false" final="false" static="false" visibility="public">
      <docblock>
        <description/>
        <see value="UploadField::getPreviewMaxHeight()"/>
        <param type="integer" variable="$previewMaxHeight"/>
        <return description="Self reference" type="object">
          <type full="UploadField" namespace="" name="UploadField"/>
        </return>
      </docblock>
      <parameter name="previewMaxHeight" byreference="false" type="{unknown}"/>
    </method>
    <method name="getUploadTemplateName" start="748" end="750" abstract="false" final="false" static="false" visibility="public">
      <docblock>
        <description compact="javascript template used to display uploading files Defaults to 'ss-uploadfield-uploadtemplate'"/>
        <see value="javascript/UploadField_uploadtemplate.js"/>
        <var type="string"/>
      </docblock>
    </method>
    <method name="setUploadTemplateName" start="758" end="760" abstract="false" final="false" static="false" visibility="public">
      <docblock>
        <description/>
        <see value="UploadField::getUploadTemplateName()"/>
        <param type="string" variable="$uploadTemplateName"/>
        <return description="Self reference" type="object">
          <type full="UploadField" namespace="" name="UploadField"/>
        </return>
      </docblock>
      <parameter name="uploadTemplateName" byreference="false" type="{unknown}"/>
    </method>
    <method name="getDownloadTemplateName" start="769" end="771" abstract="false" final="false" static="false" visibility="public">
      <docblock>
        <description compact="javascript template used to display already uploaded files Defaults to 'ss-downloadfield-downloadtemplate'"/>
        <see value="javascript/DownloadField_downloadtemplate.js"/>
        <var type="string"/>
      </docblock>
    </method>
    <method name="setDownloadTemplateName" start="779" end="781" abstract="false" final="false" static="false" visibility="public">
      <docblock>
        <description/>
        <see value="Uploadfield::getDownloadTemplateName()"/>
        <param type="string" variable="$downloadTemplateName"/>
        <return description="Self reference" type="object">
          <type full="Uploadfield" namespace="" name="Uploadfield"/>
        </return>
      </docblock>
      <parameter name="downloadTemplateName" byreference="false" type="{unknown}"/>
    </method>
    <method name="getFileEditFields" start="790" end="811" abstract="false" final="false" static="false" visibility="public">
      <docblock>
        <description compact="FieldList $fields for the EditForm"/>
        <example value="'getCMSFields'"/>
        <param description="File context to generate fields for" type="object" variable="$file">
          <type full="File" namespace="" name="File"/>
        </param>
        <return description="List of form fields" type="object">
          <type full="FieldList" namespace="" name="FieldList"/>
        </return>
      </docblock>
      <parameter name="file" byreference="false" type="object">
        <type full="\\File" namespace="\" name="File"/>
      </parameter>
      <inline>
        <comment value="Empty actions, generate default" line="792"/>
        <comment value="Only display main tab, to avoid overly complex interface" line="795"/>
        <comment value="Fields instance" line="802"/>
        <comment value="Method to call on the given file" line="805"/>
      </inline>
    </method>
    <method name="setFileEditFields" start="820" end="823" abstract="false" final="false" static="false" visibility="public">
      <docblock>
        <description compact="FieldList $fields or string $name (of a method on File to provide a fields) for the EditForm"/>
        <example value="'getCMSFields'"/>
        <param type="object">
          <type full="FieldList|string" namespace="" name="FieldList|string"/>
        </param>
        <return description="Self reference" type="object">
          <type full="Uploadfield" namespace="" name="Uploadfield"/>
        </return>
      </docblock>
      <parameter name="fileEditFields" byreference="false" type="{unknown}"/>
    </method>
    <method name="getFileEditActions" start="832" end="850" abstract="false" final="false" static="false" visibility="public">
      <docblock>
        <description compact="FieldList $actions or string $name (of a method on File to provide a actions) for the EditForm"/>
        <example value="'getCMSActions'"/>
        <param description="File context to generate form actions for" type="object" variable="$file">
          <type full="File" namespace="" name="File"/>
        </param>
        <return description="Field list containing FormAction" type="object">
          <type full="FieldList" namespace="" name="FieldList"/>
        </return>
      </docblock>
      <parameter name="file" byreference="false" type="object">
        <type full="\\File" namespace="\" name="File"/>
      </parameter>
      <inline>
        <comment value="Empty actions, generate default" line="834"/>
        <comment value="Actions instance" line="841"/>
        <comment value="Method to call on the given file" line="844"/>
      </inline>
    </method>
    <method name="setFileEditActions" start="859" end="862" abstract="false" final="false" static="false" visibility="public">
      <docblock>
        <description compact="FieldList $actions or string $name (of a method on File to provide a actions) for the EditForm"/>
        <example value="'getCMSActions'"/>
        <param type="object">
          <type full="FieldList|string" namespace="" name="FieldList|string"/>
        </param>
        <return description="Self reference" type="object">
          <type full="Uploadfield" namespace="" name="Uploadfield"/>
        </return>
      </docblock>
      <parameter name="fileEditActions" byreference="false" type="{unknown}"/>
    </method>
    <method name="getFileEditValidator" start="871" end="884" abstract="false" final="false" static="false" visibility="public">
      <docblock>
        <description compact="Determines the validator to use for the edit form"/>
        <example value="'getCMSValidator'"/>
        <param description="File context to generate validator from" type="object" variable="$file">
          <type full="File" namespace="" name="File"/>
        </param>
        <return description="Validator object" type="object">
          <type full="Validator" namespace="" name="Validator"/>
        </return>
      </docblock>
      <parameter name="file" byreference="false" type="object">
        <type full="\\File" namespace="\" name="File"/>
      </parameter>
      <inline>
        <comment value="Empty validator" line="872"/>
        <comment value="Validator instance" line="875"/>
        <comment value="Method to call on the given file" line="878"/>
      </inline>
    </method>
    <method name="setFileEditValidator" start="893" end="896" abstract="false" final="false" static="false" visibility="public">
      <docblock>
        <description compact="Validator (eg RequiredFields) or string $name (of a method on File to provide a Validator) for the EditForm"/>
        <example value="'getCMSValidator'"/>
        <param type="object">
          <type full="Validator|string" namespace="" name="Validator|string"/>
        </param>
        <return description="Self reference" type="object">
          <type full="Uploadfield" namespace="" name="Uploadfield"/>
        </return>
      </docblock>
      <parameter name="fileEditValidator" byreference="false" type="{unknown}"/>
    </method>
    <method name="getThumbnailURLForFile" start="902" end="917" abstract="false" final="false" static="false" visibility="protected">
      <docblock>
        <description/>
        <param type="object" variable="$file">
          <type full="File" namespace="" name="File"/>
        </param>
        <return type="string"/>
      </docblock>
      <parameter name="file" byreference="false" type="object">
        <type full="\\File" namespace="\" name="File"/>
      </parameter>
    </method>
    <method name="getAttributes" start="919" end="924" abstract="false" final="false" static="false" visibility="public"/>
    <method name="extraClass" start="926" end="930" abstract="false" final="false" static="false" visibility="public"/>
    <method name="Field" start="932" end="1014" abstract="false" final="false" static="false" visibility="public">
      <parameter name="properties" byreference="false" type="array"/>
      <inline>
        <todo value="hmmm, remove it?" line="951"/>
        <comment value="Calculated config as per jquery.fileupload-ui.js" line="954"/>
        <comment value="Validation: File extensions" line="966"/>
        <comment value="Validation: File size" line="975"/>
        <comment value="Validation: Number of files" line="985"/>
        <comment value="get all the existing files in the current folder" line="1001"/>
        <comment value="add overwrite warning error message to the config object sent to Javascript" line="1003"/>
      </inline>
    </method>
    <method name="validate" start="1022" end="1069" abstract="false" final="false" static="false" visibility="public">
      <docblock>
        <description compact="Validation method for this field, called when the entire form is validated"/>
        <param type="object" variable="$validator">
          <type full="Validator" namespace="" name="Validator"/>
        </param>
        <return type="boolean"/>
      </docblock>
      <parameter name="validator" byreference="false" type="{unknown}"/>
      <inline>
        <todo value="Test compatibility with RequiredFields" line="1024"/>
        <comment value="If there are no files then quit" line="1028"/>
        <comment value="Check max number of files" line="1031"/>
        <comment value="Revalidate each file against nested validator" line="1046"/>
        <comment value="Generate $_FILES style file attribute array for upload validator" line="1049"/>
        <comment value="Check all errors" line="1060"/>
      </inline>
    </method>
    <method name="handleItem" start="1075" end="1077" abstract="false" final="false" static="false" visibility="public">
      <docblock>
        <description/>
        <param type="object" variable="$request">
          <type full="SS_HTTPRequest" namespace="" name="SS_HTTPRequest"/>
        </param>
        <return type="object">
          <type full="UploadField_ItemHandler" namespace="" name="UploadField_ItemHandler"/>
        </return>
      </docblock>
      <parameter name="request" byreference="false" type="object">
        <type full="\\SS_HTTPRequest" namespace="\" name="SS_HTTPRequest"/>
      </parameter>
    </method>
    <method name="getItemHandler" start="1083" end="1085" abstract="false" final="false" static="false" visibility="public">
      <docblock>
        <description/>
        <param type="int" variable="$itemID"/>
        <return type="object">
          <type full="UploadField_ItemHandler" namespace="" name="UploadField_ItemHandler"/>
        </return>
      </docblock>
      <parameter name="itemID" byreference="false" type="{unknown}"/>
    </method>
    <method name="handleSelect" start="1091" end="1094" abstract="false" final="false" static="false" visibility="public">
      <docblock>
        <description/>
        <param type="object" variable="$request">
          <type full="SS_HTTPRequest" namespace="" name="SS_HTTPRequest"/>
        </param>
        <return type="object">
          <type full="UploadField_ItemHandler" namespace="" name="UploadField_ItemHandler"/>
        </return>
      </docblock>
      <parameter name="request" byreference="false" type="object">
        <type full="\\SS_HTTPRequest" namespace="\" name="SS_HTTPRequest"/>
      </parameter>
    </method>
    <method name="extractUploadedFileData" start="1102" end="1126" abstract="false" final="false" static="false" visibility="protected">
      <docblock>
        <description compact="Given an array of post variables, extract all temporary file data into an array"/>
        <param description="Array of posted form data" type="array" variable="$postVars"/>
        <return description="List of temporary file data" type="array"/>
      </docblock>
      <parameter name="postVars" byreference="false" type="{unknown}"/>
      <inline>
        <comment value="Note: Format of posted file parameters in php is a feature of using" line="1104"/>
        <comment value="&lt;input name='{$Name}[Uploads][]' /&gt; for multiple file uploads" line="1105"/>
        <comment value="Skip if &quot;empty&quot; file" line="1112"/>
      </inline>
    </method>
    <method name="saveTemporaryFile" start="1135" end="1180" abstract="false" final="false" static="false" visibility="protected">
      <docblock>
        <description compact="Loads the temporary file data into a File object"/>
        <param description="Temporary file data" type="array" variable="$tmpFile"/>
        <param description="Error message" type="string" variable="$error"/>
        <return description="File object, or null if error" type="object">
          <type full="File" namespace="" name="File"/>
        </return>
      </docblock>
      <parameter name="tmpFile" byreference="false" type="{unknown}"/>
      <parameter name="error" byreference="true" type="{unknown}" default="null"/>
      <inline>
        <comment value="Determine container object" line="1137"/>
        <comment value="Search for relations that can hold the uploaded files, but don't fallback" line="1151"/>
        <comment value="to default if there is no automatic relation" line="1152"/>
        <comment value="Create new object explicitly. Otherwise rely on Upload::load to choose the class." line="1154"/>
        <comment value="Allow replacing files (rather than renaming a duplicate) when warning about overwrites" line="1158"/>
        <comment value="Get the uploaded file into a new file object." line="1163"/>
        <comment value="Check if upload field has an error" line="1172"/>
        <comment value="return file" line="1178"/>
      </inline>
    </method>
    <method name="encodeFileAttributes" start="1189" end="1204" abstract="false" final="false" static="false" visibility="protected">
      <docblock>
        <description compact="Safely encodes the File object with all standard fields required by the front end"/>
        <param type="object" variable="$file">
          <type full="File" namespace="" name="File"/>
        </param>
        <return description="Array encoded list of file attributes" type="array"/>
      </docblock>
      <parameter name="file" byreference="false" type="object">
        <type full="\\File" namespace="\" name="File"/>
      </parameter>
      <inline>
        <comment value="Collect all output data." line="1191"/>
      </inline>
    </method>
    <method name="upload" start="1213" end="1241" abstract="false" final="false" static="false" visibility="public">
      <docblock>
        <description compact="Action to handle upload of a single file"/>
        <param type="object" variable="$request">
          <type full="SS_HTTPRequest" namespace="" name="SS_HTTPRequest"/>
        </param>
        <return type="object">
          <type full="SS_HTTPResponse" namespace="" name="SS_HTTPResponse"/>
        </return>
        <return type="object">
          <type full="SS_HTTPResponse" namespace="" name="SS_HTTPResponse"/>
        </return>
      </docblock>
      <parameter name="request" byreference="false" type="object">
        <type full="\\SS_HTTPRequest" namespace="\" name="SS_HTTPRequest"/>
      </parameter>
      <inline>
        <comment value="Protect against CSRF on destructive action" line="1218"/>
        <comment value="Get form details" line="1222"/>
        <comment value="Save the temporary file into a File object" line="1226"/>
        <comment value="Format response with json" line="1236"/>
      </inline>
    </method>
    <method name="attach" start="1250" end="1263" abstract="false" final="false" static="false" visibility="public">
      <docblock>
        <description compact="Retrieves details for files that this field wishes to attache to the client-side form"/>
        <param type="object" variable="$request">
          <type full="SS_HTTPRequest" namespace="" name="SS_HTTPRequest"/>
        </param>
        <return type="object">
          <type full="SS_HTTPResponse" namespace="" name="SS_HTTPResponse"/>
        </return>
      </docblock>
      <parameter name="request" byreference="false" type="object">
        <type full="\\SS_HTTPRequest" namespace="\" name="SS_HTTPRequest"/>
      </parameter>
      <inline>
        <comment value="Retrieve file attributes required by front end" line="1254"/>
      </inline>
    </method>
    <method name="checkFileExists" start="1271" end="1287" abstract="false" final="false" static="false" visibility="protected">
      <docblock>
        <description compact="Check if file exists, both checking filtered filename and exact filename"/>
        <param description="Filename" type="string" variable="$originalFile"/>
        <return type="object">
          <type full="bool" namespace="" name="bool"/>
        </return>
      </docblock>
      <parameter name="originalFile" byreference="false" type="{unknown}"/>
      <inline>
        <comment value="Check both original and safely filtered filename" line="1273"/>
        <comment value="Resolve expected folder name" line="1277"/>
        <comment value="check if either file exists" line="1284"/>
      </inline>
    </method>
    <method name="fileexists" start="1294" end="1312" abstract="false" final="false" static="false" visibility="public">
      <docblock>
        <description compact="Determines if a specified file exists"/>
        <param type="object" variable="$request">
          <type full="SS_HTTPRequest" namespace="" name="SS_HTTPRequest"/>
        </param>
      </docblock>
      <parameter name="request" byreference="false" type="object">
        <type full="\\SS_HTTPRequest" namespace="\" name="SS_HTTPRequest"/>
      </parameter>
      <inline>
        <comment value="Assert that requested filename doesn't attempt to escape the directory" line="1295"/>
        <comment value="Encode and present response" line="1307"/>
      </inline>
    </method>
    <method name="performReadonlyTransformation" start="1314" end="1319" abstract="false" final="false" static="false" visibility="public"/>
    <method name="getRelationAutosetClass" start="1328" end="1342" abstract="false" final="false" static="false" visibility="public">
      <docblock>
        <description compact="Gets the foreign class that needs to be created, or 'File' as default if there is no relationship, or it cannot be determined."/>
        <param description="value to return if no value could be calculated" variable="$default" type="object">
          <type full="Default" namespace="" name="Default"/>
        </param>
        <return description="Foreign class name." type="string"/>
      </docblock>
      <parameter name="default" byreference="false" type="string" default="'File'"/>
      <inline>
        <comment value="Don't autodetermine relation if no relationship between parent record" line="1330"/>
        <comment value="Check record and name" line="1333"/>
      </inline>
    </method>
  </parent>
  <parent full="FileField" namespace="" name="FileField">
    <extends full="FormField" namespace="" name="FormField"/>
    <member name="relationAutoSetting" type="{unknown}" default="true" visibility="public" line="54">
      <docblock>
        <description compact="Flag to automatically determine and save a has_one-relationship on the saved record (e.g. a &quot;Player&quot; has_one &quot;PlayerImage&quot; would trigger saving the ID of newly created file into &quot;PlayerImageID&quot; on the record)."/>
        <var type="boolean"/>
      </docblock>
    </member>
    <member name="upload" type="{unknown}" visibility="protected" line="63">
      <docblock>
        <description compact="Upload object (needed for validation and actually moving the temporary file created by PHP)."/>
        <var type="object">
          <type full="Upload" namespace="" name="Upload"/>
        </var>
      </docblock>
    </member>
    <member name="folderName" type="{unknown}" default="false" visibility="protected" line="71">
      <docblock>
        <description compact="Partial filesystem path relative to /assets directory.">Defaults to Upload::$uploads_folder.</description>
        <var type="string"/>
      </docblock>
    </member>
    <constructor name="__construct" start="80" end="84" abstract="false" final="false" static="false" visibility="public">
      <docblock>
        <description compact="Create a new file field."/>
        <param description="The internal field name, passed to forms." type="string" variable="$name"/>
        <param description="The field label." type="string" variable="$title"/>
        <param description="The value of the field." type="int" variable="$value"/>
      </docblock>
      <parameter name="name" byreference="false" type="{unknown}"/>
      <parameter name="title" byreference="false" type="{unknown}" default="null"/>
      <parameter name="value" byreference="false" type="{unknown}" default="null"/>
    </constructor>
    <method name="Field" start="86" end="92" abstract="false" final="false" static="false" visibility="public">
      <parameter name="properties" byreference="false" type="array"/>
    </method>
    <method name="getAttributes" start="94" end="99" abstract="false" final="false" static="false" visibility="public"/>
    <method name="saveInto" start="101" end="126" abstract="false" final="false" static="false" visibility="public">
      <parameter name="record" byreference="false" type="object">
        <type full="\\DataObjectInterface" namespace="\" name="DataObjectInterface"/>
      </parameter>
      <inline>
        <comment value="assume that the file is connected via a has-one" line="106"/>
        <comment value="try to create a file matching the relation" line="108"/>
        <comment value="save to record" line="122"/>
      </inline>
    </method>
    <method name="Value" start="128" end="130" abstract="false" final="false" static="false" visibility="public"/>
    <method name="getValidator" start="137" end="139" abstract="false" final="false" static="false" visibility="public">
      <docblock>
        <description compact="Get custom validator for this field"/>
        <param type="object" variable="$validator">
          <type full="Upload_Validator" namespace="" name="Upload_Validator"/>
        </param>
      </docblock>
    </method>
    <method name="setValidator" start="147" end="150" abstract="false" final="false" static="false" visibility="public">
      <docblock>
        <description compact="Set custom validator for this field"/>
        <param type="object" variable="$validator">
          <type full="Upload_Validator" namespace="" name="Upload_Validator"/>
        </param>
        <return description="Self reference" type="object">
          <type full="FileField" namespace="" name="FileField"/>
        </return>
      </docblock>
      <parameter name="validator" byreference="false" type="{unknown}"/>
    </method>
    <method name="setFolderName" start="158" end="161" abstract="false" final="false" static="false" visibility="public">
      <docblock>
        <description compact="Sets the upload folder name"/>
        <param type="string" variable="$folderName"/>
        <return description="Self reference" type="object">
          <type full="FileField" namespace="" name="FileField"/>
        </return>
      </docblock>
      <parameter name="folderName" byreference="false" type="{unknown}"/>
    </method>
    <method name="getFolderName" start="168" end="170" abstract="false" final="false" static="false" visibility="public">
      <docblock>
        <description compact="Gets the upload folder name"/>
        <return type="string"/>
      </docblock>
    </method>
    <method name="validate" start="172" end="187" abstract="false" final="false" static="false" visibility="public">
      <parameter name="validator" byreference="false" type="{unknown}"/>
    </method>
    <method name="getUpload" start="194" end="196" abstract="false" final="false" static="false" visibility="public">
      <docblock>
        <description compact="Retrieves the Upload handler"/>
        <return type="object">
          <type full="Upload" namespace="" name="Upload"/>
        </return>
      </docblock>
    </method>
    <method name="setUpload" start="204" end="207" abstract="false" final="false" static="false" visibility="public">
      <docblock>
        <description compact="Sets the upload handler"/>
        <param type="object" variable="$upload">
          <type full="Upload" namespace="" name="Upload"/>
        </param>
        <return description="Self reference" type="object">
          <type full="FileField" namespace="" name="FileField"/>
        </return>
      </docblock>
      <parameter name="upload" byreference="false" type="object">
        <type full="\\Upload" namespace="\" name="Upload"/>
      </parameter>
    </method>
  </parent>
  <parent full="FormField" namespace="" name="FormField">
    <extends full="RequestHandler" namespace="" name="RequestHandler"/>
    <member name="form" type="{unknown}" visibility="protected" line="25">
      <docblock>
        <description/>
        <var type="object">
          <type full="Form" namespace="" name="Form"/>
        </var>
      </docblock>
    </member>
    <member name="name" type="{unknown}" visibility="protected" line="27"/>
    <member name="description" type="{unknown}" visibility="protected" line="33">
      <docblock>
        <description/>
        <var description="string Adds a &quot;title&quot;-attribute to the markup." type="object">
          <type full="$description" namespace="" name="$description"/>
        </var>
        <todo value="Implement in all subclasses"/>
      </docblock>
    </member>
    <member name="extraClasses" type="{unknown}" visibility="protected" line="38">
      <docblock>
        <description/>
        <var description="array Extra CSS-classes for the formfield-container" type="object">
          <type full="$extraClasses" namespace="" name="$extraClasses"/>
        </var>
      </docblock>
    </member>
    <member name="dontEscape" type="{unknown}" visibility="public" line="40"/>
    <member name="rightTitle" type="{unknown}" visibility="protected" line="46">
      <docblock>
        <description/>
        <var description="string Used in SmallFieldHolder to force a right-aligned label, or in FieldHolder" type="object">to create contextual label.<type full="$rightTitle" namespace="" name="$rightTitle"/></var>
      </docblock>
    </member>
    <member name="leftTitle" type="{unknown}" visibility="protected" line="52">
      <docblock>
        <description/>
        <var description="string Used in SmallFieldHolder() to force a left-aligned label with correct spacing." type="object">Please use $title for FormFields rendered with FieldHolder().<type full="$leftTitle" namespace="" name="$leftTitle"/></var>
      </docblock>
    </member>
    <member name="containerFieldList" type="{unknown}" visibility="protected" line="58">
      <docblock>
        <description compact="Stores a reference to the FieldList that contains this object."/>
        <var type="object">
          <type full="FieldList" namespace="" name="FieldList"/>
        </var>
      </docblock>
    </member>
    <member name="readonly" type="{unknown}" default="false" visibility="protected" line="63">
      <docblock>
        <description/>
        <var type="boolean"/>
      </docblock>
    </member>
    <member name="disabled" type="{unknown}" default="false" visibility="protected" line="68">
      <docblock>
        <description/>
        <var type="boolean"/>
      </docblock>
    </member>
    <member name="customValidationMessage" type="string" default="&quot;&quot;" visibility="protected" line="73">
      <docblock>
        <description/>
        <var description="custom validation message for the Field" type="string"/>
      </docblock>
    </member>
    <member name="template" type="{unknown}" visibility="protected" line="85">
      <docblock>
        <description compact="Name of the template used to render this form field. If not set, then will look up the class ancestry for the first matching template where the template name equals the class name.">To explicitly use a custom template or one named other than the form
field see <link xmlns="http://xml.phpdox.net/src" value="setTemplate()"/>, <link xmlns="http://xml.phpdox.net/src" value="setFieldHolderTemplate()"/></description>
        <var type="string"/>
      </docblock>
    </member>
    <member name="attributes" type="array" visibility="protected" line="94">
      <docblock>
        <description/>
        <var description="All attributes on the form field (not the field holder)." type="array">Partially determined based on other instance properties, please use <link xmlns="http://xml.phpdox.net/src" value="getAttributes()"/>.
</var>
      </docblock>
    </member>
    <method name="name_to_label" start="108" end="118" abstract="false" final="false" static="true" visibility="public">
      <docblock>
        <description compact="Takes a fieldname and converts camelcase to spaced words. Also resolves combined fieldnames with dot syntax to spaced words.">Examples:
- 'TotalAmount' will return 'Total Amount'
- 'Organisation.ZipCode' will return 'Organisation Zip Code'</description>
        <param type="string" variable="$fieldName"/>
        <return type="string"/>
      </docblock>
      <parameter name="fieldName" byreference="false" type="{unknown}"/>
    </method>
    <method name="create_tag" start="123" end="135" abstract="false" final="false" static="true" visibility="public">
      <docblock>
        <description compact="Construct and return HTML tag."/>
      </docblock>
      <parameter name="tag" byreference="false" type="{unknown}"/>
      <parameter name="attributes" byreference="false" type="{unknown}"/>
      <parameter name="content" byreference="false" type="{unknown}" default="null"/>
      <inline>
        <comment value="Note: as indicated by the $k == value item here; the decisions over what to include in the attributes" line="126"/>
        <comment value="can sometimes get finicky" line="127"/>
      </inline>
    </method>
    <constructor name="__construct" start="144" end="151" abstract="false" final="false" static="false" visibility="public">
      <docblock>
        <description compact="Creates a new field."/>
        <param description="The internal field name, passed to forms." type="string" variable="$name"/>
        <param description="The human-readable field label." type="string" variable="$title"/>
        <param description="The value of the field." type="mixed" variable="$value"/>
      </docblock>
      <parameter name="name" byreference="false" type="{unknown}"/>
      <parameter name="title" byreference="false" type="{unknown}" default="null"/>
      <parameter name="value" byreference="false" type="{unknown}" default="null"/>
    </constructor>
    <method name="Link" start="156" end="158" abstract="false" final="false" static="false" visibility="public">
      <docblock>
        <description compact="Return a Link to this field"/>
      </docblock>
      <parameter name="action" byreference="false" type="{unknown}" default="null"/>
    </method>
    <method name="ID" start="165" end="169" abstract="false" final="false" static="false" visibility="public">
      <docblock>
        <description compact="Returns the HTML ID of the field - used in the template by label tags.">The ID is generated as FormName_FieldName.  All Field functions should ensure
that this ID is included in the field.</description>
      </docblock>
    </method>
    <method name="getName" start="176" end="178" abstract="false" final="false" static="false" visibility="public">
      <docblock>
        <description compact="Returns the field name - used by templates."/>
        <return type="string"/>
      </docblock>
    </method>
    <method name="Message" start="186" end="188" abstract="false" final="false" static="false" visibility="public">
      <docblock>
        <description compact="Returns the field message, used by form validation.">Use <link xmlns="http://xml.phpdox.net/src" value="setError()"/> to set this property.
</description>
        <return type="string"/>
      </docblock>
    </method>
    <method name="MessageType" start="198" end="200" abstract="false" final="false" static="false" visibility="public">
      <docblock>
        <description compact="Returns the field message type, used by form validation.">Arbitrary value which is mostly used for CSS classes
in the rendered HTML, e.g. "required".
Use <link xmlns="http://xml.phpdox.net/src" value="setError()"/> to set this property.
</description>
        <return type="string"/>
      </docblock>
    </method>
    <method name="Value" start="205" end="207" abstract="false" final="false" static="false" visibility="public">
      <docblock>
        <description compact="Returns the field value - used by templates."/>
      </docblock>
    </method>
    <method name="saveInto" start="215" end="219" abstract="false" final="false" static="false" visibility="public">
      <docblock>
        <description compact="Method to save this form field into the given data object.">By default, makes use of $this-&gt;dataValue()</description>
        <param description="DataObject to save data into" type="object" variable="$record">
          <type full="DataObjectInterface" namespace="" name="DataObjectInterface"/>
        </param>
      </docblock>
      <parameter name="record" byreference="false" type="object">
        <type full="\\DataObjectInterface" namespace="\" name="DataObjectInterface"/>
      </parameter>
    </method>
    <method name="dataValue" start="224" end="226" abstract="false" final="false" static="false" visibility="public">
      <docblock>
        <description compact="Returns the field value suitable for insertion into the data object"/>
      </docblock>
    </method>
    <method name="Title" start="231" end="233" abstract="false" final="false" static="false" visibility="public">
      <docblock>
        <description compact="Returns the field label - used by templates."/>
      </docblock>
    </method>
    <method name="setTitle" start="235" end="238" abstract="false" final="false" static="false" visibility="public">
      <parameter name="val" byreference="false" type="{unknown}"/>
    </method>
    <method name="RightTitle" start="246" end="248" abstract="false" final="false" static="false" visibility="public">
      <docblock>
        <description compact="Gets the contextual label than can be used for additional field description.">Can be shown to the right or under the field in question.</description>
        <return description="Contextual label text." type="string"/>
      </docblock>
    </method>
    <method name="setRightTitle" start="255" end="258" abstract="false" final="false" static="false" visibility="public">
      <docblock>
        <description compact="Sets the contextual label."/>
        <param description="Text to set on the label." variable="$val" type="string"/>
      </docblock>
      <parameter name="val" byreference="false" type="{unknown}"/>
    </method>
    <method name="LeftTitle" start="260" end="262" abstract="false" final="false" static="false" visibility="public"/>
    <method name="setLeftTitle" start="264" end="267" abstract="false" final="false" static="false" visibility="public">
      <parameter name="val" byreference="false" type="{unknown}"/>
    </method>
    <method name="extraClass" start="277" end="294" abstract="false" final="false" static="false" visibility="public">
      <docblock>
        <description compact="Compiles all CSS-classes. Optionally includes a &quot;nolabel&quot;-class if no title was set on the formfield.">Uses <link xmlns="http://xml.phpdox.net/src" value="Message()"/> and <link xmlns="http://xml.phpdox.net/src" value="MessageType()"/> to add validatoin
error classes which can be used to style the contained tags.
</description>
        <return description="CSS-classnames" type="string"/>
      </docblock>
      <inline>
        <comment value="Allow customization of label and field tag positioning" line="284"/>
        <comment value="Allow custom styling of any element in the container based" line="287"/>
        <comment value="on validation errors, e.g. red borders on input tags." line="288"/>
        <comment value="CSS-Class needs to be different from the one rendered" line="289"/>
        <comment value="through {@link FieldHolder()}" line="290"/>
      </inline>
    </method>
    <method name="addExtraClass" start="302" end="310" abstract="false" final="false" static="false" visibility="public">
      <docblock>
        <description compact="Add one or more CSS-classes to the formfield-container. Multiple class names should be space delimited."/>
        <param type="string" variable="$class"/>
      </docblock>
      <parameter name="class" byreference="false" type="{unknown}"/>
    </method>
    <method name="removeExtraClass" start="317" end="325" abstract="false" final="false" static="false" visibility="public">
      <docblock>
        <description compact="Remove one or more CSS-classes from the formfield-container."/>
        <param type="string" variable="$class"/>
      </docblock>
      <parameter name="class" byreference="false" type="{unknown}"/>
    </method>
    <method name="setAttribute" start="344" end="347" abstract="false" final="false" static="false" visibility="public">
      <docblock>
        <description compact="Set an HTML attribute on the field element, mostly an &lt;input&gt; tag.">Some attributes are best set through more specialized methods, to avoid interfering with built-in behaviour:
- 'class': <link xmlns="http://xml.phpdox.net/src" value="addExtraClass()"/>- 'title': <link xmlns="http://xml.phpdox.net/src" value="setDescription()"/>- 'value': <link xmlns="http://xml.phpdox.net/src" value="setValue"/>- 'name': <link xmlns="http://xml.phpdox.net/src" value="setName"/>CAUTION Doesn't work on most fields which are composed of more than one HTML form field:
AjaxUniqueTextField, CheckboxSetField, ComplexTableField, CompositeField, ConfirmedPasswordField,
CountryDropdownField, CreditCardField, CurrencyField, DateField, DatetimeField, FieldGroup, GridField,
HtmlEditorField, ImageField, ImageFormAction, InlineFormAction, ListBoxField, etc.
</description>
        <param type="string"/>
        <param type="string"/>
      </docblock>
      <parameter name="name" byreference="false" type="{unknown}"/>
      <parameter name="value" byreference="false" type="{unknown}"/>
    </method>
    <method name="getAttribute" start="355" end="358" abstract="false" final="false" static="false" visibility="public">
      <docblock>
        <description compact="Get an HTML attribute defined by the field, or added through {@link setAttribute()}.">Caution: Doesn't work on all fields, see <link xmlns="http://xml.phpdox.net/src" value="setAttribute()"/>.
</description>
        <return type="string"/>
      </docblock>
      <parameter name="name" byreference="false" type="{unknown}"/>
    </method>
    <method name="getAttributes" start="363" end="380" abstract="false" final="false" static="false" visibility="public">
      <docblock>
        <description/>
        <return type="array"/>
      </docblock>
    </method>
    <method name="getAttributesHTML" start="387" end="407" abstract="false" final="false" static="false" visibility="public">
      <docblock>
        <description/>
        <param description="Custom attributes to process. Falls back to {@link getAttributes()}." type="object">If at least one argument is passed as a string, all arguments act as excludes by name.<type full="Array" namespace="" name="Array"/></param>
        <return description="HTML attributes, ready for insertion into an HTML tag" type="string"/>
      </docblock>
      <parameter name="attrs" byreference="false" type="{unknown}" default="null"/>
      <inline>
        <comment value="Remove empty" line="392"/>
        <comment value="Remove excluded" line="397"/>
        <comment value="Create markkup" line="400"/>
      </inline>
    </method>
    <method name="attrTitle" start="412" end="414" abstract="false" final="false" static="false" visibility="public">
      <docblock>
        <description compact="Returns a version of a title suitable for insertion into an HTML attribute"/>
      </docblock>
    </method>
    <method name="attrValue" start="418" end="420" abstract="false" final="false" static="false" visibility="public">
      <docblock>
        <description compact="Returns a version of a title suitable for insertion into an HTML attribute"/>
      </docblock>
    </method>
    <method name="setValue" start="429" end="432" abstract="false" final="false" static="false" visibility="public">
      <docblock>
        <description compact="Set the field value."/>
        <param type="mixed" variable="$value"/>
        <param description="Optional data source passed in by {@see Form::loadDataFrom}" type="mixed" variable="$data"/>
        <return description="Self reference" type="object">
          <type full="FormField" namespace="" name="FormField"/>
        </return>
      </docblock>
      <parameter name="value" byreference="false" type="{unknown}"/>
    </method>
    <method name="setName" start="437" end="440" abstract="false" final="false" static="false" visibility="public">
      <docblock>
        <description compact="Set the field name"/>
      </docblock>
      <parameter name="name" byreference="false" type="{unknown}"/>
    </method>
    <method name="setForm" start="447" end="450" abstract="false" final="false" static="false" visibility="public">
      <docblock>
        <description compact="Set the container form.">This is called whenever you create a new form and put fields inside it, so that you don't
have to worry about linking the two.</description>
      </docblock>
      <parameter name="form" byreference="false" type="{unknown}"/>
    </method>
    <method name="getForm" start="457" end="459" abstract="false" final="false" static="false" visibility="public">
      <docblock>
        <description compact="Get the currently used form."/>
        <return type="object">
          <type full="Form" namespace="" name="Form"/>
        </return>
      </docblock>
    </method>
    <method name="securityTokenEnabled" start="466" end="471" abstract="false" final="false" static="false" visibility="public">
      <docblock>
        <description compact="Return TRUE if security token protection is enabled on the parent {@link Form}."/>
        <return type="object">
          <type full="bool" namespace="" name="bool"/>
        </return>
      </docblock>
    </method>
    <method name="setError" start="480" end="485" abstract="false" final="false" static="false" visibility="public">
      <docblock>
        <description compact="Sets the error message to be displayed on the form field Set by php validation of the form."/>
        <param description="Message to show to the user. Allows HTML content," type="string" variable="$message">which means you need to use Convert::raw2xml() for any user supplied data.</param>
      </docblock>
      <parameter name="message" byreference="false" type="{unknown}"/>
      <parameter name="messageType" byreference="false" type="{unknown}"/>
    </method>
    <method name="setCustomValidationMessage" start="494" end="498" abstract="false" final="false" static="false" visibility="public">
      <docblock>
        <description compact="Set the custom error message to show instead of the default format of Please Fill In XXX. Different from setError() as that appends it to the standard error messaging"/>
        <param description="Message for the error" type="string"/>
      </docblock>
      <parameter name="msg" byreference="false" type="{unknown}"/>
    </method>
    <method name="getCustomValidationMessage" start="508" end="510" abstract="false" final="false" static="false" visibility="public">
      <docblock>
        <description compact="Get the custom error message for this form field. If a custom message has not been defined then just return blank. The default error is defined on {@link Validator}."/>
        <todo value="Should the default error message be stored here instead"/>
        <return type="string"/>
      </docblock>
    </method>
    <method name="setTemplate" start="519" end="523" abstract="false" final="false" static="false" visibility="public">
      <docblock>
        <description compact="Set name of template (without path or extension).">Caution: Not consistently implemented in all subclasses,
please check the <link xmlns="http://xml.phpdox.net/src" value="Field()"/> method on the subclass for support.
</description>
        <param type="string"/>
      </docblock>
      <parameter name="template" byreference="false" type="{unknown}"/>
    </method>
    <method name="getTemplate" start="528" end="530" abstract="false" final="false" static="false" visibility="public">
      <docblock>
        <description/>
        <return type="string"/>
      </docblock>
    </method>
    <method name="getFieldHolderTemplate" start="535" end="537" abstract="false" final="false" static="false" visibility="public">
      <docblock>
        <description/>
        <return type="string"/>
      </docblock>
    </method>
    <method name="setFieldHolderTemplate" start="548" end="552" abstract="false" final="false" static="false" visibility="public">
      <docblock>
        <description compact="Set name of template (without path or extension) for the holder, which in turn is responsible for rendering {@link Field()}.">Caution: Not consistently implemented in all subclasses,
please check the <link xmlns="http://xml.phpdox.net/src" value="Field()"/> method on the subclass for support.
</description>
        <param type="string"/>
      </docblock>
      <parameter name="template" byreference="false" type="{unknown}"/>
    </method>
    <method name="getSmallFieldHolderTemplate" start="557" end="559" abstract="false" final="false" static="false" visibility="public">
      <docblock>
        <description/>
        <return type="string"/>
      </docblock>
    </method>
    <method name="setSmallFieldHolderTemplate" start="570" end="574" abstract="false" final="false" static="false" visibility="public">
      <docblock>
        <description compact="Set name of template (without path or extension) for the small holder, which in turn is responsible for rendering {@link Field()}.">Caution: Not consistently implemented in all subclasses,
please check the <link xmlns="http://xml.phpdox.net/src" value="Field()"/> method on the subclass for support.
</description>
        <param type="string"/>
      </docblock>
      <parameter name="template" byreference="false" type="{unknown}"/>
    </method>
    <method name="Field" start="586" end="590" abstract="false" final="false" static="false" visibility="public">
      <docblock>
        <description compact="Returns the form field - used by templates.">Although FieldHolder is generally what is inserted into templates, all of the field holder
templates make use of $Field.  It's expected that FieldHolder will give you the "complete"
representation of the field on the form, whereas Field will give you the core editing widget,
such as an input tag.</description>
        <param description="key value pairs of template variables" type="array" variable="$properties"/>
        <return type="string"/>
      </docblock>
      <parameter name="properties" byreference="false" type="array"/>
    </method>
    <method name="FieldHolder" start="602" end="606" abstract="false" final="false" static="false" visibility="public">
      <docblock>
        <description compact="Returns a &quot;field holder&quot; for this field - used by templates.">Forms are constructed by concatenating a number of these field holders.
The default field holder is a label and a form field inside a div.</description>
        <see value="FieldHolder.ss"/>
        <param description="key value pairs of template variables" type="array" variable="$properties"/>
        <return type="string"/>
      </docblock>
      <parameter name="properties" byreference="false" type="array"/>
    </method>
    <method name="SmallFieldHolder" start="615" end="619" abstract="false" final="false" static="false" visibility="public">
      <docblock>
        <description compact="Returns a restricted field holder used within things like FieldGroups."/>
        <param type="array" variable="$properties"/>
        <return type="string"/>
      </docblock>
      <parameter name="properties" byreference="false" type="array"/>
    </method>
    <method name="getTemplates" start="626" end="628" abstract="false" final="false" static="false" visibility="public">
      <docblock>
        <description compact="Returns an array of templates to use for rendering {@link FieldH}"/>
        <return type="array"/>
      </docblock>
    </method>
    <method name="getFieldHolderTemplates" start="635" end="640" abstract="false" final="false" static="false" visibility="public">
      <docblock>
        <description compact="Returns an array of templates to use for rendering {@link FieldHolder}"/>
        <return type="array"/>
      </docblock>
    </method>
    <method name="getSmallFieldHolderTemplates" start="647" end="652" abstract="false" final="false" static="false" visibility="public">
      <docblock>
        <description compact="Returns an array of templates to use for rendering {@link SmallFieldHolder}"/>
        <return type="array"/>
      </docblock>
    </method>
    <method name="isComposite" start="682" end="684" abstract="false" final="false" static="false" visibility="public">
      <docblock>
        <description compact="Returns true if this field is a composite field.">To create composite field types, you should subclass <link xmlns="http://xml.phpdox.net/src" value="CompositeField"/>.
</description>
      </docblock>
    </method>
    <method name="hasData" start="694" end="696" abstract="false" final="false" static="false" visibility="public">
      <docblock>
        <description compact="Returns true if this field has its own data.">Some fields, such as titles and composite fields, don't actually have any data.  It doesn't
make sense for data-focused methods to look at them.  By overloading hasData() to return false,
you can prevent any data-focused methods from looking at it.</description>
        <see value="FieldList::collateDataFields()"/>
      </docblock>
    </method>
    <method name="isReadonly" start="701" end="703" abstract="false" final="false" static="false" visibility="public">
      <docblock>
        <description/>
        <return type="boolean"/>
      </docblock>
    </method>
    <method name="setReadonly" start="710" end="713" abstract="false" final="false" static="false" visibility="public">
      <docblock>
        <description compact="Sets readonly-flag on form-field. Please use performReadonlyTransformation() to actually transform this instance."/>
        <param description="Setting &quot;false&quot; has no effect on the field-state." variable="$bool" type="boolean"/>
      </docblock>
      <parameter name="bool" byreference="false" type="{unknown}"/>
    </method>
    <method name="isDisabled" start="718" end="720" abstract="false" final="false" static="false" visibility="public">
      <docblock>
        <description/>
        <return type="boolean"/>
      </docblock>
    </method>
    <method name="setDisabled" start="727" end="730" abstract="false" final="false" static="false" visibility="public">
      <docblock>
        <description compact="Sets disabed-flag on form-field. Please use performDisabledTransformation() to actually transform this instance."/>
        <param description="Setting &quot;false&quot; has no effect on the field-state." variable="$bool" type="boolean"/>
      </docblock>
      <parameter name="bool" byreference="false" type="{unknown}"/>
    </method>
    <method name="performReadonlyTransformation" start="735" end="739" abstract="false" final="false" static="false" visibility="public">
      <docblock>
        <description compact="Returns a readonly version of this field"/>
      </docblock>
    </method>
    <method name="performDisabledTransformation" start="748" end="758" abstract="false" final="false" static="false" visibility="public">
      <docblock>
        <description compact="Return a disabled version of this field.">Tries to find a class of the class name of this field suffixed with "_Disabled",
failing that, finds a method <link xmlns="http://xml.phpdox.net/src" value="setDisabled()"/>.
</description>
        <return type="object">
          <type full="FormField" namespace="" name="FormField"/>
        </return>
      </docblock>
    </method>
    <method name="transform" start="760" end="762" abstract="false" final="false" static="false" visibility="public">
      <parameter name="trans" byreference="false" type="object">
        <type full="\\FormTransformation" namespace="\" name="FormTransformation"/>
      </parameter>
    </method>
    <method name="hasClass" start="764" end="768" abstract="false" final="false" static="false" visibility="public">
      <parameter name="class" byreference="false" type="{unknown}"/>
    </method>
    <method name="Type" start="778" end="780" abstract="false" final="false" static="false" visibility="public">
      <docblock>
        <description compact="Returns the field type - used by templates.">The field type is the class name with the word Field dropped off the end, all lowercase.
It's handy for assigning HTML classes. Doesn't signify the &lt;input type&gt; attribute,
see {link getAttributes()}.</description>
        <return type="string"/>
      </docblock>
    </method>
    <method name="createTag" start="785" end="788" abstract="false" final="false" static="false" visibility="public">
      <docblock>
        <description/>
        <deprecated value="3.2 Use FormField::create_tag()"/>
      </docblock>
      <parameter name="tag" byreference="false" type="{unknown}"/>
      <parameter name="attributes" byreference="false" type="{unknown}"/>
      <parameter name="content" byreference="false" type="{unknown}" default="null"/>
    </method>
    <method name="validate" start="798" end="800" abstract="false" final="false" static="false" visibility="public">
      <docblock>
        <description compact="Abstract method each {@link FormField} subclass must implement, determines whether the field is valid or not based on the value."/>
        <todo value="Make this abstract."/>
        <param type="object">
          <type full="Validator" namespace="" name="Validator"/>
        </param>
        <return type="boolean"/>
      </docblock>
      <parameter name="validator" byreference="false" type="{unknown}"/>
    </method>
    <method name="setDescription" start="809" end="812" abstract="false" final="false" static="false" visibility="public">
      <docblock>
        <description compact="Describe this field, provide help text for it.">By default, renders as a &lt;span class="description"&gt;
underneath the form field.</description>
        <return description="Description" type="string"/>
      </docblock>
      <parameter name="description" byreference="false" type="{unknown}"/>
    </method>
    <method name="getDescription" start="817" end="819" abstract="false" final="false" static="false" visibility="public">
      <docblock>
        <description/>
        <return type="string"/>
      </docblock>
    </method>
    <method name="debug" start="821" end="824" abstract="false" final="false" static="false" visibility="public"/>
    <method name="forTemplate" start="830" end="832" abstract="false" final="false" static="false" visibility="public">
      <docblock>
        <description compact="This function is used by the template processor.  If you refer to a field as a $ variable, it will return the $Field value."/>
      </docblock>
    </method>
    <method name="Required" start="838" end="842" abstract="false" final="false" static="false" visibility="public">
      <docblock>
        <description/>
        <uses value="Validator-&gt;fieldIsRequired()"/>
        <return type="boolean"/>
      </docblock>
    </method>
    <method name="setContainerFieldList" start="850" end="853" abstract="false" final="false" static="false" visibility="public">
      <docblock>
        <description compact="Set the FieldList that contains this field."/>
        <param type="object" variable="$list">
          <type full="FieldList" namespace="" name="FieldList"/>
        </param>
        <return type="object">
          <type full="FieldList" namespace="" name="FieldList"/>
        </return>
      </docblock>
      <parameter name="list" byreference="false" type="{unknown}"/>
    </method>
    <method name="getContainerFieldList" start="860" end="862" abstract="false" final="false" static="false" visibility="public">
      <docblock>
        <description compact="Get the FieldList that contains this field."/>
        <return type="object">
          <type full="FieldList" namespace="" name="FieldList"/>
        </return>
      </docblock>
    </method>
    <method name="rootFieldList" start="864" end="867" abstract="false" final="false" static="false" visibility="public"/>
    <method name="castedCopy" start="885" end="905" abstract="false" final="false" static="false" visibility="public">
      <docblock>
        <description compact="Returns another instance of this field, but &quot;cast&quot; to a different class.">The logic tries to retain all of the instance properties,
and may be overloaded by subclasses to set additional ones.
Assumes the standard FormField parameter signature with
its name as the only mandatory argument. Mainly geared towards
creating *_Readonly or *_Disabled subclasses of the same type,
or casting to a <link xmlns="http://xml.phpdox.net/src" value="ReadonlyField"/>.
Does not copy custom field templates, since they probably won't apply to
the new instance.
</description>
        <param description="Class name for copy, or existing copy instance to update" type="object" variable="$classOrCopy">
          <type full="String" namespace="" name="String"/>
        </param>
        <return type="object">
          <type full="FormField" namespace="" name="FormField"/>
        </return>
      </docblock>
      <parameter name="classOrCopy" byreference="false" type="{unknown}"/>
      <inline>
        <comment value="Only include built-in attributes, ignore anything" line="896"/>
        <comment value="set through getAttributes(), since those might change important characteristics" line="897"/>
        <comment value="of the field, e.g. its &quot;type&quot; attribute." line="898"/>
      </inline>
    </method>
  </parent>
  <parent full="RequestHandler" namespace="" name="RequestHandler">
    <extends full="ViewableData" namespace="" name="ViewableData"/>
    <member name="request" type="{unknown}" default="null" visibility="protected" line="42">
      <docblock>
        <description/>
        <var description="$request The request object that the controller was called with." type="object">Set in <link xmlns="http://xml.phpdox.net/src" value="handleRequest()"/>. Useful to generate the {}
<type full="SS_HTTPRequest" namespace="" name="SS_HTTPRequest"/></var>
      </docblock>
    </member>
    <member name="model" type="{unknown}" default="null" visibility="protected" line="47">
      <docblock>
        <description compact="The DataModel for this request"/>
      </docblock>
    </member>
    <member name="brokenOnConstruct" type="{unknown}" default="true" visibility="protected" line="56">
      <docblock>
        <description compact="This variable records whether RequestHandler::__construct() was called or not. Useful for checking if subclasses have called parent::__construct()"/>
        <var type="boolean"/>
      </docblock>
    </member>
    <constructor name="__construct" start="110" end="120" abstract="false" final="false" static="false" visibility="public">
      <inline>
        <comment value="Check necessary to avoid class conflicts before manifest is rebuilt" line="113"/>
        <comment value="This will prevent bugs if setDataModel() isn't called." line="116"/>
      </inline>
    </constructor>
    <method name="setDataModel" start="125" end="127" abstract="false" final="false" static="false" visibility="public">
      <docblock>
        <description compact="Set the DataModel for this request."/>
      </docblock>
      <parameter name="model" byreference="false" type="{unknown}"/>
    </method>
    <method name="handleRequest" start="150" end="239" abstract="false" final="false" static="false" visibility="public">
      <docblock>
        <description compact="Handles URL requests.">- ViewableData::handleRequest() iterates through each rule in <link xmlns="http://xml.phpdox.net/src" value="self::$url_handlers"/>.
 - If the rule matches, the named method will be called.
 - If there is still more URL to be processed, then handleRequest()
   is called on the object that that method returns.
Once all of the URL has been processed, the final result is returned.
However, if the final result is an array, this
array is interpreted as being additional template data to customise the
2nd to last result with, rather than an object
in its own right.  This is most frequently used when a Controller's
action will return an array of data with which to
customise the controller.
</description>
        <param description="{@link SS_HTTPRequest} object that is reponsible for distributing URL parsing" variable="$request" type="object">
          <type full="The" namespace="" name="The"/>
        </param>
        <uses value="SS_HTTPRequest"/>
        <uses value="SS_HTTPRequest-&gt;match()"/>
        <return type="object">
          <type full="SS_HTTPResponse|RequestHandler|string|array" namespace="" name="SS_HTTPResponse|RequestHandler|string|array"/>
        </return>
      </docblock>
      <parameter name="request" byreference="false" type="object">
        <type full="\\SS_HTTPRequest" namespace="\" name="SS_HTTPRequest"/>
      </parameter>
      <parameter name="model" byreference="false" type="object">
        <type full="\\DataModel" namespace="\" name="DataModel"/>
      </parameter>
      <inline>
        <comment value="$handlerClass is used to step up the class hierarchy to implement url_handlers inheritance" line="151"/>
        <comment value="If nothing matches, return this object" line="163"/>
        <comment value="Start to find what action to call. Start by using what findAction returned" line="166"/>
        <comment value="We used to put &quot;handleAction&quot; as the action on controllers, but (a) this could only be called when" line="169"/>
        <comment value="you had $Action in your rule, and (b) RequestHandler didn't have one. $Action is better" line="170"/>
        <todo value="Fix LeftAndMain usage" line="172"/>
        <comment value="Deprecation::notice('3.2.0', 'Calling handleAction directly is deprecated - use $Action instead');" line="173"/>
        <comment value="Actions can reference URL parameters, eg, '$Action/$ID/$OtherID' =&gt; '$Action'," line="177"/>
        <comment value="If we return a RequestHandler, call handleRequest() on that, even if there is no more URL to" line="214"/>
        <comment value="parse. It might have its own handler. However, we only do this if we haven't just parsed an" line="215"/>
        <comment value="empty rule ourselves, to prevent infinite loops. Also prevent further handling of controller" line="216"/>
        <comment value="actions which return themselves to avoid infinite loops." line="217"/>
        <comment value="Array results can be used to handle" line="224"/>
      </inline>
    </method>
    <method name="findAction" start="241" end="267" abstract="false" final="false" static="false" visibility="protected">
      <parameter name="request" byreference="false" type="{unknown}"/>
      <inline>
        <comment value="We stop after RequestHandler; in other words, at ViewableData" line="244"/>
      </inline>
    </method>
    <method name="handleAction" start="278" end="294" abstract="false" final="false" static="false" visibility="protected">
      <docblock>
        <description compact="Given a request, and an action name, call that action name on this RequestHandler">Must not raise SS_HTTPResponse_Exceptions - instead it should return</description>
        <param variable="$request"/>
        <param variable="$action"/>
        <return type="object">
          <type full="SS_HTTPResponse" namespace="" name="SS_HTTPResponse"/>
        </return>
      </docblock>
      <parameter name="request" byreference="false" type="{unknown}"/>
      <parameter name="action" byreference="false" type="{unknown}"/>
    </method>
    <method name="allowedActions" start="308" end="340" abstract="false" final="false" static="false" visibility="public">
      <docblock>
        <description compact="Get a array of allowed actions defined on this controller, any parent classes or extensions.">Caution: Since 3.1, allowed_actions definitions only apply
to methods on the controller they're defined on,
so it is recommended to use the $class argument
when invoking this method.</description>
        <param type="object" variable="$limitToClass">
          <type full="String" namespace="" name="String"/>
        </param>
        <return type="object">
          <type full="array|null" namespace="" name="array|null"/>
        </return>
      </docblock>
      <parameter name="limitToClass" byreference="false" type="{unknown}" default="null"/>
      <inline>
        <comment value="convert all keys and values to lowercase to" line="328"/>
        <comment value="allow for easier comparison, unless it is a permission code" line="329"/>
      </inline>
    </method>
    <method name="hasAction" start="350" end="383" abstract="false" final="false" static="false" visibility="public">
      <docblock>
        <description compact="Checks if this request handler has a specific action, even if the current user cannot access it.">Includes class ancestry and extensions in the checks.</description>
        <param type="string" variable="$action"/>
        <return type="object">
          <type full="bool" namespace="" name="bool"/>
        </return>
      </docblock>
      <parameter name="action" byreference="false" type="{unknown}"/>
      <inline>
        <comment value="Don't allow access to any non-public methods (inspect instance plus all extensions)" line="353"/>
        <comment value="Check if the action is defined in the allowed actions of any ancestry class" line="365"/>
        <comment value="as either a key or value. Note that if the action is numeric, then keys are not" line="366"/>
        <comment value="searched for actions to prevent actual array keys being recognised as actions." line="367"/>
      </inline>
    </method>
    <method name="definingClassForAction" start="388" end="399" abstract="false" final="false" static="false" visibility="protected">
      <docblock>
        <description compact="Return the class that defines the given action, so that we know where to check allowed_actions."/>
      </docblock>
      <parameter name="actionOrigCasing" byreference="false" type="{unknown}"/>
    </method>
    <method name="checkAccessAction" start="405" end="454" abstract="false" final="false" static="false" visibility="public">
      <docblock>
        <description compact="Check that the given action is allowed to be called from a URL.">It will interrogate <link xmlns="http://xml.phpdox.net/src" value="self::$allowed_actions"/> to determine this.
</description>
      </docblock>
      <parameter name="action" byreference="false" type="{unknown}"/>
      <inline>
        <comment value="Get actions for this specific class (without inheritance)" line="412"/>
        <comment value="check if specific action is set" line="416"/>
        <comment value="TRUE should always allow access" line="421"/>
        <comment value="If we don't have a match in allowed_actions," line="447"/>
        <comment value="whitelist the 'index' action as well as undefined actions based on configuration." line="448"/>
      </inline>
    </method>
    <method name="httpError" start="464" end="473" abstract="false" final="false" static="false" visibility="public">
      <docblock>
        <description compact="Throws a HTTP error response encased in a {@link SS_HTTPResponse_Exception}, which is later caught in {@link RequestHandler::handleAction()} and returned to the user."/>
        <param type="int" variable="$errorCode"/>
        <param description="Plaintext error message" type="string" variable="$errorMessage"/>
        <uses value="SS_HTTPResponse_Exception"/>
      </docblock>
      <parameter name="errorCode" byreference="false" type="{unknown}"/>
      <parameter name="errorMessage" byreference="false" type="{unknown}" default="null"/>
      <inline>
        <comment value="Call a handler method such as onBeforeHTTPError404" line="465"/>
        <comment value="Call a handler method such as onBeforeHTTPError, passing 404 as the first arg" line="468"/>
        <comment value="Throw a new exception" line="471"/>
      </inline>
    </method>
    <method name="getRequest" start="483" end="485" abstract="false" final="false" static="false" visibility="public">
      <docblock>
        <description compact="Returns the SS_HTTPRequest object that this controller is using.">Returns a placeholder <link xmlns="http://xml.phpdox.net/src" value="NullHTTPRequest"/> object unless
<link xmlns="http://xml.phpdox.net/src" value="handleAction()"/> or <link xmlns="http://xml.phpdox.net/src" value="handleRequest()"/> have been called,
which adds a reference to an actual <link xmlns="http://xml.phpdox.net/src" value="SS_HTTPRequest"/> object.
</description>
        <return type="object">
          <type full="SS_HTTPRequest|NullHTTPRequest" namespace="" name="SS_HTTPRequest|NullHTTPRequest"/>
        </return>
      </docblock>
    </method>
    <method name="setRequest" start="493" end="495" abstract="false" final="false" static="false" visibility="public">
      <docblock>
        <description compact="Typically the request is set through {@link handleAction()} or {@link handleRequest()}, but in some based we want to set it manually."/>
        <param type="object">
          <type full="SS_HTTPRequest" namespace="" name="SS_HTTPRequest"/>
        </param>
      </docblock>
      <parameter name="request" byreference="false" type="{unknown}"/>
    </method>
  </parent>
  <parent full="ViewableData" namespace="" name="ViewableData">
    <extends full="Object" namespace="" name="Object"/>
    <member name="failover" type="{unknown}" visibility="protected" line="51">
      <docblock>
        <description compact="A failover object to attempt to get data from if it is not present on this object."/>
        <var type="object">
          <type full="ViewableData" namespace="" name="ViewableData"/>
        </var>
      </docblock>
    </member>
    <member name="customisedObject" type="{unknown}" visibility="protected" line="56">
      <docblock>
        <description/>
        <var type="object">
          <type full="ViewableData" namespace="" name="ViewableData"/>
        </var>
      </docblock>
    </member>
    <method name="castingObjectCreator" start="72" end="74" abstract="false" final="false" static="true" visibility="public">
      <docblock>
        <description compact="Converts a field spec into an object creator. For example: &quot;Int&quot; becomes &quot;new Int($fieldName);&quot; and &quot;Varchar(50)&quot; becomes &quot;new Varchar($fieldName, 50);&quot;."/>
        <param description="The field spec" type="string" variable="$fieldSchema"/>
        <return type="string"/>
      </docblock>
      <parameter name="fieldSchema" byreference="false" type="{unknown}"/>
    </method>
    <method name="castingObjectCreatorPair" start="83" end="85" abstract="false" final="false" static="true" visibility="public">
      <docblock>
        <description compact="Convert a field schema (e.g. &quot;Varchar(50)&quot;) into a casting object creator array that contains both a className and castingHelper constructor code. See {@link castingObjectCreator} for more information about the constructor."/>
        <param type="string" variable="$fieldSchema"/>
        <return type="array"/>
      </docblock>
      <parameter name="fieldSchema" byreference="false" type="{unknown}"/>
    </method>
    <method name="__isset" start="95" end="97" abstract="false" final="false" static="false" visibility="public">
      <docblock>
        <description compact="Check if a field exists on this object or its failover."/>
        <param type="string" variable="$property"/>
        <return type="object">
          <type full="bool" namespace="" name="bool"/>
        </return>
      </docblock>
      <parameter name="property" byreference="false" type="{unknown}"/>
    </method>
    <method name="__get" start="106" end="114" abstract="false" final="false" static="false" visibility="public">
      <docblock>
        <description compact="Get the value of a property/field on this object. This will check if a method called get{$property} exists, then check if a field is available using {@link ViewableData::getField()}, then fall back on a failover object."/>
        <param type="string" variable="$property"/>
        <return type="mixed"/>
      </docblock>
      <parameter name="property" byreference="false" type="{unknown}"/>
    </method>
    <method name="__set" start="123" end="129" abstract="false" final="false" static="false" visibility="public">
      <docblock>
        <description compact="Set a property/field on this object. This will check for the existence of a method called set{$property}, then use the {@link ViewableData::setField()} method."/>
        <param type="string" variable="$property"/>
        <param type="mixed" variable="$value"/>
      </docblock>
      <parameter name="property" byreference="false" type="{unknown}"/>
      <parameter name="value" byreference="false" type="{unknown}"/>
    </method>
    <method name="hasField" start="137" end="139" abstract="false" final="false" static="false" visibility="public">
      <docblock>
        <description compact="Check if a field exists on this object. This should be overloaded in child classes."/>
        <param type="string" variable="$field"/>
        <return type="object">
          <type full="bool" namespace="" name="bool"/>
        </return>
      </docblock>
      <parameter name="field" byreference="false" type="{unknown}"/>
    </method>
    <method name="getField" start="147" end="149" abstract="false" final="false" static="false" visibility="public">
      <docblock>
        <description compact="Get the value of a field on this object. This should be overloaded in child classes."/>
        <param type="string" variable="$field"/>
        <return type="mixed"/>
      </docblock>
      <parameter name="field" byreference="false" type="{unknown}"/>
    </method>
    <method name="setField" start="157" end="159" abstract="false" final="false" static="false" visibility="public">
      <docblock>
        <description compact="Set a field on this object. This should be overloaded in child classes."/>
        <param type="string" variable="$field"/>
        <param type="mixed" variable="$value"/>
      </docblock>
      <parameter name="field" byreference="false" type="{unknown}"/>
      <parameter name="value" byreference="false" type="{unknown}"/>
    </method>
    <method name="defineMethods" start="167" end="186" abstract="false" final="false" static="false" visibility="public">
      <docblock>
        <description compact="Add methods from the {@link ViewableData::$failover} object, as well as wrapping any methods prefixed with an underscore into a {@link ViewableData::cachedCall()}."/>
      </docblock>
    </method>
    <method name="customise" start="197" end="209" abstract="false" final="false" static="false" visibility="public">
      <docblock>
        <description compact="Merge some arbitrary data in with this object. This method returns a {@link ViewableData_Customised} instance with references to both this and the new custom data.">Note that any fields you specify will take precedence over the fields on this object.</description>
        <param type="object" variable="$data">
          <type full="array|ViewableData" namespace="" name="array|ViewableData"/>
        </param>
        <return type="object">
          <type full="ViewableData_Customised" namespace="" name="ViewableData_Customised"/>
        </return>
      </docblock>
      <parameter name="data" byreference="false" type="{unknown}"/>
    </method>
    <method name="setCustomisedObj" start="214" end="216" abstract="false" final="false" static="false" visibility="public">
      <docblock>
        <description/>
        <param type="object" variable="$object">
          <type full="ViewableData" namespace="" name="ViewableData"/>
        </param>
      </docblock>
      <parameter name="object" byreference="false" type="object">
        <type full="\\ViewableData" namespace="\" name="ViewableData"/>
      </parameter>
    </method>
    <method name="castingHelperPair" start="231" end="234" abstract="false" final="false" static="false" visibility="public">
      <docblock>
        <description compact="Get the class a field on this object would be casted to, as well as the casting helper for casting a field to an object (see {@link ViewableData::castingHelper()} for information on casting helpers).">The returned array contains two keys:
 - className: the class the field would be casted to (e.g. "Varchar")
 - castingHelper: the casting helper for casting the field (e.g. "return new Varchar($fieldName)")</description>
        <param type="string" variable="$field"/>
        <return type="array"/>
      </docblock>
      <parameter name="field" byreference="false" type="{unknown}"/>
    </method>
    <method name="castingHelper" start="243" end="252" abstract="false" final="false" static="false" visibility="public">
      <docblock>
        <description compact="Return the &quot;casting helper&quot; (a piece of PHP code that when evaluated creates a casted value object) for a field on this object."/>
        <param type="string" variable="$field"/>
        <return type="string"/>
      </docblock>
      <parameter name="field" byreference="false" type="{unknown}"/>
    </method>
    <method name="castingClass" start="260" end="267" abstract="false" final="false" static="false" visibility="public">
      <docblock>
        <description compact="Get the class name a field on this object will be casted to"/>
        <param type="string" variable="$field"/>
        <return type="string"/>
      </docblock>
      <parameter name="field" byreference="false" type="{unknown}"/>
    </method>
    <method name="escapeTypeForField" start="275" end="279" abstract="false" final="false" static="false" visibility="public">
      <docblock>
        <description compact="Return the string-format type for the given field."/>
        <param type="string" variable="$field"/>
        <return description="'xml'|'raw'" type="string"/>
      </docblock>
      <parameter name="field" byreference="false" type="{unknown}"/>
    </method>
    <method name="buildCastingCache" start="286" end="308" abstract="false" final="false" static="false" visibility="public">
      <docblock>
        <description compact="Save the casting cache for this object (including data from any failovers) into a variable"/>
        <param type="object" variable="$cache">
          <type full="reference" namespace="" name="reference"/>
        </param>
      </docblock>
      <parameter name="cache" byreference="true" type="{unknown}"/>
    </method>
    <method name="renderWith" start="323" end="340" abstract="false" final="false" static="false" visibility="public">
      <docblock>
        <description compact="Render this object into the template, and get the result as a string. You can pass one of the following as the $template parameter:  - a template name (e.g. Page)  - an array of possible template names - the first valid one will be used  - an SSViewer instance"/>
        <param description="the template to render into" type="object" variable="$template">
          <type full="string|array|SSViewer" namespace="" name="string|array|SSViewer"/>
        </param>
        <param description="fields to customise() the object with before rendering" type="array" variable="$customFields"/>
        <return type="object">
          <type full="HTMLText" namespace="" name="HTMLText"/>
        </return>
      </docblock>
      <parameter name="template" byreference="false" type="{unknown}"/>
      <parameter name="customFields" byreference="false" type="{unknown}" default="null"/>
    </method>
    <method name="obj" start="352" end="390" abstract="false" final="false" static="false" visibility="public">
      <docblock>
        <description compact="Get the value of a field on this object, automatically inserting the value into any available casting objects that have been specified."/>
        <param type="string" variable="$fieldName"/>
        <param type="array" variable="$arguments"/>
        <param description="if TRUE, the value will ALWAYS be casted to an object before being returned," type="object" variable="$forceReturnedObject">even if there is no explicit casting information<type full="bool" namespace="" name="bool"/></param>
        <param description="a custom cache name" type="string" variable="$cacheName"/>
      </docblock>
      <parameter name="fieldName" byreference="false" type="{unknown}"/>
      <parameter name="arguments" byreference="false" type="{unknown}" default="null"/>
      <parameter name="forceReturnedObject" byreference="false" type="{unknown}" default="true"/>
      <parameter name="cache" byreference="false" type="{unknown}" default="false"/>
      <parameter name="cacheName" byreference="false" type="{unknown}" default="null"/>
      <inline>
        <comment value="HACK: Don't call the deprecated FormField::Name() method" line="356"/>
      </inline>
    </method>
    <method name="cachedCall" start="400" end="402" abstract="false" final="false" static="false" visibility="public">
      <docblock>
        <description compact="A simple wrapper around {@link ViewableData::obj()} that automatically caches the result so it can be used again without re-running the method."/>
        <param type="string" variable="$field"/>
        <param type="array" variable="$arguments"/>
        <param description="an optional custom cache identifier" type="string" variable="$identifier"/>
      </docblock>
      <parameter name="field" byreference="false" type="{unknown}"/>
      <parameter name="arguments" byreference="false" type="{unknown}" default="null"/>
      <parameter name="identifier" byreference="false" type="{unknown}" default="null"/>
    </method>
    <method name="hasValue" start="413" end="422" abstract="false" final="false" static="false" visibility="public">
      <docblock>
        <description compact="Checks if a given method/field has a valid value. If the result is an object, this will return the result of the exists method, otherwise will check if the result is not just an empty paragraph tag."/>
        <param type="string" variable="$field"/>
        <param type="array" variable="$arguments"/>
        <param type="object" variable="$cache">
          <type full="bool" namespace="" name="bool"/>
        </param>
        <return type="object">
          <type full="bool" namespace="" name="bool"/>
        </return>
      </docblock>
      <parameter name="field" byreference="false" type="{unknown}"/>
      <parameter name="arguments" byreference="false" type="{unknown}" default="null"/>
      <parameter name="cache" byreference="false" type="{unknown}" default="true"/>
    </method>
    <method name="XML_val" start="435" end="438" abstract="false" final="false" static="false" visibility="public">
      <docblock>
        <description compact="Get the string value of a field on this object that has been suitable escaped to be inserted directly into a template."/>
      </docblock>
      <parameter name="field" byreference="false" type="{unknown}"/>
      <parameter name="arguments" byreference="false" type="{unknown}" default="null"/>
      <parameter name="cache" byreference="false" type="{unknown}" default="false"/>
    </method>
    <method name="RAW_val" start="443" end="445" abstract="false" final="false" static="false" visibility="public">
      <docblock>
        <description compact="Return the value of the field without any escaping being applied."/>
      </docblock>
      <parameter name="field" byreference="false" type="{unknown}"/>
      <parameter name="arguments" byreference="false" type="{unknown}" default="null"/>
      <parameter name="cache" byreference="false" type="{unknown}" default="true"/>
    </method>
    <method name="SQL_val" start="450" end="452" abstract="false" final="false" static="false" visibility="public">
      <docblock>
        <description compact="Return the value of a field in an SQL-safe format."/>
      </docblock>
      <parameter name="field" byreference="false" type="{unknown}"/>
      <parameter name="arguments" byreference="false" type="{unknown}" default="null"/>
      <parameter name="cache" byreference="false" type="{unknown}" default="true"/>
    </method>
    <method name="JS_val" start="457" end="459" abstract="false" final="false" static="false" visibility="public">
      <docblock>
        <description compact="Return the value of a field in a JavaScript-save format."/>
      </docblock>
      <parameter name="field" byreference="false" type="{unknown}"/>
      <parameter name="arguments" byreference="false" type="{unknown}" default="null"/>
      <parameter name="cache" byreference="false" type="{unknown}" default="true"/>
    </method>
    <method name="ATT_val" start="464" end="466" abstract="false" final="false" static="false" visibility="public">
      <docblock>
        <description compact="Return the value of a field escaped suitable to be inserted into an XML node attribute."/>
      </docblock>
      <parameter name="field" byreference="false" type="{unknown}"/>
      <parameter name="arguments" byreference="false" type="{unknown}" default="null"/>
      <parameter name="cache" byreference="false" type="{unknown}" default="true"/>
    </method>
    <method name="getXMLValues" start="476" end="484" abstract="false" final="false" static="false" visibility="public">
      <docblock>
        <description compact="Get an array of XML-escaped values by field name"/>
        <param description="an array of field names" type="array" variable="$elements"/>
        <return type="array"/>
      </docblock>
      <parameter name="fields" byreference="false" type="{unknown}"/>
    </method>
    <method name="getIterator" start="496" end="498" abstract="false" final="false" static="false" visibility="public">
      <docblock>
        <description compact="Return a single-item iterator so you can iterate over the fields of a single record.">This is useful so you can use a single record inside a &lt;% control %&gt; block in a template - and then use
to access individual fields on this object.</description>
        <return type="object">
          <type full="ArrayIterator" namespace="" name="ArrayIterator"/>
        </return>
      </docblock>
    </method>
    <method name="Me" start="508" end="510" abstract="false" final="false" static="false" visibility="public">
      <docblock>
        <description compact="When rendering some objects it is necessary to iterate over the object being rendered, to do this, you need access to itself."/>
        <return type="object">
          <type full="ViewableData" namespace="" name="ViewableData"/>
        </return>
      </docblock>
    </method>
    <method name="ThemeDir" start="524" end="533" abstract="false" final="false" static="false" visibility="public">
      <docblock>
        <description compact="Return the directory if the current active theme (relative to the site root).">This method is useful for things such as accessing theme images from your template without hardcoding the theme
page - e.g. &lt;img src="$ThemeDir/images/something.gif"&gt;.

This method should only be used when a theme is currently active. However, it will fall over to the current
project directory.</description>
        <param description="the subtheme path to get" type="string" variable="$subtheme"/>
        <return type="string"/>
      </docblock>
      <parameter name="subtheme" byreference="false" type="{unknown}" default="false"/>
    </method>
    <method name="CSSClasses" start="545" end="561" abstract="false" final="false" static="false" visibility="public">
      <docblock>
        <description compact="Get part of the current classes ancestry to be used as a CSS class.">This method returns an escaped string of CSS classes representing the current classes ancestry until it hits a
stop point - e.g. "Page DataObject ViewableData".</description>
        <param description="the class to stop at (default: ViewableData)" type="string" variable="$stopAtClass"/>
        <return type="string"/>
        <uses value="ClassInfo"/>
      </docblock>
      <parameter name="stopAtClass" byreference="false" type="string" default="'ViewableData'"/>
      <inline>
        <comment value="optionally add template identifier" line="555"/>
      </inline>
    </method>
    <method name="Debug" start="568" end="570" abstract="false" final="false" static="false" visibility="public">
      <docblock>
        <description compact="Return debug information about this object that can be rendered into a template"/>
        <return type="object">
          <type full="ViewableData_Debugger" namespace="" name="ViewableData_Debugger"/>
        </return>
      </docblock>
    </method>
  </parent>
  <parent full="Object" namespace="" name="Object">
    <member name="class" type="{unknown}" visibility="public" line="54">
      <docblock>
        <description/>
        <var description="the class name" type="string"/>
      </docblock>
    </member>
    <member name="extension_instances" type="array" visibility="protected" line="67">
      <docblock>
        <description/>
        <var description="all current extension instances." type="array"/>
      </docblock>
    </member>
    <member name="beforeExtendCallbacks" type="array" visibility="protected" line="75">
      <docblock>
        <description compact="List of callbacks to call prior to extensions having extend called on them, each grouped by methodName."/>
        <var type="object">
          <type full="array[callable]" namespace="" name="array[callable]"/>
        </var>
      </docblock>
    </member>
    <member name="afterExtendCallbacks" type="array" visibility="protected" line="98">
      <docblock>
        <description compact="List of callbacks to call after extensions having extend called on them, each grouped by methodName."/>
        <var type="object">
          <type full="array[callable]" namespace="" name="array[callable]"/>
        </var>
      </docblock>
    </member>
    <method name="config" start="60" end="62" abstract="false" final="false" static="true" visibility="public">
      <docblock>
        <description compact="Get a configuration accessor for this class. Short hand for Config::inst()-&gt;get($this-&gt;class, .....)."/>
        <return type="object">
          <type full="Config_ForClass|null" namespace="" name="Config_ForClass|null"/>
        </return>
      </docblock>
    </method>
    <method name="beforeExtending" start="85" end="90" abstract="false" final="false" static="false" visibility="protected">
      <docblock>
        <description compact="Allows user code to hook into Object::extend prior to control being delegated to extensions. Each callback will be reset once called."/>
        <param description="The name of the method to hook into" type="string" variable="$method"/>
        <param description="The callback to execute" type="object" variable="$callback">
          <type full="callable" namespace="" name="callable"/>
        </param>
      </docblock>
      <parameter name="method" byreference="false" type="{unknown}"/>
      <parameter name="callback" byreference="false" type="{unknown}"/>
    </method>
    <method name="afterExtending" start="108" end="113" abstract="false" final="false" static="false" visibility="protected">
      <docblock>
        <description compact="Allows user code to hook into Object::extend after control being delegated to extensions. Each callback will be reset once called."/>
        <param description="The name of the method to hook into" type="string" variable="$method"/>
        <param description="The callback to execute" type="object" variable="$callback">
          <type full="callable" namespace="" name="callable"/>
        </param>
      </docblock>
      <parameter name="method" byreference="false" type="{unknown}"/>
      <parameter name="callback" byreference="false" type="{unknown}"/>
    </method>
    <method name="create" start="132" end="143" abstract="false" final="false" static="true" visibility="public">
      <docblock>
        <description compact="An implementation of the factory method, allows you to create an instance of a class">This method first for strong class overloads (singletons &amp; DB interaction), then custom class overloads. If an
overload is found, an instance of this is returned rather than the original class. To overload a class, use
{@link Object::useCustomClass()}

This can be called in one of two ways - either calling via the class directly,
or calling on Object and passing the class name as the first parameter. The following
are equivalent:
   $list = DataList::create('SiteTree');
  $list = SiteTree::get();</description>
        <param description="the class name" type="string" variable="$class"/>
        <param description="... arguments to pass to the constructor" type="mixed" variable="$arguments"/>
        <return type="object">
          <type full="static" namespace="" name="static"/>
        </return>
      </docblock>
      <inline>
        <comment value="Class to create should be the calling class if not Object," line="135"/>
        <comment value="otherwise the first parameter" line="136"/>
      </inline>
    </method>
    <method name="create_from_string" start="169" end="188" abstract="false" final="false" static="true" visibility="public">
      <docblock>
        <description compact="Create an object from a string representation.  It treats it as a PHP constructor without the 'new' keyword.  It also manages to construct the object without the use of eval().">Construction itself is done with Object::create(), so that Object::useCustomClass() calls
are respected.

`Object::create_from_string("Versioned('Stage','Live')")` will return the result of
`Versioned::create('Stage', 'Live);`

It is designed for simple, clonable objects.  The first time this method is called for a given
string it is cached, and clones of that object are returned.

If you pass the $firstArg argument, this will be prepended to the constructor arguments. It's
impossible to pass null as the firstArg argument.

`Object::create_from_string("Varchar(50)", "MyField")` will return the result of
`Vachar::create('MyField', '50');`

Arguments are always strings, although this is a quirk of the current implementation rather
than something that can be relied upon.</description>
      </docblock>
      <parameter name="classSpec" byreference="false" type="{unknown}"/>
      <parameter name="firstArg" byreference="false" type="{unknown}" default="null"/>
      <inline>
        <comment value="an $extension value can contain parameters as a string," line="171"/>
        <comment value="e.g. &quot;Versioned('Stage','Live')&quot;" line="172"/>
      </inline>
    </method>
    <method name="parse_class_spec" start="194" end="274" abstract="false" final="false" static="true" visibility="public">
      <docblock>
        <description compact="Parses a class-spec, such as &quot;Versioned('Stage','Live')&quot;, as passed to create_from_string().">Returns a 2-elemnent array, with classname and arguments</description>
      </docblock>
      <parameter name="classSpec" byreference="false" type="{unknown}"/>
      <inline>
        <comment value="Keep track of the current bucket that we're putting data into" line="200"/>
        <comment value="Get the class naem" line="207"/>
      </inline>
    </method>
    <method name="strong_create" start="284" end="293" abstract="false" final="false" static="true" visibility="public">
      <docblock>
        <description compact="Similar to {@link Object::create()}, except that classes are only overloaded if you set the $strong parameter to TRUE when using {@link Object::useCustomClass()}"/>
        <param description="the class name" type="string" variable="$class"/>
        <param description="... arguments to pass to the constructor" type="mixed" variable="$arguments"/>
        <return type="object">
          <type full="static" namespace="" name="static"/>
        </return>
      </docblock>
    </method>
    <method name="useCustomClass" start="304" end="310" abstract="false" final="false" static="true" visibility="public">
      <docblock>
        <description compact="This class allows you to overload classes with other classes when they are constructed using the factory method {@link Object::create()}"/>
        <param description="the class to replace" type="string" variable="$oldClass"/>
        <param description="the class to replace it with" type="string" variable="$newClass"/>
        <param description="allows you to enforce a certain class replacement under all circumstances. This is used in" type="object" variable="$strong">singletons and DB interaction classes<type full="bool" namespace="" name="bool"/></param>
      </docblock>
      <parameter name="oldClass" byreference="false" type="{unknown}"/>
      <parameter name="newClass" byreference="false" type="{unknown}"/>
      <parameter name="strong" byreference="false" type="{unknown}" default="false"/>
    </method>
    <method name="getCustomClass" start="318" end="326" abstract="false" final="false" static="true" visibility="public">
      <docblock>
        <description compact="If a class has been overloaded, get the class name it has been overloaded with - otherwise return the class name"/>
        <param description="the class to check" type="string" variable="$class"/>
        <return description="the class that would be created if you called {@link Object::create()} with the class" type="string"/>
      </docblock>
      <parameter name="class" byreference="false" type="{unknown}"/>
    </method>
    <method name="static_lookup" start="339" end="374" abstract="false" final="false" static="true" visibility="public">
      <docblock>
        <description compact="Get the value of a static property of a class, even in that property is declared protected (but not private), without any inheritance, merging or parent lookup if it doesn't exist on the given class."/>
        <static/>
        <param description="The class to get the static from" variable="$class" type="object">
          <type full="-" namespace="" name="-"/>
        </param>
        <param description="The property to get from the class" variable="$name" type="object">
          <type full="-" namespace="" name="-"/>
        </param>
        <param description="- The value to return if property doesn't exist on class" type="object" variable="$default">
          <type full="null" namespace="" name="null"/>
        </param>
        <return description="- The value of the static property $name on class $class, or $default if that property is not" type="object">defined<type full="any" namespace="" name="any"/></return>
      </docblock>
      <parameter name="class" byreference="false" type="{unknown}"/>
      <parameter name="name" byreference="false" type="{unknown}"/>
      <parameter name="default" byreference="false" type="{unknown}" default="null"/>
    </method>
    <method name="get_static" start="391" end="394" abstract="false" final="false" static="true" visibility="public">
      <docblock>
        <description compact="Get a static variable, taking into account SS's inbuild static caches and pseudo-statics">This method first checks for any extra values added by <link xmlns="http://xml.phpdox.net/src" value="Object::add_static_var()"/>, and attemps to traverse
up the extra static var chain until it reaches the top, or it reaches a replacement static.
If any extra values are discovered, they are then merged with the default PHP static values, or in some cases
completely replace the default PHP static when you set $replace = true, and do not define extra data on any
child classes
</description>
        <param type="string" variable="$class"/>
        <param description="the property name" type="string" variable="$name"/>
        <param description="if set to TRUE, force a regeneration of the static cache" type="object" variable="$uncached">
          <type full="bool" namespace="" name="bool"/>
        </param>
        <return type="mixed"/>
      </docblock>
      <parameter name="class" byreference="false" type="{unknown}"/>
      <parameter name="name" byreference="false" type="{unknown}"/>
      <parameter name="uncached" byreference="false" type="{unknown}" default="false"/>
    </method>
    <method name="set_static" start="403" end="406" abstract="false" final="false" static="true" visibility="public">
      <docblock>
        <description compact="Set a static variable"/>
        <param type="string" variable="$class"/>
        <param description="the property name to set" type="string" variable="$name"/>
        <param type="mixed" variable="$value"/>
      </docblock>
      <parameter name="class" byreference="false" type="{unknown}"/>
      <parameter name="name" byreference="false" type="{unknown}"/>
      <parameter name="value" byreference="false" type="{unknown}"/>
    </method>
    <method name="uninherited_static" start="415" end="418" abstract="false" final="false" static="true" visibility="public">
      <docblock>
        <description compact="Get an uninherited static variable - a variable that is explicity set in this class, and not in the parent class."/>
        <param type="string" variable="$class"/>
        <param type="string" variable="$name"/>
        <return type="mixed"/>
      </docblock>
      <parameter name="class" byreference="false" type="{unknown}"/>
      <parameter name="name" byreference="false" type="{unknown}"/>
      <parameter name="uncached" byreference="false" type="{unknown}" default="false"/>
    </method>
    <method name="combined_static" start="430" end="435" abstract="false" final="false" static="true" visibility="public">
      <docblock>
        <description compact="Traverse down a class ancestry and attempt to merge all the uninherited static values for a particular static into a single variable"/>
        <param type="string" variable="$class"/>
        <param description="the static name" type="string" variable="$name"/>
        <param description="an optional parent class name to begin merging statics down from, rather than traversing" type="string" variable="$ceiling">the entire hierarchy</param>
        <return type="mixed"/>
      </docblock>
      <parameter name="class" byreference="false" type="{unknown}"/>
      <parameter name="name" byreference="false" type="{unknown}"/>
      <parameter name="ceiling" byreference="false" type="{unknown}" default="false"/>
    </method>
    <method name="addStaticVars" start="444" end="447" abstract="false" final="false" static="true" visibility="public">
      <docblock>
        <description compact="Merge in a set of additional static variables"/>
        <param type="string" variable="$class"/>
        <param description="in a [property name] =&gt; [value] format" type="array" variable="$properties"/>
        <param description="replace existing static vars" type="object" variable="$replace">
          <type full="bool" namespace="" name="bool"/>
        </param>
      </docblock>
      <parameter name="class" byreference="false" type="{unknown}"/>
      <parameter name="properties" byreference="false" type="{unknown}"/>
      <parameter name="replace" byreference="false" type="{unknown}" default="false"/>
    </method>
    <method name="add_static_var" start="465" end="470" abstract="false" final="false" static="true" visibility="public">
      <docblock>
        <description compact="Add a static variable without replacing it completely if possible, but merging in with both existing PHP statics and existing psuedo-statics. Uses PHP's array_merge_recursive() with if the $replace argument is FALSE.">Documentation from http://php.net/array_merge_recursive:
If the input arrays have the same string keys, then the values for these keys are merged together
into an array, and this is done recursively, so that if one of the values is an array itself,
the function will merge it with a corresponding entry in another array too.
If, however, the arrays have the same numeric key, the later value will not overwrite the original value,
but will be appended.</description>
        <param type="string" variable="$class"/>
        <param description="the static name" type="string" variable="$name"/>
        <param type="mixed" variable="$value"/>
        <param description="completely replace existing static values" type="object" variable="$replace">
          <type full="bool" namespace="" name="bool"/>
        </param>
      </docblock>
      <parameter name="class" byreference="false" type="{unknown}"/>
      <parameter name="name" byreference="false" type="{unknown}"/>
      <parameter name="value" byreference="false" type="{unknown}"/>
      <parameter name="replace" byreference="false" type="{unknown}" default="false"/>
    </method>
    <method name="has_extension" start="481" end="503" abstract="false" final="false" static="true" visibility="public">
      <docblock>
        <description compact="Return TRUE if a class has a specified extension.">This supports backwards-compatible format (static Object::has_extension($requiredExtension))
and new format ($object-&gt;has_extension($class, $requiredExtension))</description>
        <param description="if 1 argument supplied, the class name of the extension to" type="string" variable="$classOrExtension">check for; if 2 supplied, the class name to test</param>
        <param description="used only if 2 arguments supplied" type="string" variable="$requiredExtension"/>
        <param description="if the extension has to match the required extension and not be a subclass" type="boolean" variable="$strict"/>
      </docblock>
      <parameter name="classOrExtension" byreference="false" type="{unknown}"/>
      <parameter name="requiredExtension" byreference="false" type="{unknown}" default="null"/>
      <parameter name="strict" byreference="false" type="{unknown}" default="false"/>
      <inline>
        <comment value="BC support" line="482"/>
      </inline>
    </method>
    <method name="add_extension" start="523" end="565" abstract="false" final="false" static="true" visibility="public">
      <docblock>
        <description compact="Add an extension to a specific class.">The preferred method for adding extensions is through YAML config,
since it avoids autoloading the class, and is easier to override in
more specific configurations.
As an alternative, extensions can be added to a specific class
directly in the <link xmlns="http://xml.phpdox.net/src" value="Object::$extensions"/> array.
See <link xmlns="http://xml.phpdox.net/src" value="SiteTree::$extensions"/> for examples.
Keep in mind that the extension will only be applied to new
instances, not existing ones (including all instances created through <link xmlns="http://xml.phpdox.net/src" value="singleton()"/>).
</description>
        <see value="http://doc.silverstripe.org/framework/en/trunk/reference/dataextension"/>
        <param description="Class that should be extended - has to be a subclass of {@link Object}" type="string" variable="$class"/>
        <param description="Subclass of {@link Extension} with optional parameters" type="string" variable="$extension">as a string, e.g. "Versioned" or "Translatable('Param')"</param>
      </docblock>
      <parameter name="classOrExtension" byreference="false" type="{unknown}"/>
      <parameter name="extension" byreference="false" type="{unknown}" default="null"/>
      <inline>
        <comment value="unset some caches" line="545"/>
        <comment value="load statics now for DataObject classes" line="559"/>
      </inline>
    </method>
    <method name="remove_extension" start="584" end="614" abstract="false" final="false" static="true" visibility="public">
      <docblock>
        <description compact="Remove an extension from a class.">Keep in mind that this won't revert any datamodel additions
of the extension at runtime, unless its used before the
schema building kicks in (in your _config.php).
Doesn't remove the extension from any <link xmlns="http://xml.phpdox.net/src" value="Object"/>instances which are already created, but will have an
effect on new extensions.
Clears any previously created singletons through <link xmlns="http://xml.phpdox.net/src" value="singleton()"/>to avoid side-effects from stale extension information.
</description>
        <todo value="Add support for removing extensions with parameters"/>
        <param description="Classname of an {@link Extension} subclass, without parameters" type="string" variable="$extension"/>
      </docblock>
      <parameter name="extension" byreference="false" type="{unknown}"/>
      <inline>
        <comment value="remove any instances of the extension with parameters" line="589"/>
        <comment value="extensions with parameters will be stored in config as" line="594"/>
        <comment value="ExtensionName(&quot;Param&quot;)." line="595"/>
        <comment value="unset singletons to avoid side-effects" line="604"/>
        <comment value="unset some caches" line="607"/>
      </inline>
    </method>
    <method name="get_extensions" start="623" end="635" abstract="false" final="false" static="true" visibility="public">
      <docblock>
        <description/>
        <param type="string" variable="$class"/>
        <param description="Include the argument string in the return array," type="object" variable="$includeArgumentString">FALSE would return array("Versioned"), TRUE returns array("Versioned('Stage','Live')").<type full="bool" namespace="" name="bool"/></param>
        <return description="Numeric array of either {@link DataExtension} classnames," type="array">or eval'ed classname strings with constructor arguments.</return>
      </docblock>
      <parameter name="class" byreference="false" type="{unknown}"/>
      <parameter name="includeArgumentString" byreference="false" type="{unknown}" default="false"/>
    </method>
    <method name="get_extra_config_sources" start="641" end="678" abstract="false" final="false" static="true" visibility="public">
      <parameter name="class" byreference="false" type="{unknown}" default="null"/>
      <inline>
        <comment value="If this class is unextendable, NOP" line="644"/>
        <comment value="Get a list of extensions" line="650"/>
        <comment value="Build a list of all sources;" line="654"/>
      </inline>
    </method>
    <constructor name="__construct" start="680" end="699" abstract="false" final="false" static="false" visibility="public"/>
    <method name="__call" start="711" end="765" abstract="false" final="false" static="false" visibility="public">
      <docblock>
        <description compact="Attemps to locate and call a method dynamically added to a class at runtime if a default cannot be located">You can add extra methods to a class using <link xmlns="http://xml.phpdox.net/src" value="Extensions"/>, <link xmlns="http://xml.phpdox.net/src" value="Object::createMethod()"/> or
<link xmlns="http://xml.phpdox.net/src" value="Object::addWrapperMethod()"/></description>
        <param type="string" variable="$method"/>
        <param type="array" variable="$arguments"/>
        <return type="mixed"/>
      </docblock>
      <parameter name="method" byreference="false" type="{unknown}"/>
      <parameter name="arguments" byreference="false" type="{unknown}"/>
      <inline>
        <comment value="If the method cache was cleared by an an Object::add_extension() / Object::remove_extension()" line="712"/>
        <comment value="call, then we should rebuild it." line="713"/>
      </inline>
    </method>
    <method name="hasMethod" start="778" end="780" abstract="false" final="false" static="false" visibility="public">
      <docblock>
        <description compact="Return TRUE if a method exists on this object">This should be used rather than PHP's inbuild method_exists() as it takes into account methods added via
extensions</description>
        <param type="string" variable="$method"/>
        <return type="object">
          <type full="bool" namespace="" name="bool"/>
        </return>
      </docblock>
      <parameter name="method" byreference="false" type="{unknown}"/>
    </method>
    <method name="allMethodNames" start="788" end="798" abstract="false" final="false" static="false" visibility="public">
      <docblock>
        <description compact="Return the names of all the methods available on this object"/>
        <param description="include methods added dynamically at runtime" type="object" variable="$custom">
          <type full="bool" namespace="" name="bool"/>
        </param>
        <return type="array"/>
      </docblock>
      <parameter name="custom" byreference="false" type="{unknown}" default="false"/>
    </method>
    <method name="defineMethods" start="807" end="821" abstract="false" final="false" static="false" visibility="protected">
      <docblock>
        <description compact="Adds any methods from {@link Extension} instances attached to this object.">All these methods can then be called directly on the instance (transparently
mapped through <link xmlns="http://xml.phpdox.net/src" value="__call()"/>), or called explicitly through <link xmlns="http://xml.phpdox.net/src" value="extend()"/>.
</description>
        <uses value="addMethodsFrom()"/>
      </docblock>
    </method>
    <method name="addMethodsFrom" start="829" end="864" abstract="false" final="false" static="false" visibility="protected">
      <docblock>
        <description compact="Add all the methods from an object property (which is an {@link Extension}) to this object."/>
        <param description="the property name" type="string" variable="$property"/>
        <param description="an index to use if the property is an array" type="object" variable="$index">
          <type full="string|int" namespace="" name="string|int"/>
        </param>
      </docblock>
      <parameter name="property" byreference="false" type="{unknown}"/>
      <parameter name="index" byreference="false" type="{unknown}" default="null"/>
    </method>
    <method name="addWrapperMethod" start="873" end="878" abstract="false" final="false" static="false" visibility="protected">
      <docblock>
        <description compact="Add a wrapper method - a method which points to another method with a different name. For example, Thumbnail(x) can be wrapped to generateThumbnail(x)"/>
        <param description="the method name to wrap" type="string" variable="$method"/>
        <param description="the method name to wrap to" type="string" variable="$wrap"/>
      </docblock>
      <parameter name="method" byreference="false" type="{unknown}"/>
      <parameter name="wrap" byreference="false" type="{unknown}"/>
    </method>
    <method name="createMethod" start="888" end="892" abstract="false" final="false" static="false" visibility="protected">
      <docblock>
        <description compact="Add an extra method using raw PHP code passed as a string"/>
        <param description="the method name" type="string" variable="$method"/>
        <param description="the PHP code - arguments will be in an array called $args, while you can access this object" type="string" variable="$code">by using $obj. Note that you cannot call protected methods, as the method is actually an external
       function</param>
      </docblock>
      <parameter name="method" byreference="false" type="{unknown}"/>
      <parameter name="code" byreference="false" type="{unknown}"/>
    </method>
    <method name="stat" start="899" end="901" abstract="false" final="false" static="false" visibility="public">
      <docblock>
        <description/>
        <see value="Object::get_static()"/>
      </docblock>
      <parameter name="name" byreference="false" type="{unknown}"/>
      <parameter name="uncached" byreference="false" type="{unknown}" default="false"/>
    </method>
    <method name="set_stat" start="906" end="908" abstract="false" final="false" static="false" visibility="public">
      <docblock>
        <description/>
        <see value="Object::set_static()"/>
      </docblock>
      <parameter name="name" byreference="false" type="{unknown}"/>
      <parameter name="value" byreference="false" type="{unknown}"/>
    </method>
    <method name="uninherited" start="913" end="915" abstract="false" final="false" static="false" visibility="public">
      <docblock>
        <description/>
        <see value="Object::uninherited_static()"/>
      </docblock>
      <parameter name="name" byreference="false" type="{unknown}"/>
    </method>
    <method name="exists" start="927" end="929" abstract="false" final="false" static="false" visibility="public">
      <docblock>
        <description compact="Return true if this object &quot;exists&quot; i.e. has a sensible value">This method should be overriden in subclasses to provide more context about the classes state. For example, a
{@link DataObject} class could return false when it is deleted from the database</description>
        <return type="object">
          <type full="bool" namespace="" name="bool"/>
        </return>
      </docblock>
    </method>
    <method name="parentClass" start="934" end="936" abstract="false" final="false" static="false" visibility="public">
      <docblock>
        <description/>
        <return description="this classes parent class" type="string"/>
      </docblock>
    </method>
    <method name="is_a" start="944" end="946" abstract="false" final="false" static="false" visibility="public">
      <docblock>
        <description compact="Check if this class is an instance of a specific class, or has that class as one of its parents"/>
        <param type="string" variable="$class"/>
        <return type="object">
          <type full="bool" namespace="" name="bool"/>
        </return>
      </docblock>
      <parameter name="class" byreference="false" type="{unknown}"/>
    </method>
    <method name="__toString" start="951" end="953" abstract="false" final="false" static="false" visibility="public">
      <docblock>
        <description/>
        <return description="the class name" type="string"/>
      </docblock>
    </method>
    <method name="invokeWithExtensions" start="966" end="971" abstract="false" final="false" static="false" visibility="public">
      <docblock>
        <description compact="Calls a method if available on both this object and all applied {@link Extensions}, and then attempts to merge all results into an array"/>
        <param description="the method name to call" type="string" variable="$method"/>
        <param description="a single argument to pass" type="mixed" variable="$argument"/>
        <return type="mixed"/>
        <todo value="integrate inheritance rules"/>
      </docblock>
      <parameter name="method" byreference="false" type="{unknown}"/>
      <parameter name="argument" byreference="false" type="{unknown}" default="null"/>
    </method>
    <method name="extend" start="988" end="1017" abstract="false" final="false" static="false" visibility="public">
      <docblock>
        <description compact="Run the given function on all of this object's extensions. Note that this method originally returned void, so if you wanted to return results, you're hosed">Currently returns an array, with an index resulting every time the function is called. Only adds returns if
they're not NULL, to avoid bogus results from methods just defined on the parent extension. This is important for
permission-checks through extend, as they use min() to determine if any of the returns is FALSE. As min() doesn't
do type checking, an included NULL return would fail the permission checks.
The extension methods are defined during <link xmlns="http://xml.phpdox.net/src" value="__construct()"/> in <link xmlns="http://xml.phpdox.net/src" value="defineMethods()"/>.
</description>
        <param description="the name of the method to call on each extension" type="string" variable="$method"/>
        <param description="... up to 7 arguments to be passed to the method" type="mixed" variable="$a1"/>
        <return type="array"/>
      </docblock>
      <parameter name="method" byreference="false" type="{unknown}"/>
      <parameter name="a1" byreference="true" type="{unknown}" default="null"/>
      <parameter name="a2" byreference="true" type="{unknown}" default="null"/>
      <parameter name="a3" byreference="true" type="{unknown}" default="null"/>
      <parameter name="a4" byreference="true" type="{unknown}" default="null"/>
      <parameter name="a5" byreference="true" type="{unknown}" default="null"/>
      <parameter name="a6" byreference="true" type="{unknown}" default="null"/>
      <parameter name="a7" byreference="true" type="{unknown}" default="null"/>
    </method>
    <method name="getExtensionInstance" start="1027" end="1029" abstract="false" final="false" static="false" visibility="public">
      <docblock>
        <description compact="Get an extension instance attached to this object by name."/>
        <uses value="hasExtension()"/>
        <param type="string" variable="$extension"/>
        <return type="object">
          <type full="Extension" namespace="" name="Extension"/>
        </return>
      </docblock>
      <parameter name="extension" byreference="false" type="{unknown}"/>
    </method>
    <method name="hasExtension" start="1045" end="1047" abstract="false" final="false" static="false" visibility="public">
      <docblock>
        <description compact="Returns TRUE if this object instance has a specific extension applied in {@link $extension_instances}. Extension instances are initialized at constructor time, meaning if you use {@link add_extension()} afterwards, the added extension will just be added to new instances of the extended class. Use the static method {@link has_extension()} to check if a class (not an instance) has a specific extension.">Caution: Don't use singleton(&lt;class&gt;)-&gt;hasExtension() as it will
give you inconsistent results based on when the singleton was first
accessed.</description>
        <param description="Classname of an {@link Extension} subclass without parameters" type="string" variable="$extension"/>
        <return type="object">
          <type full="bool" namespace="" name="bool"/>
        </return>
      </docblock>
      <parameter name="extension" byreference="false" type="{unknown}"/>
    </method>
    <method name="getExtensionInstances" start="1056" end="1058" abstract="false" final="false" static="false" visibility="public">
      <docblock>
        <description compact="Get all extension instances for this specific object instance.">See <link xmlns="http://xml.phpdox.net/src" value="get_extensions()"/> to get all applied extension classes
for this class (not the instance).
</description>
        <return description="Map of {@link DataExtension} instances, keyed by classname." type="array"/>
      </docblock>
    </method>
    <method name="cacheToFile" start="1072" end="1092" abstract="false" final="false" static="false" visibility="public">
      <docblock>
        <description compact="Cache the results of an instance method in this object to a file, or if it is already cache return the cached results"/>
        <param description="the method name to cache" type="string" variable="$method"/>
        <param description="the cache lifetime in seconds" type="int" variable="$lifetime"/>
        <param description="custom cache ID to use" type="string" variable="$ID"/>
        <param description="an optional array of arguments" type="array" variable="$arguments"/>
        <return description="the cached data" type="mixed"/>
      </docblock>
      <parameter name="method" byreference="false" type="{unknown}"/>
      <parameter name="lifetime" byreference="false" type="integer" default="3600"/>
      <parameter name="ID" byreference="false" type="{unknown}" default="false"/>
      <parameter name="arguments" byreference="false" type="array"/>
    </method>
    <method name="clearCache" start="1097" end="1105" abstract="false" final="false" static="false" visibility="public">
      <docblock>
        <description compact="Clears the cache for the given cacheToFile call"/>
      </docblock>
      <parameter name="method" byreference="false" type="{unknown}"/>
      <parameter name="ID" byreference="false" type="{unknown}" default="false"/>
      <parameter name="arguments" byreference="false" type="array"/>
    </method>
    <method name="loadCache" start="1114" end="1122" abstract="false" final="false" static="false" visibility="protected">
      <docblock>
        <description compact="Loads a cache from the filesystem if a valid on is present and within the specified lifetime"/>
        <param description="the cache name" type="string" variable="$cache"/>
        <param description="the lifetime (in seconds) of the cache before it is invalid" type="int" variable="$lifetime"/>
        <return type="mixed"/>
      </docblock>
      <parameter name="cache" byreference="false" type="{unknown}"/>
      <parameter name="lifetime" byreference="false" type="integer" default="3600"/>
    </method>
    <method name="saveCache" start="1130" end="1132" abstract="false" final="false" static="false" visibility="protected">
      <docblock>
        <description compact="Save a piece of cached data to the file system"/>
        <param description="the cache name" type="string" variable="$cache"/>
        <param description="data to save (must be serializable)" type="mixed" variable="$data"/>
      </docblock>
      <parameter name="cache" byreference="false" type="{unknown}"/>
      <parameter name="data" byreference="false" type="{unknown}"/>
    </method>
    <method name="sanitiseCachename" start="1140" end="1142" abstract="false" final="false" static="false" visibility="protected">
      <docblock>
        <description compact="Strip a file name of special characters so it is suitable for use as a cache file name"/>
        <param type="string" variable="$name"/>
        <return description="the name with all special cahracters replaced with underscores" type="string"/>
      </docblock>
      <parameter name="name" byreference="false" type="{unknown}"/>
    </method>
  </parent>
  <interface full="IteratorAggregate" namespace="" name="IteratorAggregate">
    <extends full="Traversable" namespace="" name="Traversable"/>
    <method name="getIterator" abstract="false" static="false" visibility="public" final="false">
    <docblock>
      <description compact="Retrieve an external iterator"/>
      <return type="Traversable"/>
    </docblock>
  </method>
  </interface>
</class>
