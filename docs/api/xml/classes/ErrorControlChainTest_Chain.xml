<?xml version="1.0" encoding="UTF-8"?>
<class xmlns="http://xml.phpdox.net/src" full="ErrorControlChainTest_Chain" namespace="" name="ErrorControlChainTest_Chain" abstract="false" final="false" start="9" end="62">
  <file path="/var/www/_modules/ecommerce_test/trunk/docs/en/phpdox/../../../framework/tests/core/startup" file="ErrorControlChainTest.php" realpath="/var/www/_modules/ecommerce_test/trunk/framework/tests/core/startup/ErrorControlChainTest.php" size="7124" time="2015-03-14T10:41:07+13:00" unixtime="1426282867" sha1="9af46619d70c0d16627d48bb232ca450250366ee" relative="framework/tests/core/startup/ErrorControlChainTest.php"/>
  <docblock>
    <description compact="An extension of ErrorControlChain that runs the chain in a subprocess.">We need this because ErrorControlChain only suppresses uncaught fatal errors, and
that would kill PHPUnit execution</description>
  </docblock>
  <extends full="ErrorControlChain" namespace="" name="ErrorControlChain"/>
  <method name="translateMemstring" start="12" end="14" abstract="false" final="false" static="false" visibility="public">
    <parameter name="memstring" byreference="false" type="{unknown}"/>
  </method>
  <method name="executeInSubprocess" start="16" end="61" abstract="false" final="false" static="false" visibility="public">
    <parameter name="includeStderr" byreference="false" type="{unknown}" default="false"/>
    <inline>
      <comment value="Get the path to the ErrorControlChain class" line="17"/>
      <comment value="Start building a PHP file that will execute the chain" line="21"/>
      <comment value="For each step, use reflection to pull out the call, stick in the the PHP source we're building" line="32"/>
      <comment value="Finally add a line to execute the chain" line="44"/>
      <comment value="Now stick it in a temporary file &amp; run it" line="47"/>
    </inline>
  </method>
  <parent full="ErrorControlChain" namespace="" name="ErrorControlChain">
    <member name="fatal_errors" type="{unknown}" default="null" visibility="public" line="18"/>
    <member name="error" type="{unknown}" default="false" visibility="protected" line="20"/>
    <member name="steps" type="array" visibility="protected" line="21"/>
    <member name="suppression" type="{unknown}" default="true" visibility="protected" line="23"/>
    <member name="handleFatalErrors" type="{unknown}" default="false" visibility="protected" line="26">
      <docblock>
        <description compact="We can't unregister_shutdown_function, so this acts as a flag to enable handling"/>
      </docblock>
    </member>
    <member name="originalDisplayErrors" type="{unknown}" default="null" visibility="protected" line="29">
      <docblock>
        <description compact="We overload display_errors to hide errors during execution, so we need to remember the original to restore to"/>
      </docblock>
    </member>
    <member name="transtable" type="array" visibility="public" line="83"/>
    <method name="hasErrored" start="31" end="33" abstract="false" final="false" static="false" visibility="public"/>
    <method name="setErrored" start="35" end="37" abstract="false" final="false" static="false" visibility="public">
      <parameter name="error" byreference="false" type="{unknown}"/>
    </method>
    <method name="setSuppression" start="39" end="42" abstract="false" final="false" static="false" visibility="public">
      <parameter name="suppression" byreference="false" type="{unknown}"/>
    </method>
    <method name="then" start="52" end="58" abstract="false" final="false" static="false" visibility="public">
      <docblock>
        <description compact="Add this callback to the chain of callbacks to call along with the state that $error must be in this point in the chain for the callback to be called"/>
        <param description="The callback to call" variable="$callback" type="object">
          <type full="-" namespace="" name="-"/>
        </param>
        <param description="false if only call if no errors yet, true if only call if already errors, null for either" variable="$onErrorState" type="object">
          <type full="-" namespace="" name="-"/>
        </param>
        <return type="object">
          <type full="$this" namespace="" name="$this"/>
        </return>
      </docblock>
      <parameter name="callback" byreference="false" type="{unknown}"/>
      <parameter name="onErrorState" byreference="false" type="{unknown}" default="false"/>
    </method>
    <method name="thenWhileGood" start="60" end="62" abstract="false" final="false" static="false" visibility="public">
      <parameter name="callback" byreference="false" type="{unknown}"/>
    </method>
    <method name="thenIfErrored" start="64" end="66" abstract="false" final="false" static="false" visibility="public">
      <parameter name="callback" byreference="false" type="{unknown}"/>
    </method>
    <method name="thenAlways" start="68" end="70" abstract="false" final="false" static="false" visibility="public">
      <parameter name="callback" byreference="false" type="{unknown}"/>
    </method>
    <method name="lastErrorWasFatal" start="72" end="75" abstract="false" final="false" static="false" visibility="protected"/>
    <method name="lastErrorWasMemoryExhaustion" start="77" end="81" abstract="false" final="false" static="false" visibility="protected"/>
    <method name="translateMemstring" start="89" end="93" abstract="false" final="false" static="false" visibility="protected">
      <parameter name="memString" byreference="false" type="{unknown}"/>
    </method>
    <method name="handleFatalError" start="95" end="108" abstract="false" final="false" static="false" visibility="public">
      <inline>
        <comment value="Bump up memory limit by an arbitrary 10% / 10MB (whichever is bigger) since we've run out" line="99"/>
      </inline>
    </method>
    <method name="execute" start="110" end="118" abstract="false" final="false" static="false" visibility="public"/>
    <method name="step" start="120" end="135" abstract="false" final="false" static="false" visibility="protected"/>
  </parent>
</class>
