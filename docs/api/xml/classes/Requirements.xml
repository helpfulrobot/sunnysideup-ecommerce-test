<?xml version="1.0" encoding="UTF-8"?>
<class xmlns="http://xml.phpdox.net/src" full="Requirements" namespace="" name="Requirements" abstract="false" final="false" start="10" end="340">
  <file path="/var/www/_modules/ecommerce_test/trunk/docs/en/phpdox/../../../framework/view" file="Requirements.php" realpath="/var/www/_modules/ecommerce_test/trunk/framework/view/Requirements.php" size="38873" time="2015-03-14T10:42:30+13:00" unixtime="1426282950" sha1="5f0079f040f6540f2d2dbf4526eef8a26489419a" relative="framework/view/Requirements.php"/>
  <docblock>
    <description compact="Requirements tracker, for javascript and css."/>
    <todo value="Document the requirements tracker, and discuss it with the others."/>
    <package value="framework"/>
    <subpackage value="view"/>
  </docblock>
  <implements full="Flushable" namespace="" name="Flushable"/>
  <method name="flush" start="15" end="17" abstract="false" final="false" static="true" visibility="public">
    <docblock>
      <description compact="Triggered early in the request when someone requests a flush."/>
    </docblock>
  </method>
  <method name="set_combined_files_enabled" start="23" end="25" abstract="false" final="false" static="true" visibility="public">
    <docblock>
      <description compact="Enable combining of css/javascript files."/>
      <param type="boolean" variable="$enable"/>
    </docblock>
    <parameter name="enable" byreference="false" type="{unknown}"/>
  </method>
  <method name="get_combined_files_enabled" start="31" end="33" abstract="false" final="false" static="true" visibility="public">
    <docblock>
      <description compact="Checks whether combining of css/javascript files is enabled."/>
      <return type="boolean"/>
    </docblock>
  </method>
  <method name="set_combined_files_folder" start="39" end="41" abstract="false" final="false" static="true" visibility="public">
    <docblock>
      <description compact="Set the relative folder e.g. &quot;assets&quot; for where to store combined files"/>
      <param description="Path to folder" type="string" variable="$folder"/>
    </docblock>
    <parameter name="folder" byreference="false" type="{unknown}"/>
  </method>
  <method name="set_suffix_requirements" start="49" end="51" abstract="false" final="false" static="true" visibility="public">
    <docblock>
      <description compact="Set whether we want to suffix requirements with the time / location on to the requirements"/>
      <param type="object">
        <type full="bool" namespace="" name="bool"/>
      </param>
    </docblock>
    <parameter name="var" byreference="false" type="{unknown}"/>
  </method>
  <method name="get_suffix_requirements" start="58" end="60" abstract="false" final="false" static="true" visibility="public">
    <docblock>
      <description compact="Return whether we want to suffix requirements"/>
      <return type="object">
        <type full="bool" namespace="" name="bool"/>
      </return>
    </docblock>
  </method>
  <member name="backend" type="{unknown}" default="null" visibility="private" line="67">
    <docblock>
      <description compact="Instance of requirements for storage"/>
      <var type="object">
        <type full="Requirements" namespace="" name="Requirements"/>
      </var>
    </docblock>
  </member>
  <method name="backend" start="69" end="74" abstract="false" final="false" static="true" visibility="public"/>
  <method name="set_backend" start="81" end="83" abstract="false" final="false" static="true" visibility="public">
    <docblock>
      <description compact="Setter method for changing the Requirements backend"/>
      <param type="object" variable="$backend">
        <type full="Requirements" namespace="" name="Requirements"/>
      </param>
    </docblock>
    <parameter name="backend" byreference="false" type="object">
      <type full="\\Requirements_Backend" namespace="\" name="Requirements_Backend"/>
    </parameter>
  </method>
  <method name="javascript" start="91" end="93" abstract="false" final="false" static="true" visibility="public">
    <docblock>
      <description compact="Register the given javascript file as required.">See <link xmlns="http://xml.phpdox.net/src" value="Requirements_Backend::javascript()"/> for more info
</description>
    </docblock>
    <parameter name="file" byreference="false" type="{unknown}"/>
  </method>
  <method name="customScript" start="102" end="104" abstract="false" final="false" static="true" visibility="public">
    <docblock>
      <description compact="Add the javascript code to the header of the page">See <link xmlns="http://xml.phpdox.net/src" value="Requirements_Backend::customScript()"/> for more info
</description>
      <param description="The script content" type="object">
        <type full="script" namespace="" name="script"/>
      </param>
      <param description="Use this to ensure that pieces of code only get added once." type="object">
        <type full="uniquenessID" namespace="" name="uniquenessID"/>
      </param>
    </docblock>
    <parameter name="script" byreference="false" type="{unknown}"/>
    <parameter name="uniquenessID" byreference="false" type="{unknown}" default="null"/>
  </method>
  <method name="customCSS" start="114" end="116" abstract="false" final="false" static="true" visibility="public">
    <docblock>
      <description compact="Include custom CSS styling to the header of the page.">See <link xmlns="http://xml.phpdox.net/src" value="Requirements_Backend::customCSS()"/></description>
      <param description="CSS selectors as a string (without &lt;style&gt; tag enclosing selectors)." type="string" variable="$script"/>
      <param description="Group CSS by a unique ID as to avoid duplicate custom CSS in header" type="int" variable="$uniquenessID"/>
    </docblock>
    <parameter name="script" byreference="false" type="{unknown}"/>
    <parameter name="uniquenessID" byreference="false" type="{unknown}" default="null"/>
  </method>
  <method name="insertHeadTags" start="125" end="127" abstract="false" final="false" static="true" visibility="public">
    <docblock>
      <description compact="Add the following custom code to the &lt;head&gt; section of the page.">See <link xmlns="http://xml.phpdox.net/src" value="Requirements_Backend::insertHeadTags()"/></description>
      <param type="string" variable="$html"/>
      <param type="string" variable="$uniquenessID"/>
    </docblock>
    <parameter name="html" byreference="false" type="{unknown}"/>
    <parameter name="uniquenessID" byreference="false" type="{unknown}" default="null"/>
  </method>
  <method name="javascriptTemplate" start="136" end="138" abstract="false" final="false" static="true" visibility="public">
    <docblock>
      <description compact="Load the given javascript template with the page.">See <link xmlns="http://xml.phpdox.net/src" value="Requirements_Backend::javascriptTemplate()"/></description>
      <param description="The template file to load." type="object">
        <type full="file" namespace="" name="file"/>
      </param>
      <param description="The array of variables to load.  These variables are loaded via string search &amp; replace." type="object">
        <type full="vars" namespace="" name="vars"/>
      </param>
    </docblock>
    <parameter name="file" byreference="false" type="{unknown}"/>
    <parameter name="vars" byreference="false" type="{unknown}"/>
    <parameter name="uniquenessID" byreference="false" type="{unknown}" default="null"/>
  </method>
  <method name="css" start="148" end="150" abstract="false" final="false" static="true" visibility="public">
    <docblock>
      <description compact="Register the given stylesheet file as required.">See <link xmlns="http://xml.phpdox.net/src" value="Requirements_Backend::css()"/></description>
      <param description="Filenames should be relative to the base, eg, 'framework/javascript/tree/tree.css'" variable="$file" type="object">
        <type full="String" namespace="" name="String"/>
      </param>
      <param description="Comma-separated list of media-types (e.g. &quot;screen,projector&quot;)" variable="$media" type="object">
        <type full="String" namespace="" name="String"/>
      </param>
      <see value="http://www.w3.org/TR/REC-CSS2/media.html"/>
    </docblock>
    <parameter name="file" byreference="false" type="{unknown}"/>
    <parameter name="media" byreference="false" type="{unknown}" default="null"/>
  </method>
  <method name="themedCSS" start="167" end="169" abstract="false" final="false" static="true" visibility="public">
    <docblock>
      <description compact="Registers the given themeable stylesheet as required.">A CSS file in the current theme path name "themename/css/$name.css" is
first searched for, and it that doesn't exist and the module parameter is
set then a CSS file with that name in the module is used.

NOTE: This API is experimental and may change in the future.</description>
      <param description="The name of the file - e.g. &quot;/css/File.css&quot; would have" type="string" variable="$name">the name "File".</param>
      <param description="The module to fall back to if the css file does not" type="string" variable="$module">exist in the current theme.</param>
      <param description="The CSS media attribute." type="string" variable="$media"/>
    </docblock>
    <parameter name="name" byreference="false" type="{unknown}"/>
    <parameter name="module" byreference="false" type="{unknown}" default="null"/>
    <parameter name="media" byreference="false" type="{unknown}" default="null"/>
  </method>
  <method name="clear" start="179" end="181" abstract="false" final="false" static="true" visibility="public">
    <docblock>
      <description compact="Clear either a single or all requirements.">Caution: Clearing single rules works only with customCSS and customScript if you specified a <uniquenessid xmlns="http://xml.phpdox.net/src"/>.
See <link xmlns="http://xml.phpdox.net/src" value="Requirements_Backend::clear()"/></description>
      <param variable="$file" type="object">
        <type full="String" namespace="" name="String"/>
      </param>
    </docblock>
    <parameter name="fileOrID" byreference="false" type="{unknown}" default="null"/>
  </method>
  <method name="block" start="189" end="191" abstract="false" final="false" static="true" visibility="public">
    <docblock>
      <description compact="Blocks inclusion of a specific file See {@link Requirements_Backend::block()}"/>
      <param type="object" variable="$fileOrID">
        <type full="unknown_type" namespace="" name="unknown_type"/>
      </param>
    </docblock>
    <parameter name="fileOrID" byreference="false" type="{unknown}"/>
  </method>
  <method name="unblock" start="199" end="201" abstract="false" final="false" static="true" visibility="public">
    <docblock>
      <description compact="Removes an item from the blocking-list.">See <link xmlns="http://xml.phpdox.net/src" value="Requirements_Backend::unblock()"/></description>
      <param type="string" variable="$fileOrID"/>
    </docblock>
    <parameter name="fileOrID" byreference="false" type="{unknown}"/>
  </method>
  <method name="unblock_all" start="207" end="209" abstract="false" final="false" static="true" visibility="public">
    <docblock>
      <description compact="Removes all items from the blocking-list.">See <link xmlns="http://xml.phpdox.net/src" value="Requirements_Backend::unblock_all()"/></description>
    </docblock>
  </method>
  <method name="restore" start="215" end="217" abstract="false" final="false" static="true" visibility="public">
    <docblock>
      <description compact="Restore requirements cleared by call to Requirements::clear See {@link Requirements_Backend::restore()}"/>
    </docblock>
  </method>
  <method name="includeInHTML" start="229" end="231" abstract="false" final="false" static="true" visibility="public">
    <docblock>
      <description compact="Update the given HTML content with the appropriate include tags for the registered requirements.">See <link xmlns="http://xml.phpdox.net/src" value="Requirements_Backend::includeInHTML()"/> for more information.
</description>
      <param description="Absolute path for the *.ss template file" type="string" variable="$templateFilePath"/>
      <param description="HTML content that has already been parsed from the $templateFilePath" type="string" variable="$content">through <link xmlns="http://xml.phpdox.net/src" value="SSViewer"/>.
</param>
      <return description="HTML content thats augumented with the requirements before the closing &lt;head&gt; tag." type="string"/>
    </docblock>
    <parameter name="templateFile" byreference="false" type="{unknown}"/>
    <parameter name="content" byreference="false" type="{unknown}"/>
  </method>
  <method name="include_in_response" start="233" end="235" abstract="false" final="false" static="true" visibility="public">
    <parameter name="response" byreference="false" type="object">
      <type full="\\SS_HTTPResponse" namespace="\" name="SS_HTTPResponse"/>
    </parameter>
  </method>
  <method name="add_i18n_javascript" start="246" end="248" abstract="false" final="false" static="true" visibility="public">
    <docblock>
      <description compact="Add i18n files from the given javascript directory."/>
      <param type="object">
        <type full="String" namespace="" name="String"/>
      </param>
      <param type="object">
        <type full="Boolean" namespace="" name="Boolean"/>
      </param>
      <param type="object">See <link xmlns="http://xml.phpdox.net/src" value="Requirements_Backend::add_i18n_javascript()"/> for more information.
<type full="Boolean" namespace="" name="Boolean"/></param>
    </docblock>
    <parameter name="langDir" byreference="false" type="{unknown}"/>
    <parameter name="return" byreference="false" type="{unknown}" default="false"/>
    <parameter name="langOnly" byreference="false" type="{unknown}" default="false"/>
  </method>
  <method name="combine_files" start="258" end="260" abstract="false" final="false" static="true" visibility="public">
    <docblock>
      <description compact="Concatenate several css or javascript files into a single dynamically generated file.">See <link xmlns="http://xml.phpdox.net/src" value="Requirements_Backend::combine_files()"/> for more info.
</description>
      <param type="string" variable="$combinedFileName"/>
      <param type="array" variable="$files"/>
      <param type="string" variable="$media"/>
    </docblock>
    <parameter name="combinedFileName" byreference="false" type="{unknown}"/>
    <parameter name="files" byreference="false" type="{unknown}"/>
    <parameter name="media" byreference="false" type="{unknown}" default="null"/>
  </method>
  <method name="get_combine_files" start="268" end="270" abstract="false" final="false" static="true" visibility="public">
    <docblock>
      <description compact="Returns all combined files.">See <link xmlns="http://xml.phpdox.net/src" value="Requirements_Backend::get_combine_files()"/></description>
      <return type="array"/>
    </docblock>
  </method>
  <method name="delete_combined_files" start="278" end="280" abstract="false" final="false" static="true" visibility="public">
    <docblock>
      <description compact="Deletes all dynamically generated combined files from the filesystem.">See <link xmlns="http://xml.phpdox.net/src" value="Requirements_Backend::delete_combine_files()"/></description>
      <param description="If left blank, all combined files are deleted." type="string" variable="$combinedFileName"/>
    </docblock>
    <parameter name="combinedFileName" byreference="false" type="{unknown}" default="null"/>
  </method>
  <method name="delete_all_combined_files" start="286" end="288" abstract="false" final="false" static="true" visibility="public">
    <docblock>
      <description compact="Deletes all generated combined files in the configured combined files directory, but doesn't delete the directory itself."/>
    </docblock>
  </method>
  <method name="clear_combined_files" start="293" end="295" abstract="false" final="false" static="true" visibility="public">
    <docblock>
      <description compact="Re-sets the combined files definition. See {@link Requirements_Backend::clear_combined_files()}"/>
    </docblock>
  </method>
  <method name="process_combined_files" start="300" end="302" abstract="false" final="false" static="true" visibility="public">
    <docblock>
      <description compact="See {@link combine_files()}."/>
    </docblock>
  </method>
  <method name="get_custom_scripts" start="310" end="312" abstract="false" final="false" static="true" visibility="public">
    <docblock>
      <description compact="Returns all custom scripts See {@link Requirements_Backend::get_custom_scripts()}"/>
      <return type="array"/>
    </docblock>
  </method>
  <method name="set_write_js_to_body" start="321" end="323" abstract="false" final="false" static="true" visibility="public">
    <docblock>
      <description compact="Set whether you want to write the JS to the body of the page or in the head section"/>
      <see value="Requirements_Backend::set_write_js_to_body()"/>
      <param type="boolean"/>
    </docblock>
    <parameter name="var" byreference="false" type="{unknown}"/>
  </method>
  <method name="set_force_js_to_bottom" start="332" end="334" abstract="false" final="false" static="true" visibility="public">
    <docblock>
      <description compact="Set the javascript to be forced to end of the HTML, or use the default.">Useful if you use inline &lt;script&gt; tags, that don't need the javascripts
included via Requirements::require();</description>
      <param description="If true, force the javascripts to be included at the bottom." type="boolean" variable="$var"/>
    </docblock>
    <parameter name="var" byreference="false" type="{unknown}"/>
  </method>
  <method name="debug" start="336" end="338" abstract="false" final="false" static="true" visibility="public"/>
  <interface full="Flushable" namespace="" name="Flushable">
    <method name="flush" start="18" end="18" abstract="false" final="false" static="true" visibility="public">
      <docblock>
        <description compact="This function is triggered early in the request if the &quot;flush&quot; query parameter has been set. Each class that implements Flushable implements this function which looks after it's own specific flushing functionality."/>
        <see value="FlushRequestFilter"/>
      </docblock>
    </method>
  </interface>
</class>
