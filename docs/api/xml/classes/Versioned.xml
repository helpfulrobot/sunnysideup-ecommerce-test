<?xml version="1.0" encoding="UTF-8"?>
<class xmlns="http://xml.phpdox.net/src" full="Versioned" namespace="" name="Versioned" abstract="false" final="false" start="11" end="1365">
  <file path="/var/www/_modules/ecommerce_test/trunk/docs/en/phpdox/../../../framework/model" file="Versioned.php" realpath="/var/www/_modules/ecommerce_test/trunk/framework/model/Versioned.php" size="44720" time="2015-03-14T10:40:57+13:00" unixtime="1426282857" sha1="10c05df25e5d39261067a095d18a3c6067030736" relative="framework/model/Versioned.php"/>
  <docblock>
    <description compact="The Versioned extension allows your DataObjects to have several versions, allowing you to rollback changes and view history. An example of this is the pages used in the CMS."/>
    <package value="framework"/>
    <subpackage value="model"/>
  </docblock>
  <extends full="DataExtension" namespace="" name="DataExtension"/>
  <implements full="TemplateGlobalProvider" namespace="" name="TemplateGlobalProvider"/>
  <member name="stages" type="{unknown}" visibility="protected" line="16">
    <docblock>
      <description compact="An array of possible stages."/>
      <var type="array"/>
    </docblock>
  </member>
  <member name="defaultStage" type="{unknown}" visibility="protected" line="22">
    <docblock>
      <description compact="The 'default' stage."/>
      <var type="string"/>
    </docblock>
  </member>
  <member name="liveStage" type="{unknown}" visibility="protected" line="28">
    <docblock>
      <description compact="The 'live' stage."/>
      <var type="string"/>
    </docblock>
  </member>
  <constant name="DEFAULT_MODE" value="'Stage.Live'">
    <docblock>
      <description compact="The default reading mode"/>
    </docblock>
  </constant>
  <member name="migratingVersion" type="{unknown}" visibility="public" line="40">
    <docblock>
      <description compact="A version that a DataObject should be when it is 'migrating', that is, when it is in the process of moving from one stage to another."/>
      <var type="string"/>
    </docblock>
  </member>
  <member name="cache_versionnumber" type="{unknown}" visibility="protected" line="48">
    <docblock>
      <description compact="A cache used by get_versionnumber_by_stage().">Clear through <link xmlns="http://xml.phpdox.net/src" value="flushCache()"/>.
</description>
      <var type="array"/>
    </docblock>
  </member>
  <member name="reading_mode" type="{unknown}" default="null" visibility="protected" line="53">
    <docblock>
      <description/>
      <var type="string"/>
    </docblock>
  </member>
  <member name="_nextWriteWithoutVersion" type="{unknown}" default="false" visibility="public" line="61">
    <docblock>
      <description/>
      <var description="Flag which is temporarily changed during the write() process" type="object">to influence augmentWrite() behaviour. If set to TRUE, no new version will be created
for the following write. Needs to be public as other classes introspect this state
during the write process in order to adapt to this versioning behaviour.<type full="Boolean" namespace="" name="Boolean"/></var>
    </docblock>
  </member>
  <member name="db_for_versions_table" type="array" visibility="private" line="71">
    <docblock>
      <description compact="Additional database columns for the new &quot;_versions&quot; table. Used in {@link augmentDatabase()} and all Versioned calls extending or creating SELECT statements."/>
      <var description="$db_for_versions_table" type="array"/>
    </docblock>
  </member>
  <member name="db" type="array" visibility="private" line="82">
    <docblock>
      <description/>
      <var type="array"/>
    </docblock>
  </member>
  <member name="prepopulate_versionnumber_cache" type="{unknown}" default="true" visibility="private" line="92">
    <docblock>
      <description compact="Used to enable or disable the prepopulation of the version number cache.">Defaults to true.</description>
      <var type="boolean"/>
    </docblock>
  </member>
  <member name="archive_tables" type="array" visibility="private" line="99">
    <docblock>
      <description compact="Keep track of the archive tables that have been created."/>
      <var type="array"/>
    </docblock>
  </member>
  <member name="indexes_for_versions_table" type="array" visibility="private" line="107">
    <docblock>
      <description compact="Additional database indexes for the new &quot;_versions&quot; table. Used in {@link augmentDatabase()}."/>
      <var description="$indexes_for_versions_table" type="array"/>
    </docblock>
  </member>
  <member name="versionableExtensions" type="array" visibility="protected" line="131">
    <docblock>
      <description compact="An array of DataObject extensions that may require versioning for extra tables The array value is a set of suffixes to form these table names, assuming a preceding '_'.">E.g. if Extension1 creates a new table 'Class_suffix1'
and Extension2 the tables 'Class_suffix2' and 'Class_suffix3':

	$versionableExtensions = array(
		'Extension1' =&gt; 'suffix1',
		'Extension2' =&gt; array('suffix2', 'suffix3'),
	);

Make sure your extension has a static $enabled-property that determines if it is
processed by Versioned.</description>
      <var type="array"/>
    </docblock>
  </member>
  <method name="reset" start="136" end="140" abstract="false" final="false" static="true" visibility="public">
    <docblock>
      <description compact="Reset static configuration variables to their default values."/>
    </docblock>
  </method>
  <constructor name="__construct" start="149" end="159" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="Construct a new Versioned object."/>
      <var description="$stages The different stages the versioned object can be." type="array">The first stage is considered the 'default' stage, the last stage is
considered the 'live' stage.</var>
    </docblock>
    <parameter name="stages" byreference="false" type="array"/>
  </constructor>
  <method name="augmentDataQueryCreation" start="168" end="182" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="Amend freshly created DataQuery objects with versioned-specific information."/>
      <param type="object">
        <type full="SQLQuery" namespace="" name="SQLQuery"/>
      </param>
      <param type="object">
        <type full="DataQuery" namespace="" name="DataQuery"/>
      </param>
    </docblock>
    <parameter name="query" byreference="true" type="object">
      <type full="\\SQLQuery" namespace="\" name="SQLQuery"/>
    </parameter>
    <parameter name="dataQuery" byreference="true" type="object">
      <type full="\\DataQuery" namespace="\" name="DataQuery"/>
    </parameter>
  </method>
  <method name="augmentSQL" start="188" end="327" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="Augment the the SQLQuery that is created by the DataQuery"/>
      <todo value="Should this all go into VersionedDataQuery?"/>
    </docblock>
    <parameter name="query" byreference="true" type="object">
      <type full="\\SQLQuery" namespace="\" name="SQLQuery"/>
    </parameter>
    <parameter name="dataQuery" byreference="true" type="object" default="null">
      <type full="\\DataQuery" namespace="\" name="DataQuery"/>
    </parameter>
  </method>
  <method name="augmentLoadLazyFields" start="336" end="355" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="For lazy loaded fields requiring extra sql manipulation, ie versioning."/>
      <param type="object" variable="$query">
        <type full="SQLQuery" namespace="" name="SQLQuery"/>
      </param>
      <param type="object" variable="$dataQuery">
        <type full="DataQuery" namespace="" name="DataQuery"/>
      </param>
      <param type="object" variable="$dataObject">
        <type full="DataObject" namespace="" name="DataObject"/>
      </param>
    </docblock>
    <parameter name="query" byreference="true" type="object">
      <type full="\\SQLQuery" namespace="\" name="SQLQuery"/>
    </parameter>
    <parameter name="dataQuery" byreference="true" type="object" default="null">
      <type full="\\DataQuery" namespace="\" name="DataQuery"/>
    </parameter>
    <parameter name="dataObject" byreference="false" type="{unknown}"/>
    <inline>
      <comment value="The VersionedMode local variable ensures that this decorator only applies to" line="337"/>
      <comment value="queries that have originated from the Versioned object, and have the Versioned" line="338"/>
      <comment value="metadata set on the query object. This prevents regular queries from" line="339"/>
      <comment value="accidentally querying the *_versions tables." line="340"/>
    </inline>
  </method>
  <method name="on_db_reset" start="363" end="373" abstract="false" final="false" static="true" visibility="public">
    <docblock>
      <description compact="Called by {@link SapphireTest} when the database is reset."/>
      <todo value="Reduce the coupling between this and SapphireTest, somehow."/>
    </docblock>
    <inline>
      <comment value="Drop all temporary tables" line="364"/>
      <comment value="Remove references to them" line="371"/>
    </inline>
  </method>
  <method name="augmentDatabase" start="375" end="536" abstract="false" final="false" static="false" visibility="public">
    <inline>
      <comment value="Build a list of suffixes whose tables need versioning" line="380"/>
      <comment value="Add the default table with an empty suffix to the list (table name = class name)" line="391"/>
      <comment value="check that this is a valid suffix" line="395"/>
      <comment value="Create tables for other stages" line="413"/>
      <comment value="Extra tables for _Live, etc." line="415"/>
      <comment value="Change unique indexes to 'index'.  Versioned tables may run into unique indexing difficulties" line="416"/>
      <comment value="otherwise." line="417"/>
      <comment value="Create table for all versions" line="440"/>
      <comment value="Fix data that lacks the uniqueness constraint (since this was added later and" line="478"/>
      <comment value="bugs meant that the constraint was validated)" line="479"/>
      <comment value="Remove junk which has no data in parent classes. Only needs to run the following" line="491"/>
      <comment value="when versioned data is spread over multiple tables" line="492"/>
      <comment value="only need subclasses" line="496"/>
    </inline>
  </method>
  <method name="augmentWrite" start="543" end="644" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="Augment a write-record request."/>
      <param description="Query to augment." type="object" variable="$manipulation">
        <type full="SQLQuery" namespace="" name="SQLQuery"/>
      </param>
    </docblock>
    <parameter name="manipulation" byreference="true" type="{unknown}"/>
    <inline>
      <comment value="Make sure that the augmented write is being applied to a table that can be versioned" line="551"/>
      <comment value="If we haven't got a version #, then we're creating a new version." line="568"/>
      <comment value="Otherwise, we're just copying a version to another table" line="569"/>
      <comment value="Add any extra, unchanged fields to the version record." line="571"/>
      <comment value="Set up a new entry in (table)_versions" line="579"/>
      <comment value="Create a new version #" line="583"/>
      <comment value="Add the version number to this data" line="591"/>
      <comment value="Putting a Version of -1 is a signal to leave the version table alone, despite their being no version" line="605"/>
      <comment value="Grab a version number - it should be the same across all tables." line="612"/>
      <comment value="If we're editing Live, then use (table)_Live instead of (table)" line="617"/>
      <comment value="If the record has already been inserted in the (table), get rid of it." line="623"/>
      <comment value="Clear the migration flag" line="634"/>
      <comment value="Add the new version # back into the data object, for accessing" line="639"/>
      <comment value="after this write" line="640"/>
    </inline>
  </method>
  <method name="writeWithoutVersion" start="652" end="656" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="Perform a write without affecting the version table.">On objects without versioning.</description>
      <return description="The ID of the record" type="int"/>
    </docblock>
  </method>
  <method name="onAfterWrite" start="661" end="663" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description/>
    </docblock>
  </method>
  <method name="onAfterSkippedWrite" start="671" end="673" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="If a write was skipped, then we need to ensure that we don't leave a migrateVersion() value lying around for the next write."/>
    </docblock>
  </method>
  <method name="canBeVersioned" start="682" end="686" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="Determine if a table is supporting the Versioned extensions (e.g.">$table_versions does exists).</description>
      <param description="Table name" type="string" variable="$table"/>
      <return type="boolean"/>
    </docblock>
    <parameter name="table" byreference="false" type="{unknown}"/>
  </method>
  <method name="hasVersionField" start="695" end="705" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="Check if a certain table has the 'Version' field."/>
      <param description="Table name" type="string" variable="$table"/>
      <return description="Returns false if the field isn't in the table, true otherwise" type="boolean"/>
    </docblock>
    <parameter name="table" byreference="false" type="{unknown}"/>
  </method>
  <method name="extendWithSuffix" start="712" end="723" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description/>
      <param type="string" variable="$table"/>
      <return type="string"/>
    </docblock>
    <parameter name="table" byreference="false" type="{unknown}"/>
  </method>
  <method name="latestPublished" start="730" end="740" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="Get the latest published DataObject."/>
      <return type="object">
        <type full="DataObject" namespace="" name="DataObject"/>
      </return>
    </docblock>
    <inline>
      <comment value="Get the root data object class - this will have the version field" line="731"/>
    </inline>
  </method>
  <method name="publish" start="750" end="792" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="Move a database record from one stage to the other."/>
      <param description="Place to copy from.  Can be either a stage name or a version number." type="object">
        <type full="fromStage" namespace="" name="fromStage"/>
      </param>
      <param description="Place to copy to.  Must be a stage name." type="object">
        <type full="toStage" namespace="" name="toStage"/>
      </param>
      <param description="Set this to true to create a new version number.  By default, the existing version" type="object">number will be copied over.<type full="createNewVersion" namespace="" name="createNewVersion"/></param>
    </docblock>
    <parameter name="fromStage" byreference="false" type="{unknown}"/>
    <parameter name="toStage" byreference="false" type="{unknown}"/>
    <parameter name="createNewVersion" byreference="false" type="{unknown}" default="false"/>
    <inline>
      <comment value="Mark this version as having been published at some stage" line="774"/>
    </inline>
  </method>
  <method name="migrateVersion" start="799" end="801" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="Set the migrating version."/>
      <param description="The version." type="string" variable="$version"/>
    </docblock>
    <parameter name="version" byreference="false" type="{unknown}"/>
  </method>
  <method name="stagesDiffer" start="811" end="828" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="Compare two stages to see if they're different.">Only checks the version numbers, not the actual content.</description>
      <param description="The first stage to check." type="string" variable="$stage1"/>
      <param type="string" variable="$stage2"/>
    </docblock>
    <parameter name="stage1" byreference="false" type="{unknown}"/>
    <parameter name="stage2" byreference="false" type="{unknown}"/>
    <inline>
      <comment value="We test for equality - if one of the versions doesn't exist, this" line="819"/>
      <comment value="will be false." line="820"/>
      <todo value="DB Abstraction: if statement here:" line="822"/>
    </inline>
  </method>
  <method name="Versions" start="837" end="839" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description/>
      <param type="string" variable="$filter"/>
      <param type="string" variable="$sort"/>
      <param type="string" variable="$limit"/>
      <param description="Deprecated, use leftJoin($table, $joinClause) instead" type="string" variable="$join"/>
      <param type="string" variable="$having"/>
    </docblock>
    <parameter name="filter" byreference="false" type="string" default="&quot;&quot;"/>
    <parameter name="sort" byreference="false" type="string" default="&quot;&quot;"/>
    <parameter name="limit" byreference="false" type="string" default="&quot;&quot;"/>
    <parameter name="join" byreference="false" type="string" default="&quot;&quot;"/>
    <parameter name="having" byreference="false" type="string" default="&quot;&quot;"/>
  </method>
  <method name="allVersions" start="850" end="890" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="Return a list of all the versions available."/>
      <param type="string" variable="$filter"/>
      <param type="string" variable="$sort"/>
      <param type="string" variable="$limit"/>
      <param description="Deprecated, use leftJoin($table, $joinClause) instead" type="string" variable="$join"/>
      <param type="string" variable="$having"/>
    </docblock>
    <parameter name="filter" byreference="false" type="string" default="&quot;&quot;"/>
    <parameter name="sort" byreference="false" type="string" default="&quot;&quot;"/>
    <parameter name="limit" byreference="false" type="string" default="&quot;&quot;"/>
    <parameter name="join" byreference="false" type="string" default="&quot;&quot;"/>
    <parameter name="having" byreference="false" type="string" default="&quot;&quot;"/>
    <inline>
      <comment value="Make sure the table names are not postfixed (e.g. _Live)" line="851"/>
      <comment value="Add all &lt;basetable&gt;_versions columns" line="872"/>
    </inline>
  </method>
  <method name="compareVersions" start="900" end="907" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="Compare two version, and return the diff between them."/>
      <param description="The version to compare from." type="string" variable="$from"/>
      <param description="The version to compare to." type="string" variable="$to"/>
      <return type="object">
        <type full="DataObject" namespace="" name="DataObject"/>
      </return>
    </docblock>
    <parameter name="from" byreference="false" type="{unknown}"/>
    <parameter name="to" byreference="false" type="{unknown}"/>
  </method>
  <method name="baseTable" start="914" end="923" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="Return the base table - the class that directly extends DataObject."/>
      <return type="string"/>
    </docblock>
    <parameter name="stage" byreference="false" type="{unknown}" default="null"/>
  </method>
  <method name="choose_site_stage" start="942" end="990" abstract="false" final="false" static="true" visibility="public">
    <docblock>
      <description compact="Choose the stage the site is currently on.">If $_GET['stage'] is set, then it will use that stage, and store it in
the session.

if $_GET['archiveDate'] is set, it will use that date, and store it in
the session.

If neither of these are set, it checks the session, otherwise the stage
is set to 'Live'.</description>
      <param description="Optional session within which to store the resulting stage" type="object" variable="$session">
        <type full="Session" namespace="" name="Session"/>
      </param>
    </docblock>
    <parameter name="session" byreference="false" type="{unknown}" default="null"/>
    <inline>
      <comment value="Check any pre-existing session mode" line="943"/>
      <comment value="Determine the reading mode" line="948"/>
      <comment value="Save reading mode" line="961"/>
      <comment value="Try not to store the mode in the session if not needed" line="964"/>
      <comment value="clear the cookie if it's set" line="977"/>
    </inline>
  </method>
  <method name="set_reading_mode" start="997" end="999" abstract="false" final="false" static="true" visibility="public">
    <docblock>
      <description compact="Set the current reading mode."/>
      <param type="string" variable="$mode"/>
    </docblock>
    <parameter name="mode" byreference="false" type="{unknown}"/>
  </method>
  <method name="get_reading_mode" start="1006" end="1008" abstract="false" final="false" static="true" visibility="public">
    <docblock>
      <description compact="Get the current reading mode."/>
      <return type="string"/>
    </docblock>
  </method>
  <method name="get_live_stage" start="1015" end="1017" abstract="false" final="false" static="true" visibility="public">
    <docblock>
      <description compact="Get the name of the 'live' stage."/>
      <return type="string"/>
    </docblock>
  </method>
  <method name="current_stage" start="1024" end="1030" abstract="false" final="false" static="true" visibility="public">
    <docblock>
      <description compact="Get the current reading stage."/>
      <return type="string"/>
    </docblock>
  </method>
  <method name="current_archived_date" start="1037" end="1040" abstract="false" final="false" static="true" visibility="public">
    <docblock>
      <description compact="Get the current archive date."/>
      <return type="string"/>
    </docblock>
  </method>
  <method name="reading_stage" start="1047" end="1049" abstract="false" final="false" static="true" visibility="public">
    <docblock>
      <description compact="Set the reading stage."/>
      <param description="New reading stage." type="string" variable="$stage"/>
    </docblock>
    <parameter name="stage" byreference="false" type="{unknown}"/>
  </method>
  <method name="reading_archived_date" start="1056" end="1058" abstract="false" final="false" static="true" visibility="public">
    <docblock>
      <description compact="Set the reading archive date."/>
      <param description="New reading archived date." type="string" variable="$date"/>
    </docblock>
    <parameter name="date" byreference="false" type="{unknown}"/>
  </method>
  <method name="get_one_by_stage" start="1072" end="1077" abstract="false" final="false" static="true" visibility="public">
    <docblock>
      <description compact="Get a singleton instance of a class in the given stage."/>
      <param description="The name of the class." type="string" variable="$class"/>
      <param description="The name of the stage." type="string" variable="$stage"/>
      <param description="A filter to be inserted into the WHERE clause." type="string" variable="$filter"/>
      <param description="Use caching." type="boolean" variable="$cache"/>
      <param description="A sort expression to be inserted into the ORDER BY clause." type="string" variable="$orderby"/>
      <return type="object">
        <type full="DataObject" namespace="" name="DataObject"/>
      </return>
    </docblock>
    <parameter name="class" byreference="false" type="{unknown}"/>
    <parameter name="stage" byreference="false" type="{unknown}"/>
    <parameter name="filter" byreference="false" type="string" default="''"/>
    <parameter name="cache" byreference="false" type="{unknown}" default="true"/>
    <parameter name="sort" byreference="false" type="string" default="''"/>
    <inline>
      <todo value="No identity cache operating" line="1073"/>
    </inline>
  </method>
  <method name="get_versionnumber_by_stage" start="1089" end="1115" abstract="false" final="false" static="true" visibility="public">
    <docblock>
      <description compact="Gets the current version number of a specific record."/>
      <param type="string" variable="$class"/>
      <param type="string" variable="$stage"/>
      <param type="int" variable="$id"/>
      <param type="boolean" variable="$cache"/>
      <return type="int"/>
    </docblock>
    <parameter name="class" byreference="false" type="{unknown}"/>
    <parameter name="stage" byreference="false" type="{unknown}"/>
    <parameter name="id" byreference="false" type="{unknown}"/>
    <parameter name="cache" byreference="false" type="{unknown}" default="true"/>
    <inline>
      <comment value="cached call" line="1093"/>
      <comment value="get version as performance-optimized SQL query (gets called for each page in the sitetree)" line="1098"/>
      <comment value="cache value (if required)" line="1101"/>
    </inline>
  </method>
  <method name="prepopulate_versionnumber_cache" start="1126" end="1152" abstract="false" final="false" static="true" visibility="public">
    <docblock>
      <description compact="Pre-populate the cache for Versioned::get_versionnumber_by_stage() for a list of record IDs, for more efficient database querying.  If $idList is null, then every page will be pre-cached."/>
      <param type="string" variable="$class"/>
      <param type="string" variable="$stage"/>
      <param type="array" variable="$idList"/>
    </docblock>
    <parameter name="class" byreference="false" type="{unknown}"/>
    <parameter name="stage" byreference="false" type="{unknown}"/>
    <parameter name="idList" byreference="false" type="{unknown}" default="null"/>
    <inline>
      <comment value="Validate the ID list" line="1133"/>
    </inline>
  </method>
  <method name="get_by_stage" start="1167" end="1175" abstract="false" final="false" static="true" visibility="public">
    <docblock>
      <description compact="Get a set of class instances by the given stage."/>
      <param description="The name of the class." type="string" variable="$class"/>
      <param description="The name of the stage." type="string" variable="$stage"/>
      <param description="A filter to be inserted into the WHERE clause." type="string" variable="$filter"/>
      <param description="A sort expression to be inserted into the ORDER BY clause." type="string" variable="$sort"/>
      <param description="Deprecated, use leftJoin($table, $joinClause) instead" type="string" variable="$join"/>
      <param description="A limit on the number of records returned from the database." type="int" variable="$limit"/>
      <param description="The container class for the result set (default is DataList)" type="string" variable="$containerClass"/>
      <return type="object">
        <type full="SS_List" namespace="" name="SS_List"/>
      </return>
    </docblock>
    <parameter name="class" byreference="false" type="{unknown}"/>
    <parameter name="stage" byreference="false" type="{unknown}"/>
    <parameter name="filter" byreference="false" type="string" default="''"/>
    <parameter name="sort" byreference="false" type="string" default="''"/>
    <parameter name="join" byreference="false" type="string" default="''"/>
    <parameter name="limit" byreference="false" type="string" default="''"/>
    <parameter name="containerClass" byreference="false" type="string" default="'DataList'"/>
  </method>
  <method name="deleteFromStage" start="1182" end="1194" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description/>
      <param type="string" variable="$stage"/>
      <return type="int"/>
    </docblock>
    <parameter name="stage" byreference="false" type="{unknown}"/>
    <inline>
      <comment value="Fix the version number cache (in case you go delete from stage and then check ExistsOnLive)" line="1189"/>
    </inline>
  </method>
  <method name="writeToStage" start="1200" end="1209" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description/>
      <param type="string" variable="$stage"/>
      <param type="boolean" variable="$forceInsert"/>
    </docblock>
    <parameter name="stage" byreference="false" type="{unknown}"/>
    <parameter name="forceInsert" byreference="false" type="{unknown}" default="false"/>
  </method>
  <method name="doRollbackTo" start="1217" end="1224" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="Roll the draft version of this page to match the published page.">Caution: Doesn't overwrite the object properties with the rolled back version.</description>
      <param description="Either the string 'Live' or a version number" type="int" variable="$version"/>
    </docblock>
    <parameter name="version" byreference="false" type="{unknown}"/>
  </method>
  <method name="get_latest_version" start="1231" end="1238" abstract="false" final="false" static="true" visibility="public">
    <docblock>
      <description compact="Return the latest version of the given page."/>
      <return type="object">
        <type full="DataObject" namespace="" name="DataObject"/>
      </return>
    </docblock>
    <parameter name="class" byreference="false" type="{unknown}"/>
    <parameter name="id" byreference="false" type="{unknown}"/>
  </method>
  <method name="isLatestVersion" start="1250" end="1254" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="Returns whether the current record is the latest one."/>
      <todo value="Performance - could do this directly via SQL."/>
      <see value="get_latest_version()"/>
      <see value="latestPublished"/>
      <return type="boolean"/>
    </docblock>
  </method>
  <method name="get_including_deleted" start="1266" end="1273" abstract="false" final="false" static="true" visibility="public">
    <docblock>
      <description compact="Return the equivalent of a DataList::create() call, querying the latest version of each page stored in the (class)_versions tables.">In particular, this will query deleted records as well as active ones.</description>
      <param type="string" variable="$class"/>
      <param type="string" variable="$filter"/>
      <param type="string" variable="$sort"/>
    </docblock>
    <parameter name="class" byreference="false" type="{unknown}"/>
    <parameter name="filter" byreference="false" type="string" default="&quot;&quot;"/>
    <parameter name="sort" byreference="false" type="string" default="&quot;&quot;"/>
  </method>
  <method name="get_version" start="1288" end="1296" abstract="false" final="false" static="true" visibility="public">
    <docblock>
      <description compact="Return the specific version of the given id.">Caution: The record is retrieved as a DataObject, but saving back
modifications via write() will create a new version, rather than
modifying the existing one.</description>
      <param type="string" variable="$class"/>
      <param type="int" variable="$id"/>
      <param type="int" variable="$version"/>
      <return type="object">
        <type full="DataObject" namespace="" name="DataObject"/>
      </return>
    </docblock>
    <parameter name="class" byreference="false" type="{unknown}"/>
    <parameter name="id" byreference="false" type="{unknown}"/>
    <parameter name="version" byreference="false" type="{unknown}"/>
  </method>
  <method name="get_all_versions" start="1306" end="1313" abstract="false" final="false" static="true" visibility="public">
    <docblock>
      <description compact="Return a list of all versions for a given id."/>
      <param type="string" variable="$class"/>
      <param type="int" variable="$id"/>
      <return type="object">
        <type full="DataList" namespace="" name="DataList"/>
      </return>
    </docblock>
    <parameter name="class" byreference="false" type="{unknown}"/>
    <parameter name="id" byreference="false" type="{unknown}"/>
  </method>
  <method name="updateFieldLabels" start="1318" end="1320" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description/>
      <param type="array" variable="$labels"/>
    </docblock>
    <parameter name="labels" byreference="true" type="{unknown}"/>
  </method>
  <method name="updateCMSFields" start="1325" end="1329" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description/>
      <param type="object">
        <type full="FieldList" namespace="" name="FieldList"/>
      </param>
    </docblock>
    <parameter name="fields" byreference="false" type="object">
      <type full="\\FieldList" namespace="\" name="FieldList"/>
    </parameter>
    <inline>
      <comment value="remove the version field from the CMS as this should be left" line="1326"/>
      <comment value="entirely up to the extension (not the cms user)." line="1327"/>
    </inline>
  </method>
  <method name="flushCache" start="1331" end="1333" abstract="false" final="false" static="false" visibility="public"/>
  <method name="cacheKeyComponent" start="1340" end="1342" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="Return a piece of text to keep DataObject cache keys appropriately specific."/>
      <return type="string"/>
    </docblock>
  </method>
  <method name="getVersionedStages" start="1349" end="1351" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="Returns an array of possible stages."/>
      <return type="array"/>
    </docblock>
  </method>
  <method name="getDefaultStage" start="1356" end="1358" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description/>
      <return type="string"/>
    </docblock>
  </method>
  <method name="get_template_global_variables" start="1360" end="1364" abstract="false" final="false" static="true" visibility="public"/>
  <parent full="DataExtension" namespace="" name="DataExtension">
    <extends full="Extension" namespace="" name="Extension"/>
    <method name="get_extra_config" start="10" end="25" abstract="false" final="false" static="true" visibility="public">
      <parameter name="class" byreference="false" type="{unknown}"/>
      <parameter name="extension" byreference="false" type="{unknown}"/>
      <parameter name="args" byreference="false" type="{unknown}"/>
    </method>
    <method name="unload_extra_statics" start="27" end="29" abstract="false" final="false" static="true" visibility="public">
      <parameter name="class" byreference="false" type="{unknown}"/>
      <parameter name="extension" byreference="false" type="{unknown}"/>
    </method>
    <method name="validate" start="37" end="38" abstract="false" final="false" static="false" visibility="public">
      <docblock>
        <description compact="Hook for extension-specific validation."/>
        <param description="validation result" variable="$validationResult" type="object">
          <type full="Local" namespace="" name="Local"/>
        </param>
        <throws type="object">
          <type full="ValidationException" namespace="" name="ValidationException"/>
        </throws>
      </docblock>
      <parameter name="validationResult" byreference="false" type="object">
        <type full="\\ValidationResult" namespace="\" name="ValidationResult"/>
      </parameter>
    </method>
    <method name="augmentSQL" start="45" end="46" abstract="false" final="false" static="false" visibility="public">
      <docblock>
        <description compact="Edit the given query object to support queries for this extension"/>
        <param description="Query to augment." type="object" variable="$query">
          <type full="SQLQuery" namespace="" name="SQLQuery"/>
        </param>
      </docblock>
      <parameter name="query" byreference="true" type="object">
        <type full="\\SQLQuery" namespace="\" name="SQLQuery"/>
      </parameter>
    </method>
    <method name="augmentDatabase" start="54" end="55" abstract="false" final="false" static="false" visibility="public">
      <docblock>
        <description compact="Update the database schema as required by this extension.">When duplicating a table's structure, remember to duplicate the create options
as well. See <link xmlns="http://xml.phpdox.net/src" value="Versioned-&gt;augmentDatabase"/> for an example.
</description>
      </docblock>
    </method>
    <method name="augmentWrite" start="62" end="63" abstract="false" final="false" static="false" visibility="public">
      <docblock>
        <description compact="Augment a write-record request."/>
        <param description="Query to augment." type="object" variable="$manipulation">
          <type full="SQLQuery" namespace="" name="SQLQuery"/>
        </param>
      </docblock>
      <parameter name="manipulation" byreference="true" type="{unknown}"/>
    </method>
    <method name="onBeforeWrite" start="65" end="66" abstract="false" final="false" static="false" visibility="public"/>
    <method name="onAfterWrite" start="68" end="69" abstract="false" final="false" static="false" visibility="public"/>
    <method name="onBeforeDelete" start="71" end="72" abstract="false" final="false" static="false" visibility="public"/>
    <method name="onAfterDelete" start="74" end="75" abstract="false" final="false" static="false" visibility="public"/>
    <method name="requireDefaultRecords" start="77" end="78" abstract="false" final="false" static="false" visibility="public"/>
    <method name="populateDefaults" start="80" end="81" abstract="false" final="false" static="false" visibility="public"/>
    <method name="can" start="83" end="84" abstract="false" final="false" static="false" visibility="public">
      <parameter name="member" byreference="false" type="{unknown}"/>
    </method>
    <method name="canEdit" start="86" end="87" abstract="false" final="false" static="false" visibility="public">
      <parameter name="member" byreference="false" type="{unknown}"/>
    </method>
    <method name="canDelete" start="89" end="90" abstract="false" final="false" static="false" visibility="public">
      <parameter name="member" byreference="false" type="{unknown}"/>
    </method>
    <method name="canCreate" start="92" end="93" abstract="false" final="false" static="false" visibility="public">
      <parameter name="member" byreference="false" type="{unknown}"/>
    </method>
    <method name="extraStatics" start="107" end="109" abstract="false" final="false" static="false" visibility="public">
      <docblock>
        <description compact="Define extra database fields">Return a map where the keys are db, has_one, etc, and the values are
additional fields/relations to be defined.</description>
        <param description="this method might be called on the class directly" variable="$class" type="object">
          <type full="since" namespace="" name="since"/>
        </param>
        <param description="this can help to extract parameters to help set indexes" variable="$extension" type="object">
          <type full="since" namespace="" name="since"/>
        </param>
        <return description="Returns a map where the keys are db, has_one, etc, and" type="array">the values are additional fields/relations to be defined.</return>
      </docblock>
      <parameter name="class" byreference="false" type="{unknown}" default="null"/>
      <parameter name="extension" byreference="false" type="{unknown}" default="null"/>
    </method>
    <method name="updateCMSFields" start="124" end="125" abstract="false" final="false" static="false" visibility="public">
      <docblock>
        <description compact="This function is used to provide modifications to the form in the CMS by the extension. By default, no changes are made. {@link DataObject-&gt;getCMSFields()}.">Please consider using <link xmlns="http://xml.phpdox.net/src" value="updateFormFields()"/> to globally add
formfields to the record. The method <link xmlns="http://xml.phpdox.net/src" value="updateCMSFields()"/>should just be used to add or modify tabs, or fields which
are specific to the CMS-context.
Caution: Use <link xmlns="http://xml.phpdox.net/src" value="FieldList-&gt;addFieldToTab()"/> to add fields.
</description>
        <param description="FieldList with a contained TabSet" type="object" variable="$fields">
          <type full="FieldList" namespace="" name="FieldList"/>
        </param>
      </docblock>
      <parameter name="fields" byreference="false" type="object">
        <type full="\\FieldList" namespace="\" name="FieldList"/>
      </parameter>
    </method>
    <method name="updateFrontEndFields" start="135" end="136" abstract="false" final="false" static="false" visibility="public">
      <docblock>
        <description compact="This function is used to provide modifications to the form used for front end forms. {@link DataObject-&gt;getFrontEndFields()}">Caution: Use <link xmlns="http://xml.phpdox.net/src" value="FieldList-&gt;push()"/> to add fields.
</description>
        <param description="FieldList without TabSet nesting" type="object" variable="$fields">
          <type full="FieldList" namespace="" name="FieldList"/>
        </param>
      </docblock>
      <parameter name="fields" byreference="false" type="object">
        <type full="\\FieldList" namespace="\" name="FieldList"/>
      </parameter>
    </method>
    <method name="updateCMSActions" start="144" end="145" abstract="false" final="false" static="false" visibility="public">
      <docblock>
        <description compact="This is used to provide modifications to the form actions used in the CMS. {@link DataObject-&gt;getCMSActions()}."/>
        <param description="FieldList" type="object" variable="$actions">
          <type full="FieldList" namespace="" name="FieldList"/>
        </param>
      </docblock>
      <parameter name="actions" byreference="false" type="object">
        <type full="\\FieldList" namespace="\" name="FieldList"/>
      </parameter>
    </method>
    <method name="updateSummaryFields" start="155" end="165" abstract="false" final="false" static="false" visibility="public">
      <docblock>
        <description compact="this function is used to provide modifications to the summary fields in CMS by the extension By default, the summaryField() of its owner will merge more fields defined in the extension's $extra_fields['summary_fields']"/>
        <param description="Array of field names" type="array" variable="$fields"/>
      </docblock>
      <parameter name="fields" byreference="true" type="{unknown}"/>
      <inline>
        <comment value="if summary_fields were passed in numeric array," line="158"/>
        <comment value="convert to an associative array" line="159"/>
      </inline>
    </method>
    <method name="updateFieldLabels" start="175" end="180" abstract="false" final="false" static="false" visibility="public">
      <docblock>
        <description compact="this function is used to provide modifications to the fields labels in CMS by the extension By default, the fieldLabels() of its owner will merge more fields defined in the extension's $extra_fields['field_labels']"/>
        <param description="Array of field labels" type="array" variable="$labels"/>
      </docblock>
      <parameter name="labels" byreference="true" type="{unknown}"/>
    </method>
  </parent>
  <parent full="Extension" namespace="" name="Extension">
    <member name="owner" type="{unknown}" visibility="protected" line="26">
      <docblock>
        <description compact="The object this extension is applied to."/>
        <var type="object">
          <type full="Object" namespace="" name="Object"/>
        </var>
      </docblock>
    </member>
    <member name="ownerBaseClass" type="{unknown}" visibility="protected" line="32">
      <docblock>
        <description compact="The base class that this extension was applied to; $this-&gt;owner must be one of these"/>
        <var type="object">
          <type full="DataObject" namespace="" name="DataObject"/>
        </var>
      </docblock>
    </member>
    <member name="class" type="{unknown}" visibility="public" line="40"/>
    <constructor name="__construct" start="42" end="44" abstract="false" final="false" static="false" visibility="public"/>
    <method name="add_to_class" start="52" end="54" abstract="false" final="false" static="true" visibility="public">
      <docblock>
        <description compact="Called when this extension is added to a particular class"/>
        <static/>
        <param variable="$class"/>
      </docblock>
      <parameter name="class" byreference="false" type="{unknown}"/>
      <parameter name="extensionClass" byreference="false" type="{unknown}"/>
      <parameter name="args" byreference="false" type="{unknown}" default="null"/>
    </method>
    <method name="setOwner" start="64" end="70" abstract="false" final="false" static="false" visibility="public">
      <docblock>
        <description compact="Set the owner of this extension."/>
        <param description="The owner object," type="object" variable="$owner">
          <type full="Object" namespace="" name="Object"/>
        </param>
        <param description="The base class that the extension is applied to; this may be" type="string" variable="$ownerBaseClass">the class of owner, or it may be a parent.  For example, if Versioned was applied to SiteTree,
and then a Page object was instantiated, $owner would be a Page object, but $ownerBaseClass
would be 'SiteTree'.</param>
      </docblock>
      <parameter name="owner" byreference="false" type="{unknown}"/>
      <parameter name="ownerBaseClass" byreference="false" type="{unknown}" default="null"/>
    </method>
    <method name="clearOwner" start="72" end="76" abstract="false" final="false" static="false" visibility="public"/>
    <method name="getOwner" start="83" end="85" abstract="false" final="false" static="false" visibility="public">
      <docblock>
        <description compact="Returns the owner of this extension."/>
        <return type="object">
          <type full="Object" namespace="" name="Object"/>
        </return>
      </docblock>
    </method>
    <method name="get_classname_without_arguments" start="95" end="97" abstract="false" final="false" static="true" visibility="public">
      <docblock>
        <description compact="Helper method to strip eval'ed arguments from a string thats passed to {@link DataObject::$extensions} or {@link Object::add_extension()}."/>
        <param description="E.g. &quot;Versioned('Stage','Live')&quot;" type="string" variable="$extensionStr"/>
        <return description="Extension classname, e.g. &quot;Versioned&quot;" type="string"/>
      </docblock>
      <parameter name="extensionStr" byreference="false" type="{unknown}"/>
    </method>
  </parent>
  <interface full="TemplateGlobalProvider" namespace="" name="TemplateGlobalProvider">
    <method name="get_template_global_variables" start="33" end="33" abstract="false" final="false" static="true" visibility="public">
      <docblock>
        <description compact="Called by SSViewer to get a list of global variables to expose to the template, the static method to call on this class to get the value for those variables, and the class to use for casting the returned value for use in a template">If the method to call is not included for a particular template variable, a method named the same as the
template variable will be called

If the casting class is not specified for a particular template variable, ViewableData::$default_cast is used

The first letter of the template variable is case-insensitive. However the method name is always case sensitive.</description>
        <abstract/>
        <return description="Returns an array of items. Each key =&gt; value pair is one of three forms:" type="array">- template name (no key)
 - template name =&gt; method name
 - template name =&gt; array(), where the array can contain these key =&gt; value pairs
    - "method" =&gt; method name
    - "casting" =&gt; casting class to use (i.e., Varchar, HTMLText, etc)</return>
      </docblock>
    </method>
  </interface>
</class>
