<?xml version="1.0" encoding="UTF-8"?>
<class xmlns="http://xml.phpdox.net/src" full="SS_Database" namespace="" name="SS_Database" abstract="true" final="false" start="8" end="1055">
  <file path="/var/www/_modules/ecommerce_test/trunk/docs/en/phpdox/../../../framework/model" file="Database.php" realpath="/var/www/_modules/ecommerce_test/trunk/framework/model/Database.php" size="34682" time="2015-03-14T10:40:57+13:00" unixtime="1426282857" sha1="dd0fbf8f33497c30abedfd59f20a72603647777b" relative="framework/model/Database.php"/>
  <docblock>
    <description compact="Abstract database connectivity class.">Sub-classes of this implement the actual database connection libraries</description>
    <package value="framework"/>
    <subpackage value="model"/>
  </docblock>
  <member name="check_and_repair_on_build" type="{unknown}" default="true" visibility="private" line="17">
    <docblock>
      <description/>
      <config/>
      <var description="Check tables when running /dev/build, and repair them if necessary." type="boolean">In case of large databases or more fine-grained control on how to handle
data corruption in tables, you can disable this behaviour and handle it
outside of this class, e.g. through a nightly system task with extended logging capabilities.</var>
    </docblock>
  </member>
  <member name="supressOutput" type="{unknown}" default="false" visibility="protected" line="25">
    <docblock>
      <description compact="If this is false, then information about database operations will be displayed, eg creation of tables."/>
      <param type="boolean"/>
    </docblock>
  </member>
  <method name="query" start="35" end="35" abstract="true" final="false" static="false" visibility="public">
    <docblock>
      <description compact="Execute the given SQL query.">This abstract function must be defined by subclasses as part of the actual implementation.
It should return a subclass of SS_Query as the result.</description>
      <param description="The SQL query to execute" type="string" variable="$sql"/>
      <param description="The level of error reporting to enable for the query" type="int" variable="$errorLevel"/>
      <return type="object">
        <type full="SS_Query" namespace="" name="SS_Query"/>
      </return>
    </docblock>
    <parameter name="sql" byreference="false" type="{unknown}"/>
    <parameter name="errorLevel" byreference="false" type="{unknown}" default="E_USER_ERROR"/>
  </method>
  <method name="getGeneratedID" start="41" end="41" abstract="true" final="false" static="false" visibility="public">
    <docblock>
      <description compact="Get the autogenerated ID from the previous INSERT query."/>
      <return type="int"/>
    </docblock>
    <parameter name="table" byreference="false" type="{unknown}"/>
  </method>
  <method name="isActive" start="47" end="47" abstract="true" final="false" static="false" visibility="public">
    <docblock>
      <description compact="Check if the connection to the database is active."/>
      <return type="boolean"/>
    </docblock>
  </method>
  <method name="createDatabase" start="59" end="59" abstract="true" final="false" static="false" visibility="public">
    <docblock>
      <description compact="Create the database and connect to it. This can be called if the initial database connection is not successful because the database does not exist.">It takes no parameters, and should create the database from the information
specified in the constructor.</description>
      <return description="Returns true if successful" type="boolean"/>
    </docblock>
  </method>
  <method name="getConnect" start="66" end="66" abstract="true" final="false" static="false" visibility="public">
    <docblock>
      <description compact="Build the connection string from input"/>
      <param description="The connection details" type="array" variable="$parameters"/>
      <return description="$connect The connection string" type="string"/>
    </docblock>
    <parameter name="parameters" byreference="false" type="{unknown}"/>
  </method>
  <method name="createTable" start="78" end="79" abstract="true" final="false" static="false" visibility="public">
    <docblock>
      <description compact="Create a new table."/>
      <param description="name of the table" variable="$tableName" type="object">
        <type full="The" namespace="" name="The"/>
      </param>
      <param description="map of field names to field types" variable="$fields" type="object">
        <type full="A" namespace="" name="A"/>
      </param>
      <param description="map of indexes" variable="$indexes" type="object">
        <type full="A" namespace="" name="A"/>
      </param>
      <param description="map of additional options.  The available keys are as follows:" variable="$options" type="object">- 'MSSQLDatabase'/'MySQLDatabase'/'PostgreSQLDatabase' - database-specific options such as "engine" for MySQL.
  - 'temporary' - If true, then a temporary table will be created<type full="An" namespace="" name="An"/></param>
      <return description="table name generated.  This may be different from the table name, for example with temporary tables." type="object">
        <type full="The" namespace="" name="The"/>
      </return>
    </docblock>
    <parameter name="table" byreference="false" type="{unknown}"/>
    <parameter name="fields" byreference="false" type="{unknown}" default="null"/>
    <parameter name="indexes" byreference="false" type="{unknown}" default="null"/>
    <parameter name="options" byreference="false" type="{unknown}" default="null"/>
    <parameter name="advancedOptions" byreference="false" type="{unknown}" default="null"/>
  </method>
  <method name="alterTable" start="84" end="85" abstract="true" final="false" static="false" visibility="public">
    <docblock>
      <description compact="Alter a table's schema."/>
    </docblock>
    <parameter name="table" byreference="false" type="{unknown}"/>
    <parameter name="newFields" byreference="false" type="{unknown}" default="null"/>
    <parameter name="newIndexes" byreference="false" type="{unknown}" default="null"/>
    <parameter name="alteredFields" byreference="false" type="{unknown}" default="null"/>
    <parameter name="alteredIndexes" byreference="false" type="{unknown}" default="null"/>
    <parameter name="alteredOptions" byreference="false" type="{unknown}" default="null"/>
    <parameter name="advancedOptions" byreference="false" type="{unknown}" default="null"/>
  </method>
  <method name="renameTable" start="92" end="92" abstract="true" final="false" static="false" visibility="public">
    <docblock>
      <description compact="Rename a table."/>
      <param description="The old table name." type="string" variable="$oldTableName"/>
      <param description="The new table name." type="string" variable="$newTableName"/>
    </docblock>
    <parameter name="oldTableName" byreference="false" type="{unknown}"/>
    <parameter name="newTableName" byreference="false" type="{unknown}"/>
  </method>
  <method name="createField" start="100" end="100" abstract="true" final="false" static="false" visibility="public">
    <docblock>
      <description compact="Create a new field on a table."/>
      <param description="Name of the table." type="string" variable="$table"/>
      <param description="Name of the field to add." type="string" variable="$field"/>
      <param description="The field specification, eg 'INTEGER NOT NULL'" type="string" variable="$spec"/>
    </docblock>
    <parameter name="table" byreference="false" type="{unknown}"/>
    <parameter name="field" byreference="false" type="{unknown}"/>
    <parameter name="spec" byreference="false" type="{unknown}"/>
  </method>
  <method name="renameField" start="109" end="109" abstract="true" final="false" static="false" visibility="public">
    <docblock>
      <description compact="Change the database column name of the given field."/>
      <param description="The name of the tbale the field is in." type="string" variable="$tableName"/>
      <param description="The name of the field to change." type="string" variable="$oldName"/>
      <param description="The new name of the field" type="string" variable="$newName"/>
    </docblock>
    <parameter name="tableName" byreference="false" type="{unknown}"/>
    <parameter name="oldName" byreference="false" type="{unknown}"/>
    <parameter name="newName" byreference="false" type="{unknown}"/>
  </method>
  <method name="fieldList" start="117" end="117" abstract="true" final="false" static="false" visibility="protected">
    <docblock>
      <description compact="Get a list of all the fields for the given table.">Returns a map of field name =&gt; field spec.</description>
      <param description="The table name." type="string" variable="$table"/>
      <return type="array"/>
    </docblock>
    <parameter name="table" byreference="false" type="{unknown}"/>
  </method>
  <method name="clearCachedFieldlist" start="134" end="136" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="This is a stub function.  Postgres caches the fieldlist results."/>
      <param type="string" variable="$tableName"/>
      <return type="boolean"/>
    </docblock>
    <parameter name="tableName" byreference="false" type="{unknown}" default="false"/>
  </method>
  <method name="tableList" start="138" end="138" abstract="true" final="false" static="false" visibility="protected"/>
  <method name="hasTable" start="144" end="144" abstract="true" final="false" static="false" visibility="public">
    <docblock>
      <description compact="Returns true if the given table exists in the database"/>
    </docblock>
    <parameter name="tableName" byreference="false" type="{unknown}"/>
  </method>
  <method name="enumValuesForField" start="149" end="149" abstract="true" final="false" static="false" visibility="public">
    <docblock>
      <description compact="Returns the enum values available on the given field"/>
    </docblock>
    <parameter name="tableName" byreference="false" type="{unknown}"/>
    <parameter name="fieldName" byreference="false" type="{unknown}"/>
  </method>
  <method name="addslashes" start="157" end="157" abstract="true" final="false" static="false" visibility="public">
    <docblock>
      <description compact="Returns an escaped string."/>
      <param type="string"/>
      <return description="- escaped string" type="string"/>
    </docblock>
    <parameter name="val" byreference="false" type="{unknown}"/>
  </method>
  <member name="tableList" type="{unknown}" visibility="protected" line="164">
    <docblock>
      <description compact="The table list, generated by the tableList() function.">Used by the requireTable() function.</description>
      <var type="array"/>
    </docblock>
  </member>
  <member name="fieldList" type="{unknown}" visibility="protected" line="172">
    <docblock>
      <description compact="The field list, generated by the fieldList() function.">An array of maps of field name =&gt; field spec, indexed
by table name.</description>
      <var type="array"/>
    </docblock>
  </member>
  <member name="indexList" type="{unknown}" visibility="protected" line="179">
    <docblock>
      <description compact="The index list for each table, generated by the indexList() function.">An map from table name to an array of index names.</description>
      <var type="array"/>
    </docblock>
  </member>
  <member name="schemaIsUpdating" type="{unknown}" default="false" visibility="protected" line="184">
    <docblock>
      <description compact="Keeps track whether we are currently updating the schema."/>
    </docblock>
  </member>
  <member name="schemaUpdateTransaction" type="{unknown}" visibility="protected" line="189">
    <docblock>
      <description compact="Large array structure that represents a schema update transaction"/>
    </docblock>
  </member>
  <method name="beginSchemaUpdate" start="196" end="205" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="Start a schema-updating transaction.">All calls to requireTable/Field/Index will keep track of the changes requested, but not actually do anything.
Once</description>
    </docblock>
  </method>
  <method name="endSchemaUpdate" start="210" end="229" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="Completes a schema-updated transaction, executing all the schema chagnes."/>
    </docblock>
  </method>
  <method name="cancelSchemaUpdate" start="234" end="237" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="Cancels the schema updates requested after a beginSchemaUpdate() call."/>
    </docblock>
  </method>
  <method name="isSchemaUpdating" start="242" end="244" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="Returns true if we are during a schema update."/>
    </docblock>
  </method>
  <method name="doesSchemaNeedUpdating" start="249" end="251" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="Returns true if schema modifications were requested after a beginSchemaUpdate() call."/>
    </docblock>
  </method>
  <method name="transCreateTable" start="259" end="267" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description/>
      <param type="string" variable="$table"/>
      <param type="string" variable="$options"/>
    </docblock>
    <parameter name="table" byreference="false" type="{unknown}"/>
    <parameter name="options" byreference="false" type="{unknown}" default="null"/>
    <parameter name="advanced_options" byreference="false" type="{unknown}" default="null"/>
  </method>
  <method name="transAlterTable" start="273" end="277" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description/>
      <param type="string" variable="$table"/>
      <param type="array" variable="$options"/>
    </docblock>
    <parameter name="table" byreference="false" type="{unknown}"/>
    <parameter name="options" byreference="false" type="{unknown}"/>
    <parameter name="advanced_options" byreference="false" type="{unknown}"/>
  </method>
  <method name="transCreateField" start="279" end="282" abstract="false" final="false" static="false" visibility="public">
    <parameter name="table" byreference="false" type="{unknown}"/>
    <parameter name="field" byreference="false" type="{unknown}"/>
    <parameter name="schema" byreference="false" type="{unknown}"/>
  </method>
  <method name="transCreateIndex" start="283" end="286" abstract="false" final="false" static="false" visibility="public">
    <parameter name="table" byreference="false" type="{unknown}"/>
    <parameter name="index" byreference="false" type="{unknown}"/>
    <parameter name="schema" byreference="false" type="{unknown}"/>
  </method>
  <method name="transAlterField" start="287" end="290" abstract="false" final="false" static="false" visibility="public">
    <parameter name="table" byreference="false" type="{unknown}"/>
    <parameter name="field" byreference="false" type="{unknown}"/>
    <parameter name="schema" byreference="false" type="{unknown}"/>
  </method>
  <method name="transAlterIndex" start="291" end="294" abstract="false" final="false" static="false" visibility="public">
    <parameter name="table" byreference="false" type="{unknown}"/>
    <parameter name="index" byreference="false" type="{unknown}"/>
    <parameter name="schema" byreference="false" type="{unknown}"/>
  </method>
  <method name="transInitTable" start="300" end="311" abstract="false" final="false" static="false" visibility="protected">
    <docblock>
      <description compact="Handler for the other transXXX methods - mark the given table as being altered if it doesn't already exist"/>
    </docblock>
    <parameter name="table" byreference="false" type="{unknown}"/>
  </method>
  <method name="requireTable" start="324" end="385" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="Generate the following table in the database, modifying whatever already exists as necessary."/>
      <todo value="Change detection for CREATE TABLE $options other than &quot;Engine&quot;"/>
      <param description="The name of the table" type="string" variable="$table"/>
      <param description="A list of the fields to create, in the same form as DataObject::$db" type="string" variable="$fieldSchema"/>
      <param description="A list of indexes to create. See {@link requireIndex()}" type="string" variable="$indexSchema"/>
      <param type="array" variable="$options"/>
    </docblock>
    <parameter name="table" byreference="false" type="{unknown}"/>
    <parameter name="fieldSchema" byreference="false" type="{unknown}" default="null"/>
    <parameter name="indexSchema" byreference="false" type="{unknown}" default="null"/>
    <parameter name="hasAutoIncPK" byreference="false" type="{unknown}" default="true"/>
    <parameter name="options" byreference="false" type="array"/>
    <parameter name="extensions" byreference="false" type="{unknown}" default="false"/>
    <inline>
      <comment value="DB ABSTRACTION: we need to convert this to a db-specific version:" line="355"/>
      <comment value="Create custom fields" line="358"/>
      <comment value="Is this an array field?" line="362"/>
      <comment value="If so, remove it and store that info separately" line="365"/>
      <comment value="Create custom indexes" line="379"/>
    </inline>
  </method>
  <method name="dontRequireTable" start="391" end="400" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="If the given table exists, move it out of the way by renaming it to _obsolete_(tablename)."/>
      <param description="The table name." type="string" variable="$table"/>
    </docblock>
    <parameter name="table" byreference="false" type="{unknown}"/>
  </method>
  <method name="requireIndex" start="415" end="460" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="Generate the given index in the database, modifying whatever already exists as necessary.">The keys of the array are the names of the index.
The values of the array can be one of:
 - true: Create a single column index on the field named the same as the index.
 - array('type' =&gt; 'index|unique|fulltext', 'value' =&gt; 'FieldA, FieldB'): This gives you full
   control over the index.</description>
      <param description="The table name." type="string" variable="$table"/>
      <param description="The index name." type="string" variable="$index"/>
      <param description="The specification of the index. See requireTable() for more information." type="object" variable="$spec">
        <type full="string|boolean" namespace="" name="string|boolean"/>
      </param>
    </docblock>
    <parameter name="table" byreference="false" type="{unknown}"/>
    <parameter name="index" byreference="false" type="{unknown}"/>
    <parameter name="spec" byreference="false" type="{unknown}"/>
    <inline>
      <comment value="DB Abstraction: remove this ===true option as a possibility?" line="418"/>
      <comment value="Indexes specified as arrays cannot be checked with this line: (it flattens out the array)" line="423"/>
      <comment value="Fix up the index for database purposes" line="434"/>
      <comment value="Fix the key for database purposes" line="437"/>
    </inline>
  </method>
  <method name="hasField" start="468" end="472" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="Return true if the table exists and already has a the field specified"/>
      <param description="- The table to check" type="string" variable="$tableName"/>
      <param description="- The field to check" type="string" variable="$fieldName"/>
      <return description="- True if the table exists and the field exists on the table" type="object">
        <type full="bool" namespace="" name="bool"/>
      </return>
    </docblock>
    <parameter name="tableName" byreference="false" type="{unknown}"/>
    <parameter name="fieldName" byreference="false" type="{unknown}"/>
  </method>
  <method name="requireField" start="483" end="582" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="Generate the given field on the table, modifying whatever already exists as necessary."/>
      <param description="The table name." type="string" variable="$table"/>
      <param description="The field name." type="string" variable="$field"/>
      <param description="The field specification. If passed in array syntax, the specific database" type="object" variable="$spec">driver takes care of the ALTER TABLE syntax. If passed as a string, its assumed to
	be prepared as a direct SQL framgment ready for insertion into ALTER TABLE. In this case you'll
	need to take care of database abstraction in your DBField subclass.<type full="array|string" namespace="" name="array|string"/></param>
    </docblock>
    <parameter name="table" byreference="false" type="{unknown}"/>
    <parameter name="field" byreference="false" type="{unknown}"/>
    <parameter name="spec" byreference="false" type="{unknown}"/>
    <inline>
      <todo value="this is starting to get extremely fragmented." line="484"/>
      <comment value="There are two different versions of $spec floating around, and their content changes depending" line="485"/>
      <comment value="on how they are structured.  This needs to be tidied up." line="486"/>
      <comment value="backwards compatibility patch for pre 2.4 requireField() calls" line="490"/>
      <comment value="Convert the $spec array into a database-specific string" line="496"/>
      <comment value="Collations didn't come in until MySQL 4.1.  Anything earlier will throw a syntax error if you try and use" line="500"/>
      <comment value="collations." line="501"/>
      <todo value="move this to the MySQLDatabase file, or drop it altogether?" line="502"/>
      <comment value="We need to get db-specific versions of the ID column:" line="519"/>
      <comment value="Get the version of the field as we would create it. This is used for comparison purposes to see if the" line="533"/>
      <comment value="existing field is different to what we now want" line="534"/>
    </inline>
  </method>
  <method name="dontRequireField" start="590" end="601" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="If the given field exists, move it out of the way by renaming it to _obsolete_(fieldname)."/>
      <param type="string" variable="$table"/>
      <param type="string" variable="$fieldName"/>
    </docblock>
    <parameter name="table" byreference="false" type="{unknown}"/>
    <parameter name="fieldName" byreference="false" type="{unknown}"/>
  </method>
  <method name="manipulate" start="611" end="660" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="Execute a complex manipulation on the database.">A manipulation is an array of insert / or update sequences.  The keys of the array are table names,
and the values are map containing 'command' and 'fields'.  Command should be 'insert' or 'update',
and fields should be a map of field names to field values, including quotes.  The field value can
also be a SQL function or similar.</description>
      <param type="array" variable="$manipulation"/>
    </docblock>
    <parameter name="manipulation" byreference="false" type="{unknown}"/>
    <inline>
      <comment value="Empty strings inserted as null in INSERTs.  Replacement of SS_Database::replace_with_null()." line="620"/>
    </inline>
  </method>
  <method name="replace_with_null" start="665" end="677" abstract="false" final="false" static="true" visibility="public">
    <docblock>
      <description compact="Replaces &quot;\'\'&quot; with &quot;null&quot;, recursively walks through the given array."/>
      <param description="Array where the replacement should happen" type="string" variable="$array"/>
    </docblock>
    <parameter name="array" byreference="true" type="{unknown}"/>
  </method>
  <method name="databaseError" start="687" end="689" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="Error handler for database errors.">All database errors will call this function to report the error.  It isn't a static function;
it will be called on the object itself and as such can be overridden in a subclass.</description>
      <todo value="hook this into a more well-structured error handling system."/>
      <param description="The error message." type="string" variable="$msg"/>
      <param description="The level of the error to throw." type="int" variable="$errorLevel"/>
    </docblock>
    <parameter name="msg" byreference="false" type="{unknown}"/>
    <parameter name="errorLevel" byreference="false" type="{unknown}" default="E_USER_ERROR"/>
  </method>
  <method name="quiet" start="694" end="696" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="Enable supression of database messages."/>
    </docblock>
  </method>
  <method name="alterationMessage" start="704" end="751" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="Show a message about database alteration"/>
      <param description="message to display" type="string"/>
      <param description="type one of [created|changed|repaired|obsolete|deleted|error]" type="string"/>
    </docblock>
    <parameter name="message" byreference="false" type="{unknown}"/>
    <parameter name="type" byreference="false" type="string" default="&quot;&quot;"/>
  </method>
  <method name="sqlSelectToString" start="761" end="773" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="Returns the SELECT clauses ready for inserting into a query.">Caution: Expects correctly quoted and escaped SQL fragments.</description>
      <param description="Select columns" type="array" variable="$select"/>
      <param description="Distinct select?" type="boolean" variable="$distinct"/>
      <return type="string"/>
    </docblock>
    <parameter name="select" byreference="false" type="{unknown}"/>
    <parameter name="distinct" byreference="false" type="{unknown}" default="false"/>
    <inline>
      <comment value="Don't include redundant aliases." line="765"/>
    </inline>
  </method>
  <method name="sqlFromToString" start="781" end="783" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="Return the FROM clause ready for inserting into a query.">Caution: Expects correctly quoted and escaped SQL fragments.</description>
      <return type="string"/>
    </docblock>
    <parameter name="from" byreference="false" type="{unknown}"/>
  </method>
  <method name="sqlWhereToString" start="791" end="793" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="Returns the WHERE clauses ready for inserting into a query.">Caution: Expects correctly quoted and escaped SQL fragments.</description>
      <return type="string"/>
    </docblock>
    <parameter name="where" byreference="false" type="{unknown}"/>
    <parameter name="connective" byreference="false" type="{unknown}"/>
  </method>
  <method name="sqlOrderByToString" start="801" end="809" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="Returns the ORDER BY clauses ready for inserting into a query.">Caution: Expects correctly quoted and escaped SQL fragments.</description>
      <return type="string"/>
    </docblock>
    <parameter name="orderby" byreference="false" type="{unknown}"/>
  </method>
  <method name="sqlGroupByToString" start="817" end="819" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="Returns the GROUP BY clauses ready for inserting into a query.">Caution: Expects correctly quoted and escaped SQL fragments.</description>
      <return type="string"/>
    </docblock>
    <parameter name="groupby" byreference="false" type="{unknown}"/>
  </method>
  <method name="sqlHavingToString" start="827" end="829" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="Returns the HAVING clauses ready for inserting into a query.">Caution: Expects correctly quoted and escaped SQL fragments.</description>
      <return type="string"/>
    </docblock>
    <parameter name="having" byreference="false" type="{unknown}"/>
  </method>
  <method name="sqlLimitToString" start="837" end="862" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="Return the LIMIT clause ready for inserting into a query.">Caution: Expects correctly quoted and escaped SQL fragments.</description>
      <return type="string"/>
    </docblock>
    <parameter name="limit" byreference="false" type="{unknown}"/>
    <inline>
      <comment value="Pass limit as array or SQL string value" line="840"/>
    </inline>
  </method>
  <method name="sqlQueryToString" start="870" end="889" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="Convert a SQLQuery object into a SQL statement Caution: Expects correctly quoted and escaped SQL fragments."/>
      <param variable="$query" type="object">
        <type full="SQLQuery" namespace="" name="SQLQuery"/>
      </param>
    </docblock>
    <parameter name="query" byreference="false" type="object">
      <type full="\\SQLQuery" namespace="\" name="SQLQuery"/>
    </parameter>
    <inline>
      <comment value="these clauses only make sense in SELECT queries, not DELETE" line="880"/>
    </inline>
  </method>
  <method name="prepStringForDB" start="899" end="901" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="Wrap a string into DB-specific quotes. MySQL, PostgreSQL and SQLite3 only need single quotes around the string.">MSSQL will overload this and include it's own N prefix to mark the string as unicode, so characters like macrons
are saved correctly.</description>
      <param description="String to be prepared for database query" type="string" variable="$string"/>
      <return description="Prepared string" type="string"/>
    </docblock>
    <parameter name="string" byreference="false" type="{unknown}"/>
  </method>
  <method name="comparisonClause" start="913" end="913" abstract="true" final="false" static="false" visibility="public">
    <docblock>
      <description compact="Generate a WHERE clause for text matching."/>
      <param description="Quoted field name" type="object" variable="$field">
        <type full="String" namespace="" name="String"/>
      </param>
      <param description="Escaped search. Can include percentage wildcards." type="object" variable="$value">
        <type full="String" namespace="" name="String"/>
      </param>
      <param description="Exact matches or wildcard support." type="boolean" variable="$exact"/>
      <param description="Negate the clause." type="boolean" variable="$negate"/>
      <param description="Perform case sensitive search." type="boolean" variable="$caseSensitive"/>
      <return description="SQL" type="object">
        <type full="String" namespace="" name="String"/>
      </return>
    </docblock>
    <parameter name="field" byreference="false" type="{unknown}"/>
    <parameter name="value" byreference="false" type="{unknown}"/>
    <parameter name="exact" byreference="false" type="{unknown}" default="false"/>
    <parameter name="negate" byreference="false" type="{unknown}" default="false"/>
    <parameter name="caseSensitive" byreference="false" type="{unknown}" default="false"/>
  </method>
  <method name="formattedDatetimeClause" start="930" end="930" abstract="true" final="false" static="false" visibility="public">
    <docblock>
      <description compact="function to return an SQL datetime expression that can be used with the adapter in use used for querying a datetime in a certain format"/>
      <param description="to be formated, can be either 'now', literal datetime like '1973-10-14 10:30:00' or" type="string" variable="$date">field name, e.g. '"SiteTree"."Created"'</param>
      <param description="to be used, supported specifiers:" type="string" variable="$format">%Y = Year (four digits)
%m = Month (01..12)
%d = Day (01..31)
%H = Hour (00..23)
%i = Minutes (00..59)
%s = Seconds (00..59)
%U = unix timestamp, can only be used on it's own</param>
      <return description="SQL datetime expression to query for a formatted datetime" type="string"/>
    </docblock>
    <parameter name="date" byreference="false" type="{unknown}"/>
    <parameter name="format" byreference="false" type="{unknown}"/>
  </method>
  <method name="datetimeIntervalClause" start="950" end="950" abstract="true" final="false" static="false" visibility="public">
    <docblock>
      <description compact="function to return an SQL datetime expression that can be used with the adapter in use used for querying a datetime addition"/>
      <param description="can be either 'now', literal datetime like '1973-10-14 10:30:00' or field name," type="string" variable="$date">e.g. '"SiteTree"."Created"'</param>
      <param description="to be added, use the format [sign][integer] [qualifier], e.g. -1 Day, +15 minutes," type="string" variable="$interval">+1 YEAR
supported qualifiers:
- years
- months
- days
- hours
- minutes
- seconds
This includes the singular forms as well</param>
      <return description="SQL datetime expression to query for a datetime (YYYY-MM-DD hh:mm:ss) which is the result of" type="string">the addition</return>
    </docblock>
    <parameter name="date" byreference="false" type="{unknown}"/>
    <parameter name="interval" byreference="false" type="{unknown}"/>
  </method>
  <method name="datetimeDifferenceClause" start="962" end="962" abstract="true" final="false" static="false" visibility="public">
    <docblock>
      <description compact="function to return an SQL datetime expression that can be used with the adapter in use used for querying a datetime substraction"/>
      <param description="can be either 'now', literal datetime like '1973-10-14 10:30:00' or field name" type="string" variable="$date1">e.g. '"SiteTree"."Created"'</param>
      <param description="to be substracted of $date1, can be either 'now', literal datetime" type="string" variable="$date2">like '1973-10-14 10:30:00' or field name, e.g. '"SiteTree"."Created"'</param>
      <return description="SQL datetime expression to query for the interval between $date1 and $date2 in seconds which" type="string">is the result of the substraction</return>
    </docblock>
    <parameter name="date1" byreference="false" type="{unknown}"/>
    <parameter name="date2" byreference="false" type="{unknown}"/>
  </method>
  <method name="supportsTimezoneOverride" start="970" end="970" abstract="true" final="false" static="false" visibility="public">
    <docblock>
      <description compact="Can the database override timezone as a connection setting, or does it use the system timezone exclusively?"/>
      <return type="object">
        <type full="Boolean" namespace="" name="Boolean"/>
      </return>
    </docblock>
  </method>
  <method name="supportsTransactions" start="977" end="977" abstract="true" final="false" static="false" visibility="public"/>
  <method name="transactionStart" start="984" end="984" abstract="true" final="false" static="false" visibility="public">
    <parameter name="transaction_mode" byreference="false" type="{unknown}" default="false"/>
    <parameter name="session_characteristics" byreference="false" type="{unknown}" default="false"/>
  </method>
  <method name="transactionSavepoint" start="989" end="989" abstract="true" final="false" static="false" visibility="public">
    <parameter name="savepoint" byreference="false" type="{unknown}"/>
  </method>
  <method name="transactionRollback" start="996" end="996" abstract="true" final="false" static="false" visibility="public">
    <parameter name="savepoint" byreference="false" type="{unknown}" default="false"/>
  </method>
  <method name="transactionEnd" start="1001" end="1001" abstract="true" final="false" static="false" visibility="public"/>
  <method name="supportsLocks" start="1010" end="1012" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="Determines if the used database supports application-level locks, which is different from table- or row-level locking.">See <link xmlns="http://xml.phpdox.net/src" value="getLock()"/> for details.
</description>
      <return type="boolean"/>
    </docblock>
  </method>
  <method name="canLock" start="1020" end="1022" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="Returns if the lock is available.">See <link xmlns="http://xml.phpdox.net/src" value="supportsLocks()"/> to check if locking is generally supported.
</description>
      <return type="object">
        <type full="Boolean" namespace="" name="Boolean"/>
      </return>
    </docblock>
    <parameter name="name" byreference="false" type="{unknown}"/>
  </method>
  <method name="getLock" start="1041" end="1043" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="Sets an application-level lock so that no two processes can run at the same time, also called a &quot;cooperative advisory lock&quot;.">Return FALSE if acquiring the lock fails; otherwise return TRUE, if lock was acquired successfully.
Lock is automatically released if connection to the database is broken (either normally or abnormally),
making it less prone to deadlocks than session- or file-based locks.
Should be accompanied by a <link xmlns="http://xml.phpdox.net/src" value="releaseLock()"/> call after the logic requiring the lock has completed.
Can be called multiple times, in which case locks "stack" (PostgreSQL, SQL Server),
or auto-releases the previous lock (MySQL).
Note that this might trigger the database to wait for the lock to be released, delaying further execution.
</description>
      <param type="object">
        <type full="String" namespace="" name="String"/>
      </param>
      <param description="Timeout in seconds" type="object">
        <type full="Int" namespace="" name="Int"/>
      </param>
      <return type="object">
        <type full="Boolean" namespace="" name="Boolean"/>
      </return>
    </docblock>
    <parameter name="name" byreference="false" type="{unknown}"/>
    <parameter name="timeout" byreference="false" type="integer" default="5"/>
  </method>
  <method name="releaseLock" start="1052" end="1054" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="Remove an application-level lock file to allow another process to run (if the execution aborts (e.g. due to an error) all locks are automatically released)."/>
      <param type="object">
        <type full="String" namespace="" name="String"/>
      </param>
      <return type="object">
        <type full="Boolean" namespace="" name="Boolean"/>
      </return>
    </docblock>
    <parameter name="name" byreference="false" type="{unknown}"/>
  </method>
  <extender full="MySQLDatabase" namespace="" name="MySQLDatabase"/>
</class>
