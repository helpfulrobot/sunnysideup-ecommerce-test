<?xml version="1.0" encoding="UTF-8"?>
<interface xmlns="http://xml.phpdox.net/src" full="BuyableModel" namespace="" name="BuyableModel" abstract="false" final="false" start="20" end="262">
  <file path="/var/www/_modules/ecommerce_test/trunk/docs/en/phpdox/../../../ecommerce/code/interfaces" file="BuyableModel.php" realpath="/var/www/_modules/ecommerce_test/trunk/ecommerce/code/interfaces/BuyableModel.php" size="5336" time="2015-03-14T10:43:16+13:00" unixtime="1426282996" sha1="f61ee7c94c14aeccaf03cef62eaa52403e112026" relative="ecommerce/code/interfaces/BuyableModel.php"/>
  <docblock>
    <description compact="describes the buyable classes CONTENT: //GROUPS AND SIBLINGS //IMAGES //VERSIONING //ORDER ITEM //LINKS //TEMPLATE STUFF //CRUD SETTINGS"/>
    <authors value=": Nicolaas [at] Sunny Side Up .co.nz"/>
    <package value=": ecommerce"/>
    <sub value="-package: buyables"/>
    <inspiration value=": Silverstripe Ltd, Jeremy"/>
  </docblock>
  <method name="MainParentGroup" start="31" end="31" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="Returns the direct parent (group) for the product."/>
      <return description="| DataObject(ProductGroup)" type="object">
        <type full="Null" namespace="" name="Null"/>
      </return>
    </docblock>
  </method>
  <method name="Siblings" start="37" end="37" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="Returns Buybales in the same group"/>
      <return description="(Products)" type="object">
        <type full="DataList" namespace="" name="DataList"/>
      </return>
    </docblock>
  </method>
  <method name="BestAvailableImage" start="55" end="55" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="returns a &quot;BestAvailable&quot; image if the current one is not available In some cases this is appropriate and in some cases this is not.">For example, consider the following setup
- product A with three variations
- Product A has an image, but the variations have no images
With this scenario, you want to show ONLY the product image
on the product page, but if one of the variations is added to the
cart, then you want to show the product image.
This can be achieved bu using the BestAvailable image.</description>
      <return description="| Null" type="object">
        <type full="Image" namespace="" name="Image"/>
      </return>
    </docblock>
  </method>
  <method name="CMSThumbnail" start="61" end="61" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="Little hack to show thumbnail in summary fields in modeladmin in CMS."/>
      <return description="(HTML = formatted image)" type="object">
        <type full="String" namespace="" name="String"/>
      </return>
    </docblock>
  </method>
  <method name="DefaultImageLink" start="67" end="67" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="returns a link to the standard image"/>
      <return type="object">
        <type full="String" namespace="" name="String"/>
      </return>
    </docblock>
  </method>
  <method name="DummyImage" start="74" end="74" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="returns a product image for use in templates e.g. $DummyImage.Width();"/>
      <return type="object">
        <type full="Product_Image" namespace="" name="Product_Image"/>
      </return>
    </docblock>
  </method>
  <method name="getVersionOfBuyable" start="89" end="89" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="Action to return specific version of a product.">This can be any product to enable the retrieval of deleted products.
This is really useful for sold products where you want to retrieve the actual version that you sold.</description>
      <param type="object" variable="$id">
        <type full="Int" namespace="" name="Int"/>
      </param>
      <param type="object" variable="$version">
        <type full="Int" namespace="" name="Int"/>
      </param>
      <return description="| Null" type="object">
        <type full="DataObject" namespace="" name="DataObject"/>
      </return>
    </docblock>
    <parameter name="id" byreference="false" type="integer" default="0"/>
    <parameter name="version" byreference="false" type="integer" default="0"/>
  </method>
  <method name="OrderItem" start="102" end="102" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="returns the order item associated with the buyable.">ALWAYS returns one, even if there is none in the cart.
Does not write to database.</description>
      <return description="(no kidding)" type="object">
        <type full="OrderItem" namespace="" name="OrderItem"/>
      </return>
    </docblock>
  </method>
  <method name="classNameForOrderItem" start="114" end="114" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="you can overwrite this function in your buyable items (such as Product)"/>
      <return type="object">
        <type full="String" namespace="" name="String"/>
      </return>
    </docblock>
  </method>
  <method name="setAlternativeClassNameForOrderItem" start="120" end="120" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="You can set an alternative class name for order item using this method"/>
      <param type="object" variable="$ClassName">
        <type full="String" namespace="" name="String"/>
      </param>
    </docblock>
    <parameter name="className" byreference="false" type="{unknown}"/>
  </method>
  <method name="QuantityDecimals" start="129" end="129" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="This is used when you add a product to your cart if you set it to 1 then you can add 0.1 product to cart.">If you set it to -1 then you can add 10, 20, 30, etc.. products to cart.</description>
      <return type="object">
        <type full="Int" namespace="" name="Int"/>
      </return>
    </docblock>
  </method>
  <method name="HasBeenSold" start="135" end="135" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="Has it been sold?"/>
      <return type="object">
        <type full="Boolean" namespace="" name="Boolean"/>
      </return>
    </docblock>
  </method>
  <method name="AddLink" start="146" end="146" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="passing on shopping cart links ...is this necessary?? ...why not just pass the cart?"/>
      <return type="object">
        <type full="String" namespace="" name="String"/>
      </return>
    </docblock>
  </method>
  <method name="IncrementLink" start="152" end="152" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="link use to add (one) to cart return String"/>
    </docblock>
  </method>
  <method name="DecrementLink" start="159" end="159" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="Link used to remove one from cart we can do this, because by default remove link removes one"/>
      <return type="object">
        <type full="String" namespace="" name="String"/>
      </return>
    </docblock>
  </method>
  <method name="RemoveLink" start="165" end="165" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="remove one buyable's orderitem from cart"/>
      <return description="(Link)" type="object">
        <type full="String" namespace="" name="String"/>
      </return>
    </docblock>
  </method>
  <method name="RemoveAllLink" start="171" end="171" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="remove all of this buyable's orderitem from cart"/>
      <return description="(Link)" type="object">
        <type full="String" namespace="" name="String"/>
      </return>
    </docblock>
  </method>
  <method name="RemoveAllAndEditLink" start="177" end="177" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="remove all of this buyable's orderitem from cart and go through to this buyble to add alternative selection."/>
      <return description="(Link)" type="object">
        <type full="String" namespace="" name="String"/>
      </return>
    </docblock>
  </method>
  <method name="SetSpecificQuantityItemLink" start="184" end="184" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="set new specific new quantity for buyable's orderitem"/>
      <param type="object">
        <type full="double" namespace="" name="double"/>
      </param>
      <return description="(Link)" type="object">
        <type full="String" namespace="" name="String"/>
      </return>
    </docblock>
    <parameter name="quantity" byreference="false" type="{unknown}"/>
  </method>
  <method name="AddToCartAndGoToCheckoutLink" start="190" end="190" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description/>
      <return type="object">
        <type full="String" namespace="" name="String"/>
      </return>
    </docblock>
  </method>
  <method name="IsInCart" start="200" end="200" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description/>
      <return type="boolean"/>
    </docblock>
  </method>
  <method name="EcomQuantityField" start="206" end="206" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description/>
      <return type="object">
        <type full="EcomQuantityField" namespace="" name="EcomQuantityField"/>
      </return>
    </docblock>
  </method>
  <method name="AJAXDefinitions" start="215" end="215" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="returns the instance of EcommerceConfigAjax for use in templates.">In templates, it is used like this:
$EcommerceConfigAjax.TableID</description>
      <return type="object">
        <type full="EcommerceConfigAjax" namespace="" name="EcommerceConfigAjax"/>
      </return>
    </docblock>
  </method>
  <method name="EcomConfig" start="222" end="222" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="returns the instance of EcommerceDBConfig"/>
      <return type="object">
        <type full="EcommerceDBConfig" namespace="" name="EcommerceDBConfig"/>
      </return>
    </docblock>
  </method>
  <method name="IsProductVariation" start="228" end="228" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="Is it a variation?"/>
      <return type="object">
        <type full="Boolean" namespace="" name="Boolean"/>
      </return>
    </docblock>
  </method>
  <method name="AllowPurchaseNice" start="235" end="235" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="Turn AllowPurchase into Yes or no"/>
      <return type="object">
        <type full="String" namespace="" name="String"/>
      </return>
    </docblock>
  </method>
  <method name="CalculatedPrice" start="242" end="242" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="Products have a standard price, but for specific situations they have a calculated price.">The Price can be changed for specific member discounts, a different currency, etc...</description>
      <return description="(casted variable)" type="object">
        <type full="Float" namespace="" name="Float"/>
      </return>
    </docblock>
  </method>
  <method name="getCalculatedPrice" start="243" end="243" abstract="false" final="false" static="false" visibility="public"/>
  <method name="CalculatedPriceAsMoney" start="249" end="249" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="How do we display the price?"/>
      <return type="object">
        <type full="Money" namespace="" name="Money"/>
      </return>
    </docblock>
  </method>
  <method name="getCalculatedPriceAsMoney" start="250" end="250" abstract="false" final="false" static="false" visibility="public"/>
  <method name="canPurchase" start="258" end="258" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="Is the product for sale?"/>
      <return type="object">
        <type full="Boolean" namespace="" name="Boolean"/>
      </return>
    </docblock>
    <parameter name="member" byreference="false" type="object" default="null">
      <type full="\\Member" namespace="\" name="Member"/>
    </parameter>
    <parameter name="checkPrice" byreference="false" type="{unknown}" default="true"/>
  </method>
  <implementor full="Product" namespace="" name="Product"/>
  <implementor full="ElectronicDownloadProduct" namespace="" name="ElectronicDownloadProduct"/>
  <implementor full="ProductVariation" namespace="" name="ProductVariation"/>
</interface>
