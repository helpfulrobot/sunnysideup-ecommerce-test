<?xml version="1.0" encoding="UTF-8"?>
<interface xmlns="http://xml.phpdox.net/src" full="Zend_Cache_Backend_ExtendedInterface" namespace="" name="Zend_Cache_Backend_ExtendedInterface" abstract="false" final="false" start="34" end="126">
  <file path="/var/www/_modules/ecommerce_test/trunk/docs/en/phpdox/../../../framework/thirdparty/Zend/Cache/Backend" file="ExtendedInterface.php" realpath="/var/www/_modules/ecommerce_test/trunk/framework/thirdparty/Zend/Cache/Backend/ExtendedInterface.php" size="4032" time="2015-03-14T10:41:13+13:00" unixtime="1426282873" sha1="e7ce479603f3379ad7eae74ba2e52a3491ef1100" relative="framework/thirdparty/Zend/Cache/Backend/ExtendedInterface.php"/>
  <docblock>
    <description/>
    <package value="Zend_Cache"/>
    <subpackage value="Zend_Cache_Backend"/>
    <copyright value="Copyright (c) 2005-2011 Zend Technologies USA Inc. (http://www.zend.com)"/>
    <license name="http://framework.zend.com/license/new-bsd     New BSD License"/>
  </docblock>
  <extends full="Zend_Cache_Backend_Interface" namespace="" name="Zend_Cache_Backend_Interface"/>
  <method name="getIds" start="42" end="42" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="Return an array of stored cache ids"/>
      <return description="array of stored cache ids (string)" type="array"/>
    </docblock>
  </method>
  <method name="getTags" start="49" end="49" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="Return an array of stored tags"/>
      <return description="array of stored tags (string)" type="array"/>
    </docblock>
  </method>
  <method name="getIdsMatchingTags" start="59" end="59" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="Return an array of stored cache ids which match given tags">In case of multiple tags, a logical AND is made between tags</description>
      <param description="array of tags" type="array" variable="$tags"/>
      <return description="array of matching cache ids (string)" type="array"/>
    </docblock>
    <parameter name="tags" byreference="false" type="array"/>
  </method>
  <method name="getIdsNotMatchingTags" start="69" end="69" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="Return an array of stored cache ids which don't match given tags">In case of multiple tags, a logical OR is made between tags</description>
      <param description="array of tags" type="array" variable="$tags"/>
      <return description="array of not matching cache ids (string)" type="array"/>
    </docblock>
    <parameter name="tags" byreference="false" type="array"/>
  </method>
  <method name="getIdsMatchingAnyTags" start="79" end="79" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="Return an array of stored cache ids which match any given tags">In case of multiple tags, a logical AND is made between tags</description>
      <param description="array of tags" type="array" variable="$tags"/>
      <return description="array of any matching cache ids (string)" type="array"/>
    </docblock>
    <parameter name="tags" byreference="false" type="array"/>
  </method>
  <method name="getFillingPercentage" start="86" end="86" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="Return the filling percentage of the backend storage"/>
      <return description="integer between 0 and 100" type="int"/>
    </docblock>
  </method>
  <method name="getMetadatas" start="99" end="99" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="Return an array of metadatas for the given cache id">The array must include these keys :
- expire : the expire timestamp
- tags : a string array of tags
- mtime : timestamp of last modification time</description>
      <param description="cache id" type="string" variable="$id"/>
      <return description="array of metadatas (false if the cache id is not found)" type="array"/>
    </docblock>
    <parameter name="id" byreference="false" type="{unknown}"/>
  </method>
  <method name="touch" start="108" end="108" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="Give (if possible) an extra lifetime to the given cache id"/>
      <param description="cache id" type="string" variable="$id"/>
      <param type="int" variable="$extraLifetime"/>
      <return description="true if ok" type="boolean"/>
    </docblock>
    <parameter name="id" byreference="false" type="{unknown}"/>
    <parameter name="extraLifetime" byreference="false" type="{unknown}"/>
  </method>
  <method name="getCapabilities" start="124" end="124" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="Return an associative array of capabilities (booleans) of the backend">The array must include these keys :
- automatic_cleaning (is automating cleaning necessary)
- tags (are tags supported)
- expired_read (is it possible to read expired cache records
                (for doNotTestCacheValidity option for example))
- priority does the backend deal with priority when saving
- infinite_lifetime (is infinite lifetime can work with this backend)
- get_list (is it possible to get the list of cache ids and the complete list of tags)</description>
      <return description="associative of with capabilities" type="array"/>
    </docblock>
  </method>
  <implementor full="Zend_Cache_Backend_WinCache" namespace="" name="Zend_Cache_Backend_WinCache"/>
  <implementor full="Zend_Cache_Backend_Libmemcached" namespace="" name="Zend_Cache_Backend_Libmemcached"/>
  <parent full="Zend_Cache_Backend_Interface" namespace="" name="Zend_Cache_Backend_Interface">
    <method name="setDirectives" start="37" end="37" abstract="false" final="false" static="false" visibility="public">
      <docblock>
        <description compact="Set the frontend directives"/>
        <param description="assoc of directives" type="array" variable="$directives"/>
      </docblock>
      <parameter name="directives" byreference="false" type="{unknown}"/>
    </method>
    <method name="load" start="48" end="48" abstract="false" final="false" static="false" visibility="public">
      <docblock>
        <description compact="Test if a cache is available for the given id and (if yes) return it (false else)">Note : return value is always "string" (unserialization is done by the core not by the backend)</description>
        <param description="Cache id" type="string" variable="$id"/>
        <param description="If set to true, the cache validity won't be tested" type="boolean" variable="$doNotTestCacheValidity"/>
        <return description="cached datas" type="object">
          <type full="string|false" namespace="" name="string|false"/>
        </return>
      </docblock>
      <parameter name="id" byreference="false" type="{unknown}"/>
      <parameter name="doNotTestCacheValidity" byreference="false" type="{unknown}" default="false"/>
    </method>
    <method name="test" start="56" end="56" abstract="false" final="false" static="false" visibility="public">
      <docblock>
        <description compact="Test if a cache is available or not (for the given id)"/>
        <param description="cache id" type="string" variable="$id"/>
        <return description="(a cache is not available) or &quot;last modified&quot; timestamp (int) of the available cache record" type="object">
          <type full="mixed|false" namespace="" name="mixed|false"/>
        </return>
      </docblock>
      <parameter name="id" byreference="false" type="{unknown}"/>
    </method>
    <method name="save" start="70" end="70" abstract="false" final="false" static="false" visibility="public">
      <docblock>
        <description compact="Save some string datas into a cache record">Note : $data is always "string" (serialization is done by the
core not by the backend)</description>
        <param description="Datas to cache" type="string" variable="$data"/>
        <param description="Cache id" type="string" variable="$id"/>
        <param description="Array of strings, the cache record will be tagged by each string entry" type="array" variable="$tags"/>
        <param description="If != false, set a specific lifetime for this cache record (null =&gt; infinite lifetime)" type="int" variable="$specificLifetime"/>
        <return description="true if no problem" type="boolean"/>
      </docblock>
      <parameter name="data" byreference="false" type="{unknown}"/>
      <parameter name="id" byreference="false" type="{unknown}"/>
      <parameter name="tags" byreference="false" type="array"/>
      <parameter name="specificLifetime" byreference="false" type="{unknown}" default="false"/>
    </method>
    <method name="remove" start="78" end="78" abstract="false" final="false" static="false" visibility="public">
      <docblock>
        <description compact="Remove a cache record"/>
        <param description="Cache id" type="string" variable="$id"/>
        <return description="True if no problem" type="boolean"/>
      </docblock>
      <parameter name="id" byreference="false" type="{unknown}"/>
    </method>
    <method name="clean" start="97" end="97" abstract="false" final="false" static="false" visibility="public">
      <docblock>
        <description compact="Clean some cache records">Available modes are :
Zend_Cache::CLEANING_MODE_ALL (default)    =&gt; remove all cache entries ($tags is not used)
Zend_Cache::CLEANING_MODE_OLD              =&gt; remove too old cache entries ($tags is not used)
Zend_Cache::CLEANING_MODE_MATCHING_TAG     =&gt; remove cache entries matching all given tags
                                              ($tags can be an array of strings or a single string)
Zend_Cache::CLEANING_MODE_NOT_MATCHING_TAG =&gt; remove cache entries not {matching one of the given tags}
                                              ($tags can be an array of strings or a single string)
Zend_Cache::CLEANING_MODE_MATCHING_ANY_TAG =&gt; remove cache entries matching any given tags
                                              ($tags can be an array of strings or a single string)</description>
        <param description="Clean mode" type="string" variable="$mode"/>
        <param description="Array of tags" type="array" variable="$tags"/>
        <return description="true if no problem" type="boolean"/>
      </docblock>
      <parameter name="mode" byreference="false" type="{unknown}" default="Zend_Cache::CLEANING_MODE_ALL"/>
      <parameter name="tags" byreference="false" type="array"/>
    </method>
  </parent>
  <implementor full="Zend_Cache_Backend_BlackHole" namespace="" name="Zend_Cache_Backend_BlackHole"/>
  <implementor full="Zend_Cache_Backend_File" namespace="" name="Zend_Cache_Backend_File"/>
  <implementor full="Zend_Cache_Backend_TwoLevels" namespace="" name="Zend_Cache_Backend_TwoLevels"/>
  <implementor full="Zend_Cache_Backend_Memcached" namespace="" name="Zend_Cache_Backend_Memcached"/>
  <implementor full="Zend_Cache_Backend_Apc" namespace="" name="Zend_Cache_Backend_Apc"/>
  <implementor full="Zend_Cache_Backend_Test" namespace="" name="Zend_Cache_Backend_Test"/>
  <implementor full="Zend_Cache_Backend_Sqlite" namespace="" name="Zend_Cache_Backend_Sqlite"/>
</interface>
