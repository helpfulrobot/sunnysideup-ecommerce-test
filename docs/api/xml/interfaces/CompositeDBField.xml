<?xml version="1.0" encoding="UTF-8"?>
<interface xmlns="http://xml.phpdox.net/src" full="CompositeDBField" namespace="" name="CompositeDBField" abstract="false" final="false" start="99" end="184">
  <file path="/var/www/_modules/ecommerce_test/trunk/docs/en/phpdox/../../../framework/model/fieldtypes" file="CompositeDBField.php" realpath="/var/www/_modules/ecommerce_test/trunk/framework/model/fieldtypes/CompositeDBField.php" size="6073" time="2015-03-14T10:40:57+13:00" unixtime="1426282857" sha1="c818b161b1bcdcedc5a9f5c029965d5ab30830e3" relative="framework/model/fieldtypes/CompositeDBField.php"/>
  <docblock>
    <description compact="Apply this interface to any {@link DBField} that doesn't have a 1-1 mapping with a database field.">This includes multi-value fields and transformed fields</description>
    <todo value="Unittests for loading and saving composite values (see GIS module for existing similiar unittests)">Example with a combined street name and number:
&lt;code&gt;
class Street extends DBField implements CompositeDBField {
	protected $streetNumber;
	protected $streetName;
	protected $isChanged = false;
	static $composite_db = return array(
		"Number" =&gt; "Int",
		"Name" =&gt; "Text"
	);

	function requireField() {
		DB::requireField($this-&gt;tableName, "{$this-&gt;name}Number", 'Int');
		DB::requireField($this-&gt;tableName, "{$this-&gt;name}Name", 'Text');
	}

	function writeToManipulation(&amp;$manipulation) {
		if($this-&gt;getStreetName()) {
			$manipulation['fields']["{$this-&gt;name}Name"] = $this-&gt;prepValueForDB($this-&gt;getStreetName());
		} else {
			$manipulation['fields']["{$this-&gt;name}Name"] = DBField::create_field('Varchar', $this-&gt;getStreetName())
				-&gt;nullValue();
		}

		if($this-&gt;getStreetNumber()) {
			$manipulation['fields']["{$this-&gt;name}Number"] = $this-&gt;prepValueForDB($this-&gt;getStreetNumber());
		} else {
			$manipulation['fields']["{$this-&gt;name}Number"] = DBField::create_field('Int', $this-&gt;getStreetNumber())
				-&gt;nullValue();
		}
	}

	function addToQuery(&amp;$query) {
		parent::addToQuery($query);
		$query-&gt;setSelect("{$this-&gt;name}Number");
		$query-&gt;setSelect("{$this-&gt;name}Name");
	}

	function setValue($value, $record = null, $markChanged=true) {
		if ($value instanceof Street &amp;&amp; $value-&gt;exists()) {
			$this-&gt;setStreetName($value-&gt;getStreetName(), $markChanged);
			$this-&gt;setStreetNumber($value-&gt;getStreetNumber(), $markChanged);
			if($markChanged) $this-&gt;isChanged = true;
		} else if($record &amp;&amp; isset($record[$this-&gt;name . 'Name']) &amp;&amp; isset($record[$this-&gt;name . 'Number'])) {
			if($record[$this-&gt;name . 'Name'] &amp;&amp; $record[$this-&gt;name . 'Number']) {
				$this-&gt;setStreetName($record[$this-&gt;name . 'Name'], $markChanged);
				$this-&gt;setStreetNumber($record[$this-&gt;name . 'Number'], $markChanged);
			}
			if($markChanged) $this-&gt;isChanged = true;
		} else if (is_array($value)) {
			if (array_key_exists('Name', $value)) {
				$this-&gt;setStreetName($value['Name'], $markChanged);
			}
			if (array_key_exists('Number', $value)) {
				$this-&gt;setStreetNumber($value['Number'], $markChanged);
			}
			if($markChanged) $this-&gt;isChanged = true;
		}
	}

	function setStreetNumber($val, $markChanged=true) {
		$this-&gt;streetNumber = $val;
		if($markChanged) $this-&gt;isChanged = true;
	}

	function setStreetName($val, $markChanged=true) {
		$this-&gt;streetName = $val;
		if($markChanged) $this-&gt;isChanged = true;
	}

	function getStreetNumber() {
		return $this-&gt;streetNumber;
	}

	function getStreetName() {
		return $this-&gt;streetName;
	}

	function isChanged() {
		return $this-&gt;isChanged;
	}

	function exists() {
		return ($this-&gt;getStreetName() || $this-&gt;getStreetNumber());
	}
}
&lt;/code&gt;</todo>
    <package value="framework"/>
    <subpackage value="model"/>
  </docblock>
  <method name="setValue" start="126" end="126" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="Set the value of this field in various formats.">Used by <link xmlns="http://xml.phpdox.net/src" value="DataObject-&gt;getField()"/>, <link xmlns="http://xml.phpdox.net/src" value="DataObject-&gt;setCastedField()"/><link xmlns="http://xml.phpdox.net/src" value="DataObject-&gt;dbObject()"/> and <link xmlns="http://xml.phpdox.net/src" value="DataObject-&gt;write()"/>.
As this method is used both for initializing the field after construction,
and actually changing its values, it needs a <link xmlns="http://xml.phpdox.net/src" value="$markChanged"/>parameter.
</description>
      <param type="object" variable="$value">
        <type full="DBField|array" namespace="" name="DBField|array"/>
      </param>
      <param description="An array or object that this field is part of" type="object" variable="$record">
        <type full="DataObject|array" namespace="" name="DataObject|array"/>
      </param>
      <param description="Indicate wether this field should be marked changed." type="boolean" variable="$markChanged">Set to FALSE if you are initializing this field after construction, rather
 than setting a new value.</param>
    </docblock>
    <parameter name="value" byreference="false" type="{unknown}"/>
    <parameter name="record" byreference="false" type="{unknown}" default="null"/>
    <parameter name="markChanged" byreference="false" type="{unknown}" default="true"/>
  </method>
  <method name="writeToManipulation" start="148" end="148" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="Add the custom internal values to an INSERT or UPDATE request passed through the ORM with {@link DataObject-&gt;write()}.">Fields are added in $manipulation['fields']. Please ensure
these fields are escaped for database insertion, as no
further processing happens before running the query.
Use <link xmlns="http://xml.phpdox.net/src" value="DBField-&gt;prepValueForDB()"/>.
Ensure to write NULL or empty values as well to allow
unsetting a previously set field. Use <link xmlns="http://xml.phpdox.net/src" value="DBField-&gt;nullValue()"/>for the appropriate type.
</description>
      <param type="array" variable="$manipulation"/>
    </docblock>
    <parameter name="manipulation" byreference="true" type="{unknown}"/>
  </method>
  <method name="addToQuery" start="158" end="158" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="Add all columns which are defined through {@link requireField()} and {@link $composite_db}, or any additional SQL that is required to get to these columns. Will mostly just write to the {@link SQLQuery-&gt;select} array."/>
      <param type="object" variable="$query">
        <type full="SQLQuery" namespace="" name="SQLQuery"/>
      </param>
    </docblock>
    <parameter name="query" byreference="true" type="{unknown}"/>
  </method>
  <method name="compositeDatabaseFields" start="165" end="165" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="Return array in the format of {@link $composite_db}.">Used by <link xmlns="http://xml.phpdox.net/src" value="DataObject-&gt;hasOwnDatabaseField()"/>.
</description>
      <return type="array"/>
    </docblock>
  </method>
  <method name="isChanged" start="174" end="174" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="Determines if the field has been changed since its initialization.">Most likely relies on an internal flag thats changed when calling
{@link setValue()} or any other custom setters on the object.</description>
      <return type="boolean"/>
    </docblock>
  </method>
  <method name="exists" start="182" end="182" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="Determines if any of the properties in this field have a value, meaning at least one of them is not NULL."/>
      <return type="boolean"/>
    </docblock>
  </method>
  <implementor full="Money" namespace="" name="Money"/>
</interface>
