<?xml version="1.0" encoding="UTF-8"?>
<interface xmlns="http://xml.phpdox.net/src" full="SS_Sortable" namespace="" name="SS_Sortable" abstract="false" final="false" start="13" end="43">
  <file path="/var/www/_modules/ecommerce_test/trunk/docs/en/phpdox/../../../framework/model" file="Sortable.php" realpath="/var/www/_modules/ecommerce_test/trunk/framework/model/Sortable.php" size="1174" time="2015-03-14T10:40:57+13:00" unixtime="1426282857" sha1="18e60286e69aff2137a42af91fa8506eb329dea6" relative="framework/model/Sortable.php"/>
  <docblock>
    <description compact="Additional interface for {@link SS_List} classes that are sortable.">All methods in this interface are immutable - they should return new instances with the sort
applied, rather than applying the sort in place</description>
    <see value="SS_List, SS_Filterable, SS_Limitable"/>
    <package value="framework"/>
    <subpackage value="model"/>
  </docblock>
  <method name="canSortBy" start="21" end="21" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="Returns TRUE if the list can be sorted by a field."/>
      <param type="string" variable="$by"/>
      <return type="object">
        <type full="bool" namespace="" name="bool"/>
      </return>
    </docblock>
    <parameter name="by" byreference="false" type="{unknown}"/>
  </method>
  <method name="sort" start="33" end="33" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="Return a new instance of this list that is sorted by one or more fields. You can either pass in a single field name and direction, or a map of field names to sort directions."/>
      <return type="object">
        <type full="SS_Sortable" namespace="" name="SS_Sortable"/>
      </return>
      <example value="$list = $list-&gt;sort('Name'); // default ASC sorting"/>
      <example value="$list = $list-&gt;sort('Name DESC'); // DESC sorting"/>
      <example value="$list = $list-&gt;sort('Name', 'ASC');"/>
      <example value="$list = $list-&gt;sort(array('Name'=&gt;'ASC,'Age'=&gt;'DESC'));"/>
    </docblock>
  </method>
  <method name="reverse" start="42" end="42" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="Return a new instance of this list based on reversing the current sort."/>
      <return type="object">
        <type full="SS_Sortable" namespace="" name="SS_Sortable"/>
      </return>
      <example value="$list = $list-&gt;reverse();"/>
    </docblock>
  </method>
  <implementor full="PaginatedList" namespace="" name="PaginatedList"/>
  <implementor full="Member_GroupSet" namespace="" name="Member_GroupSet"/>
  <implementor full="DataList" namespace="" name="DataList"/>
  <implementor full="GroupedList" namespace="" name="GroupedList"/>
  <implementor full="ManyManyList" namespace="" name="ManyManyList"/>
  <implementor full="HasManyList" namespace="" name="HasManyList"/>
  <implementor full="RelationList" namespace="" name="RelationList"/>
  <implementor full="UnsavedRelationList" namespace="" name="UnsavedRelationList"/>
  <implementor full="ArrayList" namespace="" name="ArrayList"/>
  <implementor full="SS_ListDecorator" namespace="" name="SS_ListDecorator"/>
  <implementor full="FieldList" namespace="" name="FieldList"/>
</interface>
