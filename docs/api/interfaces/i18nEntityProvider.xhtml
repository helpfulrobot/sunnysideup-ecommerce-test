<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE html SYSTEM "about:legacy-compat">
<html xmlns="http://www.w3.org/1999/xhtml" lang="en">
  <head>
    <title>phpDox - i18nEntityProvider</title>
    <link rel="stylesheet" type="text/css" href="../css/style.css" media="screen"/>
    <meta http-equiv="content-type" content="text/html; charset=utf-8"/>
  </head>
  <body>
    <nav class="topnav">
      <ul>
        <li>
          <div class="logo"><span>/**</span>phpDox</div>
        </li>
        <li class="separator">
          <a href="../index.xhtml">Overview</a>
        </li>
        <li class="separator">
          <a href="../namespaces.xhtml">Namespaces</a>
        </li>
        <li>
          <a href="../interfaces.xhtml">Interfaces</a>
        </li>
        <li>
          <a href="../classes.xhtml">Classes</a>
        </li>
        <li class="separator">
          <a href="../source/index.xhtml">Source</a>
        </li>
      </ul>
    </nav>
    <div id="mainstage">
      <div class="box">
        <ul class="breadcrumb">
          <li>
            <a href="../index.xhtml">Overview</a>
          </li>
          <li class="separator">
            <a href="../interfaces.xhtml">Interfaces</a>
          </li>
          <li class="separator">i18nEntityProvider</li>
        </ul>
      </div>
      <nav class="box">
        <ul>
          <li>
            <a href="#introduction">Introduction</a>
          </li>
          <li>
            <a href="#synopsis">Synopsis</a>
          </li>
          <li>
            <a href="#violations">Violations</a>
          </li>
          <li>
            <a href="#methods">Methods</a>
          </li>
          <li>
            <a href="../source/framework/i18n/i18nEntityProvider.php.xhtml#line17">Source</a>
          </li>
        </ul>
      </nav>
      <section>
        <h1 id="introduction"><small>\</small>i18nEntityProvider</h1>
        <h4>Dynamically provide translatable entites for the {@link i18n} logic.</h4>
        <p>This is particularly handy for natural language strings in static variables<br/>of a class definition, as the _t() method can only be used in a runtime/instance<br/>context. The provideI18nEntities() method enables you to define your own entities<br/>with your custom naming, mostly involving either the variable name or the array<br/>key. With this in place, you can use a getter method to trigger translation<br/>of your values.<br/>For any statics containing natural language, never use the static directly -<br/>always wrap it in a getter.</p>
        <ul/>
        <h2 id="synopsis">Synopsis</h2>
        <div class="synopsis">interface i18nEntityProvider
            {<br/><ul class="none"><li>// methods</li><li>public array <a title="i18nEntityProvider" href="../interfaces/i18nEntityProvider/provideI18nEntities.xhtml">provideI18nEntities</a>()
                    </li></ul>

            }<br/></div>
        <h2 id="methods">Methods</h2>
        <div class="styled">
          <h4>public</h4>
          <ul>
            <li id="provideI18nEntities"><a title="i18nEntityProvider" href="../interfaces/i18nEntityProvider/provideI18nEntities.xhtml">provideI18nEntities()</a>
                — Example usage: &lt;code&gt; class MyTestClass implements i18nEntityProvider { function provideI18nEntities() { 	$entities = array(); 	foreach($this-&gt;stat('my_static_array) as $key =&gt; $value) { 		$entities["MyTestClass.my_static_array_{$key}"] = array( 			$value,</li>
          </ul>
        </div>
      </section>
    </div>
    <footer>
      <span/>
    </footer>
  </body>
</html>
