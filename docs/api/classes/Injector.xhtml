<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE html SYSTEM "about:legacy-compat">
<html xmlns="http://www.w3.org/1999/xhtml" lang="en">
  <head>
    <title>phpDox - Injector</title>
    <link rel="stylesheet" type="text/css" href="../css/style.css" media="screen"/>
    <meta http-equiv="content-type" content="text/html; charset=utf-8"/>
  </head>
  <body>
    <nav class="topnav">
      <ul>
        <li>
          <div class="logo"><span>/**</span>phpDox</div>
        </li>
        <li class="separator">
          <a href="../index.xhtml">Overview</a>
        </li>
        <li class="separator">
          <a href="../namespaces.xhtml">Namespaces</a>
        </li>
        <li>
          <a href="../interfaces.xhtml">Interfaces</a>
        </li>
        <li>
          <a href="../classes.xhtml">Classes</a>
        </li>
        <li class="separator">
          <a href="../source/index.xhtml">Source</a>
        </li>
      </ul>
    </nav>
    <div id="mainstage">
      <div class="box">
        <ul class="breadcrumb">
          <li>
            <a href="../index.xhtml">Overview</a>
          </li>
          <li class="separator">
            <a href="../classes.xhtml">Classes</a>
          </li>
          <li class="separator">Injector</li>
        </ul>
      </div>
      <nav class="box">
        <ul>
          <li>
            <a href="#introduction">Introduction</a>
          </li>
          <li>
            <a href="#synopsis">Synopsis</a>
          </li>
          <li>
            <a href="#tasks">Tasks</a>
          </li>
          <li>
            <a href="#members">Members</a>
          </li>
          <li>
            <a href="#methods">Methods</a>
          </li>
          <li>
            <a href="../source/framework/control/injector/Injector.php.xhtml#line126">Source</a>
          </li>
        </ul>
      </nav>
      <section>
        <h1 id="introduction"><small>\</small>Injector</h1>
        <h4>A simple injection manager that manages creating objects and injecting dependencies between them. It borrows quite a lot from ideas taken from Spring's configuration, but is adapted to the stateless PHP way of doing things.</h4>
        <p>In its simplest form, the dependency injector can be used as a mechanism to<br/>instantiate objects. Simply call<br/><br/>Injector::inst()-&gt;get('ClassName')<br/><br/>and a new instance of ClassName will be created and returned to you.<br/><br/>Classes can have specific configuration defined for them to<br/>indicate dependencies that should be injected. This takes the form of<br/>a static variable $dependencies defined in the class (or configuration),<br/>which indicates the name of a property that should be set.<br/><br/>eg<br/><br/>&lt;code&gt;<br/>class MyController extends Controller {<br/><br/>public $permissions;<br/>public $defaultText;<br/><br/>static $dependencies = array(<br/>'defaultText' =&gt; 'Override in configuration',<br/>'permissions' =&gt; '%$PermissionService',<br/>);<br/>}<br/>&lt;/code&gt;<br/><br/>will result in an object of type MyController having the defaultText property<br/>set to 'Override in configuration', and an object identified<br/>as PermissionService set into the property called 'permissions'. The %$<br/>syntax tells the injector to look the provided name up as an item to be created<br/>by the Injector itself.<br/><br/>A key concept of the injector is whether to manage the object as<br/><br/>* A pseudo-singleton, in that only one item will be created for a particular<br/>identifier (but the same class could be used for multiple identifiers)<br/>* A prototype, where the same configuration is used, but a new object is<br/>created each time<br/>* unmanaged, in which case a new object is created and injected, but no<br/>information about its state is managed.<br/><br/>Additional configuration of items managed by the injector can be done by<br/>providing configuration for the types, either by manually loading in an<br/>array describing the configuration, or by specifying the configuration<br/>for a type via SilverStripe's configuration mechanism.<br/><br/>Specify a configuration array of the format<br/><br/>array(<br/>array(<br/>'id' =&gt; 'BeanId', // the name to be used if diff from the filename<br/>'priority' =&gt; 1, // priority. If another bean is defined with the same ID,<br/>// but has a lower priority, it is NOT overridden<br/>'class' =&gt; 'ClassName', // the name of the PHP class<br/>'src' =&gt; '/path/to/file' // the location of the class<br/>'type' =&gt; 'singleton|prototype' // if you want prototype object generation, set it as the<br/>// type<br/>// By default, singleton is assumed<br/><br/>'factory' =&gt; 'FactoryService' // A factory service to use to create instances.<br/>'construct' =&gt; array( // properties to set at construction<br/>'scalar',<br/>'%$BeanId',<br/>)<br/>'properties' =&gt; array(<br/>'name' =&gt; 'value' // scalar value<br/>'name' =&gt; '%$BeanId', // a reference to another bean<br/>'name' =&gt; array(<br/>'scalar',<br/>'%$BeanId'<br/>)<br/>)<br/>)<br/>// alternatively<br/>'MyBean' =&gt; array(<br/>'class' =&gt; 'ClassName',<br/>)<br/>// or simply<br/>'OtherBean' =&gt; 'SomeClass',<br/>)<br/><br/>In addition to specifying the bindings directly in the configuration,<br/>you can simply create a publicly accessible property on the target<br/>class which will automatically be injected if the autoScanProperties<br/>option is set to true. This means a class defined as<br/><br/>&lt;code&gt;<br/>class MyController extends Controller {<br/><br/>private $permissionService;<br/><br/>public setPermissionService($p) {<br/>$this-&gt;permissionService = $p;<br/>}<br/>}<br/>&lt;/code&gt;<br/><br/>will have setPermissionService called if<br/><br/>* Injector::inst()-&gt;setAutoScanProperties(true) is called and<br/>* A service named 'PermissionService' has been configured</p>
        <ul>
          <li>Author: marcus@silverstripe.com.au</li>
          <li>License: BSD License http://silverstripe.org/bsd-license/</li>
        </ul>
        <h2 id="synopsis">Synopsis</h2>
        <div class="synopsis">class Injector
            {<br/><ul class="none"><li>// members</li><li>private array <a href="#members">$serviceCache</a>;
                    </li><li>private array <a href="#members">$injectMap</a>;
                    </li><li>private array <a href="#members">$specs</a>;
                    </li><li>private <a href="#members">$autoProperties</a>;
                    </li><li>private <span title="Injector">Injector</span> <a href="#members">$instance</a>;
                    </li><li>private boolean <a href="#members">$autoScanProperties</a>;
                    </li><li>protected <span title="SilverStripe\Framework\Injector\Factory">Factory</span> <a href="#members">$objectCreator</a>;
                    </li><li>protected <span title="ServiceConfigurationLocator">ServiceConfigurationLocator</span> <a href="#members">$configLocator</a>;
                    </li><li>protected <span title="Injector">Injector</span> <a href="#members">$nestedFrom</a>;
                    </li></ul><ul class="none"><li>// methods</li><li>public void <a title="Injector" href="../classes/Injector/__construct.xhtml">__construct</a>()
                    </li><li>public static Injector <a title="Injector" href="../classes/Injector/inst.xhtml">inst</a>()
                    </li><li>public static Injector <a title="Injector" href="../classes/Injector/set_inst.xhtml">set_inst</a>()
                    </li><li>public static Injector <a title="Injector" href="../classes/Injector/nest.xhtml">nest</a>()
                    </li><li>public static Injector <a title="Injector" href="../classes/Injector/unnest.xhtml">unnest</a>()
                    </li><li>public void <a title="Injector" href="../classes/Injector/setAutoScanProperties.xhtml">setAutoScanProperties</a>()
                    </li><li>public void <a title="Injector" href="../classes/Injector/setObjectCreator.xhtml">setObjectCreator</a>()
                    </li><li>public Factory <a title="Injector" href="../classes/Injector/getObjectCreator.xhtml">getObjectCreator</a>()
                    </li><li>public void <a title="Injector" href="../classes/Injector/setConfigLocator.xhtml">setConfigLocator</a>()
                    </li><li>public ServiceConfigurationLocator <a title="Injector" href="../classes/Injector/getConfigLocator.xhtml">getConfigLocator</a>()
                    </li><li>public void <a title="Injector" href="../classes/Injector/setInjectMapping.xhtml">setInjectMapping</a>()
                    </li><li>public void <a title="Injector" href="../classes/Injector/addAutoProperty.xhtml">addAutoProperty</a>()
                    </li><li>public void <a title="Injector" href="../classes/Injector/load.xhtml">load</a>()
                    </li><li>public void <a title="Injector" href="../classes/Injector/updateSpec.xhtml">updateSpec</a>()
                    </li><li>protected void <a title="Injector" href="../classes/Injector/updateSpecConstructor.xhtml">updateSpecConstructor</a>()
                    </li><li>public void <a title="Injector" href="../classes/Injector/convertServiceProperty.xhtml">convertServiceProperty</a>()
                    </li><li>protected void <a title="Injector" href="../classes/Injector/instantiate.xhtml">instantiate</a>()
                    </li><li>public void <a title="Injector" href="../classes/Injector/inject.xhtml">inject</a>()
                    </li><li>protected void <a title="Injector" href="../classes/Injector/setObjectProperty.xhtml">setObjectProperty</a>()
                    </li><li>public string <a title="Injector" href="../classes/Injector/hasService.xhtml">hasService</a>()
                    </li><li>public void <a title="Injector" href="../classes/Injector/registerService.xhtml">registerService</a>()
                    </li><li>public void <a title="Injector" href="../classes/Injector/registerNamedService.xhtml">registerNamedService</a>()
                    </li><li>public void <a title="Injector" href="../classes/Injector/unregisterNamedObject.xhtml">unregisterNamedObject</a>()
                    </li><li>public void <a title="Injector" href="../classes/Injector/unregisterAllObjects.xhtml">unregisterAllObjects</a>()
                    </li><li>public void <a title="Injector" href="../classes/Injector/get.xhtml">get</a>()
                    </li><li>public mixed <a title="Injector" href="../classes/Injector/__get.xhtml">__get</a>()
                    </li><li>public void <a title="Injector" href="../classes/Injector/create.xhtml">create</a>()
                    </li><li>public mixed <a title="Injector" href="../classes/Injector/createWithArgs.xhtml">createWithArgs</a>()
                    </li></ul>

            }<br/></div>
        <h2 id="tasks">Tasks</h2>
        <table class="styled">
          <thead>
            <tr>
              <th style="width:3em;">Line</th>
              <th>Task</th>
            </tr>
          </thead>
          <tr>
            <td class="nummeric">588+</td>
            <td>Track all the existing objects that have had a service bound</td>
          </tr>
        </table>
        <h2 id="members">Members</h2>
        <div class="styled members">
          <h4>private</h4>
          <ul class="members">
            <li id="autoProperties">
              <strong>$autoProperties</strong>
              <br/>
              <span class="indent">A map of all the properties that should be automagically set on all objects instantiated by the injector</span>
            </li>
            <li id="autoScanProperties"><strong>$autoScanProperties</strong>
                —
                boolean<br/><span class="indent">Indicates whether or not to automatically scan properties in injected objects to auto inject stuff, similar to the way grails does things.</span></li>
            <li id="injectMap"><strong>$injectMap</strong>
                —
                array<br/><span class="indent">Cache of items that need to be mapped for each service that gets injected</span></li>
            <li id="instance"><strong>$instance</strong>
                —
                <a href="#">Injector</a><br/><span class="indent">A singleton if you want to use it that way</span></li>
            <li id="serviceCache"><strong>$serviceCache</strong>
                —
                array<br/><span class="indent">Local store of all services</span></li>
            <li id="specs"><strong>$specs</strong>
                —
                array<br/><span class="indent">A store of all the service configurations that have been defined.</span></li>
          </ul>
          <h4>protected</h4>
          <ul class="members">
            <li id="configLocator"><strong>$configLocator</strong>
                —
                <a href="#">ServiceConfigurationLocator</a><br/><span class="indent">Locator for determining Config properties for services</span></li>
            <li id="nestedFrom"><strong>$nestedFrom</strong>
                —
                <a href="#">Injector</a><br/><span class="indent">The injector instance this one was copied from when Injector::nest() was called.</span></li>
            <li id="objectCreator"><strong>$objectCreator</strong>
                —
                <a href="#">SilverStripe\Framework\Injector\Factory</a><br/><span class="indent">The default factory used to create new instances.</span></li>
          </ul>
        </div>
        <h2 id="methods">Methods</h2>
        <div class="styled">
          <h4>protected</h4>
          <ul>
            <li id="instantiate"><a title="Injector" href="../classes/Injector/instantiate.xhtml">instantiate()</a>
                — Instantiate a managed object</li>
            <li id="setObjectProperty"><a title="Injector" href="../classes/Injector/setObjectProperty.xhtml">setObjectProperty()</a>
                — Helper to set a property's value</li>
            <li id="updateSpecConstructor"><a title="Injector" href="../classes/Injector/updateSpecConstructor.xhtml">updateSpecConstructor()</a>
                — Update a class specification to convert constructor configuration information if needed</li>
          </ul>
          <h4>public</h4>
          <ul>
            <li id="__construct"><a title="Injector" href="../classes/Injector/__construct.xhtml">__construct()</a>
                — Create a new injector.</li>
            <li id="__get"><a title="Injector" href="../classes/Injector/__get.xhtml">__get()</a>
                — Magic method to return an item directly</li>
            <li id="addAutoProperty"><a title="Injector" href="../classes/Injector/addAutoProperty.xhtml">addAutoProperty()</a>
                — Add an object that should be automatically set on managed objects</li>
            <li id="convertServiceProperty"><a title="Injector" href="../classes/Injector/convertServiceProperty.xhtml">convertServiceProperty()</a>
                — Recursively convert a value into its proper representation with service references resolved to actual objects</li>
            <li id="create"><a title="Injector" href="../classes/Injector/create.xhtml">create()</a>
                — Similar to get() but always returns a new object of the given type</li>
            <li id="createWithArgs"><a title="Injector" href="../classes/Injector/createWithArgs.xhtml">createWithArgs()</a>
                — Creates an object with the supplied argument array</li>
            <li id="get"><a title="Injector" href="../classes/Injector/get.xhtml">get()</a>
                — Get a named managed object</li>
            <li id="getConfigLocator"><a title="Injector" href="../classes/Injector/getConfigLocator.xhtml">getConfigLocator()</a>
                — Retrieve the configuration locator</li>
            <li id="getObjectCreator">
              <a title="Injector" href="../classes/Injector/getObjectCreator.xhtml">getObjectCreator()</a>
            </li>
            <li id="hasService"><a title="Injector" href="../classes/Injector/hasService.xhtml">hasService()</a>
                — Does the given service exist, and if so, what's the stored name for it?</li>
            <li id="inject"><a title="Injector" href="../classes/Injector/inject.xhtml">inject()</a>
                — Inject $object with available objects from the service cache</li>
            <li id="inst"><a title="Injector" href="../classes/Injector/inst.xhtml">inst()</a>
                — If a user wants to use the injector as a static reference</li>
            <li id="load"><a title="Injector" href="../classes/Injector/load.xhtml">load()</a>
                — Load services using the passed in configuration for those services</li>
            <li id="nest"><a title="Injector" href="../classes/Injector/nest.xhtml">nest()</a>
                — Make the newly active {@link Injector} be a copy of the current active {@link Injector} instance.</li>
            <li id="registerNamedService"><a title="Injector" href="../classes/Injector/registerNamedService.xhtml">registerNamedService()</a>
                — Register a service with an explicit name</li>
            <li id="registerService"><a title="Injector" href="../classes/Injector/registerService.xhtml">registerService()</a>
                — Register a service object with an optional name to register it as the service for</li>
            <li id="setAutoScanProperties"><a title="Injector" href="../classes/Injector/setAutoScanProperties.xhtml">setAutoScanProperties()</a>
                — Indicate whether we auto scan injected objects for properties to set.</li>
            <li id="setConfigLocator"><a title="Injector" href="../classes/Injector/setConfigLocator.xhtml">setConfigLocator()</a>
                — Set the configuration locator</li>
            <li id="setInjectMapping"><a title="Injector" href="../classes/Injector/setInjectMapping.xhtml">setInjectMapping()</a>
                — Add in a specific mapping that should be catered for on a type.</li>
            <li id="setObjectCreator"><a title="Injector" href="../classes/Injector/setObjectCreator.xhtml">setObjectCreator()</a>
                — Sets the default factory to use for creating new objects.</li>
            <li id="set_inst"><a title="Injector" href="../classes/Injector/set_inst.xhtml">set_inst()</a>
                — Sets the default global injector instance.</li>
            <li id="unnest"><a title="Injector" href="../classes/Injector/unnest.xhtml">unnest()</a>
                — Change the active Injector back to the Injector instance the current active Injector object was copied from.</li>
            <li id="unregisterAllObjects"><a title="Injector" href="../classes/Injector/unregisterAllObjects.xhtml">unregisterAllObjects()</a>
                — Clear out all objects that are managed by the injetor.</li>
            <li id="unregisterNamedObject"><a title="Injector" href="../classes/Injector/unregisterNamedObject.xhtml">unregisterNamedObject()</a>
                — Removes a named object from the cached list of objects managed by the inject</li>
            <li id="updateSpec"><a title="Injector" href="../classes/Injector/updateSpec.xhtml">updateSpec()</a>
                — Update the configuration of an already defined service</li>
          </ul>
        </div>
      </section>
    </div>
    <footer>
      <span/>
    </footer>
  </body>
</html>
