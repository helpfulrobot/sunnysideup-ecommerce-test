<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE html SYSTEM "about:legacy-compat">
<html xmlns="http://www.w3.org/1999/xhtml" lang="en">
  <head>
    <title>phpDox - Security</title>
    <link rel="stylesheet" type="text/css" href="../css/style.css" media="screen"/>
    <meta http-equiv="content-type" content="text/html; charset=utf-8"/>
  </head>
  <body>
    <nav class="topnav">
      <ul>
        <li>
          <div class="logo"><span>/**</span>phpDox</div>
        </li>
        <li class="separator">
          <a href="../index.xhtml">Overview</a>
        </li>
        <li class="separator">
          <a href="../namespaces.xhtml">Namespaces</a>
        </li>
        <li>
          <a href="../interfaces.xhtml">Interfaces</a>
        </li>
        <li>
          <a href="../classes.xhtml">Classes</a>
        </li>
        <li class="separator">
          <a href="../source/index.xhtml">Source</a>
        </li>
      </ul>
    </nav>
    <div id="mainstage">
      <div class="box">
        <ul class="breadcrumb">
          <li>
            <a href="../index.xhtml">Overview</a>
          </li>
          <li class="separator">
            <a href="../classes.xhtml">Classes</a>
          </li>
          <li class="separator">Security</li>
        </ul>
      </div>
      <nav class="box">
        <ul>
          <li>
            <a href="#introduction">Introduction</a>
          </li>
          <li>
            <a href="#synopsis">Synopsis</a>
          </li>
          <li>
            <a href="#hierarchy">Hierarchy</a>
          </li>
          <li>
            <a href="#tasks">Tasks</a>
          </li>
          <li>
            <a href="#members">Members</a>
          </li>
          <li>
            <a href="#methods">Methods</a>
          </li>
          <li>
            <a href="../source/framework/security/Security.php.xhtml#line7">Source</a>
          </li>
        </ul>
      </nav>
      <section>
        <h1 id="introduction"><small>\</small>Security</h1>
        <h4>Implements a basic security model</h4>
        <p/>
        <ul/>
        <h2 id="synopsis">Synopsis</h2>
        <div class="synopsis">class Security
                extends <a title="Controller" href="../classes/Controller.xhtml">Controller</a>
            {<br/><ul class="none"><li>// members</li><li>private array <a href="#members">$allowed_actions</a>;
                    </li><li>protected string <a href="#members">$default_username</a>;
                    </li><li>protected string <a href="#members">$default_password</a>;
                    </li><li>protected <span title="bool">bool</span> <a href="#members">$strict_path_checking</a>;
                    </li><li>private string <a href="#members">$password_encryption_algorithm</a>;
                    </li><li>private <span title="bool">bool</span> <a href="#members">$autologin_enabled</a>;
                    </li><li>private <span title="bool">bool</span> <a href="#members">$remember_username</a>;
                    </li><li>protected string <a href="#members">$word_list</a>;
                    </li><li>private string <a href="#members">$template</a>;
                    </li><li>private string <a href="#members">$template_main</a>;
                    </li><li>private <span title="array|string">array|string</span> <a href="#members">$default_message_set</a>;
                    </li><li>private <span title="String">String</span> <a href="#members">$token</a>;
                    </li><li>private boolean <a href="#members">$login_recording</a>;
                    </li><li>public boolean <a href="#members">$force_database_is_ready</a>;
                    </li><li>public <span title="bool">bool</span> <a href="#members">$database_is_ready</a>;
                    </li><li>private string <a href="#members">$default_login_dest</a>;
                    </li><li>protected <a href="#members">$ignore_disallowed_actions</a>;
                    </li><li>private string <a href="#members">$login_url</a>;
                    </li></ul><ul class="none"><li>// Inherited members from <span title="Controller">Controller</span></li><li>protected array <a href="#members">$urlParams</a>;
                        </li><li>protected array <a href="#members">$requestParams</a>;
                        </li><li>protected string <a href="#members">$action</a>;
                        </li><li>protected <a href="#members">$session</a>;
                        </li><li>protected array <a href="#members">$controller_stack</a>;
                        </li><li>protected <a href="#members">$basicAuthEnabled</a>;
                        </li><li>protected <span title="SS_HTTPResponse">SS_HTTPResponse</span> <a href="#members">$response</a>;
                        </li><li>protected <a href="#members">$baseInitCalled</a>;
                        </li></ul><ul class="none"><li>// Inherited members from <span title="RequestHandler">RequestHandler</span></li><li>protected <span title="SS_HTTPRequest">SS_HTTPRequest</span> <a href="#members">$request</a>;
                        </li><li>protected <a href="#members">$model</a>;
                        </li><li>protected boolean <a href="#members">$brokenOnConstruct</a>;
                        </li></ul><ul class="none"><li>// Inherited members from <span title="ViewableData">ViewableData</span></li><li>protected <span title="ViewableData">ViewableData</span> <a href="#members">$failover</a>;
                        </li><li>protected <span title="ViewableData">ViewableData</span> <a href="#members">$customisedObject</a>;
                        </li></ul><ul class="none"><li>// Inherited members from <span title="Object">Object</span></li><li>public string <a href="#members">$class</a>;
                        </li><li>protected array <a href="#members">$extension_instances</a>;
                        </li><li>protected <span title="array[callable]">array[callable]</span> <a href="#members">$beforeExtendCallbacks</a>;
                        </li><li>protected <span title="array[callable]">array[callable]</span> <a href="#members">$afterExtendCallbacks</a>;
                        </li></ul><ul class="none"><li>// methods</li><li>public static void <a title="Security" href="../classes/Security/get_word_list.xhtml">get_word_list</a>()
                    </li><li>public static void <a title="Security" href="../classes/Security/set_word_list.xhtml">set_word_list</a>()
                    </li><li>public static void <a title="Security" href="../classes/Security/set_default_message_set.xhtml">set_default_message_set</a>()
                    </li><li>public static void <a title="Security" href="../classes/Security/permissionFailure.xhtml">permissionFailure</a>()
                    </li><li>public void <a title="Security" href="../classes/Security/init.xhtml">init</a>()
                    </li><li>public void <a title="Security" href="../classes/Security/index.xhtml">index</a>()
                    </li><li>protected string <a title="Security" href="../classes/Security/getAuthenticator.xhtml">getAuthenticator</a>()
                    </li><li>public Form <a title="Security" href="../classes/Security/LoginForm.xhtml">LoginForm</a>()
                    </li><li>public array <a title="Security" href="../classes/Security/GetLoginForms.xhtml">GetLoginForms</a>()
                    </li><li>public string <a title="Security" href="../classes/Security/Link.xhtml">Link</a>()
                    </li><li>public void <a title="Security" href="../classes/Security/ping.xhtml">ping</a>()
                    </li><li>public void <a title="Security" href="../classes/Security/logout.xhtml">logout</a>()
                    </li><li>protected SS_HTTPResponse <a title="Security" href="../classes/Security/preLogin.xhtml">preLogin</a>()
                    </li><li>protected Controller <a title="Security" href="../classes/Security/getResponseController.xhtml">getResponseController</a>()
                    </li><li>protected array <a title="Security" href="../classes/Security/getTemplatesFor.xhtml">getTemplatesFor</a>()
                    </li><li>protected string <a title="Security" href="../classes/Security/generateLoginFormSet.xhtml">generateLoginFormSet</a>()
                    </li><li>protected string <a title="Security" href="../classes/Security/getLoginMessage.xhtml">getLoginMessage</a>()
                    </li><li>public string <a title="Security" href="../classes/Security/login.xhtml">login</a>()
                    </li><li>public void <a title="Security" href="../classes/Security/basicauthlogin.xhtml">basicauthlogin</a>()
                    </li><li>public string <a title="Security" href="../classes/Security/lostpassword.xhtml">lostpassword</a>()
                    </li><li>public Form <a title="Security" href="../classes/Security/LostPasswordForm.xhtml">LostPasswordForm</a>()
                    </li><li>public string <a title="Security" href="../classes/Security/passwordsent.xhtml">passwordsent</a>()
                    </li><li>public static void <a title="Security" href="../classes/Security/getPasswordResetLink.xhtml">getPasswordResetLink</a>()
                    </li><li>public string <a title="Security" href="../classes/Security/changepassword.xhtml">changepassword</a>()
                    </li><li>public Form <a title="Security" href="../classes/Security/ChangePasswordForm.xhtml">ChangePasswordForm</a>()
                    </li><li>public static Member <a title="Security" href="../classes/Security/findAnAdministrator.xhtml">findAnAdministrator</a>()
                    </li><li>public static void <a title="Security" href="../classes/Security/clear_default_admin.xhtml">clear_default_admin</a>()
                    </li><li>public static void <a title="Security" href="../classes/Security/setDefaultAdmin.xhtml">setDefaultAdmin</a>()
                    </li><li>public static bool <a title="Security" href="../classes/Security/check_default_admin.xhtml">check_default_admin</a>()
                    </li><li>public static void <a title="Security" href="../classes/Security/has_default_admin.xhtml">has_default_admin</a>()
                    </li><li>public static string <a title="Security" href="../classes/Security/default_admin_username.xhtml">default_admin_username</a>()
                    </li><li>public static string <a title="Security" href="../classes/Security/default_admin_password.xhtml">default_admin_password</a>()
                    </li><li>public static void <a title="Security" href="../classes/Security/setStrictPathChecking.xhtml">setStrictPathChecking</a>()
                    </li><li>public static boolean <a title="Security" href="../classes/Security/getStrictPathChecking.xhtml">getStrictPathChecking</a>()
                    </li><li>public static bool <a title="Security" href="../classes/Security/set_password_encryption_algorithm.xhtml">set_password_encryption_algorithm</a>()
                    </li><li>public static String <a title="Security" href="../classes/Security/get_password_encryption_algorithm.xhtml">get_password_encryption_algorithm</a>()
                    </li><li>public static mixed <a title="Security" href="../classes/Security/encrypt_password.xhtml">encrypt_password</a>()
                    </li><li>public static bool <a title="Security" href="../classes/Security/database_is_ready.xhtml">database_is_ready</a>()
                    </li><li>public static void <a title="Security" href="../classes/Security/set_login_recording.xhtml">set_login_recording</a>()
                    </li><li>public static boolean <a title="Security" href="../classes/Security/login_recording.xhtml">login_recording</a>()
                    </li><li>public static void <a title="Security" href="../classes/Security/set_default_login_dest.xhtml">set_default_login_dest</a>()
                    </li><li>public static void <a title="Security" href="../classes/Security/default_login_dest.xhtml">default_login_dest</a>()
                    </li><li>public static void <a title="Security" href="../classes/Security/set_ignore_disallowed_actions.xhtml">set_ignore_disallowed_actions</a>()
                    </li><li>public static void <a title="Security" href="../classes/Security/ignore_disallowed_actions.xhtml">ignore_disallowed_actions</a>()
                    </li><li>public static void <a title="Security" href="../classes/Security/set_login_url.xhtml">set_login_url</a>()
                    </li><li>public static void <a title="Security" href="../classes/Security/login_url.xhtml">login_url</a>()
                    </li></ul><ul class="none"><li>// Inherited methods from <span title="Controller">Controller</span></li><li>public void <a title="Controller" href="../classes/Controller/init.xhtml">init</a>()
                        </li><li>public void <a title="Controller" href="../classes/Controller/Link.xhtml">Link</a>()
                        </li><li>public SS_HTTPResponse <a title="Controller" href="../classes/Controller/handleRequest.xhtml">handleRequest</a>()
                        </li><li>protected void <a title="Controller" href="../classes/Controller/handleAction.xhtml">handleAction</a>()
                        </li><li>public void <a title="Controller" href="../classes/Controller/setURLParams.xhtml">setURLParams</a>()
                        </li><li>public array <a title="Controller" href="../classes/Controller/getURLParams.xhtml">getURLParams</a>()
                        </li><li>public void <a title="Controller" href="../classes/Controller/getResponse.xhtml">getResponse</a>()
                        </li><li>public void <a title="Controller" href="../classes/Controller/getFormOwner.xhtml">getFormOwner</a>()
                        </li><li>public void <a title="Controller" href="../classes/Controller/defaultAction.xhtml">defaultAction</a>()
                        </li><li>public void <a title="Controller" href="../classes/Controller/getAction.xhtml">getAction</a>()
                        </li><li>public SSViewer <a title="Controller" href="../classes/Controller/getViewer.xhtml">getViewer</a>()
                        </li><li>public void <a title="Controller" href="../classes/Controller/hasAction.xhtml">hasAction</a>()
                        </li><li>public String <a title="Controller" href="../classes/Controller/removeAction.xhtml">removeAction</a>()
                        </li><li>protected void <a title="Controller" href="../classes/Controller/definingClassForAction.xhtml">definingClassForAction</a>()
                        </li><li>public bool <a title="Controller" href="../classes/Controller/hasActionTemplate.xhtml">hasActionTemplate</a>()
                        </li><li>public string <a title="Controller" href="../classes/Controller/render.xhtml">render</a>()
                        </li><li>public void <a title="Controller" href="../classes/Controller/disableBasicAuth.xhtml">disableBasicAuth</a>()
                        </li><li>public static void <a title="Controller" href="../classes/Controller/curr.xhtml">curr</a>()
                        </li><li>public static boolean <a title="Controller" href="../classes/Controller/has_curr.xhtml">has_curr</a>()
                        </li><li>public boolean <a title="Controller" href="../classes/Controller/can.xhtml">can</a>()
                        </li><li>public void <a title="Controller" href="../classes/Controller/pushCurrent.xhtml">pushCurrent</a>()
                        </li><li>public void <a title="Controller" href="../classes/Controller/popCurrent.xhtml">popCurrent</a>()
                        </li><li>public SS_HTTPResponse <a title="Controller" href="../classes/Controller/redirect.xhtml">redirect</a>()
                        </li><li>public void <a title="Controller" href="../classes/Controller/redirectBack.xhtml">redirectBack</a>()
                        </li><li>public string <a title="Controller" href="../classes/Controller/redirectedTo.xhtml">redirectedTo</a>()
                        </li><li>public Session <a title="Controller" href="../classes/Controller/getSession.xhtml">getSession</a>()
                        </li><li>public void <a title="Controller" href="../classes/Controller/setSession.xhtml">setSession</a>()
                        </li><li>public static String <a title="Controller" href="../classes/Controller/join_links.xhtml">join_links</a>()
                        </li><li>public static void <a title="Controller" href="../classes/Controller/get_template_global_variables.xhtml">get_template_global_variables</a>()
                        </li></ul><ul class="none"><li>// Inherited methods from <span title="RequestHandler">RequestHandler</span></li><li>public void <a title="RequestHandler" href="../classes/RequestHandler/__construct.xhtml">__construct</a>()
                        </li><li>public void <a title="RequestHandler" href="../classes/RequestHandler/setDataModel.xhtml">setDataModel</a>()
                        </li><li>public SS_HTTPResponse|RequestHandler|string|array <a title="RequestHandler" href="../classes/RequestHandler/handleRequest.xhtml">handleRequest</a>()
                        </li><li>protected void <a title="RequestHandler" href="../classes/RequestHandler/findAction.xhtml">findAction</a>()
                        </li><li>protected SS_HTTPResponse <a title="RequestHandler" href="../classes/RequestHandler/handleAction.xhtml">handleAction</a>()
                        </li><li>public array|null <a title="RequestHandler" href="../classes/RequestHandler/allowedActions.xhtml">allowedActions</a>()
                        </li><li>public bool <a title="RequestHandler" href="../classes/RequestHandler/hasAction.xhtml">hasAction</a>()
                        </li><li>protected void <a title="RequestHandler" href="../classes/RequestHandler/definingClassForAction.xhtml">definingClassForAction</a>()
                        </li><li>public void <a title="RequestHandler" href="../classes/RequestHandler/checkAccessAction.xhtml">checkAccessAction</a>()
                        </li><li>public void <a title="RequestHandler" href="../classes/RequestHandler/httpError.xhtml">httpError</a>()
                        </li><li>public SS_HTTPRequest|NullHTTPRequest <a title="RequestHandler" href="../classes/RequestHandler/getRequest.xhtml">getRequest</a>()
                        </li><li>public void <a title="RequestHandler" href="../classes/RequestHandler/setRequest.xhtml">setRequest</a>()
                        </li></ul><ul class="none"><li>// Inherited methods from <span title="ViewableData">ViewableData</span></li><li>public static string <a title="ViewableData" href="../classes/ViewableData/castingObjectCreator.xhtml">castingObjectCreator</a>()
                        </li><li>public static array <a title="ViewableData" href="../classes/ViewableData/castingObjectCreatorPair.xhtml">castingObjectCreatorPair</a>()
                        </li><li>public bool <a title="ViewableData" href="../classes/ViewableData/__isset.xhtml">__isset</a>()
                        </li><li>public mixed <a title="ViewableData" href="../classes/ViewableData/__get.xhtml">__get</a>()
                        </li><li>public void <a title="ViewableData" href="../classes/ViewableData/__set.xhtml">__set</a>()
                        </li><li>public bool <a title="ViewableData" href="../classes/ViewableData/hasField.xhtml">hasField</a>()
                        </li><li>public mixed <a title="ViewableData" href="../classes/ViewableData/getField.xhtml">getField</a>()
                        </li><li>public void <a title="ViewableData" href="../classes/ViewableData/setField.xhtml">setField</a>()
                        </li><li>public void <a title="ViewableData" href="../classes/ViewableData/defineMethods.xhtml">defineMethods</a>()
                        </li><li>public ViewableData_Customised <a title="ViewableData" href="../classes/ViewableData/customise.xhtml">customise</a>()
                        </li><li>public void <a title="ViewableData" href="../classes/ViewableData/setCustomisedObj.xhtml">setCustomisedObj</a>()
                        </li><li>public array <a title="ViewableData" href="../classes/ViewableData/castingHelperPair.xhtml">castingHelperPair</a>()
                        </li><li>public string <a title="ViewableData" href="../classes/ViewableData/castingHelper.xhtml">castingHelper</a>()
                        </li><li>public string <a title="ViewableData" href="../classes/ViewableData/castingClass.xhtml">castingClass</a>()
                        </li><li>public string <a title="ViewableData" href="../classes/ViewableData/escapeTypeForField.xhtml">escapeTypeForField</a>()
                        </li><li>public void <a title="ViewableData" href="../classes/ViewableData/buildCastingCache.xhtml">buildCastingCache</a>()
                        </li><li>public HTMLText <a title="ViewableData" href="../classes/ViewableData/renderWith.xhtml">renderWith</a>()
                        </li><li>public void <a title="ViewableData" href="../classes/ViewableData/obj.xhtml">obj</a>()
                        </li><li>public void <a title="ViewableData" href="../classes/ViewableData/cachedCall.xhtml">cachedCall</a>()
                        </li><li>public bool <a title="ViewableData" href="../classes/ViewableData/hasValue.xhtml">hasValue</a>()
                        </li><li>public void <a title="ViewableData" href="../classes/ViewableData/XML_val.xhtml">XML_val</a>()
                        </li><li>public void <a title="ViewableData" href="../classes/ViewableData/RAW_val.xhtml">RAW_val</a>()
                        </li><li>public void <a title="ViewableData" href="../classes/ViewableData/SQL_val.xhtml">SQL_val</a>()
                        </li><li>public void <a title="ViewableData" href="../classes/ViewableData/JS_val.xhtml">JS_val</a>()
                        </li><li>public void <a title="ViewableData" href="../classes/ViewableData/ATT_val.xhtml">ATT_val</a>()
                        </li><li>public array <a title="ViewableData" href="../classes/ViewableData/getXMLValues.xhtml">getXMLValues</a>()
                        </li><li>public ArrayIterator <a title="ViewableData" href="../classes/ViewableData/getIterator.xhtml">getIterator</a>()
                        </li><li>public ViewableData <a title="ViewableData" href="../classes/ViewableData/Me.xhtml">Me</a>()
                        </li><li>public string <a title="ViewableData" href="../classes/ViewableData/ThemeDir.xhtml">ThemeDir</a>()
                        </li><li>public string <a title="ViewableData" href="../classes/ViewableData/CSSClasses.xhtml">CSSClasses</a>()
                        </li><li>public ViewableData_Debugger <a title="ViewableData" href="../classes/ViewableData/Debug.xhtml">Debug</a>()
                        </li></ul><ul class="none"><li>// Inherited methods from <span title="Object">Object</span></li><li>public static Config_ForClass|null <a title="Object" href="../classes/Object/config.xhtml">config</a>()
                        </li><li>protected void <a title="Object" href="../classes/Object/beforeExtending.xhtml">beforeExtending</a>()
                        </li><li>protected void <a title="Object" href="../classes/Object/afterExtending.xhtml">afterExtending</a>()
                        </li><li>public static static <a title="Object" href="../classes/Object/create.xhtml">create</a>()
                        </li><li>public static void <a title="Object" href="../classes/Object/create_from_string.xhtml">create_from_string</a>()
                        </li><li>public static void <a title="Object" href="../classes/Object/parse_class_spec.xhtml">parse_class_spec</a>()
                        </li><li>public static static <a title="Object" href="../classes/Object/strong_create.xhtml">strong_create</a>()
                        </li><li>public static void <a title="Object" href="../classes/Object/useCustomClass.xhtml">useCustomClass</a>()
                        </li><li>public static string <a title="Object" href="../classes/Object/getCustomClass.xhtml">getCustomClass</a>()
                        </li><li>public static any <a title="Object" href="../classes/Object/static_lookup.xhtml">static_lookup</a>()
                        </li><li>public static mixed <a title="Object" href="../classes/Object/get_static.xhtml">get_static</a>()
                        </li><li>public static void <a title="Object" href="../classes/Object/set_static.xhtml">set_static</a>()
                        </li><li>public static mixed <a title="Object" href="../classes/Object/uninherited_static.xhtml">uninherited_static</a>()
                        </li><li>public static mixed <a title="Object" href="../classes/Object/combined_static.xhtml">combined_static</a>()
                        </li><li>public static void <a title="Object" href="../classes/Object/addStaticVars.xhtml">addStaticVars</a>()
                        </li><li>public static void <a title="Object" href="../classes/Object/add_static_var.xhtml">add_static_var</a>()
                        </li><li>public static void <a title="Object" href="../classes/Object/has_extension.xhtml">has_extension</a>()
                        </li><li>public static void <a title="Object" href="../classes/Object/add_extension.xhtml">add_extension</a>()
                        </li><li>public static void <a title="Object" href="../classes/Object/remove_extension.xhtml">remove_extension</a>()
                        </li><li>public static array <a title="Object" href="../classes/Object/get_extensions.xhtml">get_extensions</a>()
                        </li><li>public static void <a title="Object" href="../classes/Object/get_extra_config_sources.xhtml">get_extra_config_sources</a>()
                        </li><li>public void <a title="Object" href="../classes/Object/__construct.xhtml">__construct</a>()
                        </li><li>public mixed <a title="Object" href="../classes/Object/__call.xhtml">__call</a>()
                        </li><li>public bool <a title="Object" href="../classes/Object/hasMethod.xhtml">hasMethod</a>()
                        </li><li>public array <a title="Object" href="../classes/Object/allMethodNames.xhtml">allMethodNames</a>()
                        </li><li>protected void <a title="Object" href="../classes/Object/defineMethods.xhtml">defineMethods</a>()
                        </li><li>protected void <a title="Object" href="../classes/Object/addMethodsFrom.xhtml">addMethodsFrom</a>()
                        </li><li>protected void <a title="Object" href="../classes/Object/addWrapperMethod.xhtml">addWrapperMethod</a>()
                        </li><li>protected void <a title="Object" href="../classes/Object/createMethod.xhtml">createMethod</a>()
                        </li><li>public void <a title="Object" href="../classes/Object/stat.xhtml">stat</a>()
                        </li><li>public void <a title="Object" href="../classes/Object/set_stat.xhtml">set_stat</a>()
                        </li><li>public void <a title="Object" href="../classes/Object/uninherited.xhtml">uninherited</a>()
                        </li><li>public bool <a title="Object" href="../classes/Object/exists.xhtml">exists</a>()
                        </li><li>public string <a title="Object" href="../classes/Object/parentClass.xhtml">parentClass</a>()
                        </li><li>public bool <a title="Object" href="../classes/Object/is_a.xhtml">is_a</a>()
                        </li><li>public string <a title="Object" href="../classes/Object/__toString.xhtml">__toString</a>()
                        </li><li>public mixed <a title="Object" href="../classes/Object/invokeWithExtensions.xhtml">invokeWithExtensions</a>()
                        </li><li>public array <a title="Object" href="../classes/Object/extend.xhtml">extend</a>()
                        </li><li>public Extension <a title="Object" href="../classes/Object/getExtensionInstance.xhtml">getExtensionInstance</a>()
                        </li><li>public bool <a title="Object" href="../classes/Object/hasExtension.xhtml">hasExtension</a>()
                        </li><li>public array <a title="Object" href="../classes/Object/getExtensionInstances.xhtml">getExtensionInstances</a>()
                        </li><li>public mixed <a title="Object" href="../classes/Object/cacheToFile.xhtml">cacheToFile</a>()
                        </li><li>public void <a title="Object" href="../classes/Object/clearCache.xhtml">clearCache</a>()
                        </li><li>protected mixed <a title="Object" href="../classes/Object/loadCache.xhtml">loadCache</a>()
                        </li><li>protected void <a title="Object" href="../classes/Object/saveCache.xhtml">saveCache</a>()
                        </li><li>protected string <a title="Object" href="../classes/Object/sanitiseCachename.xhtml">sanitiseCachename</a>()
                        </li></ul>

            }<br/></div>
        <h2 id="hierarchy">Hierarchy</h2>
        <div class="styled">
          <h4>Extends</h4>
          <ul>
            <li>
              <a href="../classes/Controller.xhtml">Controller</a>
            </li>
          </ul>
          <h4>Extended by</h4>
          <ul>
            <li>
              <a href="../classes/CMSSecurity.xhtml">CMSSecurity</a>
            </li>
          </ul>
        </div>
        <h2 id="tasks">Tasks</h2>
        <table class="styled">
          <thead>
            <tr>
              <th style="width:3em;">Line</th>
              <th>Task</th>
            </tr>
          </thead>
          <tr>
            <td class="nummeric">336+</td>
            <td>Check how to activate/deactivate authentication methods</td>
          </tr>
          <tr>
            <td class="nummeric">172</td>
            <td>Fix LeftAndMain usage</td>
          </tr>
          <tr>
            <td class="nummeric">584+</td>
            <td>Add support for removing extensions with parameters</td>
          </tr>
          <tr>
            <td class="nummeric">966+</td>
            <td>integrate inheritance rules</td>
          </tr>
        </table>
        <h2 id="members">Members</h2>
        <div class="styled members">
          <h4>private</h4>
          <ul class="members">
            <li id="allowed_actions">
              <strong>$allowed_actions</strong>
            </li>
            <li id="autologin_enabled"><strong>$autologin_enabled</strong>
                —
                <a href="#">bool</a><br/><span class="indent">Showing "Remember me"-checkbox on loginform, and saving encrypted credentials to a cookie.</span></li>
            <li id="default_login_dest"><strong>$default_login_dest</strong>
                —
                string</li>
            <li id="default_message_set"><strong>$default_message_set</strong>
                —
                <a href="#">array|string</a><br/><span class="indent">Default message set used in permission failures.</span></li>
            <li id="login_recording"><strong>$login_recording</strong>
                —
                boolean<br/><span class="indent">Enable or disable recording of login attempts through the {@link LoginRecord} object.</span></li>
            <li id="login_url">
              <strong>$login_url</strong>
            </li>
            <li id="password_encryption_algorithm"><strong>$password_encryption_algorithm</strong>
                —
                string<br/><span class="indent">The password encryption algorithm to use by default.</span></li>
            <li id="remember_username"><strong>$remember_username</strong>
                —
                <a href="#">bool</a><br/><span class="indent">Determine if login username may be remembered between login sessions If set to false this will disable autocomplete and prevent username persisting in the session</span></li>
            <li id="template">
              <strong>$template</strong>
            </li>
            <li id="template_main"><strong>$template_main</strong>
                —
                string<br/><span class="indent">Template thats used to render the pages.</span></li>
            <li id="token"><strong>$token</strong>
                —
                <a href="#">String</a><br/><span class="indent">Random secure token, can be used as a crypto key internally.</span></li>
          </ul>
          <h4>protected</h4>
          <ul class="members">
            <li id="action"><strong>$action</strong>
                —
                string</li>
            <li id="afterExtendCallbacks"><strong>$afterExtendCallbacks</strong>
                —
                <a href="#">array[callable]</a><br/><span class="indent">List of callbacks to call after extensions having extend called on them, each grouped by methodName.</span></li>
            <li id="baseInitCalled">
              <strong>$baseInitCalled</strong>
            </li>
            <li id="basicAuthEnabled">
              <strong>$basicAuthEnabled</strong>
            </li>
            <li id="beforeExtendCallbacks"><strong>$beforeExtendCallbacks</strong>
                —
                <a href="#">array[callable]</a><br/><span class="indent">List of callbacks to call prior to extensions having extend called on them, each grouped by methodName.</span></li>
            <li id="brokenOnConstruct"><strong>$brokenOnConstruct</strong>
                —
                boolean<br/><span class="indent">This variable records whether RequestHandler::__construct() was called or not. Useful for checking if subclasses have called parent::__construct()</span></li>
            <li id="controller_stack">
              <strong>$controller_stack</strong>
              <br/>
              <span class="indent">Stack of current controllers.</span>
            </li>
            <li id="customisedObject"><strong>$customisedObject</strong>
                —
                <a href="#">ViewableData</a></li>
            <li id="default_password"><strong>$default_password</strong>
                —
                string<br/><span class="indent">Default password. Only used in dev-mode by {@link setDefaultAdmin()}</span></li>
            <li id="default_username"><strong>$default_username</strong>
                —
                string<br/><span class="indent">Default user name. Only used in dev-mode by {@link setDefaultAdmin()}</span></li>
            <li id="extension_instances"><strong>$extension_instances</strong>
                —
                array</li>
            <li id="failover"><strong>$failover</strong>
                —
                <a href="#">ViewableData</a><br/><span class="indent">A failover object to attempt to get data from if it is not present on this object.</span></li>
            <li id="ignore_disallowed_actions">
              <strong>$ignore_disallowed_actions</strong>
            </li>
            <li id="model">
              <strong>$model</strong>
              <br/>
              <span class="indent">The DataModel for this request</span>
            </li>
            <li id="request"><strong>$request</strong>
                —
                <a href="#">SS_HTTPRequest</a></li>
            <li id="requestParams"><strong>$requestParams</strong>
                —
                array</li>
            <li id="response"><strong>$response</strong>
                —
                <a href="#">SS_HTTPResponse</a></li>
            <li id="session">
              <strong>$session</strong>
              <br/>
              <span class="indent">The {@link Session} object for this controller</span>
            </li>
            <li id="strict_path_checking"><strong>$strict_path_checking</strong>
                —
                <a href="#">bool</a><br/><span class="indent">If set to TRUE to prevent sharing of the session across several sites in the domain.</span></li>
            <li id="urlParams"><strong>$urlParams</strong>
                —
                array</li>
            <li id="word_list"><strong>$word_list</strong>
                —
                string<br/><span class="indent">Location of word list to use for generating passwords</span></li>
          </ul>
          <h4>public</h4>
          <ul class="members">
            <li id="class"><strong>$class</strong>
                —
                string</li>
            <li id="database_is_ready"><strong>$database_is_ready</strong>
                —
                <a href="#">bool</a><br/><span class="indent">When the database has once been verified as ready, it will not do the checks again.</span></li>
            <li id="force_database_is_ready"><strong>$force_database_is_ready</strong>
                —
                boolean</li>
          </ul>
        </div>
        <h2 id="methods">Methods</h2>
        <div class="styled">
          <h4>protected</h4>
          <ul>
            <li id="generateLoginFormSet"><a title="Security" href="../classes/Security/generateLoginFormSet.xhtml">generateLoginFormSet()</a>
                — Combine the given forms into a formset with a tabbed interface</li>
            <li id="getAuthenticator"><a title="Security" href="../classes/Security/getAuthenticator.xhtml">getAuthenticator()</a>
                — Get the selected authenticator for this request</li>
            <li id="getLoginMessage"><a title="Security" href="../classes/Security/getLoginMessage.xhtml">getLoginMessage()</a>
                — Get the HTML Content for the $Content area during login</li>
            <li id="getResponseController"><a title="Security" href="../classes/Security/getResponseController.xhtml">getResponseController()</a>
                — Prepare the controller for handling the response to this request</li>
            <li id="getTemplatesFor"><a title="Security" href="../classes/Security/getTemplatesFor.xhtml">getTemplatesFor()</a>
                — Determine the list of templates to use for rendering the given action</li>
            <li id="preLogin"><a title="Security" href="../classes/Security/preLogin.xhtml">preLogin()</a>
                — Perform pre-login checking and prepare a response if available prior to login</li>
          </ul>
          <h4>public</h4>
          <ul>
            <li id="ChangePasswordForm"><a title="Security" href="../classes/Security/ChangePasswordForm.xhtml">ChangePasswordForm()</a>
                — Factory method for the lost password form</li>
            <li id="GetLoginForms"><a title="Security" href="../classes/Security/GetLoginForms.xhtml">GetLoginForms()</a>
                — Get the login forms for all available authentication methods</li>
            <li id="Link"><a title="Security" href="../classes/Security/Link.xhtml">Link()</a>
                — Get a link to a security action</li>
            <li id="LoginForm"><a title="Security" href="../classes/Security/LoginForm.xhtml">LoginForm()</a>
                — Get the login form to process according to the submitted data</li>
            <li id="LostPasswordForm"><a title="Security" href="../classes/Security/LostPasswordForm.xhtml">LostPasswordForm()</a>
                — Factory method for the lost password form</li>
            <li id="basicauthlogin">
              <a title="Security" href="../classes/Security/basicauthlogin.xhtml">basicauthlogin()</a>
            </li>
            <li id="changepassword"><a title="Security" href="../classes/Security/changepassword.xhtml">changepassword()</a>
                — Show the "change password" page.</li>
            <li id="check_default_admin"><a title="Security" href="../classes/Security/check_default_admin.xhtml">check_default_admin()</a>
                — Checks if the passed credentials are matching the default-admin.</li>
            <li id="clear_default_admin"><a title="Security" href="../classes/Security/clear_default_admin.xhtml">clear_default_admin()</a>
                — Flush the default admin credentials</li>
            <li id="database_is_ready"><a title="Security" href="../classes/Security/database_is_ready.xhtml">database_is_ready()</a>
                — Checks the database is in a state to perform security checks.</li>
            <li id="default_admin_password"><a title="Security" href="../classes/Security/default_admin_password.xhtml">default_admin_password()</a>
                — Get default admin password</li>
            <li id="default_admin_username"><a title="Security" href="../classes/Security/default_admin_username.xhtml">default_admin_username()</a>
                — Get default admin username</li>
            <li id="default_login_dest"><a title="Security" href="../classes/Security/default_login_dest.xhtml">default_login_dest()</a>
                — Get the default login dest.</li>
            <li id="encrypt_password"><a title="Security" href="../classes/Security/encrypt_password.xhtml">encrypt_password()</a>
                — Encrypt a password according to the current password encryption settings.</li>
            <li id="findAnAdministrator"><a title="Security" href="../classes/Security/findAnAdministrator.xhtml">findAnAdministrator()</a>
                — Return an existing member with administrator privileges, or create one of necessary.</li>
            <li id="getPasswordResetLink"><a title="Security" href="../classes/Security/getPasswordResetLink.xhtml">getPasswordResetLink()</a>
                — Create a link to the password reset form.</li>
            <li id="getStrictPathChecking"><a title="Security" href="../classes/Security/getStrictPathChecking.xhtml">getStrictPathChecking()</a>
                — Get strict path checking</li>
            <li id="get_password_encryption_algorithm">
              <a title="Security" href="../classes/Security/get_password_encryption_algorithm.xhtml">get_password_encryption_algorithm()</a>
            </li>
            <li id="get_word_list"><a title="Security" href="../classes/Security/get_word_list.xhtml">get_word_list()</a>
                — Get location of word list file</li>
            <li id="has_default_admin"><a title="Security" href="../classes/Security/has_default_admin.xhtml">has_default_admin()</a>
                — Check that the default admin account has been set.</li>
            <li id="ignore_disallowed_actions">
              <a title="Security" href="../classes/Security/ignore_disallowed_actions.xhtml">ignore_disallowed_actions()</a>
            </li>
            <li id="index">
              <a title="Security" href="../classes/Security/index.xhtml">index()</a>
            </li>
            <li id="init">
              <a title="Security" href="../classes/Security/init.xhtml">init()</a>
            </li>
            <li id="login"><a title="Security" href="../classes/Security/login.xhtml">login()</a>
                — Show the "login" page</li>
            <li id="login_recording">
              <a title="Security" href="../classes/Security/login_recording.xhtml">login_recording()</a>
            </li>
            <li id="login_url"><a title="Security" href="../classes/Security/login_url.xhtml">login_url()</a>
                — Get the URL of the log-in page.</li>
            <li id="logout"><a title="Security" href="../classes/Security/logout.xhtml">logout()</a>
                — Log the currently logged in user out</li>
            <li id="lostpassword"><a title="Security" href="../classes/Security/lostpassword.xhtml">lostpassword()</a>
                — Show the "lost password" page</li>
            <li id="passwordsent"><a title="Security" href="../classes/Security/passwordsent.xhtml">passwordsent()</a>
                — Show the "password sent" page, after a user has requested to reset their password.</li>
            <li id="permissionFailure"><a title="Security" href="../classes/Security/permissionFailure.xhtml">permissionFailure()</a>
                — Register that we've had a permission failure trying to view the given page</li>
            <li id="ping"><a title="Security" href="../classes/Security/ping.xhtml">ping()</a>
                — This action is available as a keep alive, so user sessions don't timeout. A common use is in the admin.</li>
            <li id="setDefaultAdmin"><a title="Security" href="../classes/Security/setDefaultAdmin.xhtml">setDefaultAdmin()</a>
                — Set a default admin in dev-mode</li>
            <li id="setStrictPathChecking"><a title="Security" href="../classes/Security/setStrictPathChecking.xhtml">setStrictPathChecking()</a>
                — Set strict path checking</li>
            <li id="set_default_login_dest">
              <a title="Security" href="../classes/Security/set_default_login_dest.xhtml">set_default_login_dest()</a>
            </li>
            <li id="set_default_message_set"><a title="Security" href="../classes/Security/set_default_message_set.xhtml">set_default_message_set()</a>
                — Set the default message set used in permissions failures.</li>
            <li id="set_ignore_disallowed_actions"><a title="Security" href="../classes/Security/set_ignore_disallowed_actions.xhtml">set_ignore_disallowed_actions()</a>
                — Set to true to ignore access to disallowed actions, rather than returning permission failure Note that this is just a flag that other code needs to check with Security::ignore_disallowed_actions()</li>
            <li id="set_login_recording"><a title="Security" href="../classes/Security/set_login_recording.xhtml">set_login_recording()</a>
                — Enable or disable recording of login attempts through the {@link LoginRecord} object.</li>
            <li id="set_login_url"><a title="Security" href="../classes/Security/set_login_url.xhtml">set_login_url()</a>
                — Set a custom log-in URL if you have built your own log-in page.</li>
            <li id="set_password_encryption_algorithm"><a title="Security" href="../classes/Security/set_password_encryption_algorithm.xhtml">set_password_encryption_algorithm()</a>
                — Set the password encryption algorithm</li>
            <li id="set_word_list"><a title="Security" href="../classes/Security/set_word_list.xhtml">set_word_list()</a>
                — Set location of word list file</li>
          </ul>
          <h3>Inherited from <a title="Controller" href="../classes/Controller.xhtml">Controller</a></h3>
          <h4>protected</h4>
          <ul>
            <li id="definingClassForAction"><a title="Controller" href="../classes/Controller/definingClassForAction.xhtml">definingClassForAction()</a>
                — Return the class that defines the given action, so that we know where to check allowed_actions.</li>
            <li id="handleAction"><a title="Controller" href="../classes/Controller/handleAction.xhtml">handleAction()</a>
                — Controller's default action handler.  It will call the method named in $Action, if that method exists.</li>
          </ul>
          <h4>public</h4>
          <ul>
            <li id="Link"><a title="Controller" href="../classes/Controller/Link.xhtml">Link()</a>
                — Returns a link to this controller.  Overload with your own Link rules if they exist.</li>
            <li id="can"><a title="Controller" href="../classes/Controller/can.xhtml">can()</a>
                — Returns true if the member is allowed to do the given action.</li>
            <li id="curr"><a title="Controller" href="../classes/Controller/curr.xhtml">curr()</a>
                — Returns the current controller</li>
            <li id="defaultAction"><a title="Controller" href="../classes/Controller/defaultAction.xhtml">defaultAction()</a>
                — This is the default action handler used if a method doesn't exist.</li>
            <li id="disableBasicAuth"><a title="Controller" href="../classes/Controller/disableBasicAuth.xhtml">disableBasicAuth()</a>
                — Call this to disable site-wide basic authentication for a specific contoller.</li>
            <li id="getAction"><a title="Controller" href="../classes/Controller/getAction.xhtml">getAction()</a>
                — Returns the action that is being executed on this controller.</li>
            <li id="getFormOwner"><a title="Controller" href="../classes/Controller/getFormOwner.xhtml">getFormOwner()</a>
                — Return the object that is going to own a form that's being processed, and handle its execution.</li>
            <li id="getResponse"><a title="Controller" href="../classes/Controller/getResponse.xhtml">getResponse()</a>
                — Returns the SS_HTTPResponse object that this controller is building up.</li>
            <li id="getSession"><a title="Controller" href="../classes/Controller/getSession.xhtml">getSession()</a>
                — Get the Session object representing this Controller's session</li>
            <li id="getURLParams">
              <a title="Controller" href="../classes/Controller/getURLParams.xhtml">getURLParams()</a>
            </li>
            <li id="getViewer"><a title="Controller" href="../classes/Controller/getViewer.xhtml">getViewer()</a>
                — Return an SSViewer object to process the data</li>
            <li id="get_template_global_variables">
              <a title="Controller" href="../classes/Controller/get_template_global_variables.xhtml">get_template_global_variables()</a>
            </li>
            <li id="handleRequest"><a title="Controller" href="../classes/Controller/handleRequest.xhtml">handleRequest()</a>
                — Executes this controller, and return an {@link SS_HTTPResponse} object with the result.</li>
            <li id="hasAction">
              <a title="Controller" href="../classes/Controller/hasAction.xhtml">hasAction()</a>
            </li>
            <li id="hasActionTemplate"><a title="Controller" href="../classes/Controller/hasActionTemplate.xhtml">hasActionTemplate()</a>
                — Returns TRUE if this controller has a template that is specifically designed to handle a specific action.</li>
            <li id="has_curr"><a title="Controller" href="../classes/Controller/has_curr.xhtml">has_curr()</a>
                — Tests whether we have a currently active controller or not</li>
            <li id="init"><a title="Controller" href="../classes/Controller/init.xhtml">init()</a>
                — Initialisation function that is run before any action on the controller is called.</li>
            <li id="join_links"><a title="Controller" href="../classes/Controller/join_links.xhtml">join_links()</a>
                — Joins two or more link segments together, putting a slash between them if necessary.</li>
            <li id="popCurrent"><a title="Controller" href="../classes/Controller/popCurrent.xhtml">popCurrent()</a>
                — Pop this controller off the top of the stack.</li>
            <li id="pushCurrent"><a title="Controller" href="../classes/Controller/pushCurrent.xhtml">pushCurrent()</a>
                — Pushes this controller onto the stack of current controllers.</li>
            <li id="redirect"><a title="Controller" href="../classes/Controller/redirect.xhtml">redirect()</a>
                — Redirect to the given URL.</li>
            <li id="redirectBack"><a title="Controller" href="../classes/Controller/redirectBack.xhtml">redirectBack()</a>
                — Redirect back. Uses either the HTTP_REFERER or a manually set request-variable called "BackURL".</li>
            <li id="redirectedTo"><a title="Controller" href="../classes/Controller/redirectedTo.xhtml">redirectedTo()</a>
                — Tests whether a redirection has been requested.</li>
            <li id="removeAction"><a title="Controller" href="../classes/Controller/removeAction.xhtml">removeAction()</a>
                — Removes all the "action" part of the current URL and returns the result.</li>
            <li id="render"><a title="Controller" href="../classes/Controller/render.xhtml">render()</a>
                — Render the current controller with the templates determined by {@link getViewer()}.</li>
            <li id="setSession"><a title="Controller" href="../classes/Controller/setSession.xhtml">setSession()</a>
                — Set the Session object.</li>
            <li id="setURLParams">
              <a title="Controller" href="../classes/Controller/setURLParams.xhtml">setURLParams()</a>
            </li>
          </ul>
          <h3>Inherited from <a title="RequestHandler" href="../classes/RequestHandler.xhtml">RequestHandler</a></h3>
          <h4>protected</h4>
          <ul>
            <li id="definingClassForAction"><a title="RequestHandler" href="../classes/RequestHandler/definingClassForAction.xhtml">definingClassForAction()</a>
                — Return the class that defines the given action, so that we know where to check allowed_actions.</li>
            <li id="findAction">
              <a title="RequestHandler" href="../classes/RequestHandler/findAction.xhtml">findAction()</a>
            </li>
            <li id="handleAction"><a title="RequestHandler" href="../classes/RequestHandler/handleAction.xhtml">handleAction()</a>
                — Given a request, and an action name, call that action name on this RequestHandler</li>
          </ul>
          <h4>public</h4>
          <ul>
            <li id="allowedActions"><a title="RequestHandler" href="../classes/RequestHandler/allowedActions.xhtml">allowedActions()</a>
                — Get a array of allowed actions defined on this controller, any parent classes or extensions.</li>
            <li id="checkAccessAction"><a title="RequestHandler" href="../classes/RequestHandler/checkAccessAction.xhtml">checkAccessAction()</a>
                — Check that the given action is allowed to be called from a URL.</li>
            <li id="getRequest"><a title="RequestHandler" href="../classes/RequestHandler/getRequest.xhtml">getRequest()</a>
                — Returns the SS_HTTPRequest object that this controller is using.</li>
            <li id="handleRequest"><a title="RequestHandler" href="../classes/RequestHandler/handleRequest.xhtml">handleRequest()</a>
                — Handles URL requests.</li>
            <li id="hasAction"><a title="RequestHandler" href="../classes/RequestHandler/hasAction.xhtml">hasAction()</a>
                — Checks if this request handler has a specific action, even if the current user cannot access it.</li>
            <li id="httpError"><a title="RequestHandler" href="../classes/RequestHandler/httpError.xhtml">httpError()</a>
                — Throws a HTTP error response encased in a {@link SS_HTTPResponse_Exception}, which is later caught in {@link RequestHandler::handleAction()} and returned to the user.</li>
            <li id="setDataModel"><a title="RequestHandler" href="../classes/RequestHandler/setDataModel.xhtml">setDataModel()</a>
                — Set the DataModel for this request.</li>
            <li id="setRequest"><a title="RequestHandler" href="../classes/RequestHandler/setRequest.xhtml">setRequest()</a>
                — Typically the request is set through {@link handleAction()} or {@link handleRequest()}, but in some based we want to set it manually.</li>
          </ul>
          <h3>Inherited from <a title="ViewableData" href="../classes/ViewableData.xhtml">ViewableData</a></h3>
          <h4>public</h4>
          <ul>
            <li id="ATT_val"><a title="ViewableData" href="../classes/ViewableData/ATT_val.xhtml">ATT_val()</a>
                — Return the value of a field escaped suitable to be inserted into an XML node attribute.</li>
            <li id="CSSClasses"><a title="ViewableData" href="../classes/ViewableData/CSSClasses.xhtml">CSSClasses()</a>
                — Get part of the current classes ancestry to be used as a CSS class.</li>
            <li id="Debug"><a title="ViewableData" href="../classes/ViewableData/Debug.xhtml">Debug()</a>
                — Return debug information about this object that can be rendered into a template</li>
            <li id="JS_val"><a title="ViewableData" href="../classes/ViewableData/JS_val.xhtml">JS_val()</a>
                — Return the value of a field in a JavaScript-save format.</li>
            <li id="Me"><a title="ViewableData" href="../classes/ViewableData/Me.xhtml">Me()</a>
                — When rendering some objects it is necessary to iterate over the object being rendered, to do this, you need access to itself.</li>
            <li id="RAW_val"><a title="ViewableData" href="../classes/ViewableData/RAW_val.xhtml">RAW_val()</a>
                — Return the value of the field without any escaping being applied.</li>
            <li id="SQL_val"><a title="ViewableData" href="../classes/ViewableData/SQL_val.xhtml">SQL_val()</a>
                — Return the value of a field in an SQL-safe format.</li>
            <li id="ThemeDir"><a title="ViewableData" href="../classes/ViewableData/ThemeDir.xhtml">ThemeDir()</a>
                — Return the directory if the current active theme (relative to the site root).</li>
            <li id="XML_val"><a title="ViewableData" href="../classes/ViewableData/XML_val.xhtml">XML_val()</a>
                — Get the string value of a field on this object that has been suitable escaped to be inserted directly into a template.</li>
            <li id="__get"><a title="ViewableData" href="../classes/ViewableData/__get.xhtml">__get()</a>
                — Get the value of a property/field on this object. This will check if a method called get{$property} exists, then check if a field is available using {@link ViewableData::getField()}, then fall back on a failover object.</li>
            <li id="__isset"><a title="ViewableData" href="../classes/ViewableData/__isset.xhtml">__isset()</a>
                — Check if a field exists on this object or its failover.</li>
            <li id="__set"><a title="ViewableData" href="../classes/ViewableData/__set.xhtml">__set()</a>
                — Set a property/field on this object. This will check for the existence of a method called set{$property}, then use the {@link ViewableData::setField()} method.</li>
            <li id="buildCastingCache"><a title="ViewableData" href="../classes/ViewableData/buildCastingCache.xhtml">buildCastingCache()</a>
                — Save the casting cache for this object (including data from any failovers) into a variable</li>
            <li id="cachedCall"><a title="ViewableData" href="../classes/ViewableData/cachedCall.xhtml">cachedCall()</a>
                — A simple wrapper around {@link ViewableData::obj()} that automatically caches the result so it can be used again without re-running the method.</li>
            <li id="castingClass"><a title="ViewableData" href="../classes/ViewableData/castingClass.xhtml">castingClass()</a>
                — Get the class name a field on this object will be casted to</li>
            <li id="castingHelper"><a title="ViewableData" href="../classes/ViewableData/castingHelper.xhtml">castingHelper()</a>
                — Return the "casting helper" (a piece of PHP code that when evaluated creates a casted value object) for a field on this object.</li>
            <li id="castingHelperPair"><a title="ViewableData" href="../classes/ViewableData/castingHelperPair.xhtml">castingHelperPair()</a>
                — Get the class a field on this object would be casted to, as well as the casting helper for casting a field to an object (see {@link ViewableData::castingHelper()} for information on casting helpers).</li>
            <li id="castingObjectCreator"><a title="ViewableData" href="../classes/ViewableData/castingObjectCreator.xhtml">castingObjectCreator()</a>
                — Converts a field spec into an object creator. For example: "Int" becomes "new Int($fieldName);" and "Varchar(50)" becomes "new Varchar($fieldName, 50);".</li>
            <li id="castingObjectCreatorPair"><a title="ViewableData" href="../classes/ViewableData/castingObjectCreatorPair.xhtml">castingObjectCreatorPair()</a>
                — Convert a field schema (e.g. "Varchar(50)") into a casting object creator array that contains both a className and castingHelper constructor code. See {@link castingObjectCreator} for more information about the constructor.</li>
            <li id="customise"><a title="ViewableData" href="../classes/ViewableData/customise.xhtml">customise()</a>
                — Merge some arbitrary data in with this object. This method returns a {@link ViewableData_Customised} instance with references to both this and the new custom data.</li>
            <li id="defineMethods"><a title="ViewableData" href="../classes/ViewableData/defineMethods.xhtml">defineMethods()</a>
                — Add methods from the {@link ViewableData::$failover} object, as well as wrapping any methods prefixed with an underscore into a {@link ViewableData::cachedCall()}.</li>
            <li id="escapeTypeForField"><a title="ViewableData" href="../classes/ViewableData/escapeTypeForField.xhtml">escapeTypeForField()</a>
                — Return the string-format type for the given field.</li>
            <li id="getField"><a title="ViewableData" href="../classes/ViewableData/getField.xhtml">getField()</a>
                — Get the value of a field on this object. This should be overloaded in child classes.</li>
            <li id="getIterator"><a title="ViewableData" href="../classes/ViewableData/getIterator.xhtml">getIterator()</a>
                — Return a single-item iterator so you can iterate over the fields of a single record.</li>
            <li id="getXMLValues"><a title="ViewableData" href="../classes/ViewableData/getXMLValues.xhtml">getXMLValues()</a>
                — Get an array of XML-escaped values by field name</li>
            <li id="hasField"><a title="ViewableData" href="../classes/ViewableData/hasField.xhtml">hasField()</a>
                — Check if a field exists on this object. This should be overloaded in child classes.</li>
            <li id="hasValue"><a title="ViewableData" href="../classes/ViewableData/hasValue.xhtml">hasValue()</a>
                — Checks if a given method/field has a valid value. If the result is an object, this will return the result of the exists method, otherwise will check if the result is not just an empty paragraph tag.</li>
            <li id="obj"><a title="ViewableData" href="../classes/ViewableData/obj.xhtml">obj()</a>
                — Get the value of a field on this object, automatically inserting the value into any available casting objects that have been specified.</li>
            <li id="renderWith"><a title="ViewableData" href="../classes/ViewableData/renderWith.xhtml">renderWith()</a>
                — Render this object into the template, and get the result as a string. You can pass one of the following as the $template parameter:  - a template name (e.g. Page)  - an array of possible template names - the first valid one will be used  - an SSViewer instance</li>
            <li id="setCustomisedObj">
              <a title="ViewableData" href="../classes/ViewableData/setCustomisedObj.xhtml">setCustomisedObj()</a>
            </li>
            <li id="setField"><a title="ViewableData" href="../classes/ViewableData/setField.xhtml">setField()</a>
                — Set a field on this object. This should be overloaded in child classes.</li>
          </ul>
          <h3>Inherited from <a title="Object" href="../classes/Object.xhtml">Object</a></h3>
          <h4>protected</h4>
          <ul>
            <li id="addMethodsFrom"><a title="Object" href="../classes/Object/addMethodsFrom.xhtml">addMethodsFrom()</a>
                — Add all the methods from an object property (which is an {@link Extension}) to this object.</li>
            <li id="addWrapperMethod"><a title="Object" href="../classes/Object/addWrapperMethod.xhtml">addWrapperMethod()</a>
                — Add a wrapper method - a method which points to another method with a different name. For example, Thumbnail(x) can be wrapped to generateThumbnail(x)</li>
            <li id="afterExtending"><a title="Object" href="../classes/Object/afterExtending.xhtml">afterExtending()</a>
                — Allows user code to hook into Object::extend after control being delegated to extensions. Each callback will be reset once called.</li>
            <li id="beforeExtending"><a title="Object" href="../classes/Object/beforeExtending.xhtml">beforeExtending()</a>
                — Allows user code to hook into Object::extend prior to control being delegated to extensions. Each callback will be reset once called.</li>
            <li id="createMethod"><a title="Object" href="../classes/Object/createMethod.xhtml">createMethod()</a>
                — Add an extra method using raw PHP code passed as a string</li>
            <li id="defineMethods"><a title="Object" href="../classes/Object/defineMethods.xhtml">defineMethods()</a>
                — Adds any methods from {@link Extension} instances attached to this object.</li>
            <li id="loadCache"><a title="Object" href="../classes/Object/loadCache.xhtml">loadCache()</a>
                — Loads a cache from the filesystem if a valid on is present and within the specified lifetime</li>
            <li id="sanitiseCachename"><a title="Object" href="../classes/Object/sanitiseCachename.xhtml">sanitiseCachename()</a>
                — Strip a file name of special characters so it is suitable for use as a cache file name</li>
            <li id="saveCache"><a title="Object" href="../classes/Object/saveCache.xhtml">saveCache()</a>
                — Save a piece of cached data to the file system</li>
          </ul>
          <h4>public</h4>
          <ul>
            <li id="__call"><a title="Object" href="../classes/Object/__call.xhtml">__call()</a>
                — Attemps to locate and call a method dynamically added to a class at runtime if a default cannot be located</li>
            <li id="__toString">
              <a title="Object" href="../classes/Object/__toString.xhtml">__toString()</a>
            </li>
            <li id="addStaticVars"><a title="Object" href="../classes/Object/addStaticVars.xhtml">addStaticVars()</a>
                — Merge in a set of additional static variables</li>
            <li id="add_extension"><a title="Object" href="../classes/Object/add_extension.xhtml">add_extension()</a>
                — Add an extension to a specific class.</li>
            <li id="add_static_var"><a title="Object" href="../classes/Object/add_static_var.xhtml">add_static_var()</a>
                — Add a static variable without replacing it completely if possible, but merging in with both existing PHP statics and existing psuedo-statics. Uses PHP's array_merge_recursive() with if the $replace argument is FALSE.</li>
            <li id="allMethodNames"><a title="Object" href="../classes/Object/allMethodNames.xhtml">allMethodNames()</a>
                — Return the names of all the methods available on this object</li>
            <li id="cacheToFile"><a title="Object" href="../classes/Object/cacheToFile.xhtml">cacheToFile()</a>
                — Cache the results of an instance method in this object to a file, or if it is already cache return the cached results</li>
            <li id="clearCache"><a title="Object" href="../classes/Object/clearCache.xhtml">clearCache()</a>
                — Clears the cache for the given cacheToFile call</li>
            <li id="combined_static"><a title="Object" href="../classes/Object/combined_static.xhtml">combined_static()</a>
                — Traverse down a class ancestry and attempt to merge all the uninherited static values for a particular static into a single variable</li>
            <li id="config"><a title="Object" href="../classes/Object/config.xhtml">config()</a>
                — Get a configuration accessor for this class. Short hand for Config::inst()-&gt;get($this-&gt;class, .....).</li>
            <li id="create"><a title="Object" href="../classes/Object/create.xhtml">create()</a>
                — An implementation of the factory method, allows you to create an instance of a class</li>
            <li id="create_from_string"><a title="Object" href="../classes/Object/create_from_string.xhtml">create_from_string()</a>
                — Create an object from a string representation.  It treats it as a PHP constructor without the 'new' keyword.  It also manages to construct the object without the use of eval().</li>
            <li id="exists"><a title="Object" href="../classes/Object/exists.xhtml">exists()</a>
                — Return true if this object "exists" i.e. has a sensible value</li>
            <li id="extend"><a title="Object" href="../classes/Object/extend.xhtml">extend()</a>
                — Run the given function on all of this object's extensions. Note that this method originally returned void, so if you wanted to return results, you're hosed</li>
            <li id="getCustomClass"><a title="Object" href="../classes/Object/getCustomClass.xhtml">getCustomClass()</a>
                — If a class has been overloaded, get the class name it has been overloaded with - otherwise return the class name</li>
            <li id="getExtensionInstance"><a title="Object" href="../classes/Object/getExtensionInstance.xhtml">getExtensionInstance()</a>
                — Get an extension instance attached to this object by name.</li>
            <li id="getExtensionInstances"><a title="Object" href="../classes/Object/getExtensionInstances.xhtml">getExtensionInstances()</a>
                — Get all extension instances for this specific object instance.</li>
            <li id="get_extensions">
              <a title="Object" href="../classes/Object/get_extensions.xhtml">get_extensions()</a>
            </li>
            <li id="get_extra_config_sources">
              <a title="Object" href="../classes/Object/get_extra_config_sources.xhtml">get_extra_config_sources()</a>
            </li>
            <li id="get_static"><a title="Object" href="../classes/Object/get_static.xhtml">get_static()</a>
                — Get a static variable, taking into account SS's inbuild static caches and pseudo-statics</li>
            <li id="hasExtension"><a title="Object" href="../classes/Object/hasExtension.xhtml">hasExtension()</a>
                — Returns TRUE if this object instance has a specific extension applied in {@link $extension_instances}. Extension instances are initialized at constructor time, meaning if you use {@link add_extension()} afterwards, the added extension will just be added to new instances of the extended class. Use the static method {@link has_extension()} to check if a class (not an instance) has a specific extension.</li>
            <li id="hasMethod"><a title="Object" href="../classes/Object/hasMethod.xhtml">hasMethod()</a>
                — Return TRUE if a method exists on this object</li>
            <li id="has_extension"><a title="Object" href="../classes/Object/has_extension.xhtml">has_extension()</a>
                — Return TRUE if a class has a specified extension.</li>
            <li id="invokeWithExtensions"><a title="Object" href="../classes/Object/invokeWithExtensions.xhtml">invokeWithExtensions()</a>
                — Calls a method if available on both this object and all applied {@link Extensions}, and then attempts to merge all results into an array</li>
            <li id="is_a"><a title="Object" href="../classes/Object/is_a.xhtml">is_a()</a>
                — Check if this class is an instance of a specific class, or has that class as one of its parents</li>
            <li id="parentClass">
              <a title="Object" href="../classes/Object/parentClass.xhtml">parentClass()</a>
            </li>
            <li id="parse_class_spec"><a title="Object" href="../classes/Object/parse_class_spec.xhtml">parse_class_spec()</a>
                — Parses a class-spec, such as "Versioned('Stage','Live')", as passed to create_from_string().</li>
            <li id="remove_extension"><a title="Object" href="../classes/Object/remove_extension.xhtml">remove_extension()</a>
                — Remove an extension from a class.</li>
            <li id="set_stat">
              <a title="Object" href="../classes/Object/set_stat.xhtml">set_stat()</a>
            </li>
            <li id="set_static"><a title="Object" href="../classes/Object/set_static.xhtml">set_static()</a>
                — Set a static variable</li>
            <li id="stat">
              <a title="Object" href="../classes/Object/stat.xhtml">stat()</a>
            </li>
            <li id="static_lookup"><a title="Object" href="../classes/Object/static_lookup.xhtml">static_lookup()</a>
                — Get the value of a static property of a class, even in that property is declared protected (but not private), without any inheritance, merging or parent lookup if it doesn't exist on the given class.</li>
            <li id="strong_create"><a title="Object" href="../classes/Object/strong_create.xhtml">strong_create()</a>
                — Similar to {@link Object::create()}, except that classes are only overloaded if you set the $strong parameter to TRUE when using {@link Object::useCustomClass()}</li>
            <li id="uninherited">
              <a title="Object" href="../classes/Object/uninherited.xhtml">uninherited()</a>
            </li>
            <li id="uninherited_static"><a title="Object" href="../classes/Object/uninherited_static.xhtml">uninherited_static()</a>
                — Get an uninherited static variable - a variable that is explicity set in this class, and not in the parent class.</li>
            <li id="useCustomClass"><a title="Object" href="../classes/Object/useCustomClass.xhtml">useCustomClass()</a>
                — This class allows you to overload classes with other classes when they are constructed using the factory method {@link Object::create()}</li>
          </ul>
        </div>
      </section>
    </div>
    <footer>
      <span/>
    </footer>
  </body>
</html>
