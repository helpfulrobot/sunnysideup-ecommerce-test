<?xml version="1.0"?>
<html xmlns="http://www.w3.org/1999/xhtml" lang="en"><head><title>phpDox - Source of i18nEntityProvider.php</title><link rel="stylesheet" type="text/css" href="../../../css/style.css" media="screen"/><link rel="stylesheet" href="../../../css/source.css"/><meta http-equiv="content-type" content="text/html; charset=utf-8"/></head><body><nav class="topnav"><ul><li><div class="logo"><span>/**</span>phpDox</div></li><li class="separator"><a href="../../../index.xhtml">Overview</a></li><li class="separator"><a href="../../../namespaces.xhtml">Namespaces</a></li><li><a href="../../../interfaces.xhtml">Interfaces</a></li><li><a href="../../../classes.xhtml">Classes</a></li><li class="separator"><a href="../../../source/index.xhtml">Source</a></li></ul></nav><div id="mainstage"><div class="box"><ul class="breadcrumb"><li><a href="../../../index.xhtml">Overview</a></li><li class="separator"><a href="../../../source/index.xhtml">Source</a></li></ul></div><h1>Source of file i18nEntityProvider.php</h1><p>
                        Size: 2,173 Bytes - Last Modified: 2015-03-14T10:40:46+13:00</p><section><h2><small>/var/www/_modules/ecommerce_test/trunk/docs/en/phpdox/../../../framework/i18n/</small>i18nEntityProvider.php</h2><table class="source"><tr><td class="no"><a class="anker" href="#line1">1</a><a class="anker" href="#line2">2</a><a class="anker" href="#line3">3</a><a class="anker" href="#line4">4</a><a class="anker" href="#line5">5</a><a class="anker" href="#line6">6</a><a class="anker" href="#line7">7</a><a class="anker" href="#line8">8</a><a class="anker" href="#line9">9</a><a class="anker" href="#line10">10</a><a class="anker" href="#line11">11</a><a class="anker" href="#line12">12</a><a class="anker" href="#line13">13</a><a class="anker" href="#line14">14</a><a class="anker" href="#line15">15</a><a class="anker" href="#line16">16</a><a class="anker" href="#line17">17</a><a class="anker" href="#line18">18</a><a class="anker" href="#line19">19</a><a class="anker" href="#line20">20</a><a class="anker" href="#line21">21</a><a class="anker" href="#line22">22</a><a class="anker" href="#line23">23</a><a class="anker" href="#line24">24</a><a class="anker" href="#line25">25</a><a class="anker" href="#line26">26</a><a class="anker" href="#line27">27</a><a class="anker" href="#line28">28</a><a class="anker" href="#line29">29</a><a class="anker" href="#line30">30</a><a class="anker" href="#line31">31</a><a class="anker" href="#line32">32</a><a class="anker" href="#line33">33</a><a class="anker" href="#line34">34</a><a class="anker" href="#line35">35</a><a class="anker" href="#line36">36</a><a class="anker" href="#line37">37</a><a class="anker" href="#line38">38</a><a class="anker" href="#line39">39</a><a class="anker" href="#line40">40</a><a class="anker" href="#line41">41</a><a class="anker" href="#line42">42</a><a class="anker" href="#line43">43</a><a class="anker" href="#line44">44</a><a class="anker" href="#line45">45</a><a class="anker" href="#line46">46</a><a class="anker" href="#line47">47</a><a class="anker" href="#line48">48</a><a class="anker" href="#line49">49</a><a class="anker" href="#line50">50</a><a class="anker" href="#line51">51</a><a class="anker" href="#line52">52</a><a class="anker" href="#line53">53</a><a class="anker" href="#line54">54</a><a class="anker" href="#line55">55</a><a class="anker" href="#line56">56</a><a class="anker" href="#line57">57</a><a class="anker" href="#line58">58</a><a class="anker" href="#line59">59</a><a class="anker" href="#line60">60</a><a class="anker" href="#line61">61</a><a class="anker" href="#line62">62</a><a class="anker" href="#line63">63</a><a class="anker" href="#line64">64</a><a class="anker" href="#line65">65</a><a class="anker" href="#line66">66</a><a class="anker" href="#line67">67</a><a class="anker" href="#line68">68</a><a class="anker" href="#line69">69</a><a class="anker" href="#line70">70</a></td><td class="line"><div id="line1"><pre><span class="token T_OPEN_TAG">&lt;?php</span></pre></div><div id="line2"><pre><span class="token T_DOC_COMMENT">/**</span></pre></div><div id="line3"><pre><span class="token T_DOC_COMMENT"> * Dynamically provide translatable entites for the {@link i18n} logic.</span></pre></div><div id="line4"><pre><span class="token T_DOC_COMMENT"> * This is particularly handy for natural language strings in static variables</span></pre></div><div id="line5"><pre><span class="token T_DOC_COMMENT"> * of a class definition, as the _t() method can only be used in a runtime/instance</span></pre></div><div id="line6"><pre><span class="token T_DOC_COMMENT"> * context. The provideI18nEntities() method enables you to define your own entities</span></pre></div><div id="line7"><pre><span class="token T_DOC_COMMENT"> * with your custom naming, mostly involving either the variable name or the array</span></pre></div><div id="line8"><pre><span class="token T_DOC_COMMENT"> * key. With this in place, you can use a getter method to trigger translation</span></pre></div><div id="line9"><pre><span class="token T_DOC_COMMENT"> * of your values.</span></pre></div><div id="line10"><pre><span class="token T_DOC_COMMENT"> * For any statics containing natural language, never use the static directly -</span></pre></div><div id="line11"><pre><span class="token T_DOC_COMMENT"> * always wrap it in a getter.</span></pre></div><div id="line12"><pre><span class="token T_DOC_COMMENT"> * </span></pre></div><div id="line13"><pre><span class="token T_DOC_COMMENT"> * @package framework</span></pre></div><div id="line14"><pre><span class="token T_DOC_COMMENT"> * @subpackage i18n</span></pre></div><div id="line15"><pre><span class="token T_DOC_COMMENT"> * @uses i18nTextCollector-&gt;collectFromEntityProviders()</span></pre></div><div id="line16"><pre><span class="token T_DOC_COMMENT"> */</span></pre></div><div id="line17"><pre><span class="token T_INTERFACE">interface</span><span class="token T_WHITESPACE"> </span><span class="token T_STRING">i18nEntityProvider</span><span class="token T_WHITESPACE"> </span><span class="token T_PHPDOX_OPEN_CURLY">{</span></pre></div><div id="line18"><pre><span class="token T_WHITESPACE">	</span></pre></div><div id="line19"><pre><span class="token T_WHITESPACE">	</span><span class="token T_DOC_COMMENT">/**</span></pre></div><div id="line20"><pre><span class="token T_DOC_COMMENT">	 * Example usage:</span></pre></div><div id="line21"><pre><span class="token T_DOC_COMMENT">	 * &lt;code&gt;</span></pre></div><div id="line22"><pre><span class="token T_DOC_COMMENT">	 * class MyTestClass implements i18nEntityProvider {</span></pre></div><div id="line23"><pre><span class="token T_DOC_COMMENT">	 * function provideI18nEntities() {</span></pre></div><div id="line24"><pre><span class="token T_DOC_COMMENT">	 * 	$entities = array();</span></pre></div><div id="line25"><pre><span class="token T_DOC_COMMENT">	 * 	foreach($this-&gt;stat('my_static_array) as $key =&gt; $value) {</span></pre></div><div id="line26"><pre><span class="token T_DOC_COMMENT">	 * 		$entities["MyTestClass.my_static_array_{$key}"] = array(</span></pre></div><div id="line27"><pre><span class="token T_DOC_COMMENT">	 * 			$value,</span></pre></div><div id="line28"><pre><span class="token T_DOC_COMMENT">	 * 			</span></pre></div><div id="line29"><pre><span class="token T_DOC_COMMENT">	 * 			'My context description'</span></pre></div><div id="line30"><pre><span class="token T_DOC_COMMENT">	 * 		);</span></pre></div><div id="line31"><pre><span class="token T_DOC_COMMENT">	 * 	}</span></pre></div><div id="line32"><pre><span class="token T_DOC_COMMENT">	 * 	return $entities;</span></pre></div><div id="line33"><pre><span class="token T_DOC_COMMENT">	 * }</span></pre></div><div id="line34"><pre><span class="token T_DOC_COMMENT">	 * </span></pre></div><div id="line35"><pre><span class="token T_DOC_COMMENT">	 * public static function my_static_array() {</span></pre></div><div id="line36"><pre><span class="token T_DOC_COMMENT">	 * 	$t_my_static_array = array();</span></pre></div><div id="line37"><pre><span class="token T_DOC_COMMENT">	 * 	foreach(self::$my_static_array as $k =&gt; $v) {</span></pre></div><div id="line38"><pre><span class="token T_DOC_COMMENT">	 * 		$t_my_static_array[$k] = _t("MyTestClass.my_static_array_{$key}", $v);</span></pre></div><div id="line39"><pre><span class="token T_DOC_COMMENT">	 * 	}</span></pre></div><div id="line40"><pre><span class="token T_DOC_COMMENT">	 * 	return $t_my_static_array;</span></pre></div><div id="line41"><pre><span class="token T_DOC_COMMENT">	 * }</span></pre></div><div id="line42"><pre><span class="token T_DOC_COMMENT">	 * }</span></pre></div><div id="line43"><pre><span class="token T_DOC_COMMENT">	 * &lt;/code&gt;</span></pre></div><div id="line44"><pre><span class="token T_DOC_COMMENT">	 * </span></pre></div><div id="line45"><pre><span class="token T_DOC_COMMENT">	 * Example usage in {@link DataObject-&gt;provideI18nEntities()}.</span></pre></div><div id="line46"><pre><span class="token T_DOC_COMMENT">	 * </span></pre></div><div id="line47"><pre><span class="token T_DOC_COMMENT">	 * You can ask textcollector to add the provided entity to a different module</span></pre></div><div id="line48"><pre><span class="token T_DOC_COMMENT">	 * than the class is contained in by adding a 4th argument to the array:</span></pre></div><div id="line49"><pre><span class="token T_DOC_COMMENT">	 * &lt;code&gt;</span></pre></div><div id="line50"><pre><span class="token T_DOC_COMMENT">	 * class MyTestClass implements i18nEntityProvider {</span></pre></div><div id="line51"><pre><span class="token T_DOC_COMMENT">	 * function provideI18nEntities() {</span></pre></div><div id="line52"><pre><span class="token T_DOC_COMMENT">	 * 	$entities = array();</span></pre></div><div id="line53"><pre><span class="token T_DOC_COMMENT">	 * 		$entities["MyOtherModuleClass.MYENTITY"] = array(</span></pre></div><div id="line54"><pre><span class="token T_DOC_COMMENT">	 * 			$value,</span></pre></div><div id="line55"><pre><span class="token T_DOC_COMMENT">	 * 			</span></pre></div><div id="line56"><pre><span class="token T_DOC_COMMENT">	 * 			'My context description',</span></pre></div><div id="line57"><pre><span class="token T_DOC_COMMENT">	 * 			'myothermodule'</span></pre></div><div id="line58"><pre><span class="token T_DOC_COMMENT">	 * 		);</span></pre></div><div id="line59"><pre><span class="token T_DOC_COMMENT">	 * 	}</span></pre></div><div id="line60"><pre><span class="token T_DOC_COMMENT">	 * 	return $entities;</span></pre></div><div id="line61"><pre><span class="token T_DOC_COMMENT">	 * }</span></pre></div><div id="line62"><pre><span class="token T_DOC_COMMENT">	 * &lt;/code&gt;</span></pre></div><div id="line63"><pre><span class="token T_DOC_COMMENT">	 * </span></pre></div><div id="line64"><pre><span class="token T_DOC_COMMENT">	 * @return array All entites in an associative array, with</span></pre></div><div id="line65"><pre><span class="token T_DOC_COMMENT">	 * entity name as the key, and a numerical array of pseudo-arguments</span></pre></div><div id="line66"><pre><span class="token T_DOC_COMMENT">	 * for _t() as a value.</span></pre></div><div id="line67"><pre><span class="token T_DOC_COMMENT">	 */</span></pre></div><div id="line68"><pre><span class="token T_WHITESPACE">	</span><span class="token T_PUBLIC">public</span><span class="token T_WHITESPACE"> </span><span class="token T_FUNCTION">function</span><span class="token T_WHITESPACE"> </span><span class="token T_STRING">provideI18nEntities</span><span class="token T_PHPDOX_OPEN_BRACKET">(</span><span class="token T_PHPDOX_CLOSE_BRACKET">)</span><span class="token T_PHPDOX_SEMICOLON">;</span></pre></div><div id="line69"><pre><span class="token T_PHPDOX_CLOSE_CURLY">}</span></pre></div><div id="line70"><br/></div></td></tr></table></section></div><footer><span/></footer></body></html>
