<?xml version="1.0"?>
<html xmlns="http://www.w3.org/1999/xhtml" lang="en"><head><title>phpDox - Source of TextParser.php</title><link rel="stylesheet" type="text/css" href="../../../css/style.css" media="screen"/><link rel="stylesheet" href="../../../css/source.css"/><meta http-equiv="content-type" content="text/html; charset=utf-8"/></head><body><nav class="topnav"><ul><li><div class="logo"><span>/**</span>phpDox</div></li><li class="separator"><a href="../../../index.xhtml">Overview</a></li><li class="separator"><a href="../../../namespaces.xhtml">Namespaces</a></li><li><a href="../../../interfaces.xhtml">Interfaces</a></li><li><a href="../../../classes.xhtml">Classes</a></li><li class="separator"><a href="../../../source/index.xhtml">Source</a></li></ul></nav><div id="mainstage"><div class="box"><ul class="breadcrumb"><li><a href="../../../index.xhtml">Overview</a></li><li class="separator"><a href="../../../source/index.xhtml">Source</a></li></ul></div><h1>Source of file TextParser.php</h1><p>
                        Size: 1,838 Bytes - Last Modified: 2015-03-14T10:40:58+13:00</p><section><h2><small>/var/www/_modules/ecommerce_test/trunk/docs/en/phpdox/../../../framework/parsers/</small>TextParser.php</h2><table class="source"><tr><td class="no"><a class="anker" href="#line1">1</a><a class="anker" href="#line2">2</a><a class="anker" href="#line3">3</a><a class="anker" href="#line4">4</a><a class="anker" href="#line5">5</a><a class="anker" href="#line6">6</a><a class="anker" href="#line7">7</a><a class="anker" href="#line8">8</a><a class="anker" href="#line9">9</a><a class="anker" href="#line10">10</a><a class="anker" href="#line11">11</a><a class="anker" href="#line12">12</a><a class="anker" href="#line13">13</a><a class="anker" href="#line14">14</a><a class="anker" href="#line15">15</a><a class="anker" href="#line16">16</a><a class="anker" href="#line17">17</a><a class="anker" href="#line18">18</a><a class="anker" href="#line19">19</a><a class="anker" href="#line20">20</a><a class="anker" href="#line21">21</a><a class="anker" href="#line22">22</a><a class="anker" href="#line23">23</a><a class="anker" href="#line24">24</a><a class="anker" href="#line25">25</a><a class="anker" href="#line26">26</a><a class="anker" href="#line27">27</a><a class="anker" href="#line28">28</a><a class="anker" href="#line29">29</a><a class="anker" href="#line30">30</a><a class="anker" href="#line31">31</a><a class="anker" href="#line32">32</a><a class="anker" href="#line33">33</a><a class="anker" href="#line34">34</a><a class="anker" href="#line35">35</a><a class="anker" href="#line36">36</a><a class="anker" href="#line37">37</a><a class="anker" href="#line38">38</a><a class="anker" href="#line39">39</a><a class="anker" href="#line40">40</a><a class="anker" href="#line41">41</a><a class="anker" href="#line42">42</a><a class="anker" href="#line43">43</a><a class="anker" href="#line44">44</a><a class="anker" href="#line45">45</a><a class="anker" href="#line46">46</a><a class="anker" href="#line47">47</a><a class="anker" href="#line48">48</a><a class="anker" href="#line49">49</a><a class="anker" href="#line50">50</a><a class="anker" href="#line51">51</a><a class="anker" href="#line52">52</a><a class="anker" href="#line53">53</a></td><td class="line"><div id="line1"><pre><span class="token T_OPEN_TAG">&lt;?php</span></pre></div><div id="line2"><pre><span class="token T_DOC_COMMENT">/**</span></pre></div><div id="line3"><pre><span class="token T_DOC_COMMENT"> * Parses text in a variety of ways.</span></pre></div><div id="line4"><pre><span class="token T_DOC_COMMENT"> * </span></pre></div><div id="line5"><pre><span class="token T_DOC_COMMENT"> * Called from a template by $Content.Parse(SubClassName), similar to $Content.XML.</span></pre></div><div id="line6"><pre><span class="token T_DOC_COMMENT"> * This will work on any Text database field (Or a sub-class, such as HTMLText, </span></pre></div><div id="line7"><pre><span class="token T_DOC_COMMENT"> * although it's usefulness in this situation is more limited).</span></pre></div><div id="line8"><pre><span class="token T_DOC_COMMENT"> * </span></pre></div><div id="line9"><pre><span class="token T_DOC_COMMENT"> * Any sub-classes of TextParser must implement a parse() method. </span></pre></div><div id="line10"><pre><span class="token T_DOC_COMMENT"> * This should take $this-&gt;content and parse it however you want. For an example</span></pre></div><div id="line11"><pre><span class="token T_DOC_COMMENT"> * of the implementation, @see BBCodeParser.</span></pre></div><div id="line12"><pre><span class="token T_DOC_COMMENT"> * </span></pre></div><div id="line13"><pre><span class="token T_DOC_COMMENT"> * Your sub-class will be initialized with a string of text, then parse() will be called.</span></pre></div><div id="line14"><pre><span class="token T_DOC_COMMENT"> * parse() should (after processing) return the formatted string.</span></pre></div><div id="line15"><pre><span class="token T_DOC_COMMENT"> * </span></pre></div><div id="line16"><pre><span class="token T_DOC_COMMENT"> * Note: $this-&gt;content will have NO conversions applied to it. </span></pre></div><div id="line17"><pre><span class="token T_DOC_COMMENT"> * You should run Covert::raw2xml or whatever is appropriate before using it. </span></pre></div><div id="line18"><pre><span class="token T_DOC_COMMENT"> * </span></pre></div><div id="line19"><pre><span class="token T_DOC_COMMENT"> * Optionally (but recommended), is creating a static usable_tags method, </span></pre></div><div id="line20"><pre><span class="token T_DOC_COMMENT"> * which will return a SS_List of all the usable tags that can be parsed.</span></pre></div><div id="line21"><pre><span class="token T_DOC_COMMENT"> * This will (mostly) be used to create helper blocks - telling users what things will be parsed.</span></pre></div><div id="line22"><pre><span class="token T_DOC_COMMENT"> * Again, @see BBCodeParser for an example of the syntax</span></pre></div><div id="line23"><pre><span class="token T_DOC_COMMENT"> * </span></pre></div><div id="line24"><pre><span class="token T_DOC_COMMENT"> * @todo Define a proper syntax for (or refactor) usable_tags that can be extended as needed.</span></pre></div><div id="line25"><pre><span class="token T_DOC_COMMENT"> * @package framework</span></pre></div><div id="line26"><pre><span class="token T_DOC_COMMENT"> * @subpackage misc</span></pre></div><div id="line27"><pre><span class="token T_DOC_COMMENT"> */</span></pre></div><div id="line28"><pre><span class="token T_ABSTRACT">abstract</span><span class="token T_WHITESPACE"> </span><span class="token T_CLASS">class</span><span class="token T_WHITESPACE"> </span><span class="token T_STRING">TextParser</span><span class="token T_WHITESPACE"> </span><span class="token T_EXTENDS">extends</span><span class="token T_WHITESPACE"> </span><span class="token T_STRING">Object</span><span class="token T_WHITESPACE"> </span><span class="token T_PHPDOX_OPEN_CURLY">{</span></pre></div><div id="line29"><pre><span class="token T_WHITESPACE">	</span><span class="token T_PROTECTED">protected</span><span class="token T_WHITESPACE"> </span><span class="token T_VARIABLE">$content</span><span class="token T_PHPDOX_SEMICOLON">;</span></pre></div><div id="line30"><pre><span class="token T_WHITESPACE">	</span></pre></div><div id="line31"><pre><span class="token T_WHITESPACE">	</span><span class="token T_DOC_COMMENT">/**</span></pre></div><div id="line32"><pre><span class="token T_DOC_COMMENT">	 * Creates a new TextParser object.</span></pre></div><div id="line33"><pre><span class="token T_DOC_COMMENT">	 * </span></pre></div><div id="line34"><pre><span class="token T_DOC_COMMENT">	 * @param string $content The contents of the dbfield</span></pre></div><div id="line35"><pre><span class="token T_DOC_COMMENT">	 */</span></pre></div><div id="line36"><pre><span class="token T_WHITESPACE">	</span><span class="token T_PUBLIC">public</span><span class="token T_WHITESPACE"> </span><span class="token T_FUNCTION">function</span><span class="token T_WHITESPACE"> </span><span class="token T_STRING">__construct</span><span class="token T_PHPDOX_OPEN_BRACKET">(</span><span class="token T_VARIABLE">$content</span><span class="token T_WHITESPACE"> </span><span class="token T_PHPDOX_EQUAL">=</span><span class="token T_WHITESPACE"> </span><span class="token T_CONSTANT_ENCAPSED_STRING">""</span><span class="token T_PHPDOX_CLOSE_BRACKET">)</span><span class="token T_WHITESPACE"> </span><span class="token T_PHPDOX_OPEN_CURLY">{</span></pre></div><div id="line37"><pre><span class="token T_WHITESPACE">		</span><span class="token T_VARIABLE">$this</span><span class="token T_OBJECT_OPERATOR">-&gt;</span><span class="token T_STRING">content</span><span class="token T_WHITESPACE"> </span><span class="token T_PHPDOX_EQUAL">=</span><span class="token T_WHITESPACE"> </span><span class="token T_VARIABLE">$content</span><span class="token T_PHPDOX_SEMICOLON">;</span></pre></div><div id="line38"><pre><span class="token T_WHITESPACE">	</span><span class="token T_PHPDOX_CLOSE_CURLY">}</span></pre></div><div id="line39"><pre><span class="token T_WHITESPACE">	</span></pre></div><div id="line40"><pre><span class="token T_WHITESPACE">	</span><span class="token T_DOC_COMMENT">/**</span></pre></div><div id="line41"><pre><span class="token T_DOC_COMMENT">	 * Convenience method, shouldn't really be used, but it's here if you want it</span></pre></div><div id="line42"><pre><span class="token T_DOC_COMMENT">	 */</span></pre></div><div id="line43"><pre><span class="token T_WHITESPACE">	</span><span class="token T_PUBLIC">public</span><span class="token T_WHITESPACE"> </span><span class="token T_FUNCTION">function</span><span class="token T_WHITESPACE"> </span><span class="token T_STRING">setContent</span><span class="token T_PHPDOX_OPEN_BRACKET">(</span><span class="token T_VARIABLE">$content</span><span class="token T_WHITESPACE"> </span><span class="token T_PHPDOX_EQUAL">=</span><span class="token T_WHITESPACE"> </span><span class="token T_CONSTANT_ENCAPSED_STRING">""</span><span class="token T_PHPDOX_CLOSE_BRACKET">)</span><span class="token T_WHITESPACE"> </span><span class="token T_PHPDOX_OPEN_CURLY">{</span></pre></div><div id="line44"><pre><span class="token T_WHITESPACE">		</span><span class="token T_VARIABLE">$this</span><span class="token T_OBJECT_OPERATOR">-&gt;</span><span class="token T_STRING">content</span><span class="token T_WHITESPACE"> </span><span class="token T_PHPDOX_EQUAL">=</span><span class="token T_WHITESPACE"> </span><span class="token T_VARIABLE">$content</span><span class="token T_PHPDOX_SEMICOLON">;</span></pre></div><div id="line45"><pre><span class="token T_WHITESPACE">	</span><span class="token T_PHPDOX_CLOSE_CURLY">}</span></pre></div><div id="line46"><pre><span class="token T_WHITESPACE">	</span></pre></div><div id="line47"><pre><span class="token T_WHITESPACE">	</span><span class="token T_DOC_COMMENT">/**</span></pre></div><div id="line48"><pre><span class="token T_DOC_COMMENT">	 * Define your own parse method to parse $this-&gt;content appropriately.</span></pre></div><div id="line49"><pre><span class="token T_DOC_COMMENT">	 * See the class doc-block for more implementation details.</span></pre></div><div id="line50"><pre><span class="token T_DOC_COMMENT">	 */</span></pre></div><div id="line51"><pre><span class="token T_WHITESPACE">	</span><span class="token T_ABSTRACT">abstract</span><span class="token T_WHITESPACE"> </span><span class="token T_PUBLIC">public</span><span class="token T_WHITESPACE"> </span><span class="token T_FUNCTION">function</span><span class="token T_WHITESPACE"> </span><span class="token T_STRING">parse</span><span class="token T_PHPDOX_OPEN_BRACKET">(</span><span class="token T_PHPDOX_CLOSE_BRACKET">)</span><span class="token T_PHPDOX_SEMICOLON">;</span></pre></div><div id="line52"><pre><span class="token T_PHPDOX_CLOSE_CURLY">}</span></pre></div><div id="line53"><br/></div></td></tr></table></section></div><footer><span/></footer></body></html>
